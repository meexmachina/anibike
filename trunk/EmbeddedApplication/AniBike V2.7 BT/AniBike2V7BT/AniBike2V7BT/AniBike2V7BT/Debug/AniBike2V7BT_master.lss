
AniBike2V7BT_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004ef4  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000220  00802000  00004ef4  00004f88  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010b  00802220  00802220  000051a8  2**0
                  ALLOC
  3 .stab         000015a8  00000000  00000000  000051a8  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  00006750  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00006c10  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f09  00000000  00000000  00006e90  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   000086a4  00000000  00000000  00007d99  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f1d  00000000  00000000  0001043d  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004e0a  00000000  00000000  0001235a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009c0  00000000  00000000  00017164  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003136  00000000  00000000  00017b24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000373c  00000000  00000000  0001ac5a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e73  00000000  00000000  0001e396  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a8  00000000  00000000  0001f209  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 9d 04 	jmp	0x93a	; 0x93a <__ctors_end>
       4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
       8:	0c 94 eb 06 	jmp	0xdd6	; 0xdd6 <__vector_2>
       c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      10:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      14:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      18:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      1c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      20:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      24:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      28:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      2c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      30:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      34:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      38:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      3c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      40:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      44:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      48:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      4c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      50:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      54:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      58:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      5c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      60:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      64:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      68:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      6c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      70:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      74:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      78:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      7c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      80:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      84:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      88:	0c 94 a5 22 	jmp	0x454a	; 0x454a <__vector_34>
      8c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      90:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      94:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      98:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      9c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      a0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      a4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      a8:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      ac:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      b0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      b4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      b8:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      bc:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      c0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      c4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      c8:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      cc:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      d0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      d4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      d8:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      dc:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      e0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      e4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      e8:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      ec:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      f0:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      f4:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      f8:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
      fc:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     100:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     104:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     108:	0c 94 f9 0c 	jmp	0x19f2	; 0x19f2 <__vector_66>
     10c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     110:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     114:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     118:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     11c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     120:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     124:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     128:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     12c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     130:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     134:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     138:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     13c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     140:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     144:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     148:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     14c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     150:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     154:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     158:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     15c:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     160:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     164:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>
     168:	0c 94 ba 04 	jmp	0x974	; 0x974 <__bad_interrupt>

0000016c <__c.3583>:
     16c:	64 61 74 61 3a 20 25 73 00                          data: %s.

00000175 <__c.3578>:
     175:	57 00                                               W.

00000177 <__c.3576>:
     177:	41 43 4b 00                                         ACK.

0000017b <__c.3831>:
     17b:	0d 0a 4e 6f 74 20 46 6f 75 6e 64 0d 0a 00           ..Not Found...

00000189 <__c.3826>:
     189:	0d 0a 0d 0a 00                                      .....

0000018e <__c.3821>:
     18e:	25 64 20 00                                         %d .

00000192 <__c.3819>:
     192:	46 72 4c 73 74 3a 00                                FrLst:.

00000199 <__c.3817>:
     199:	4e 6d 3a 25 73 0d 0a 4f 66 66 73 3a 25 64 0d 0a     Nm:%s..Offs:%d..
     1a9:	4e 4f 46 72 3a 25 64 0d 0a 00                       NOFr:%d...

000001b3 <__c.3804>:
     1b3:	0d 0a 00                                            ...

000001b6 <__c.3799>:
     1b6:	25 64 2c 20 00                                      %d, .

000001bb <__c.3797>:
     1bb:	42 6c 6f 63 6b 73 3a 0d 0a 00                       Blocks:...

000001c5 <__c.3795>:
     1c5:	25 64 09 25 73 09 09 25 64 09 09 25 64 09 09 25     %d.%s..%d..%d..%
     1d5:	64 0d 0a 00                                         d...

000001d9 <__c.3793>:
     1d9:	0d 0a 23 09 4e 61 6d 65 09 09 09 42 6c 6f 63 6b     ..#.Name...Block
     1e9:	20 4e 75 6d 09 44 75 72 61 74 69 6f 6e 09 52 65      Num.Duration.Re
     1f9:	73 65 72 76 65 64 0d 0a 00                          served...

00000202 <__c.3762>:
     202:	0d 0a 46 72 61 6d 65 20 23 25 64 20 42 6c 6f 63     ..Frame #%d Bloc
     212:	6b 20 23 25 64 3a 0d 0a 00                          k #%d:...

0000021b <__c.3719>:
     21b:	48 61 6c 6c 20 53 65 6e 73 6f 72 0d 0a 00           Hall Sensor...

00000229 <__c.4113>:
     229:	72 65 63 65 69 76 65 64 20 4e 41 43 4b 0d 0a 00     received NACK...

00000239 <__c.4110>:
     239:	73 6c 61 76 65 20 64 6f 65 73 20 6e 6f 74 20 72     slave does not r
     249:	65 73 70 6f 6e 64 0d 0a 00                          espond...

00000252 <__c.4107>:
     252:	6e 6f 20 73 6c 61 76 65 20 64 65 74 65 63 74 65     no slave detecte
     262:	64 0d 0a 00                                         d...

00000266 <__c.4103>:
     266:	74 72 61 6e 73 61 63 74 69 6f 6e 20 73 75 63 63     transaction succ
     276:	65 73 73 66 75 6c 20 28 41 43 4b 65 64 29 0d 0a     essful (ACKed)..
	...

00000287 <__c.4095>:
     287:	75 73 61 67 65 3a 20 77 72 69 74 65 5f 63 61 6c     usage: write_cal
     297:	20 72 65 64 31 36 20 67 72 65 65 6e 31 36 20 62      red16 green16 b
     2a7:	6c 75 65 31 36 0d 0a 00                             lue16...

000002af <__c.4089>:
     2af:	52 65 64 3a 20 25 75 3b 20 20 47 72 65 65 6e 3a     Red: %u;  Green:
     2bf:	20 25 75 3b 20 20 42 6c 75 65 3a 20 25 75 3b 20      %u;  Blue: %u; 
     2cf:	0d 0a 00                                            ...

000002d2 <__c.4083>:
     2d2:	42 6c 75 65 74 6f 6f 74 68 20 69 6e 66 6f 3a 0d     Bluetooth info:.
     2e2:	0a 20 20 53 74 61 74 75 73 3a 20 25 64 0d 0a 20     .  Status: %d.. 
     2f2:	20 56 65 72 73 69 6f 6e 3a 20 25 73 0d 0a 20 20      Version: %s..  
     302:	4e 61 6d 65 20 63 68 61 6e 67 65 3a 20 25 64 0d     Name change: %d.
     312:	0a 00                                               ..

00000314 <__c.4081>:
     314:	45 78 69 74 69 6e 67 20 41 54 20 6d 6f 64 65 2e     Exiting AT mode.
     324:	2e 2e 20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e     .. Configuration
     334:	20 63 6f 6d 70 6c 65 74 65 2e 0d 0a 00               complete....

00000341 <__c.4078>:
     341:	41 54 2b 4e 41 4d 45 3d 41 4e 49 42 49 4b 45 5f     AT+NAME=ANIBIKE_
     351:	32 56 37 5f 42 54 0d 0a 00                          2V7_BT...

0000035a <__c.4074>:
     35a:	41 54 2b 56 45 52 53 49 4f 4e 3f 0d 0a 00           AT+VERSION?...

00000368 <__c.4071>:
     368:	41 54 0d 0a 00                                      AT...

0000036d <__c.4069>:
     36d:	45 6e 74 65 72 72 69 6e 67 20 41 54 20 6d 6f 64     Enterring AT mod
     37d:	65 2e 2e 2e 0d 0a 00                                e......

00000384 <__c.4049>:
     384:	25 73 3a 20 25 73 0d 0a 00                          %s: %s...

0000038d <__c.4045>:
     38d:	75 73 61 67 65 3a 20 25 73 20 25 73 0d 0a 00        usage: %s %s...

0000039c <__c.4038>:
     39c:	75 73 61 67 65 3a 20 68 65 6c 70 20 5b 63 6d 64     usage: help [cmd
     3ac:	5d 0d 0a 00                                         ]...

000003b0 <__c.4032>:
     3b0:	4e 75 6d 62 65 72 20 6f 66 20 65 72 72 6f 72 73     Number of errors
     3c0:	3a 20 25 6c 75 0d 0a 00                             : %lu...

000003c8 <__c.4027>:
     3c8:	25 6c 75 20 00                                      %lu .

000003cd <__c.4025>:
     3cd:	52 65 61 64 69 6e 67 20 74 68 65 20 74 65 73 74     Reading the test
     3dd:	69 6e 67 20 73 65 71 75 65 6e 63 65 2e 2e 0d 0a     ing sequence....
	...

000003ee <__c.4020>:
     3ee:	25 6c 75 20 00                                      %lu .

000003f3 <__c.4018>:
     3f3:	57 72 69 74 69 6e 67 20 74 65 73 74 69 6e 67 20     Writing testing 
     403:	73 65 71 75 65 6e 63 65 2e 2e 2e 0d 0a 00           sequence......

00000411 <__c.4016>:
     411:	55 6e 70 72 6f 74 65 63 74 69 6e 67 20 65 6e 74     Unprotecting ent
     421:	69 72 65 20 66 6c 61 73 68 2e 2e 2e 0d 0a 00        ire flash......

00000430 <__c.4014>:
     430:	44 65 6c 65 74 69 6e 67 20 61 6c 6c 20 69 6e 66     Deleting all inf
     440:	6f 72 6d 61 74 69 6f 6e 20 66 72 6f 6d 20 66 6c     ormation from fl
     450:	61 73 68 2e 2e 2e 0d 0a 00                          ash......

00000459 <__c.3998>:
     459:	75 73 61 67 65 3a 20 74 65 73 74 5f 6c 65 64 20     usage: test_led 
     469:	5b 72 6f 77 23 5d 20 5b 52 47 42 5d 20 5b 76 61     [row#] [RGB] [va
     479:	6c 5d 0a 00                                         l]..

0000047d <__c.3992>:
     47d:	45 4d 50 54 59 0d 0a 00                             EMPTY...

00000485 <__c.3972>:
     485:	0d 0a 23 37 20 73 65 63 74 6f 72 20 70 72 6f 74     ..#7 sector prot
     495:	65 63 74 69 6f 6e 20 72 65 67 69 73 74 65 72 73     ection registers
     4a5:	20 55 4e 4c 4f 43 4b 45 44 20 28 30 29 0d 0a 0d      UNLOCKED (0)...
     4b5:	0a 00                                               ..

000004b7 <__c.3970>:
     4b7:	0d 0a 23 37 20 73 65 63 74 6f 72 20 70 72 6f 74     ..#7 sector prot
     4c7:	65 63 74 69 6f 6e 20 72 65 67 69 73 74 65 72 73     ection registers
     4d7:	20 4c 4f 43 4b 45 44 20 28 31 29 0d 0a 0d 0a 00      LOCKED (1).....

000004e7 <__c.3968>:
     4e7:	0d 0a 23 35 20 70 72 6f 67 72 61 6d 20 28 65 72     ..#5 program (er
     4f7:	61 73 65 29 20 77 61 73 20 73 75 63 63 65 73 73     ase) was success
     507:	66 75 6c 6c 20 28 30 29 00                          full (0).

00000510 <__c.3966>:
     510:	0d 0a 23 35 20 66 61 69 6c 65 64 20 70 72 6f 67     ..#5 failed prog
     520:	72 61 6d 20 28 65 72 61 73 65 29 20 28 31 29 00     ram (erase) (1).

00000530 <__c.3964>:
     530:	0d 0a 23 34 20 77 72 69 74 65 20 70 72 6f 74 65     ..#4 write prote
     540:	63 74 65 64 20 28 30 29 00                          cted (0).

00000549 <__c.3962>:
     549:	0d 0a 23 34 20 4e 4f 54 20 77 72 69 74 65 20 70     ..#4 NOT write p
     559:	72 6f 74 65 63 74 65 64 20 28 31 29 00              rotected (1).

00000566 <__c.3960>:
     566:	0d 0a 23 32 33 20 70 72 6f 74 65 63 74 69 6f 6e     ..#23 protection
     576:	20 75 6e 6b 6e 6f 77 6e 20 28 31 30 20 72 65 73      unknown (10 res
     586:	65 72 76 65 64 29 00                                erved).

0000058d <__c.3958>:
     58d:	0d 0a 23 32 33 20 4e 4f 54 20 77 72 69 74 65 20     ..#23 NOT write 
     59d:	70 72 6f 74 65 63 74 65 64 20 28 30 30 29 00        protected (00).

000005ac <__c.3952>:
     5ac:	0d 0a 23 31 20 4e 4f 54 20 77 72 69 74 65 20 65     ..#1 NOT write e
     5bc:	6e 61 62 6c 65 64 20 28 30 29 00                    nabled (0).

000005c7 <__c.3950>:
     5c7:	0d 0a 23 31 20 77 72 69 74 65 20 65 6e 61 62 6c     ..#1 write enabl
     5d7:	65 64 20 28 31 29 00                                ed (1).

000005de <__c.3948>:
     5de:	0d 0a 23 30 20 72 65 61 64 79 20 28 30 29 00        ..#0 ready (0).

000005ed <__c.3946>:
     5ed:	0d 0a 23 30 20 4e 4f 54 20 72 65 61 64 79 20 28     ..#0 NOT ready (
     5fd:	31 29 00                                            1).

00000600 <__c.3939>:
     600:	4f 4b 0d 0a 00                                      OK...

00000605 <__c.3935>:
     605:	75 73 61 67 65 3a 20 65 72 61 73 65 5f 66 6c 61     usage: erase_fla
     615:	73 68 20 5b 3c 62 6c 6f 63 6b 20 6e 75 6d 62 65     sh [<block numbe
     625:	72 3e 20 6f 72 20 3c 41 4c 4c 3e 5d 0d 0a 00        r> or <ALL>]...

00000634 <__c.3929>:
     634:	4f 4b 0d 0a 00                                      OK...

00000639 <__c.3924>:
     639:	75 73 61 67 65 3a 20 70 72 6f 74 5f 66 6c 61 73     usage: prot_flas
     649:	68 20 5b 3c 62 6c 6f 63 6b 20 6e 75 6d 62 65 72     h [<block number
     659:	3e 20 6f 72 20 3c 41 4c 4c 3e 5d 0d 0a 00           > or <ALL>]...

00000667 <__c.3918>:
     667:	4f 4b 0d 0a 00                                      OK...

0000066c <__c.3913>:
     66c:	75 73 61 67 65 3a 20 75 6e 70 72 6f 74 5f 66 6c     usage: unprot_fl
     67c:	61 73 68 20 5b 3c 62 6c 6f 63 6b 20 6e 75 6d 62     ash [<block numb
     68c:	65 72 3e 20 6f 72 20 3c 41 4c 4c 3e 5d 0d 0a 00     er> or <ALL>]...

0000069c <__c.3907>:
     69c:	0d 0a 52 65 63 69 65 76 65 64 20 30 78 25 78 0d     ..Recieved 0x%x.
     6ac:	0a 00                                               ..

000006ae <__c.3905>:
     6ae:	0d 0a 53 65 6e 64 69 6e 67 20 30 78 25 78 00        ..Sending 0x%x.

000006bd <__c.3901>:
     6bd:	75 73 61 67 65 3a 20 73 70 69 5f 74 72 61 6e 73     usage: spi_trans
     6cd:	20 5b 62 79 74 65 5d 0d 0a 00                        [byte]...

000006d7 <__c.3895>:
     6d7:	4f 4b 0d 0a 00                                      OK...

000006dc <__c.3889>:
     6dc:	4f 4b 0d 0a 00                                      OK...

000006e1 <__c.3879>:
     6e1:	75 73 61 67 65 3a 20 72 65 61 64 5f 62 6c 6f 63     usage: read_bloc
     6f1:	6b 20 5b 73 74 61 72 74 5f 62 6c 6f 63 6b 5d 0d     k [start_block].
     701:	0a 00                                               ..

00000703 <__c.3870>:
     703:	46 41 49 4c 0d 0a 00                                FAIL...

0000070a <__c.3868>:
     70a:	4f 4b 0d 0a 00                                      OK...

0000070f <__c.3857>:
     70f:	4f 4b 0d 0a 00                                      OK...

00000714 <__c.3844>:
     714:	75 73 61 67 65 3a 20 77 72 69 74 65 5f 62 6c 6f     usage: write_blo
     724:	63 6b 20 5b 73 74 61 72 74 5f 62 6c 6f 63 6b 5d     ck [start_block]
     734:	20 5b 71 75 61 6e 74 5d 20 5b 6c 65 6e 67 74 68      [quant] [length
     744:	5d 0d 0a 00                                         ]...

00000748 <__c.3838>:
     748:	77 72 69 74 69 6e 67 3a 20 25 6c 75 20 74 6f 20     writing: %lu to 
     758:	25 6c 75 3b 0d 0a 00                                %lu;...

0000075f <__c.3836>:
     75f:	75 73 61 67 65 3a 20 77 72 69 74 65 20 5b 33 32     usage: write [32
     76f:	62 69 74 20 73 74 61 72 74 5f 61 64 64 72 65 73     bit start_addres
     77f:	73 5d 20 5b 38 62 69 74 20 6c 65 6e 67 74 68 5d     s] [8bit length]
     78f:	0d 0a 00                                            ...

00000792 <__c.3827>:
     792:	41 25 6c 75 3a 20 20 20 30 78 25 78 0d 0a 00        A%lu:   0x%x...

000007a1 <__c.3825>:
     7a1:	72 65 61 64 69 6e 67 3a 20 25 6c 75 20 74 6f 20     reading: %lu to 
     7b1:	25 6c 75 3b 0d 0a 00                                %lu;...

000007b8 <__c.3820>:
     7b8:	75 73 61 67 65 3a 20 72 65 61 64 20 5b 73 74 61     usage: read [sta
     7c8:	72 74 5f 61 64 64 72 65 73 73 5d 20 5b 6c 65 6e     rt_address] [len
     7d8:	67 74 68 5d 0d 0a 00                                gth]...

000007df <__c.3814>:
     7df:	43 4f 4c 4f 52 5f 44 45 50 54 48 3a 25 30 33 64     COLOR_DEPTH:%03d
     7ef:	3b 46 49 4c 45 23 42 4c 4b 53 3a 25 30 32 64 3b     ;FILE#BLKS:%02d;
     7ff:	46 4e 5f 4c 45 4e 3a 25 30 33 64 3b 4d 41 58 5f     FN_LEN:%03d;MAX_
     80f:	46 52 41 4d 45 53 3a 25 30 33 64 3b 0a 00           FRAMES:%03d;..

0000081d <__c.3808>:
     81d:	4d 61 6e 49 44 20 3d 20 30 78 25 78 3b 20 44 65     ManID = 0x%x; De
     82d:	76 49 44 31 20 3d 20 30 78 25 78 3b 20 44 65 76     vID1 = 0x%x; Dev
     83d:	49 44 32 20 3d 20 30 78 25 78 3b 20 45 78 44 61     ID2 = 0x%x; ExDa
     84d:	74 61 20 3d 20 30 78 25 78 0d 0a 00                 ta = 0x%x...

00000859 <__c.3806>:
     859:	0d 0a 46 6c 61 73 68 49 6e 66 6f 3a 0d 0a 00        ..FlashInfo:...

00000868 <__c.3804>:
     868:	41 4e 49 42 49 4b 45 20 56 45 52 53 49 4f 4e 3a     ANIBIKE VERSION:
     878:	25 30 33 64 2e 25 64 3b 4d 45 4d 5f 53 49 5a 45     %03d.%d;MEM_SIZE
     888:	3a 25 30 35 64 20 4d 42 49 54 53 3b 43 4c 4f 43     :%05d MBITS;CLOC
     898:	4b 3a 25 30 33 64 20 4d 48 5a 3b 23 4c 45 44 53     K:%03d MHZ;#LEDS
     8a8:	3a 25 30 33 64 3b 52 47 42 3a 25 64 3b 4d 45 4d     :%03d;RGB:%d;MEM
     8b8:	42 4c 4b 3a 25 30 32 64 20 4b 42 0d 0a 00           BLK:%02d KB...

000008c6 <__c.3793>:
     8c6:	43 4d 44 3a 20 43 6f 6d 6d 61 6e 64 20 6e 6f 74     CMD: Command not
     8d6:	20 72 65 63 6f 67 6e 69 7a 65 64 2e 0d 0a 00         recognized....

000008e5 <__c.3778>:
     8e5:	4f 4b 0d 0a 00                                      OK...

000008ea <__c.3772>:
     8ea:	4f 4b 0d 0a 00                                      OK...

000008ef <__c.3766>:
     8ef:	4f 4b 0d 0a 00                                      OK...

000008f4 <__c.3760>:
     8f4:	4f 4b 0d 0a 00                                      OK...

000008f9 <__c.3754>:
     8f9:	41 4e 49 42 49 4b 45 5f 32 56 37 42 54 20 3e 3e     ANIBIKE_2V7BT >>
     909:	20 00                                                .

0000090b <__c.3752>:
     90b:	0d 0a 00                                            ...

0000090e <__c.3739>:
     90e:	47 6f 6f 64 62 79 65 2e 2e 2e 0d 0a 00              Goodbye......

0000091b <__c.3737>:
     91b:	0d 0a 00                                            ...

0000091e <__c.3733>:
     91e:	41 4e 49 42 49 4b 45 20 49 4e 43 2e 20 56 45 52     ANIBIKE INC. VER
     92e:	2e 20 32 2e 37 20 42 54 2e 0d 0a 00                 . 2.7 BT....

0000093a <__ctors_end>:
     93a:	11 24       	eor	r1, r1
     93c:	1f be       	out	0x3f, r1	; 63
     93e:	cf ef       	ldi	r28, 0xFF	; 255
     940:	df e2       	ldi	r29, 0x2F	; 47
     942:	de bf       	out	0x3e, r29	; 62
     944:	cd bf       	out	0x3d, r28	; 61

00000946 <__do_copy_data>:
     946:	12 e2       	ldi	r17, 0x22	; 34
     948:	a0 e0       	ldi	r26, 0x00	; 0
     94a:	b0 e2       	ldi	r27, 0x20	; 32
     94c:	e4 ef       	ldi	r30, 0xF4	; 244
     94e:	fe e4       	ldi	r31, 0x4E	; 78
     950:	02 c0       	rjmp	.+4      	; 0x956 <__do_copy_data+0x10>
     952:	05 90       	lpm	r0, Z+
     954:	0d 92       	st	X+, r0
     956:	a0 32       	cpi	r26, 0x20	; 32
     958:	b1 07       	cpc	r27, r17
     95a:	d9 f7       	brne	.-10     	; 0x952 <__do_copy_data+0xc>

0000095c <__do_clear_bss>:
     95c:	13 e2       	ldi	r17, 0x23	; 35
     95e:	a0 e2       	ldi	r26, 0x20	; 32
     960:	b2 e2       	ldi	r27, 0x22	; 34
     962:	01 c0       	rjmp	.+2      	; 0x966 <.do_clear_bss_start>

00000964 <.do_clear_bss_loop>:
     964:	1d 92       	st	X+, r1

00000966 <.do_clear_bss_start>:
     966:	ab 32       	cpi	r26, 0x2B	; 43
     968:	b1 07       	cpc	r27, r17
     96a:	e1 f7       	brne	.-8      	; 0x964 <.do_clear_bss_loop>
     96c:	0e 94 a9 0e 	call	0x1d52	; 0x1d52 <main>
     970:	0c 94 78 27 	jmp	0x4ef0	; 0x4ef0 <_exit>

00000974 <__bad_interrupt>:
     974:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000978 <SetClockFreq>:
 * Setting the internal RC clock frequency (2-32 MHz)
 * with 2 MHz resolution.
 *****************************************************************/
void SetClockFreq ( uint8_t freq )
{
	if ( freq == 32 )
     978:	80 32       	cpi	r24, 0x20	; 32
     97a:	79 f1       	breq	.+94     	; 0x9da <SetClockFreq+0x62>
		CLKSYS_Disable( OSC_PLLEN_bm );
		CLKSYS_Disable( OSC_RC2MEN_bm );
	}
	else
	{
		CLKSYS_Enable( OSC_RC2MEN_bm );
     97c:	90 91 50 00 	lds	r25, 0x0050
     980:	91 60       	ori	r25, 0x01	; 1
     982:	90 93 50 00 	sts	0x0050, r25
		do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );	// Internal 2MHz RC Oscillator Ready bit mask polling	
     986:	90 91 51 00 	lds	r25, 0x0051
     98a:	90 ff       	sbrs	r25, 0
     98c:	fc cf       	rjmp	.-8      	; 0x986 <SetClockFreq+0xe>
		
		if ( freq == 2 )
     98e:	82 30       	cpi	r24, 0x02	; 2
     990:	d1 f0       	breq	.+52     	; 0x9c6 <SetClockFreq+0x4e>
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
			CLKSYS_Disable( OSC_PLLEN_bm );
		}
		else
		{
			CLKSYS_PLL_Config( OSC_PLLSRC_RC2M_gc, (freq>>2) );
     992:	68 2f       	mov	r22, r24
     994:	66 95       	lsr	r22
     996:	66 95       	lsr	r22
     998:	80 e0       	ldi	r24, 0x00	; 0
     99a:	0e 94 d6 1a 	call	0x35ac	; 0x35ac <CLKSYS_PLL_Config>
			CLKSYS_Enable( OSC_PLLEN_bm );
     99e:	80 91 50 00 	lds	r24, 0x0050
     9a2:	80 61       	ori	r24, 0x10	; 16
     9a4:	80 93 50 00 	sts	0x0050, r24
			CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     9a8:	80 e0       	ldi	r24, 0x00	; 0
     9aa:	60 e0       	ldi	r22, 0x00	; 0
     9ac:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <CLKSYS_Prescalers_Config>
			do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     9b0:	80 91 51 00 	lds	r24, 0x0051
     9b4:	84 ff       	sbrs	r24, 4
     9b6:	fc cf       	rjmp	.-8      	; 0x9b0 <SetClockFreq+0x38>
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     9b8:	84 e0       	ldi	r24, 0x04	; 4
     9ba:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <CLKSYS_Main_ClockSource_Select>
			
		}
		
		CLKSYS_Disable( OSC_RC32MEN_bm );					// Disable 32MHz RC Oscillator Enable bit mask		
     9be:	82 e0       	ldi	r24, 0x02	; 2
     9c0:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <CLKSYS_Disable>
     9c4:	08 95       	ret
		CLKSYS_Enable( OSC_RC2MEN_bm );
		do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );	// Internal 2MHz RC Oscillator Ready bit mask polling	
		
		if ( freq == 2 )
		{
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
     9c6:	80 e0       	ldi	r24, 0x00	; 0
     9c8:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <CLKSYS_Main_ClockSource_Select>
			CLKSYS_Disable( OSC_PLLEN_bm );
     9cc:	80 e1       	ldi	r24, 0x10	; 16
     9ce:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <CLKSYS_Disable>
			do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
			
		}
		
		CLKSYS_Disable( OSC_RC32MEN_bm );					// Disable 32MHz RC Oscillator Enable bit mask		
     9d2:	82 e0       	ldi	r24, 0x02	; 2
     9d4:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <CLKSYS_Disable>
     9d8:	08 95       	ret
	{
		/*  Enable internal 32 MHz ring oscillator and wait until it's
		 *  stable. Divide clock by two with the prescaler C and set the
		 *  32 MHz ring oscillator as the main clock source. 
		 */
		CLKSYS_Enable( OSC_RC32MEN_bm );
     9da:	80 91 50 00 	lds	r24, 0x0050
     9de:	82 60       	ori	r24, 0x02	; 2
     9e0:	80 93 50 00 	sts	0x0050, r24
		CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     9e4:	80 e0       	ldi	r24, 0x00	; 0
     9e6:	60 e0       	ldi	r22, 0x00	; 0
     9e8:	0e 94 e6 1a 	call	0x35cc	; 0x35cc <CLKSYS_Prescalers_Config>
		do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     9ec:	80 91 51 00 	lds	r24, 0x0051
     9f0:	81 ff       	sbrs	r24, 1
     9f2:	fc cf       	rjmp	.-8      	; 0x9ec <SetClockFreq+0x74>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 fe 1a 	call	0x35fc	; 0x35fc <CLKSYS_Main_ClockSource_Select>
		
		CLKSYS_Disable( OSC_PLLEN_bm );
     9fa:	80 e1       	ldi	r24, 0x10	; 16
     9fc:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <CLKSYS_Disable>
		CLKSYS_Disable( OSC_RC2MEN_bm );
     a00:	81 e0       	ldi	r24, 0x01	; 1
     a02:	0e 94 dc 1a 	call	0x35b8	; 0x35b8 <CLKSYS_Disable>
     a06:	08 95       	ret

00000a08 <anibike_dl_initialize>:
volatile uint8_t	rxBuffer[128];
volatile uint8_t	rxLength = 0;

//__________________________________________________________________________________________________
void anibike_dl_initialize		( ANIBIKE_DL_TYPE_EN enNodeType )
{
     a08:	8f 92       	push	r8
     a0a:	af 92       	push	r10
     a0c:	cf 92       	push	r12
     a0e:	ef 92       	push	r14
     a10:	0f 93       	push	r16
	
	if (enNodeType == ANIBIKE_DL_MASTER)
     a12:	88 23       	and	r24, r24
     a14:	61 f1       	breq	.+88     	; 0xa6e <anibike_dl_initialize+0x66>

	}
	else
	{
		// map PORT C to virtual port 1
		PORT_MapVirtualPort1( PORTCFG_VP1MAP_PORTC_gc );
     a16:	80 e2       	ldi	r24, 0x20	; 32
     a18:	0e 94 30 20 	call	0x4060	; 0x4060 <PORT_MapVirtualPort1>
		
		// set clk out and data in
		DATALINK_PORT.DIRCLR = DATALINK_DATA_PIN;
     a1c:	e0 e4       	ldi	r30, 0x40	; 64
     a1e:	f6 e0       	ldi	r31, 0x06	; 6
     a20:	80 e2       	ldi	r24, 0x20	; 32
     a22:	82 83       	std	Z+2, r24	; 0x02
		DATALINK_PORT.DIRSET = DATALINK_CLK_PIN;
     a24:	80 e8       	ldi	r24, 0x80	; 128
     a26:	81 83       	std	Z+1, r24	; 0x01
		
		// drive clk to high
		DATALINK_PORT.OUTSET = DATALINK_CLK_PIN;
     a28:	85 83       	std	Z+5, r24	; 0x05
		
		// Set pull-down and wired-or so that there will be no problems
		// Setup interrupt for the data pin
		PORT_ConfigurePins( &DATALINK_PORT,
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	96 e0       	ldi	r25, 0x06	; 6
     a2e:	60 e8       	ldi	r22, 0x80	; 128
     a30:	40 e0       	ldi	r20, 0x00	; 0
     a32:	20 e0       	ldi	r18, 0x00	; 0
     a34:	00 e3       	ldi	r16, 0x30	; 48
     a36:	ee 24       	eor	r14, r14
     a38:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
							
		PORT_ConfigurePins( &DATALINK_PORT,
     a3c:	80 e4       	ldi	r24, 0x40	; 64
     a3e:	96 e0       	ldi	r25, 0x06	; 6
     a40:	60 e2       	ldi	r22, 0x20	; 32
     a42:	40 e0       	ldi	r20, 0x00	; 0
     a44:	20 e0       	ldi	r18, 0x00	; 0
     a46:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
		
		PORT_ConfigureInterrupt0( &DATALINK_PORT, PORT_INT0LVL_HI_gc, DATALINK_DATA_PIN );		
     a4a:	80 e4       	ldi	r24, 0x40	; 64
     a4c:	96 e0       	ldi	r25, 0x06	; 6
     a4e:	63 e0       	ldi	r22, 0x03	; 3
     a50:	40 e2       	ldi	r20, 0x20	; 32
     a52:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
     a56:	80 91 a2 00 	lds	r24, 0x00A2
     a5a:	87 60       	ori	r24, 0x07	; 7
     a5c:	e0 ea       	ldi	r30, 0xA0	; 160
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	82 83       	std	Z+2, r24	; 0x02
	}
}
     a62:	0f 91       	pop	r16
     a64:	ef 90       	pop	r14
     a66:	cf 90       	pop	r12
     a68:	af 90       	pop	r10
     a6a:	8f 90       	pop	r8
     a6c:	08 95       	ret
{
	
	if (enNodeType == ANIBIKE_DL_MASTER)
	{				
		// Set pull-down and wired-or so that there will be no problems
		PORT_ConfigurePins( &DATALINK_PORT,
     a6e:	80 e4       	ldi	r24, 0x40	; 64
     a70:	96 e0       	ldi	r25, 0x06	; 6
     a72:	60 e8       	ldi	r22, 0x80	; 128
     a74:	40 e0       	ldi	r20, 0x00	; 0
     a76:	20 e0       	ldi	r18, 0x00	; 0
     a78:	00 e3       	ldi	r16, 0x30	; 48
     a7a:	53 e0       	ldi	r21, 0x03	; 3
     a7c:	e5 2e       	mov	r14, r21
     a7e:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_LEVEL_gc );
							
		PORT_ConfigurePins( &DATALINK_PORT,
     a82:	80 e4       	ldi	r24, 0x40	; 64
     a84:	96 e0       	ldi	r25, 0x06	; 6
     a86:	60 e2       	ldi	r22, 0x20	; 32
     a88:	40 e0       	ldi	r20, 0x00	; 0
     a8a:	20 e0       	ldi	r18, 0x00	; 0
     a8c:	37 e0       	ldi	r19, 0x07	; 7
     a8e:	e3 2e       	mov	r14, r19
     a90:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_INPUT_DISABLE_gc );
		
		/* Initialize SPI master on port DATAFLASH_PORT. */
		SPI_MasterInit(&spiMasterC,
     a94:	87 e9       	ldi	r24, 0x97	; 151
     a96:	92 e2       	ldi	r25, 0x22	; 34
     a98:	60 ec       	ldi	r22, 0xC0	; 192
     a9a:	78 e0       	ldi	r23, 0x08	; 8
     a9c:	40 e4       	ldi	r20, 0x40	; 64
     a9e:	56 e0       	ldi	r21, 0x06	; 6
     aa0:	20 e0       	ldi	r18, 0x00	; 0
     aa2:	04 e0       	ldi	r16, 0x04	; 4
     aa4:	ee 24       	eor	r14, r14
     aa6:	cc 24       	eor	r12, r12
     aa8:	aa 24       	eor	r10, r10
     aaa:	88 24       	eor	r8, r8
     aac:	0e 94 45 20 	call	0x408a	; 0x408a <SPI_MasterInit>
	               SPI_INTLVL_OFF_gc,
	               false,
	               SPI_PRESCALER_DIV4_gc,0);
				   
		// Disable the spi interface for now
		SPI_MasterEnable (&spiMasterC, 0);
     ab0:	87 e9       	ldi	r24, 0x97	; 151
     ab2:	92 e2       	ldi	r25, 0x22	; 34
     ab4:	60 e0       	ldi	r22, 0x00	; 0
     ab6:	0e 94 85 20 	call	0x410a	; 0x410a <SPI_MasterEnable>
		
		// Set directions - data out, clk in
		DATALINK_PORT.DIRSET = DATALINK_DATA_PIN;
     aba:	e0 e4       	ldi	r30, 0x40	; 64
     abc:	f6 e0       	ldi	r31, 0x06	; 6
     abe:	80 e2       	ldi	r24, 0x20	; 32
     ac0:	81 83       	std	Z+1, r24	; 0x01
		DATALINK_PORT.DIRCLR = DATALINK_CLK_PIN;
     ac2:	90 e8       	ldi	r25, 0x80	; 128
     ac4:	92 83       	std	Z+2, r25	; 0x02
		
		// drive data to high
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;		
     ac6:	85 83       	std	Z+5, r24	; 0x05
							PORT_ISC_BOTHEDGES_gc );
		
		PORT_ConfigureInterrupt0( &DATALINK_PORT, PORT_INT0LVL_HI_gc, DATALINK_DATA_PIN );		
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
	}
}
     ac8:	0f 91       	pop	r16
     aca:	ef 90       	pop	r14
     acc:	cf 90       	pop	r12
     ace:	af 90       	pop	r10
     ad0:	8f 90       	pop	r8
     ad2:	08 95       	ret

00000ad4 <anibike_dl_send_data>:


//__________________________________________________________________________________________________
uint8_t anibike_dl_send_data		( uint8_t *aData, uint8_t iLength )
{
     ad4:	ef 92       	push	r14
     ad6:	0f 93       	push	r16
     ad8:	1f 93       	push	r17
     ada:	cf 93       	push	r28
     adc:	df 93       	push	r29
     ade:	ec 01       	movw	r28, r24
     ae0:	16 2f       	mov	r17, r22
	uint8_t d;
	uint8_t timeout = ANIBIKE_DL_RX_TIMEOUT;


	// check if there is someone in the other side
	if ((DATALINK_CLK_PIN&(DATALINK_PORT.IN))==0)
     ae2:	80 91 48 06 	lds	r24, 0x0648
     ae6:	87 fd       	sbrc	r24, 7
     ae8:	07 c0       	rjmp	.+14     	; 0xaf8 <anibike_dl_send_data+0x24>
	{
		return 1;	// no-one found
     aea:	81 e0       	ldi	r24, 0x01	; 1
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
	}
	
	return 0;
}
     aec:	df 91       	pop	r29
     aee:	cf 91       	pop	r28
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ef 90       	pop	r14
     af6:	08 95       	ret
	{
		return 1;	// no-one found
	}

	// start transaction by clearing data pin
	DATALINK_PORT.OUTCLR = DATALINK_DATA_PIN;		
     af8:	80 e2       	ldi	r24, 0x20	; 32
     afa:	e0 e4       	ldi	r30, 0x40	; 64
     afc:	f6 e0       	ldi	r31, 0x06	; 6
     afe:	86 83       	std	Z+6, r24	; 0x06
     b00:	8f e7       	ldi	r24, 0x7F	; 127
     b02:	03 c0       	rjmp	.+6      	; 0xb0a <anibike_dl_send_data+0x36>
     b04:	81 50       	subi	r24, 0x01	; 1
	
	// wait for the clk to be low as well
	while (--timeout && (DATALINK_PORT.IN&DATALINK_CLK_PIN))	
     b06:	09 f4       	brne	.+2      	; 0xb0a <anibike_dl_send_data+0x36>
     b08:	65 c0       	rjmp	.+202    	; 0xbd4 <anibike_dl_send_data+0x100>
     b0a:	e0 e4       	ldi	r30, 0x40	; 64
     b0c:	f6 e0       	ldi	r31, 0x06	; 6
     b0e:	90 91 48 06 	lds	r25, 0x0648
     b12:	97 fd       	sbrc	r25, 7
     b14:	f7 cf       	rjmp	.-18     	; 0xb04 <anibike_dl_send_data+0x30>
	}
	
	// here we know that there is someone on SLAVE and it responds

	// Set both lines as totem-pole and activate SPI
	DATALINK_PORT.DIRSET = DATALINK_DATA_PIN|DATALINK_CLK_PIN;
     b16:	80 ea       	ldi	r24, 0xA0	; 160
     b18:	81 83       	std	Z+1, r24	; 0x01
	PORT_ConfigurePins( &DATALINK_PORT,
     b1a:	80 e4       	ldi	r24, 0x40	; 64
     b1c:	96 e0       	ldi	r25, 0x06	; 6
     b1e:	60 ea       	ldi	r22, 0xA0	; 160
     b20:	40 e0       	ldi	r20, 0x00	; 0
     b22:	20 e0       	ldi	r18, 0x00	; 0
     b24:	00 e0       	ldi	r16, 0x00	; 0
     b26:	77 e0       	ldi	r23, 0x07	; 7
     b28:	e7 2e       	mov	r14, r23
     b2a:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
						DATALINK_CLK_PIN|DATALINK_DATA_PIN,
						false,
						false,
						PORT_OPC_TOTEM_gc,
						PORT_ISC_INPUT_DISABLE_gc );
	SPI_MasterEnable (&spiMasterC, 1);
     b2e:	87 e9       	ldi	r24, 0x97	; 151
     b30:	92 e2       	ldi	r25, 0x22	; 34
     b32:	61 e0       	ldi	r22, 0x01	; 1
     b34:	0e 94 85 20 	call	0x410a	; 0x410a <SPI_MasterEnable>
	
	// the length is not part of the checksum
	anibike_dl_send_byte (spiMasterC, iLength); 
     b38:	87 e9       	ldi	r24, 0x97	; 151
     b3a:	92 e2       	ldi	r25, 0x22	; 34
     b3c:	61 2f       	mov	r22, r17
     b3e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     b42:	e0 91 97 22 	lds	r30, 0x2297
     b46:	f0 91 98 22 	lds	r31, 0x2298

//__________________________________________________________________________________________________
uint8_t anibike_dl_send_data		( uint8_t *aData, uint8_t iLength )
{
	uint8_t i = iLength;
	uint8_t chs = 0;
     b4a:	60 e0       	ldi	r22, 0x00	; 0
	anibike_dl_send_byte (spiMasterC, iLength); 
	
	// transfer iLength bytes
	do 
	{
		d = *aData++;
     b4c:	99 91       	ld	r25, Y+
		
		spiMasterC.module->DATA = d;
     b4e:	93 83       	std	Z+3, r25	; 0x03
		/* Wait for transmission complete. */
		while(!(spiMasterC.module->STATUS & SPI_IF_bm)) {}
     b50:	82 81       	ldd	r24, Z+2	; 0x02
     b52:	87 ff       	sbrs	r24, 7
     b54:	fd cf       	rjmp	.-6      	; 0xb50 <anibike_dl_send_data+0x7c>
			
		chs += d;
     b56:	69 0f       	add	r22, r25
	} while (--i);
     b58:	11 50       	subi	r17, 0x01	; 1
     b5a:	c1 f7       	brne	.-16     	; 0xb4c <anibike_dl_send_data+0x78>
	
	// transfer checksum
	anibike_dl_send_byte (spiMasterC, chs);
     b5c:	87 e9       	ldi	r24, 0x97	; 151
     b5e:	92 e2       	ldi	r25, 0x22	; 34
     b60:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	
	// disable spi and set both lines as usual - pulled low wired-or
	SPI_MasterEnable (&spiMasterC, 0);
     b64:	87 e9       	ldi	r24, 0x97	; 151
     b66:	92 e2       	ldi	r25, 0x22	; 34
     b68:	60 e0       	ldi	r22, 0x00	; 0
     b6a:	0e 94 85 20 	call	0x410a	; 0x410a <SPI_MasterEnable>
	PORT_ConfigurePins( &DATALINK_PORT,
     b6e:	80 e4       	ldi	r24, 0x40	; 64
     b70:	96 e0       	ldi	r25, 0x06	; 6
     b72:	60 e8       	ldi	r22, 0x80	; 128
     b74:	40 e0       	ldi	r20, 0x00	; 0
     b76:	20 e0       	ldi	r18, 0x00	; 0
     b78:	00 e3       	ldi	r16, 0x30	; 48
     b7a:	f3 e0       	ldi	r31, 0x03	; 3
     b7c:	ef 2e       	mov	r14, r31
     b7e:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
						false,
						false,
						PORT_OPC_WIREDORPULL_gc,
						PORT_ISC_LEVEL_gc );
							
	PORT_ConfigurePins( &DATALINK_PORT,
     b82:	80 e4       	ldi	r24, 0x40	; 64
     b84:	96 e0       	ldi	r25, 0x06	; 6
     b86:	60 e2       	ldi	r22, 0x20	; 32
     b88:	40 e0       	ldi	r20, 0x00	; 0
     b8a:	20 e0       	ldi	r18, 0x00	; 0
     b8c:	e7 e0       	ldi	r30, 0x07	; 7
     b8e:	ee 2e       	mov	r14, r30
     b90:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
						DATALINK_DATA_PIN,
						false,
						false,
						PORT_OPC_WIREDORPULL_gc,
						PORT_ISC_INPUT_DISABLE_gc );	
	SPI_MasterEnable (&spiMasterC, 0);
     b94:	87 e9       	ldi	r24, 0x97	; 151
     b96:	92 e2       	ldi	r25, 0x22	; 34
     b98:	60 e0       	ldi	r22, 0x00	; 0
     b9a:	0e 94 85 20 	call	0x410a	; 0x410a <SPI_MasterEnable>
	DATALINK_PORT.DIRSET = DATALINK_DATA_PIN;
     b9e:	e0 e4       	ldi	r30, 0x40	; 64
     ba0:	f6 e0       	ldi	r31, 0x06	; 6
     ba2:	80 e2       	ldi	r24, 0x20	; 32
     ba4:	81 83       	std	Z+1, r24	; 0x01
	DATALINK_PORT.DIRCLR = DATALINK_CLK_PIN;
     ba6:	90 e8       	ldi	r25, 0x80	; 128
     ba8:	92 83       	std	Z+2, r25	; 0x02
	
	// set data as low (waiting for ACK)
	DATALINK_PORT.OUTCLR = DATALINK_DATA_PIN;
     baa:	86 83       	std	Z+6, r24	; 0x06
     bac:	8f e7       	ldi	r24, 0x7F	; 127
     bae:	02 c0       	rjmp	.+4      	; 0xbb4 <anibike_dl_send_data+0xe0>
     bb0:	81 50       	subi	r24, 0x01	; 1
	
	// wait for ACK
	timeout = ANIBIKE_DL_RX_TIMEOUT;
	// wait for the clk to be high as well (ACK)
	while (--timeout && !(DATALINK_PORT.IN&DATALINK_CLK_PIN))	
     bb2:	a1 f0       	breq	.+40     	; 0xbdc <anibike_dl_send_data+0x108>
     bb4:	e0 e4       	ldi	r30, 0x40	; 64
     bb6:	f6 e0       	ldi	r31, 0x06	; 6
     bb8:	90 91 48 06 	lds	r25, 0x0648
     bbc:	97 ff       	sbrs	r25, 7
     bbe:	f8 cf       	rjmp	.-16     	; 0xbb0 <anibike_dl_send_data+0xdc>
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
		return 3;	// no ACK
	}
	
	// if there was a response
	if (DATALINK_PORT.IN&DATALINK_CLK_PIN)
     bc0:	80 91 48 06 	lds	r24, 0x0648
     bc4:	87 fd       	sbrc	r24, 7
     bc6:	02 c0       	rjmp	.+4      	; 0xbcc <anibike_dl_send_data+0xf8>
	{
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
	}
	
	return 0;
     bc8:	80 e0       	ldi	r24, 0x00	; 0
     bca:	90 cf       	rjmp	.-224    	; 0xaec <anibike_dl_send_data+0x18>
	
	// if there was a response
	if (DATALINK_PORT.IN&DATALINK_CLK_PIN)
	{
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
     bcc:	80 e2       	ldi	r24, 0x20	; 32
     bce:	85 83       	std	Z+5, r24	; 0x05
	}
	
	return 0;
     bd0:	80 e0       	ldi	r24, 0x00	; 0
     bd2:	8c cf       	rjmp	.-232    	; 0xaec <anibike_dl_send_data+0x18>
	}
	if (!timeout)
	{
		// the other side doesn't respond
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
     bd4:	80 e2       	ldi	r24, 0x20	; 32
     bd6:	85 83       	std	Z+5, r24	; 0x05
		return 2;	// no response
     bd8:	82 e0       	ldi	r24, 0x02	; 2
     bda:	88 cf       	rjmp	.-240    	; 0xaec <anibike_dl_send_data+0x18>
	}
	if (!timeout)
	{
		// the other side didn't send ACK (clock high)
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
     bdc:	80 e2       	ldi	r24, 0x20	; 32
     bde:	85 83       	std	Z+5, r24	; 0x05
		return 3;	// no ACK
     be0:	83 e0       	ldi	r24, 0x03	; 3
     be2:	84 cf       	rjmp	.-248    	; 0xaec <anibike_dl_send_data+0x18>

00000be4 <anibike_dl_receive_byte>:
}

//__________________________________________________________________________________________________
uint8_t anibike_dl_receive_byte ( void )
{
	asm volatile (
     be4:	3f 93       	push	r19
     be6:	3f b7       	in	r19, 0x3f	; 63
     be8:	3f 93       	push	r19
     bea:	88 27       	eor	r24, r24
     bec:	3f ef       	ldi	r19, 0xFF	; 255
     bee:	88 94       	clc

00000bf0 <waitclk0299>:
     bf0:	3a 95       	dec	r19
     bf2:	b7 9b       	sbis	0x16, 7	; 22
     bf4:	e9 f7       	brne	.-6      	; 0xbf0 <waitclk0299>
     bf6:	b5 99       	sbic	0x16, 5	; 22
     bf8:	08 94       	sec
     bfa:	88 1f       	adc	r24, r24
     bfc:	38 e0       	ldi	r19, 0x08	; 8

00000bfe <waitclk1299>:
     bfe:	3a 95       	dec	r19
     c00:	b7 9b       	sbis	0x16, 7	; 22
     c02:	e9 f7       	brne	.-6      	; 0xbfe <waitclk1299>
     c04:	b5 99       	sbic	0x16, 5	; 22
     c06:	08 94       	sec
     c08:	88 1f       	adc	r24, r24
     c0a:	38 e0       	ldi	r19, 0x08	; 8

00000c0c <waitclk2299>:
     c0c:	3a 95       	dec	r19
     c0e:	b7 9b       	sbis	0x16, 7	; 22
     c10:	e9 f7       	brne	.-6      	; 0xc0c <waitclk2299>
     c12:	b5 99       	sbic	0x16, 5	; 22
     c14:	08 94       	sec
     c16:	88 1f       	adc	r24, r24
     c18:	38 e0       	ldi	r19, 0x08	; 8

00000c1a <waitclk3299>:
     c1a:	3a 95       	dec	r19
     c1c:	b7 9b       	sbis	0x16, 7	; 22
     c1e:	e9 f7       	brne	.-6      	; 0xc1a <waitclk3299>
     c20:	b5 99       	sbic	0x16, 5	; 22
     c22:	08 94       	sec
     c24:	88 1f       	adc	r24, r24
     c26:	38 e0       	ldi	r19, 0x08	; 8

00000c28 <waitclk4299>:
     c28:	3a 95       	dec	r19
     c2a:	b7 9b       	sbis	0x16, 7	; 22
     c2c:	e9 f7       	brne	.-6      	; 0xc28 <waitclk4299>
     c2e:	b5 99       	sbic	0x16, 5	; 22
     c30:	08 94       	sec
     c32:	88 1f       	adc	r24, r24
     c34:	38 e0       	ldi	r19, 0x08	; 8

00000c36 <waitclk5299>:
     c36:	3a 95       	dec	r19
     c38:	b7 9b       	sbis	0x16, 7	; 22
     c3a:	e9 f7       	brne	.-6      	; 0xc36 <waitclk5299>
     c3c:	b5 99       	sbic	0x16, 5	; 22
     c3e:	08 94       	sec
     c40:	88 1f       	adc	r24, r24
     c42:	38 e0       	ldi	r19, 0x08	; 8

00000c44 <waitclk6299>:
     c44:	3a 95       	dec	r19
     c46:	b7 9b       	sbis	0x16, 7	; 22
     c48:	e9 f7       	brne	.-6      	; 0xc44 <waitclk6299>
     c4a:	b5 99       	sbic	0x16, 5	; 22
     c4c:	08 94       	sec
     c4e:	88 1f       	adc	r24, r24
     c50:	38 e0       	ldi	r19, 0x08	; 8

00000c52 <waitclk7299>:
     c52:	3a 95       	dec	r19
     c54:	b7 9b       	sbis	0x16, 7	; 22
     c56:	e9 f7       	brne	.-6      	; 0xc52 <waitclk7299>
     c58:	b5 99       	sbic	0x16, 5	; 22
     c5a:	08 94       	sec
     c5c:	88 1f       	adc	r24, r24
     c5e:	3f 91       	pop	r19
     c60:	3f bf       	out	0x3f, r19	; 63
     c62:	3f 91       	pop	r19
     c64:	08 95       	ret

00000c66 <anibike_dl_receive_data>:
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
{
     c66:	df 92       	push	r13
     c68:	ef 92       	push	r14
     c6a:	ff 92       	push	r15
     c6c:	0f 93       	push	r16
     c6e:	1f 93       	push	r17
     c70:	cf 93       	push	r28
     c72:	df 93       	push	r29
	uint8_t *b = rxBuffer;
	uint8_t chs = 0, chs_here = 0;
	uint8_t timeout = ANIBIKE_DL_RX_TIMEOUT;
		
	// set direction of the clk pin as input. hopefully will be pulled-low
	DATALINK_PORT.OUTCLR = DATALINK_CLK_PIN;
     c74:	c0 e4       	ldi	r28, 0x40	; 64
     c76:	d6 e0       	ldi	r29, 0x06	; 6
     c78:	a0 e8       	ldi	r26, 0x80	; 128
     c7a:	fa 2e       	mov	r15, r26
     c7c:	fe 82       	std	Y+6, r15	; 0x06
	DATALINK_PORT.DIRCLR = DATALINK_CLK_PIN;
     c7e:	fa 82       	std	Y+2, r15	; 0x02
	
	PORT_ConfigurePins( &DATALINK_PORT,
     c80:	80 e4       	ldi	r24, 0x40	; 64
     c82:	96 e0       	ldi	r25, 0x06	; 6
     c84:	60 e8       	ldi	r22, 0x80	; 128
     c86:	40 e0       	ldi	r20, 0x00	; 0
     c88:	20 e0       	ldi	r18, 0x00	; 0
     c8a:	00 e0       	ldi	r16, 0x00	; 0
     c8c:	ee 24       	eor	r14, r14
     c8e:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_BOTHEDGES_gc );
							
	PORT_ConfigurePins( &DATALINK_PORT,
     c92:	80 e4       	ldi	r24, 0x40	; 64
     c94:	96 e0       	ldi	r25, 0x06	; 6
     c96:	60 e2       	ldi	r22, 0x20	; 32
     c98:	40 e0       	ldi	r20, 0x00	; 0
     c9a:	20 e0       	ldi	r18, 0x00	; 0
     c9c:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							PORT_ISC_BOTHEDGES_gc );
		
	// convert both lines to input totem pole - maybe its not needed
	
	// start waiting for data length
	cnt = len = anibike_dl_receive_byte ( );
     ca0:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <anibike_dl_receive_byte>
//	printf_P( PSTR("length: %d"), rxLength);

	cnt = len &= 0x7f;
     ca4:	18 2f       	mov	r17, r24
     ca6:	1f 77       	andi	r17, 0x7F	; 127
		len=128;
		cnt=128;
	}*/
	
	// read out the data
	while (cnt--)
     ca8:	09 f4       	brne	.+2      	; 0xcac <anibike_dl_receive_data+0x46>
     caa:	83 c0       	rjmp	.+262    	; 0xdb2 <anibike_dl_receive_data+0x14c>
     cac:	f1 2e       	mov	r15, r17
     cae:	fa 94       	dec	r15
     cb0:	c0 e0       	ldi	r28, 0x00	; 0
     cb2:	d0 e0       	ldi	r29, 0x00	; 0
		*b++ = anibike_dl_receive_byte ( );
     cb4:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <anibike_dl_receive_byte>
					:: "I" (DATALINK_DATA_PINN), "I" (DATALINK_PORT_IN), "I" (DATALINK_CLK_PINN)
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
     cb8:	fe 01       	movw	r30, r28
     cba:	e2 56       	subi	r30, 0x62	; 98
     cbc:	fd 4d       	sbci	r31, 0xDD	; 221
		cnt=128;
	}*/
	
	// read out the data
	while (cnt--)
		*b++ = anibike_dl_receive_byte ( );
     cbe:	80 83       	st	Z, r24
     cc0:	21 96       	adiw	r28, 0x01	; 1
		len=128;
		cnt=128;
	}*/
	
	// read out the data
	while (cnt--)
     cc2:	1c 17       	cp	r17, r28
     cc4:	b9 f7       	brne	.-18     	; 0xcb4 <anibike_dl_receive_data+0x4e>
		*b++ = anibike_dl_receive_byte ( );
	
	// read out checksum
	chs = anibike_dl_receive_byte ( );
     cc6:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <anibike_dl_receive_byte>
     cca:	d8 2e       	mov	r13, r24
	
	//printf_P( PSTR("length: %d; data: %s; chs: %d"), len, rxBuffer, chs);

	PORT_ConfigurePins( &DATALINK_PORT,
     ccc:	80 e4       	ldi	r24, 0x40	; 64
     cce:	96 e0       	ldi	r25, 0x06	; 6
     cd0:	60 e8       	ldi	r22, 0x80	; 128
     cd2:	40 e0       	ldi	r20, 0x00	; 0
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	00 e3       	ldi	r16, 0x30	; 48
     cd8:	ee 24       	eor	r14, r14
     cda:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
	
	// reset the pin directions
	DATALINK_PORT.OUTCLR = DATALINK_CLK_PIN;
     cde:	e0 e4       	ldi	r30, 0x40	; 64
     ce0:	f6 e0       	ldi	r31, 0x06	; 6
     ce2:	80 e8       	ldi	r24, 0x80	; 128
     ce4:	86 83       	std	Z+6, r24	; 0x06
	DATALINK_PORT.DIRSET = DATALINK_CLK_PIN;
     ce6:	81 83       	std	Z+1, r24	; 0x01
							

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
     ce8:	10 93 20 22 	sts	0x2220, r17
					:: "I" (DATALINK_DATA_PINN), "I" (DATALINK_PORT_IN), "I" (DATALINK_CLK_PINN)
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
     cec:	2f 2d       	mov	r18, r15
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	2f 5f       	subi	r18, 0xFF	; 255
     cf2:	3f 4f       	sbci	r19, 0xFF	; 255
     cf4:	80 e0       	ldi	r24, 0x00	; 0
     cf6:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t len, cnt;
	uint8_t *b = rxBuffer;
	uint8_t chs = 0, chs_here = 0;
     cf8:	40 e0       	ldi	r20, 0x00	; 0
					:: "I" (DATALINK_DATA_PINN), "I" (DATALINK_PORT_IN), "I" (DATALINK_CLK_PINN)
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
     cfa:	fc 01       	movw	r30, r24
     cfc:	e2 56       	subi	r30, 0x62	; 98
     cfe:	fd 4d       	sbci	r31, 0xDD	; 221

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
	while (cnt--)
		chs_here += *b++;
     d00:	50 81       	ld	r21, Z
     d02:	45 0f       	add	r20, r21
     d04:	01 96       	adiw	r24, 0x01	; 1
							

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
	while (cnt--)
     d06:	82 17       	cp	r24, r18
     d08:	93 07       	cpc	r25, r19
     d0a:	b9 f7       	brne	.-18     	; 0xcfa <anibike_dl_receive_data+0x94>
		chs_here += *b++;
		
	//printf_P( PSTR(" chs_here: %d"), chs_here);

	// if ACK then set CLK high and return
	if ( chs_here == chs )
     d0c:	4d 15       	cp	r20, r13
     d0e:	09 f4       	brne	.+2      	; 0xd12 <anibike_dl_receive_data+0xac>
     d10:	40 c0       	rjmp	.+128    	; 0xd92 <anibike_dl_receive_data+0x12c>
		printf_P( PSTR("ACK"));
		return 0;	
	}

	// wait for the data to be high (after ACK/NACK)
	while (!(DATALINK_PORT.IN&DATALINK_DATA_PIN))	
     d12:	80 91 48 06 	lds	r24, 0x0648
     d16:	85 fd       	sbrc	r24, 5
     d18:	0f c0       	rjmp	.+30     	; 0xd38 <anibike_dl_receive_data+0xd2>
     d1a:	c5 e7       	ldi	r28, 0x75	; 117
     d1c:	d1 e0       	ldi	r29, 0x01	; 1
	{
		printf_P( PSTR("W"));
     d1e:	00 d0       	rcall	.+0      	; 0xd20 <anibike_dl_receive_data+0xba>
     d20:	ed b7       	in	r30, 0x3d	; 61
     d22:	fe b7       	in	r31, 0x3e	; 62
     d24:	c1 83       	std	Z+1, r28	; 0x01
     d26:	d2 83       	std	Z+2, r29	; 0x02
     d28:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		printf_P( PSTR("ACK"));
		return 0;	
	}

	// wait for the data to be high (after ACK/NACK)
	while (!(DATALINK_PORT.IN&DATALINK_DATA_PIN))	
     d2c:	80 91 48 06 	lds	r24, 0x0648
     d30:	0f 90       	pop	r0
     d32:	0f 90       	pop	r0
     d34:	85 ff       	sbrs	r24, 5
     d36:	f3 cf       	rjmp	.-26     	; 0xd1e <anibike_dl_receive_data+0xb8>
		printf_P( PSTR("W"));
		// wait and do nothing
	}

	// set clock high
	DATALINK_PORT.OUTSET = DATALINK_CLK_PIN;	
     d38:	80 e8       	ldi	r24, 0x80	; 128
     d3a:	e0 e4       	ldi	r30, 0x40	; 64
     d3c:	f6 e0       	ldi	r31, 0x06	; 6
     d3e:	85 83       	std	Z+5, r24	; 0x05
		
	PORT_ConfigurePins( &DATALINK_PORT,
     d40:	80 e4       	ldi	r24, 0x40	; 64
     d42:	96 e0       	ldi	r25, 0x06	; 6
     d44:	60 e2       	ldi	r22, 0x20	; 32
     d46:	40 e0       	ldi	r20, 0x00	; 0
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	00 e3       	ldi	r16, 0x30	; 48
     d4c:	ee 24       	eor	r14, r14
     d4e:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
						
	rxBuffer[rxLength]='\0';	
     d52:	e0 91 20 22 	lds	r30, 0x2220
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	e2 56       	subi	r30, 0x62	; 98
     d5a:	fd 4d       	sbci	r31, 0xDD	; 221
     d5c:	10 82       	st	Z, r1
	printf_P( PSTR("data: %s"), rxBuffer);
     d5e:	00 d0       	rcall	.+0      	; 0xd60 <anibike_dl_receive_data+0xfa>
     d60:	00 d0       	rcall	.+0      	; 0xd62 <anibike_dl_receive_data+0xfc>
     d62:	8c e6       	ldi	r24, 0x6C	; 108
     d64:	91 e0       	ldi	r25, 0x01	; 1
     d66:	ed b7       	in	r30, 0x3d	; 61
     d68:	fe b7       	in	r31, 0x3e	; 62
     d6a:	81 83       	std	Z+1, r24	; 0x01
     d6c:	92 83       	std	Z+2, r25	; 0x02
     d6e:	8e e9       	ldi	r24, 0x9E	; 158
     d70:	92 e2       	ldi	r25, 0x22	; 34
     d72:	83 83       	std	Z+3, r24	; 0x03
     d74:	94 83       	std	Z+4, r25	; 0x04
     d76:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
     d7a:	0f 90       	pop	r0
     d7c:	0f 90       	pop	r0
     d7e:	0f 90       	pop	r0
     d80:	0f 90       	pop	r0
}
     d82:	df 91       	pop	r29
     d84:	cf 91       	pop	r28
     d86:	1f 91       	pop	r17
     d88:	0f 91       	pop	r16
     d8a:	ff 90       	pop	r15
     d8c:	ef 90       	pop	r14
     d8e:	df 90       	pop	r13
     d90:	08 95       	ret
	//printf_P( PSTR(" chs_here: %d"), chs_here);

	// if ACK then set CLK high and return
	if ( chs_here == chs )
	{
		DATALINK_PORT.OUTSET = DATALINK_CLK_PIN;
     d92:	80 e8       	ldi	r24, 0x80	; 128
     d94:	e0 e4       	ldi	r30, 0x40	; 64
     d96:	f6 e0       	ldi	r31, 0x06	; 6
     d98:	85 83       	std	Z+5, r24	; 0x05
		printf_P( PSTR("ACK"));
     d9a:	00 d0       	rcall	.+0      	; 0xd9c <anibike_dl_receive_data+0x136>
     d9c:	87 e7       	ldi	r24, 0x77	; 119
     d9e:	91 e0       	ldi	r25, 0x01	; 1
     da0:	ed b7       	in	r30, 0x3d	; 61
     da2:	fe b7       	in	r31, 0x3e	; 62
     da4:	81 83       	std	Z+1, r24	; 0x01
     da6:	92 83       	std	Z+2, r25	; 0x02
     da8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return 0;	
     dac:	0f 90       	pop	r0
     dae:	0f 90       	pop	r0
     db0:	e8 cf       	rjmp	.-48     	; 0xd82 <anibike_dl_receive_data+0x11c>
	// read out the data
	while (cnt--)
		*b++ = anibike_dl_receive_byte ( );
	
	// read out checksum
	chs = anibike_dl_receive_byte ( );
     db2:	0e 94 f2 05 	call	0xbe4	; 0xbe4 <anibike_dl_receive_byte>
     db6:	d8 2e       	mov	r13, r24
	
	//printf_P( PSTR("length: %d; data: %s; chs: %d"), len, rxBuffer, chs);

	PORT_ConfigurePins( &DATALINK_PORT,
     db8:	80 e4       	ldi	r24, 0x40	; 64
     dba:	96 e0       	ldi	r25, 0x06	; 6
     dbc:	60 e8       	ldi	r22, 0x80	; 128
     dbe:	40 e0       	ldi	r20, 0x00	; 0
     dc0:	20 e0       	ldi	r18, 0x00	; 0
     dc2:	00 e3       	ldi	r16, 0x30	; 48
     dc4:	ee 24       	eor	r14, r14
     dc6:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
	
	// reset the pin directions
	DATALINK_PORT.OUTCLR = DATALINK_CLK_PIN;
     dca:	fe 82       	std	Y+6, r15	; 0x06
	DATALINK_PORT.DIRSET = DATALINK_CLK_PIN;
     dcc:	f9 82       	std	Y+1, r15	; 0x01
							

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
     dce:	10 92 20 22 	sts	0x2220, r1
//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
{
	uint8_t len, cnt;
	uint8_t *b = rxBuffer;
	uint8_t chs = 0, chs_here = 0;
     dd2:	40 e0       	ldi	r20, 0x00	; 0
     dd4:	9b cf       	rjmp	.-202    	; 0xd0c <anibike_dl_receive_data+0xa6>

00000dd6 <__vector_2>:
	printf_P( PSTR("data: %s"), rxBuffer);
}

//__________________________________________________________________________________________________
ISR(PORTC_INT0_vect,  ISR_BLOCK)
{
     dd6:	1f 92       	push	r1
     dd8:	0f 92       	push	r0
     dda:	0f b6       	in	r0, 0x3f	; 63
     ddc:	0f 92       	push	r0
     dde:	11 24       	eor	r1, r1
     de0:	2f 93       	push	r18
     de2:	3f 93       	push	r19
     de4:	4f 93       	push	r20
     de6:	5f 93       	push	r21
     de8:	6f 93       	push	r22
     dea:	7f 93       	push	r23
     dec:	8f 93       	push	r24
     dee:	9f 93       	push	r25
     df0:	af 93       	push	r26
     df2:	bf 93       	push	r27
     df4:	ef 93       	push	r30
     df6:	ff 93       	push	r31
	// Data was cleared
	if ( (DATALINK_PORT.IN&DATALINK_DATA_PIN)!=0 )
     df8:	80 91 48 06 	lds	r24, 0x0648
     dfc:	85 fd       	sbrc	r24, 5
     dfe:	06 c0       	rjmp	.+12     	; 0xe0c <__vector_2+0x36>
		return;

	cli ();
     e00:	f8 94       	cli
	rxLength = 0;
     e02:	10 92 20 22 	sts	0x2220, r1
	anibike_dl_receive_data ( );
     e06:	0e 94 33 06 	call	0xc66	; 0xc66 <anibike_dl_receive_data>
	sei ( );
     e0a:	78 94       	sei
}
     e0c:	ff 91       	pop	r31
     e0e:	ef 91       	pop	r30
     e10:	bf 91       	pop	r27
     e12:	af 91       	pop	r26
     e14:	9f 91       	pop	r25
     e16:	8f 91       	pop	r24
     e18:	7f 91       	pop	r23
     e1a:	6f 91       	pop	r22
     e1c:	5f 91       	pop	r21
     e1e:	4f 91       	pop	r20
     e20:	3f 91       	pop	r19
     e22:	2f 91       	pop	r18
     e24:	0f 90       	pop	r0
     e26:	0f be       	out	0x3f, r0	; 63
     e28:	0f 90       	pop	r0
     e2a:	1f 90       	pop	r1
     e2c:	18 95       	reti

00000e2e <transfer_word>:


//__________________________________________________________________________________________________
// Transfer two bytes to and from spi recipient
uint16_t transfer_word ( uint16_t w )
{
     e2e:	cf 92       	push	r12
     e30:	df 92       	push	r13
     e32:	ff 92       	push	r15
     e34:	0f 93       	push	r16
     e36:	1f 93       	push	r17
     e38:	cf 93       	push	r28
     e3a:	df 93       	push	r29
	uint16_t msb;
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
     e3c:	00 97       	sbiw	r24, 0x00	; 0
     e3e:	d9 f0       	breq	.+54     	; 0xe76 <transfer_word+0x48>
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
	}
	else
	{
		lsb = w & 0xff;
     e40:	8c 01       	movw	r16, r24
     e42:	10 70       	andi	r17, 0x00	; 0
		msb = w >> 8;
     e44:	6c 01       	movw	r12, r24
     e46:	fd 2c       	mov	r15, r13
		//spi_transfer ( msb );
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
     e48:	8e e1       	ldi	r24, 0x1E	; 30
     e4a:	93 e2       	ldi	r25, 0x23	; 35
     e4c:	60 2f       	mov	r22, r16
     e4e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
		SPI_MasterTransceiveByte(&spiMasterD, msb);
     e52:	8e e1       	ldi	r24, 0x1E	; 30
     e54:	93 e2       	ldi	r25, 0x23	; 35
     e56:	6d 2d       	mov	r22, r13
     e58:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	}

	ret_val = lsb | (msb<<8);
     e5c:	3f 2d       	mov	r19, r15
     e5e:	20 e0       	ldi	r18, 0x00	; 0
     e60:	02 2b       	or	r16, r18
     e62:	13 2b       	or	r17, r19

	return ret_val;
}
     e64:	c8 01       	movw	r24, r16
     e66:	df 91       	pop	r29
     e68:	cf 91       	pop	r28
     e6a:	1f 91       	pop	r17
     e6c:	0f 91       	pop	r16
     e6e:	ff 90       	pop	r15
     e70:	df 90       	pop	r13
     e72:	cf 90       	pop	r12
     e74:	08 95       	ret

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     e76:	8e e1       	ldi	r24, 0x1E	; 30
     e78:	93 e2       	ldi	r25, 0x23	; 35
     e7a:	60 e0       	ldi	r22, 0x00	; 0
     e7c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     e80:	08 2f       	mov	r16, r24
     e82:	10 e0       	ldi	r17, 0x00	; 0
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     e84:	8e e1       	ldi	r24, 0x1E	; 30
     e86:	93 e2       	ldi	r25, 0x23	; 35
     e88:	60 e0       	ldi	r22, 0x00	; 0
     e8a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     e8e:	f8 2e       	mov	r15, r24
     e90:	e5 cf       	rjmp	.-54     	; 0xe5c <transfer_word+0x2e>

00000e92 <FS_ReadEntry>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
{
     e92:	4f 92       	push	r4
     e94:	5f 92       	push	r5
     e96:	6f 92       	push	r6
     e98:	7f 92       	push	r7
     e9a:	9f 92       	push	r9
     e9c:	af 92       	push	r10
     e9e:	bf 92       	push	r11
     ea0:	cf 92       	push	r12
     ea2:	df 92       	push	r13
     ea4:	ef 92       	push	r14
     ea6:	ff 92       	push	r15
     ea8:	0f 93       	push	r16
     eaa:	1f 93       	push	r17
     eac:	cf 93       	push	r28
     eae:	df 93       	push	r29
     eb0:	3c 01       	movw	r6, r24
     eb2:	7b 01       	movw	r14, r22
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
     eb4:	fc 01       	movw	r30, r24
     eb6:	a0 80       	ld	r10, Z
     eb8:	b1 80       	ldd	r11, Z+1	; 0x01
     eba:	c2 80       	ldd	r12, Z+2	; 0x02
     ebc:	d3 80       	ldd	r13, Z+3	; 0x03
	uint16_t iNumFrames16 = 0;
	uint8_t iNumFrames = 0;
	uint8_t itr = 0;

	CS_UP;
     ebe:	00 e6       	ldi	r16, 0x60	; 96
     ec0:	16 e0       	ldi	r17, 0x06	; 6
     ec2:	20 e1       	ldi	r18, 0x10	; 16
     ec4:	92 2e       	mov	r9, r18
     ec6:	f8 01       	movw	r30, r16
     ec8:	95 82       	std	Z+5, r9	; 0x05
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
     eca:	96 82       	std	Z+6, r9	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
     ecc:	8e e1       	ldi	r24, 0x1E	; 30
     ece:	93 e2       	ldi	r25, 0x23	; 35
     ed0:	63 e0       	ldi	r22, 0x03	; 3
     ed2:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	uint8_t itr = 0;

	CS_UP;
	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
     ed6:	96 01       	movw	r18, r12
     ed8:	44 27       	eor	r20, r20
     eda:	55 27       	eor	r21, r21
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
     edc:	8e e1       	ldi	r24, 0x1E	; 30
     ede:	93 e2       	ldi	r25, 0x23	; 35
     ee0:	62 2f       	mov	r22, r18
     ee2:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
     ee6:	55 27       	eor	r21, r21
     ee8:	4d 2d       	mov	r20, r13
     eea:	3c 2d       	mov	r19, r12
     eec:	2b 2d       	mov	r18, r11
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
     eee:	8e e1       	ldi	r24, 0x1E	; 30
     ef0:	93 e2       	ldi	r25, 0x23	; 35
     ef2:	62 2f       	mov	r22, r18
     ef4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
     ef8:	8e e1       	ldi	r24, 0x1E	; 30
     efa:	93 e2       	ldi	r25, 0x23	; 35
     efc:	6a 2d       	mov	r22, r10
     efe:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f02:	8e e1       	ldi	r24, 0x1E	; 30
     f04:	93 e2       	ldi	r25, 0x23	; 35
     f06:	60 e0       	ldi	r22, 0x00	; 0
     f08:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f0c:	d8 2e       	mov	r13, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f0e:	8e e1       	ldi	r24, 0x1E	; 30
     f10:	93 e2       	ldi	r25, 0x23	; 35
     f12:	60 e0       	ldi	r22, 0x00	; 0
     f14:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
     f18:	38 2f       	mov	r19, r24
     f1a:	20 e0       	ldi	r18, 0x00	; 0

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f1c:	8d 2d       	mov	r24, r13
     f1e:	90 e0       	ldi	r25, 0x00	; 0
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
     f20:	82 2b       	or	r24, r18
     f22:	93 2b       	or	r25, r19
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	// Read the number of frames
	iNumFrames16 = transfer_word ( 0 );
	iNumFrames = (uint8_t)(iNumFrames16&0xff);
     f24:	a8 2e       	mov	r10, r24

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
     f26:	81 32       	cpi	r24, 0x21	; 33
     f28:	08 f0       	brcs	.+2      	; 0xf2c <FS_ReadEntry+0x9a>
     f2a:	a9 c0       	rjmp	.+338    	; 0x107e <FS_ReadEntry+0x1ec>
		// return fail
		CS_UP;
		return 0;
	}

	pEntry->iNumFrames = iNumFrames;
     f2c:	f7 01       	movw	r30, r14
     f2e:	80 83       	st	Z, r24
     f30:	11 82       	std	Z+1, r1	; 0x01

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f32:	8e e1       	ldi	r24, 0x1E	; 30
     f34:	93 e2       	ldi	r25, 0x23	; 35
     f36:	60 e0       	ldi	r22, 0x00	; 0
     f38:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f3c:	f7 01       	movw	r30, r14
     f3e:	82 83       	std	Z+2, r24	; 0x02
     f40:	8e e1       	ldi	r24, 0x1E	; 30
     f42:	93 e2       	ldi	r25, 0x23	; 35
     f44:	60 e0       	ldi	r22, 0x00	; 0
     f46:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f4a:	f7 01       	movw	r30, r14
     f4c:	83 83       	std	Z+3, r24	; 0x03
     f4e:	8e e1       	ldi	r24, 0x1E	; 30
     f50:	93 e2       	ldi	r25, 0x23	; 35
     f52:	60 e0       	ldi	r22, 0x00	; 0
     f54:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f58:	f7 01       	movw	r30, r14
     f5a:	84 83       	std	Z+4, r24	; 0x04
     f5c:	8e e1       	ldi	r24, 0x1E	; 30
     f5e:	93 e2       	ldi	r25, 0x23	; 35
     f60:	60 e0       	ldi	r22, 0x00	; 0
     f62:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f66:	f7 01       	movw	r30, r14
     f68:	85 83       	std	Z+5, r24	; 0x05
     f6a:	8e e1       	ldi	r24, 0x1E	; 30
     f6c:	93 e2       	ldi	r25, 0x23	; 35
     f6e:	60 e0       	ldi	r22, 0x00	; 0
     f70:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f74:	f7 01       	movw	r30, r14
     f76:	86 83       	std	Z+6, r24	; 0x06
     f78:	8e e1       	ldi	r24, 0x1E	; 30
     f7a:	93 e2       	ldi	r25, 0x23	; 35
     f7c:	60 e0       	ldi	r22, 0x00	; 0
     f7e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f82:	f7 01       	movw	r30, r14
     f84:	87 83       	std	Z+7, r24	; 0x07
     f86:	8e e1       	ldi	r24, 0x1E	; 30
     f88:	93 e2       	ldi	r25, 0x23	; 35
     f8a:	60 e0       	ldi	r22, 0x00	; 0
     f8c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f90:	f7 01       	movw	r30, r14
     f92:	80 87       	std	Z+8, r24	; 0x08
     f94:	8e e1       	ldi	r24, 0x1E	; 30
     f96:	93 e2       	ldi	r25, 0x23	; 35
     f98:	60 e0       	ldi	r22, 0x00	; 0
     f9a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     f9e:	f7 01       	movw	r30, r14
     fa0:	81 87       	std	Z+9, r24	; 0x09
     fa2:	8e e1       	ldi	r24, 0x1E	; 30
     fa4:	93 e2       	ldi	r25, 0x23	; 35
     fa6:	60 e0       	ldi	r22, 0x00	; 0
     fa8:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     fac:	f7 01       	movw	r30, r14
     fae:	82 87       	std	Z+10, r24	; 0x0a
     fb0:	8e e1       	ldi	r24, 0x1E	; 30
     fb2:	93 e2       	ldi	r25, 0x23	; 35
     fb4:	60 e0       	ldi	r22, 0x00	; 0
     fb6:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     fba:	f7 01       	movw	r30, r14
     fbc:	83 87       	std	Z+11, r24	; 0x0b
     fbe:	8e e1       	ldi	r24, 0x1E	; 30
     fc0:	93 e2       	ldi	r25, 0x23	; 35
     fc2:	60 e0       	ldi	r22, 0x00	; 0
     fc4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     fc8:	f7 01       	movw	r30, r14
     fca:	84 87       	std	Z+12, r24	; 0x0c
     fcc:	8e e1       	ldi	r24, 0x1E	; 30
     fce:	93 e2       	ldi	r25, 0x23	; 35
     fd0:	60 e0       	ldi	r22, 0x00	; 0
     fd2:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     fd6:	f7 01       	movw	r30, r14
     fd8:	85 87       	std	Z+13, r24	; 0x0d

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
     fda:	aa 20       	and	r10, r10
     fdc:	e1 f0       	breq	.+56     	; 0x1016 <FS_ReadEntry+0x184>
}

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
     fde:	87 01       	movw	r16, r14
     fe0:	02 5f       	subi	r16, 0xF2	; 242
     fe2:	1f 4f       	sbci	r17, 0xFF	; 255
     fe4:	99 24       	eor	r9, r9

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     fe6:	8e e1       	ldi	r24, 0x1E	; 30
     fe8:	93 e2       	ldi	r25, 0x23	; 35
     fea:	60 e0       	ldi	r22, 0x00	; 0
     fec:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
     ff0:	d8 2e       	mov	r13, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     ff2:	8e e1       	ldi	r24, 0x1E	; 30
     ff4:	93 e2       	ldi	r25, 0x23	; 35
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
     ffc:	80 e0       	ldi	r24, 0x00	; 0
     ffe:	ec 01       	movw	r28, r24

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1000:	8d 2d       	mov	r24, r13
    1002:	90 e0       	ldi	r25, 0x00	; 0
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
    1004:	8c 2b       	or	r24, r28
    1006:	9d 2b       	or	r25, r29
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0);

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
    1008:	f8 01       	movw	r30, r16
    100a:	81 93       	st	Z+, r24
    100c:	91 93       	st	Z+, r25
    100e:	8f 01       	movw	r16, r30
	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0);

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1010:	93 94       	inc	r9
    1012:	9a 14       	cp	r9, r10
    1014:	40 f3       	brcs	.-48     	; 0xfe6 <FS_ReadEntry+0x154>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->Reserved1 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1016:	8e e1       	ldi	r24, 0x1E	; 30
    1018:	93 e2       	ldi	r25, 0x23	; 35
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1020:	f7 01       	movw	r30, r14
    1022:	e2 5b       	subi	r30, 0xB2	; 178
    1024:	ff 4f       	sbci	r31, 0xFF	; 255
    1026:	80 83       	st	Z, r24
	pEntry->Reserved2 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1028:	8e e1       	ldi	r24, 0x1E	; 30
    102a:	93 e2       	ldi	r25, 0x23	; 35
    102c:	60 e0       	ldi	r22, 0x00	; 0
    102e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1032:	f7 01       	movw	r30, r14
    1034:	e1 5b       	subi	r30, 0xB1	; 177
    1036:	ff 4f       	sbci	r31, 0xFF	; 255
    1038:	80 83       	st	Z, r24

	CS_UP;
    103a:	80 e1       	ldi	r24, 0x10	; 16
    103c:	e0 e6       	ldi	r30, 0x60	; 96
    103e:	f6 e0       	ldi	r31, 0x06	; 6
    1040:	85 83       	std	Z+5, r24	; 0x05

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;
    1042:	f3 01       	movw	r30, r6
    1044:	80 81       	ld	r24, Z
    1046:	91 81       	ldd	r25, Z+1	; 0x01
    1048:	a2 81       	ldd	r26, Z+2	; 0x02
    104a:	b3 81       	ldd	r27, Z+3	; 0x03
    104c:	80 5b       	subi	r24, 0xB0	; 176
    104e:	9f 4f       	sbci	r25, 0xFF	; 255
    1050:	af 4f       	sbci	r26, 0xFF	; 255
    1052:	bf 4f       	sbci	r27, 0xFF	; 255
    1054:	80 83       	st	Z, r24
    1056:	91 83       	std	Z+1, r25	; 0x01
    1058:	a2 83       	std	Z+2, r26	; 0x02
    105a:	b3 83       	std	Z+3, r27	; 0x03

	return 1;	// Success
    105c:	81 e0       	ldi	r24, 0x01	; 1
}
    105e:	df 91       	pop	r29
    1060:	cf 91       	pop	r28
    1062:	1f 91       	pop	r17
    1064:	0f 91       	pop	r16
    1066:	ff 90       	pop	r15
    1068:	ef 90       	pop	r14
    106a:	df 90       	pop	r13
    106c:	cf 90       	pop	r12
    106e:	bf 90       	pop	r11
    1070:	af 90       	pop	r10
    1072:	9f 90       	pop	r9
    1074:	7f 90       	pop	r7
    1076:	6f 90       	pop	r6
    1078:	5f 90       	pop	r5
    107a:	4f 90       	pop	r4
    107c:	08 95       	ret
	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
	{
		// return fail
		CS_UP;
    107e:	f8 01       	movw	r30, r16
    1080:	95 82       	std	Z+5, r9	; 0x05
		return 0;
    1082:	80 e0       	ldi	r24, 0x00	; 0
    1084:	ec cf       	rjmp	.-40     	; 0x105e <FS_ReadEntry+0x1cc>

00001086 <FS_ReadNextEntry>:
}

//__________________________________________________________________________________________________
// Reads the next file entry and updates the global variables
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
    1086:	cf 93       	push	r28
    1088:	df 93       	push	r29
    108a:	ec 01       	movw	r28, r24
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	90 e2       	ldi	r25, 0x20	; 32
    1090:	be 01       	movw	r22, r28
    1092:	0e 94 49 07 	call	0xe92	; 0xe92 <FS_ReadEntry>
    1096:	88 23       	and	r24, r24
    1098:	21 f0       	breq	.+8      	; 0x10a2 <FS_ReadNextEntry+0x1c>
		else
		{
			bFS_Empty = 0;
		}
	}
	return 1;		// Success
    109a:	81 e0       	ldi	r24, 0x01	; 1
}
    109c:	df 91       	pop	r29
    109e:	cf 91       	pop	r28
    10a0:	08 95       	ret
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
	{
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;
    10a2:	80 e0       	ldi	r24, 0x00	; 0
    10a4:	90 e9       	ldi	r25, 0x90	; 144
    10a6:	af e3       	ldi	r26, 0x3F	; 63
    10a8:	b0 e0       	ldi	r27, 0x00	; 0
    10aa:	80 93 00 20 	sts	0x2000, r24
    10ae:	90 93 01 20 	sts	0x2001, r25
    10b2:	a0 93 02 20 	sts	0x2002, r26
    10b6:	b0 93 03 20 	sts	0x2003, r27

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
    10ba:	80 e0       	ldi	r24, 0x00	; 0
    10bc:	90 e2       	ldi	r25, 0x20	; 32
    10be:	be 01       	movw	r22, r28
    10c0:	0e 94 49 07 	call	0xe92	; 0xe92 <FS_ReadEntry>
    10c4:	88 23       	and	r24, r24
    10c6:	31 f0       	breq	.+12     	; 0x10d4 <FS_ReadNextEntry+0x4e>
			bFS_Empty = 1;
			return 0;	// Fail
		}
		else
		{
			bFS_Empty = 0;
    10c8:	10 92 23 22 	sts	0x2223, r1
		}
	}
	return 1;		// Success
    10cc:	81 e0       	ldi	r24, 0x01	; 1
}
    10ce:	df 91       	pop	r29
    10d0:	cf 91       	pop	r28
    10d2:	08 95       	ret
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
		{
			bFS_Empty = 1;
    10d4:	81 e0       	ldi	r24, 0x01	; 1
    10d6:	80 93 23 22 	sts	0x2223, r24
			return 0;	// Fail
    10da:	80 e0       	ldi	r24, 0x00	; 0
		{
			bFS_Empty = 0;
		}
	}
	return 1;		// Success
}
    10dc:	df 91       	pop	r29
    10de:	cf 91       	pop	r28
    10e0:	08 95       	ret

000010e2 <FS_ReadFrame>:

//__________________________________________________________________________________________________
// Read Out Frame Information
void FS_ReadFrame (uint16_t iBlock)
{
    10e2:	ef 92       	push	r14
    10e4:	ff 92       	push	r15
    10e6:	0f 93       	push	r16
    10e8:	1f 93       	push	r17
    10ea:	cf 93       	push	r28
    10ec:	df 93       	push	r29
    10ee:	9c 01       	movw	r18, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    10f0:	e0 e6       	ldi	r30, 0x60	; 96
    10f2:	f6 e0       	ldi	r31, 0x06	; 6
    10f4:	a0 e1       	ldi	r26, 0x10	; 16
    10f6:	a5 83       	std	Z+5, r26	; 0x05

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);
    10f8:	40 e0       	ldi	r20, 0x00	; 0
    10fa:	50 e3       	ldi	r21, 0x30	; 48
    10fc:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__umulhisi3>
    1100:	7b 01       	movw	r14, r22
    1102:	8c 01       	movw	r16, r24
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
    1104:	a6 83       	std	Z+6, r26	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
    1106:	8e e1       	ldi	r24, 0x1E	; 30
    1108:	93 e2       	ldi	r25, 0x23	; 35
    110a:	63 e0       	ldi	r22, 0x03	; 3
    110c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
    1110:	98 01       	movw	r18, r16
    1112:	44 27       	eor	r20, r20
    1114:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
    1116:	8e e1       	ldi	r24, 0x1E	; 30
    1118:	93 e2       	ldi	r25, 0x23	; 35
    111a:	62 2f       	mov	r22, r18
    111c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1120:	ef 2c       	mov	r14, r15
    1122:	f0 2e       	mov	r15, r16
    1124:	01 2f       	mov	r16, r17
    1126:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
    1128:	8e e1       	ldi	r24, 0x1E	; 30
    112a:	93 e2       	ldi	r25, 0x23	; 35
    112c:	6e 2d       	mov	r22, r14
    112e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
    1132:	8e e1       	ldi	r24, 0x1E	; 30
    1134:	93 e2       	ldi	r25, 0x23	; 35
    1136:	60 e0       	ldi	r22, 0x00	; 0
    1138:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    113c:	c0 e8       	ldi	r28, 0x80	; 128
    113e:	d5 e2       	ldi	r29, 0x25	; 37

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
    1140:	8e e1       	ldi	r24, 0x1E	; 30
    1142:	93 e2       	ldi	r25, 0x23	; 35
    1144:	60 e0       	ldi	r22, 0x00	; 0
    1146:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    114a:	60 91 27 23 	lds	r22, 0x2327
    114e:	70 91 28 23 	lds	r23, 0x2328
    1152:	90 e0       	ldi	r25, 0x00	; 0
    1154:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    1158:	21 97       	sbiw	r28, 0x01	; 1
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
    115a:	91 f7       	brne	.-28     	; 0x1140 <FS_ReadFrame+0x5e>
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
	}

	CS_UP;
    115c:	80 e1       	ldi	r24, 0x10	; 16
    115e:	e0 e6       	ldi	r30, 0x60	; 96
    1160:	f6 e0       	ldi	r31, 0x06	; 6
    1162:	85 83       	std	Z+5, r24	; 0x05
}
    1164:	df 91       	pop	r29
    1166:	cf 91       	pop	r28
    1168:	1f 91       	pop	r17
    116a:	0f 91       	pop	r16
    116c:	ff 90       	pop	r15
    116e:	ef 90       	pop	r14
    1170:	08 95       	ret

00001172 <FS_ReadEntry_FileMatch>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - Only if filename matches
// Returns success (1) or fail (0) of no match (2)
uint8_t FS_ReadEntry_FileMatch ( uint32_t *pAddress, FileEntry_ST* pEntry, char* FileName )
{
    1172:	4f 92       	push	r4
    1174:	5f 92       	push	r5
    1176:	6f 92       	push	r6
    1178:	7f 92       	push	r7
    117a:	9f 92       	push	r9
    117c:	af 92       	push	r10
    117e:	bf 92       	push	r11
    1180:	cf 92       	push	r12
    1182:	df 92       	push	r13
    1184:	ef 92       	push	r14
    1186:	ff 92       	push	r15
    1188:	0f 93       	push	r16
    118a:	1f 93       	push	r17
    118c:	cf 93       	push	r28
    118e:	df 93       	push	r29
    1190:	3c 01       	movw	r6, r24
    1192:	7b 01       	movw	r14, r22
    1194:	2a 01       	movw	r4, r20
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
    1196:	fc 01       	movw	r30, r24
    1198:	a0 80       	ld	r10, Z
    119a:	b1 80       	ldd	r11, Z+1	; 0x01
    119c:	c2 80       	ldd	r12, Z+2	; 0x02
    119e:	d3 80       	ldd	r13, Z+3	; 0x03
	uint16_t iNumFrames16 = 0;
	uint8_t iNumFrames = 0;
	uint8_t itr = 0;

	CS_UP;
    11a0:	00 e6       	ldi	r16, 0x60	; 96
    11a2:	16 e0       	ldi	r17, 0x06	; 6
    11a4:	70 e1       	ldi	r23, 0x10	; 16
    11a6:	97 2e       	mov	r9, r23
    11a8:	f8 01       	movw	r30, r16
    11aa:	95 82       	std	Z+5, r9	; 0x05
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
    11ac:	96 82       	std	Z+6, r9	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
    11ae:	8e e1       	ldi	r24, 0x1E	; 30
    11b0:	93 e2       	ldi	r25, 0x23	; 35
    11b2:	63 e0       	ldi	r22, 0x03	; 3
    11b4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;

	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
    11b8:	96 01       	movw	r18, r12
    11ba:	44 27       	eor	r20, r20
    11bc:	55 27       	eor	r21, r21
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
    11be:	8e e1       	ldi	r24, 0x1E	; 30
    11c0:	93 e2       	ldi	r25, 0x23	; 35
    11c2:	62 2f       	mov	r22, r18
    11c4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;

	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
    11c8:	55 27       	eor	r21, r21
    11ca:	4d 2d       	mov	r20, r13
    11cc:	3c 2d       	mov	r19, r12
    11ce:	2b 2d       	mov	r18, r11
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
    11d0:	8e e1       	ldi	r24, 0x1E	; 30
    11d2:	93 e2       	ldi	r25, 0x23	; 35
    11d4:	62 2f       	mov	r22, r18
    11d6:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
    11da:	8e e1       	ldi	r24, 0x1E	; 30
    11dc:	93 e2       	ldi	r25, 0x23	; 35
    11de:	6a 2d       	mov	r22, r10
    11e0:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    11e4:	8e e1       	ldi	r24, 0x1E	; 30
    11e6:	93 e2       	ldi	r25, 0x23	; 35
    11e8:	60 e0       	ldi	r22, 0x00	; 0
    11ea:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    11ee:	a8 2e       	mov	r10, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    11f0:	8e e1       	ldi	r24, 0x1E	; 30
    11f2:	93 e2       	ldi	r25, 0x23	; 35
    11f4:	60 e0       	ldi	r22, 0x00	; 0
    11f6:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
    11fa:	38 2f       	mov	r19, r24
    11fc:	20 e0       	ldi	r18, 0x00	; 0

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    11fe:	8a 2d       	mov	r24, r10
    1200:	90 e0       	ldi	r25, 0x00	; 0
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
    1202:	82 2b       	or	r24, r18
    1204:	93 2b       	or	r25, r19
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	// Read the number of frames
	iNumFrames16 = transfer_word ( 0 );
	iNumFrames = (uint8_t)(iNumFrames16 & 0xff);
    1206:	a8 2e       	mov	r10, r24

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
    1208:	81 32       	cpi	r24, 0x21	; 33
    120a:	08 f0       	brcs	.+2      	; 0x120e <FS_ReadEntry_FileMatch+0x9c>
    120c:	c1 c0       	rjmp	.+386    	; 0x1390 <FS_ReadEntry_FileMatch+0x21e>
		// return fail
		CS_UP;
		return 0;
	}

	pEntry->iNumFrames = iNumFrames;
    120e:	f7 01       	movw	r30, r14
    1210:	80 83       	st	Z, r24
    1212:	11 82       	std	Z+1, r1	; 0x01

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0); 
    1214:	8e e1       	ldi	r24, 0x1E	; 30
    1216:	93 e2       	ldi	r25, 0x23	; 35
    1218:	60 e0       	ldi	r22, 0x00	; 0
    121a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    121e:	f7 01       	movw	r30, r14
    1220:	82 83       	std	Z+2, r24	; 0x02
    1222:	8e e1       	ldi	r24, 0x1E	; 30
    1224:	93 e2       	ldi	r25, 0x23	; 35
    1226:	60 e0       	ldi	r22, 0x00	; 0
    1228:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    122c:	f7 01       	movw	r30, r14
    122e:	83 83       	std	Z+3, r24	; 0x03
    1230:	8e e1       	ldi	r24, 0x1E	; 30
    1232:	93 e2       	ldi	r25, 0x23	; 35
    1234:	60 e0       	ldi	r22, 0x00	; 0
    1236:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    123a:	f7 01       	movw	r30, r14
    123c:	84 83       	std	Z+4, r24	; 0x04
    123e:	8e e1       	ldi	r24, 0x1E	; 30
    1240:	93 e2       	ldi	r25, 0x23	; 35
    1242:	60 e0       	ldi	r22, 0x00	; 0
    1244:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1248:	f7 01       	movw	r30, r14
    124a:	85 83       	std	Z+5, r24	; 0x05
    124c:	8e e1       	ldi	r24, 0x1E	; 30
    124e:	93 e2       	ldi	r25, 0x23	; 35
    1250:	60 e0       	ldi	r22, 0x00	; 0
    1252:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1256:	f7 01       	movw	r30, r14
    1258:	86 83       	std	Z+6, r24	; 0x06
    125a:	8e e1       	ldi	r24, 0x1E	; 30
    125c:	93 e2       	ldi	r25, 0x23	; 35
    125e:	60 e0       	ldi	r22, 0x00	; 0
    1260:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1264:	f7 01       	movw	r30, r14
    1266:	87 83       	std	Z+7, r24	; 0x07
    1268:	8e e1       	ldi	r24, 0x1E	; 30
    126a:	93 e2       	ldi	r25, 0x23	; 35
    126c:	60 e0       	ldi	r22, 0x00	; 0
    126e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1272:	f7 01       	movw	r30, r14
    1274:	80 87       	std	Z+8, r24	; 0x08
    1276:	8e e1       	ldi	r24, 0x1E	; 30
    1278:	93 e2       	ldi	r25, 0x23	; 35
    127a:	60 e0       	ldi	r22, 0x00	; 0
    127c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1280:	f7 01       	movw	r30, r14
    1282:	81 87       	std	Z+9, r24	; 0x09
    1284:	8e e1       	ldi	r24, 0x1E	; 30
    1286:	93 e2       	ldi	r25, 0x23	; 35
    1288:	60 e0       	ldi	r22, 0x00	; 0
    128a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    128e:	f7 01       	movw	r30, r14
    1290:	82 87       	std	Z+10, r24	; 0x0a
    1292:	8e e1       	ldi	r24, 0x1E	; 30
    1294:	93 e2       	ldi	r25, 0x23	; 35
    1296:	60 e0       	ldi	r22, 0x00	; 0
    1298:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    129c:	f7 01       	movw	r30, r14
    129e:	83 87       	std	Z+11, r24	; 0x0b
    12a0:	8e e1       	ldi	r24, 0x1E	; 30
    12a2:	93 e2       	ldi	r25, 0x23	; 35
    12a4:	60 e0       	ldi	r22, 0x00	; 0
    12a6:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    12aa:	f7 01       	movw	r30, r14
    12ac:	84 87       	std	Z+12, r24	; 0x0c
    12ae:	8e e1       	ldi	r24, 0x1E	; 30
    12b0:	93 e2       	ldi	r25, 0x23	; 35
    12b2:	60 e0       	ldi	r22, 0x00	; 0
    12b4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    12b8:	f7 01       	movw	r30, r14
    12ba:	85 87       	std	Z+13, r24	; 0x0d

	if ( strcmp(pEntry->sFileName, FileName) != 0 )		// No match
    12bc:	c7 01       	movw	r24, r14
    12be:	02 96       	adiw	r24, 0x02	; 2
    12c0:	b2 01       	movw	r22, r4
    12c2:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    12c6:	00 97       	sbiw	r24, 0x00	; 0
    12c8:	01 f1       	breq	.+64     	; 0x130a <FS_ReadEntry_FileMatch+0x198>
	{
		CS_UP;
    12ca:	f8 01       	movw	r30, r16
    12cc:	95 82       	std	Z+5, r9	; 0x05
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
    12ce:	f3 01       	movw	r30, r6
    12d0:	80 81       	ld	r24, Z
    12d2:	91 81       	ldd	r25, Z+1	; 0x01
    12d4:	a2 81       	ldd	r26, Z+2	; 0x02
    12d6:	b3 81       	ldd	r27, Z+3	; 0x03
    12d8:	80 5b       	subi	r24, 0xB0	; 176
    12da:	9f 4f       	sbci	r25, 0xFF	; 255
    12dc:	af 4f       	sbci	r26, 0xFF	; 255
    12de:	bf 4f       	sbci	r27, 0xFF	; 255
    12e0:	80 83       	st	Z, r24
    12e2:	91 83       	std	Z+1, r25	; 0x01
    12e4:	a2 83       	std	Z+2, r26	; 0x02
    12e6:	b3 83       	std	Z+3, r27	; 0x03
		return 2;
    12e8:	82 e0       	ldi	r24, 0x02	; 2

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;

	return 1;	// Success
}
    12ea:	df 91       	pop	r29
    12ec:	cf 91       	pop	r28
    12ee:	1f 91       	pop	r17
    12f0:	0f 91       	pop	r16
    12f2:	ff 90       	pop	r15
    12f4:	ef 90       	pop	r14
    12f6:	df 90       	pop	r13
    12f8:	cf 90       	pop	r12
    12fa:	bf 90       	pop	r11
    12fc:	af 90       	pop	r10
    12fe:	9f 90       	pop	r9
    1300:	7f 90       	pop	r7
    1302:	6f 90       	pop	r6
    1304:	5f 90       	pop	r5
    1306:	4f 90       	pop	r4
    1308:	08 95       	ret
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    130a:	aa 20       	and	r10, r10
    130c:	e1 f0       	breq	.+56     	; 0x1346 <FS_ReadEntry_FileMatch+0x1d4>


//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - Only if filename matches
// Returns success (1) or fail (0) of no match (2)
uint8_t FS_ReadEntry_FileMatch ( uint32_t *pAddress, FileEntry_ST* pEntry, char* FileName )
    130e:	87 01       	movw	r16, r14
    1310:	02 5f       	subi	r16, 0xF2	; 242
    1312:	1f 4f       	sbci	r17, 0xFF	; 255
    1314:	99 24       	eor	r9, r9

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1316:	8e e1       	ldi	r24, 0x1E	; 30
    1318:	93 e2       	ldi	r25, 0x23	; 35
    131a:	60 e0       	ldi	r22, 0x00	; 0
    131c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1320:	48 2e       	mov	r4, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1322:	8e e1       	ldi	r24, 0x1E	; 30
    1324:	93 e2       	ldi	r25, 0x23	; 35
    1326:	60 e0       	ldi	r22, 0x00	; 0
    1328:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
    132c:	80 e0       	ldi	r24, 0x00	; 0
    132e:	ec 01       	movw	r28, r24

	if (w==0)
	{
		//msb = spi_transfer ( 0 );
		//lsb = spi_transfer ( 0 );
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1330:	84 2d       	mov	r24, r4
    1332:	90 e0       	ldi	r25, 0x00	; 0
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = lsb | (msb<<8);
    1334:	8c 2b       	or	r24, r28
    1336:	9d 2b       	or	r25, r29
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
    1338:	f8 01       	movw	r30, r16
    133a:	81 93       	st	Z+, r24
    133c:	91 93       	st	Z+, r25
    133e:	8f 01       	movw	r16, r30
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1340:	93 94       	inc	r9
    1342:	9a 14       	cp	r9, r10
    1344:	40 f3       	brcs	.-48     	; 0x1316 <FS_ReadEntry_FileMatch+0x1a4>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->Reserved1 = SPI_MasterTransceiveByte(&spiMasterD, 0); 
    1346:	8e e1       	ldi	r24, 0x1E	; 30
    1348:	93 e2       	ldi	r25, 0x23	; 35
    134a:	60 e0       	ldi	r22, 0x00	; 0
    134c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1350:	f7 01       	movw	r30, r14
    1352:	e2 5b       	subi	r30, 0xB2	; 178
    1354:	ff 4f       	sbci	r31, 0xFF	; 255
    1356:	80 83       	st	Z, r24
	pEntry->Reserved2 = SPI_MasterTransceiveByte(&spiMasterD, 0); 
    1358:	8e e1       	ldi	r24, 0x1E	; 30
    135a:	93 e2       	ldi	r25, 0x23	; 35
    135c:	60 e0       	ldi	r22, 0x00	; 0
    135e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1362:	f7 01       	movw	r30, r14
    1364:	e1 5b       	subi	r30, 0xB1	; 177
    1366:	ff 4f       	sbci	r31, 0xFF	; 255
    1368:	80 83       	st	Z, r24

	CS_UP;
    136a:	80 e1       	ldi	r24, 0x10	; 16
    136c:	e0 e6       	ldi	r30, 0x60	; 96
    136e:	f6 e0       	ldi	r31, 0x06	; 6
    1370:	85 83       	std	Z+5, r24	; 0x05

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;
    1372:	f3 01       	movw	r30, r6
    1374:	80 81       	ld	r24, Z
    1376:	91 81       	ldd	r25, Z+1	; 0x01
    1378:	a2 81       	ldd	r26, Z+2	; 0x02
    137a:	b3 81       	ldd	r27, Z+3	; 0x03
    137c:	80 5b       	subi	r24, 0xB0	; 176
    137e:	9f 4f       	sbci	r25, 0xFF	; 255
    1380:	af 4f       	sbci	r26, 0xFF	; 255
    1382:	bf 4f       	sbci	r27, 0xFF	; 255
    1384:	80 83       	st	Z, r24
    1386:	91 83       	std	Z+1, r25	; 0x01
    1388:	a2 83       	std	Z+2, r26	; 0x02
    138a:	b3 83       	std	Z+3, r27	; 0x03

	return 1;	// Success
    138c:	81 e0       	ldi	r24, 0x01	; 1
    138e:	ad cf       	rjmp	.-166    	; 0x12ea <FS_ReadEntry_FileMatch+0x178>
	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
	{
		// return fail
		CS_UP;
    1390:	f8 01       	movw	r30, r16
    1392:	95 82       	std	Z+5, r9	; 0x05
		return 0;
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	a9 cf       	rjmp	.-174    	; 0x12ea <FS_ReadEntry_FileMatch+0x178>

00001398 <FS_ReadFileContents>:
}

//__________________________________________________________________________________________________
// Reads out the contents of a file. Finds the file by its name
uint8_t FS_ReadFileContents( char* FileName )
{
    1398:	4f 92       	push	r4
    139a:	5f 92       	push	r5
    139c:	7f 92       	push	r7
    139e:	8f 92       	push	r8
    13a0:	9f 92       	push	r9
    13a2:	af 92       	push	r10
    13a4:	bf 92       	push	r11
    13a6:	cf 92       	push	r12
    13a8:	df 92       	push	r13
    13aa:	ef 92       	push	r14
    13ac:	ff 92       	push	r15
    13ae:	0f 93       	push	r16
    13b0:	1f 93       	push	r17
    13b2:	df 93       	push	r29
    13b4:	cf 93       	push	r28
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
    13ba:	c4 55       	subi	r28, 0x54	; 84
    13bc:	d0 40       	sbci	r29, 0x00	; 0
    13be:	cd bf       	out	0x3d, r28	; 61
    13c0:	de bf       	out	0x3e, r29	; 62
    13c2:	2c 01       	movw	r4, r24
//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    13c4:	80 e0       	ldi	r24, 0x00	; 0
    13c6:	90 e9       	ldi	r25, 0x90	; 144
    13c8:	af e3       	ldi	r26, 0x3F	; 63
    13ca:	b0 e0       	ldi	r27, 0x00	; 0
    13cc:	89 83       	std	Y+1, r24	; 0x01
    13ce:	9a 83       	std	Y+2, r25	; 0x02
    13d0:	ab 83       	std	Y+3, r26	; 0x03
    13d2:	bc 83       	std	Y+4, r27	; 0x04
{
	FileEntry_ST			sFileEntry;
	uint16_t				itr = 0;

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
    13d4:	25 e0       	ldi	r18, 0x05	; 5
    13d6:	a2 2e       	mov	r10, r18
    13d8:	b1 2c       	mov	r11, r1
    13da:	ac 0e       	add	r10, r28
    13dc:	bd 1e       	adc	r11, r29
	uint32_t 				Address = ENTRY_TABLE_ADDR;
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    13de:	4e 01       	movw	r8, r28
    13e0:	08 94       	sec
    13e2:	81 1c       	adc	r8, r1
    13e4:	91 1c       	adc	r9, r1
    13e6:	c4 01       	movw	r24, r8
    13e8:	b5 01       	movw	r22, r10
    13ea:	a2 01       	movw	r20, r4
    13ec:	0e 94 b9 08 	call	0x1172	; 0x1172 <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    13f0:	88 23       	and	r24, r24
    13f2:	09 f4       	brne	.+2      	; 0x13f6 <FS_ReadFileContents+0x5e>
    13f4:	02 c1       	rjmp	.+516    	; 0x15fa <FS_ReadFileContents+0x262>
    13f6:	00 e0       	ldi	r16, 0x00	; 0
    13f8:	9e e8       	ldi	r25, 0x8E	; 142
    13fa:	c9 2e       	mov	r12, r25
    13fc:	91 e0       	ldi	r25, 0x01	; 1
    13fe:	d9 2e       	mov	r13, r25
    1400:	08 c0       	rjmp	.+16     	; 0x1412 <FS_ReadFileContents+0x7a>

			printf_P ( PSTR("\r\n\r\n") );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1402:	c4 01       	movw	r24, r8
    1404:	b5 01       	movw	r22, r10
    1406:	a2 01       	movw	r20, r4
    1408:	0e 94 b9 08 	call	0x1172	; 0x1172 <FS_ReadEntry_FileMatch>
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    140c:	88 23       	and	r24, r24
    140e:	09 f4       	brne	.+2      	; 0x1412 <FS_ReadFileContents+0x7a>
    1410:	63 c0       	rjmp	.+198    	; 0x14d8 <FS_ReadFileContents+0x140>
	{
		if ( iSucc == 1 )	// Success
    1412:	81 30       	cpi	r24, 0x01	; 1
    1414:	b1 f7       	brne	.-20     	; 0x1402 <FS_ReadFileContents+0x6a>
		{
			printf_P(PSTR("Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n"),
    1416:	8d b7       	in	r24, 0x3d	; 61
    1418:	9e b7       	in	r25, 0x3e	; 62
    141a:	08 97       	sbiw	r24, 0x08	; 8
    141c:	8d bf       	out	0x3d, r24	; 61
    141e:	9e bf       	out	0x3e, r25	; 62
    1420:	ed b7       	in	r30, 0x3d	; 61
    1422:	fe b7       	in	r31, 0x3e	; 62
    1424:	31 96       	adiw	r30, 0x01	; 1
    1426:	89 e9       	ldi	r24, 0x99	; 153
    1428:	91 e0       	ldi	r25, 0x01	; 1
    142a:	ad b7       	in	r26, 0x3d	; 61
    142c:	be b7       	in	r27, 0x3e	; 62
    142e:	11 96       	adiw	r26, 0x01	; 1
    1430:	8d 93       	st	X+, r24
    1432:	9c 93       	st	X, r25
    1434:	12 97       	sbiw	r26, 0x02	; 2
    1436:	a7 e0       	ldi	r26, 0x07	; 7
    1438:	b0 e0       	ldi	r27, 0x00	; 0
    143a:	ac 0f       	add	r26, r28
    143c:	bd 1f       	adc	r27, r29
    143e:	a2 83       	std	Z+2, r26	; 0x02
    1440:	b3 83       	std	Z+3, r27	; 0x03
    1442:	64 96       	adiw	r28, 0x14	; 20
    1444:	8f ad       	ldd	r24, Y+63	; 0x3f
    1446:	64 97       	sbiw	r28, 0x14	; 20
    1448:	84 83       	std	Z+4, r24	; 0x04
    144a:	15 82       	std	Z+5, r1	; 0x05
    144c:	8d 81       	ldd	r24, Y+5	; 0x05
    144e:	9e 81       	ldd	r25, Y+6	; 0x06
    1450:	86 83       	std	Z+6, r24	; 0x06
    1452:	97 83       	std	Z+7, r25	; 0x07
    1454:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );
    1458:	ed b7       	in	r30, 0x3d	; 61
    145a:	fe b7       	in	r31, 0x3e	; 62
    145c:	36 96       	adiw	r30, 0x06	; 6
    145e:	ed bf       	out	0x3d, r30	; 61
    1460:	fe bf       	out	0x3e, r31	; 62
    1462:	82 e9       	ldi	r24, 0x92	; 146
    1464:	91 e0       	ldi	r25, 0x01	; 1
    1466:	81 83       	std	Z+1, r24	; 0x01
    1468:	92 83       	std	Z+2, r25	; 0x02
    146a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    146e:	0f 90       	pop	r0
    1470:	0f 90       	pop	r0
    1472:	8d 81       	ldd	r24, Y+5	; 0x05
    1474:	9e 81       	ldd	r25, Y+6	; 0x06
    1476:	00 97       	sbiw	r24, 0x00	; 0
    1478:	01 f1       	breq	.+64     	; 0x14ba <FS_ReadFileContents+0x122>
    147a:	83 e1       	ldi	r24, 0x13	; 19
    147c:	e8 2e       	mov	r14, r24
    147e:	f1 2c       	mov	r15, r1
    1480:	ec 0e       	add	r14, r28
    1482:	fd 1e       	adc	r15, r29
    1484:	00 e0       	ldi	r16, 0x00	; 0
    1486:	10 e0       	ldi	r17, 0x00	; 0
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
    1488:	d7 01       	movw	r26, r14
    148a:	8d 91       	ld	r24, X+
    148c:	9d 91       	ld	r25, X+
    148e:	7d 01       	movw	r14, r26
    1490:	00 d0       	rcall	.+0      	; 0x1492 <FS_ReadFileContents+0xfa>
    1492:	00 d0       	rcall	.+0      	; 0x1494 <FS_ReadFileContents+0xfc>
    1494:	ed b7       	in	r30, 0x3d	; 61
    1496:	fe b7       	in	r31, 0x3e	; 62
    1498:	c1 82       	std	Z+1, r12	; 0x01
    149a:	d2 82       	std	Z+2, r13	; 0x02
    149c:	83 83       	std	Z+3, r24	; 0x03
    149e:	94 83       	std	Z+4, r25	; 0x04
    14a0:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    14a4:	0f 5f       	subi	r16, 0xFF	; 255
    14a6:	1f 4f       	sbci	r17, 0xFF	; 255
    14a8:	0f 90       	pop	r0
    14aa:	0f 90       	pop	r0
    14ac:	0f 90       	pop	r0
    14ae:	0f 90       	pop	r0
    14b0:	8d 81       	ldd	r24, Y+5	; 0x05
    14b2:	9e 81       	ldd	r25, Y+6	; 0x06
    14b4:	08 17       	cp	r16, r24
    14b6:	19 07       	cpc	r17, r25
    14b8:	38 f3       	brcs	.-50     	; 0x1488 <FS_ReadFileContents+0xf0>
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
			}

			printf_P ( PSTR("\r\n\r\n") );
    14ba:	00 d0       	rcall	.+0      	; 0x14bc <FS_ReadFileContents+0x124>
    14bc:	e9 e8       	ldi	r30, 0x89	; 137
    14be:	f1 e0       	ldi	r31, 0x01	; 1
    14c0:	ad b7       	in	r26, 0x3d	; 61
    14c2:	be b7       	in	r27, 0x3e	; 62
    14c4:	11 96       	adiw	r26, 0x01	; 1
    14c6:	ed 93       	st	X+, r30
    14c8:	fc 93       	st	X, r31
    14ca:	12 97       	sbiw	r26, 0x02	; 2
    14cc:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    14d0:	0f 90       	pop	r0
    14d2:	0f 90       	pop	r0
			bFound = 1;
    14d4:	01 e0       	ldi	r16, 0x01	; 1
    14d6:	95 cf       	rjmp	.-214    	; 0x1402 <FS_ReadFileContents+0x6a>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    14d8:	00 23       	and	r16, r16
    14da:	09 f4       	brne	.+2      	; 0x14de <FS_ReadFileContents+0x146>
    14dc:	8e c0       	rjmp	.+284    	; 0x15fa <FS_ReadFileContents+0x262>

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    14de:	8d 81       	ldd	r24, Y+5	; 0x05
    14e0:	9e 81       	ldd	r25, Y+6	; 0x06
    14e2:	00 97       	sbiw	r24, 0x00	; 0
    14e4:	09 f4       	brne	.+2      	; 0x14e8 <FS_ReadFileContents+0x150>
    14e6:	74 c0       	rjmp	.+232    	; 0x15d0 <FS_ReadFileContents+0x238>
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
    14e8:	03 e1       	ldi	r16, 0x13	; 19
    14ea:	a0 2e       	mov	r10, r16
    14ec:	b1 2c       	mov	r11, r1
    14ee:	ac 0e       	add	r10, r28
    14f0:	bd 1e       	adc	r11, r29

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    14f2:	cc 24       	eor	r12, r12
    14f4:	dd 24       	eor	r13, r13
    14f6:	12 e0       	ldi	r17, 0x02	; 2
    14f8:	41 2e       	mov	r4, r17
    14fa:	12 e0       	ldi	r17, 0x02	; 2
    14fc:	51 2e       	mov	r5, r17
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    14fe:	b0 e6       	ldi	r27, 0x60	; 96
    1500:	8b 2e       	mov	r8, r27
    1502:	b6 e0       	ldi	r27, 0x06	; 6
    1504:	9b 2e       	mov	r9, r27
    1506:	a0 e1       	ldi	r26, 0x10	; 16
    1508:	7a 2e       	mov	r7, r26
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
		{
			printf_P( PSTR("\r\nFrame #%d Block #%d:\r\n"), itr, sFileEntry.iBlockList[itr]);
    150a:	00 d0       	rcall	.+0      	; 0x150c <FS_ReadFileContents+0x174>
    150c:	00 d0       	rcall	.+0      	; 0x150e <FS_ReadFileContents+0x176>
    150e:	00 d0       	rcall	.+0      	; 0x1510 <FS_ReadFileContents+0x178>
    1510:	ed b7       	in	r30, 0x3d	; 61
    1512:	fe b7       	in	r31, 0x3e	; 62
    1514:	31 96       	adiw	r30, 0x01	; 1
    1516:	ad b7       	in	r26, 0x3d	; 61
    1518:	be b7       	in	r27, 0x3e	; 62
    151a:	11 96       	adiw	r26, 0x01	; 1
    151c:	4d 92       	st	X+, r4
    151e:	5c 92       	st	X, r5
    1520:	12 97       	sbiw	r26, 0x02	; 2
    1522:	c2 82       	std	Z+2, r12	; 0x02
    1524:	d3 82       	std	Z+3, r13	; 0x03
    1526:	d5 01       	movw	r26, r10
    1528:	8d 91       	ld	r24, X+
    152a:	9c 91       	ld	r25, X
    152c:	84 83       	std	Z+4, r24	; 0x04
    152e:	95 83       	std	Z+5, r25	; 0x05
    1530:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>

			FS_ReadFrame (sFileEntry.iBlockList[itr]);
    1534:	f5 01       	movw	r30, r10
    1536:	21 91       	ld	r18, Z+
    1538:	31 91       	ld	r19, Z+
    153a:	5f 01       	movw	r10, r30
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    153c:	d4 01       	movw	r26, r8
    153e:	15 96       	adiw	r26, 0x05	; 5
    1540:	7c 92       	st	X, r7
    1542:	15 97       	sbiw	r26, 0x05	; 5

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);
    1544:	40 e0       	ldi	r20, 0x00	; 0
    1546:	50 e3       	ldi	r21, 0x30	; 48
    1548:	0e 94 68 23 	call	0x46d0	; 0x46d0 <__umulhisi3>
    154c:	7b 01       	movw	r14, r22
    154e:	8c 01       	movw	r16, r24
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
    1550:	16 96       	adiw	r26, 0x06	; 6
    1552:	7c 92       	st	X, r7
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
    1554:	ed b7       	in	r30, 0x3d	; 61
    1556:	fe b7       	in	r31, 0x3e	; 62
    1558:	36 96       	adiw	r30, 0x06	; 6
    155a:	ed bf       	out	0x3d, r30	; 61
    155c:	fe bf       	out	0x3e, r31	; 62
    155e:	8e e1       	ldi	r24, 0x1E	; 30
    1560:	93 e2       	ldi	r25, 0x23	; 35
    1562:	63 e0       	ldi	r22, 0x03	; 3
    1564:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
    1568:	98 01       	movw	r18, r16
    156a:	44 27       	eor	r20, r20
    156c:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
    156e:	8e e1       	ldi	r24, 0x1E	; 30
    1570:	93 e2       	ldi	r25, 0x23	; 35
    1572:	62 2f       	mov	r22, r18
    1574:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1578:	ef 2c       	mov	r14, r15
    157a:	f0 2e       	mov	r15, r16
    157c:	01 2f       	mov	r16, r17
    157e:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
    1580:	8e e1       	ldi	r24, 0x1E	; 30
    1582:	93 e2       	ldi	r25, 0x23	; 35
    1584:	6e 2d       	mov	r22, r14
    1586:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
    158a:	8e e1       	ldi	r24, 0x1E	; 30
    158c:	93 e2       	ldi	r25, 0x23	; 35
    158e:	60 e0       	ldi	r22, 0x00	; 0
    1590:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    1594:	00 e8       	ldi	r16, 0x80	; 128
    1596:	15 e2       	ldi	r17, 0x25	; 37

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
    1598:	8e e1       	ldi	r24, 0x1E	; 30
    159a:	93 e2       	ldi	r25, 0x23	; 35
    159c:	60 e0       	ldi	r22, 0x00	; 0
    159e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    15a2:	60 91 27 23 	lds	r22, 0x2327
    15a6:	70 91 28 23 	lds	r23, 0x2328
    15aa:	90 e0       	ldi	r25, 0x00	; 0
    15ac:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    15b0:	01 50       	subi	r16, 0x01	; 1
    15b2:	10 40       	sbci	r17, 0x00	; 0
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
    15b4:	89 f7       	brne	.-30     	; 0x1598 <FS_ReadFileContents+0x200>
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
	}

	CS_UP;
    15b6:	d4 01       	movw	r26, r8
    15b8:	15 96       	adiw	r26, 0x05	; 5
    15ba:	7c 92       	st	X, r7
    15bc:	15 97       	sbiw	r26, 0x05	; 5

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    15be:	08 94       	sec
    15c0:	c1 1c       	adc	r12, r1
    15c2:	d1 1c       	adc	r13, r1
    15c4:	8d 81       	ldd	r24, Y+5	; 0x05
    15c6:	9e 81       	ldd	r25, Y+6	; 0x06
    15c8:	c8 16       	cp	r12, r24
    15ca:	d9 06       	cpc	r13, r25
    15cc:	08 f4       	brcc	.+2      	; 0x15d0 <FS_ReadFileContents+0x238>
    15ce:	9d cf       	rjmp	.-198    	; 0x150a <FS_ReadFileContents+0x172>
	{

	}

	return 1;		// Success
}
    15d0:	81 e0       	ldi	r24, 0x01	; 1
    15d2:	cc 5a       	subi	r28, 0xAC	; 172
    15d4:	df 4f       	sbci	r29, 0xFF	; 255
    15d6:	cd bf       	out	0x3d, r28	; 61
    15d8:	de bf       	out	0x3e, r29	; 62
    15da:	cf 91       	pop	r28
    15dc:	df 91       	pop	r29
    15de:	1f 91       	pop	r17
    15e0:	0f 91       	pop	r16
    15e2:	ff 90       	pop	r15
    15e4:	ef 90       	pop	r14
    15e6:	df 90       	pop	r13
    15e8:	cf 90       	pop	r12
    15ea:	bf 90       	pop	r11
    15ec:	af 90       	pop	r10
    15ee:	9f 90       	pop	r9
    15f0:	8f 90       	pop	r8
    15f2:	7f 90       	pop	r7
    15f4:	5f 90       	pop	r5
    15f6:	4f 90       	pop	r4
    15f8:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
    15fa:	00 d0       	rcall	.+0      	; 0x15fc <FS_ReadFileContents+0x264>
    15fc:	8b e7       	ldi	r24, 0x7B	; 123
    15fe:	91 e0       	ldi	r25, 0x01	; 1
    1600:	ad b7       	in	r26, 0x3d	; 61
    1602:	be b7       	in	r27, 0x3e	; 62
    1604:	11 96       	adiw	r26, 0x01	; 1
    1606:	8d 93       	st	X+, r24
    1608:	9c 93       	st	X, r25
    160a:	12 97       	sbiw	r26, 0x02	; 2
    160c:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1610:	0f 90       	pop	r0
    1612:	0f 90       	pop	r0
    1614:	dd cf       	rjmp	.-70     	; 0x15d0 <FS_ReadFileContents+0x238>

00001616 <FS_ShowFileInformation>:


//__________________________________________________________________________________________________
// File System - Show on uart the file system contents
void FS_ShowFileInformation ( void )
{
    1616:	2f 92       	push	r2
    1618:	3f 92       	push	r3
    161a:	4f 92       	push	r4
    161c:	5f 92       	push	r5
    161e:	7f 92       	push	r7
    1620:	8f 92       	push	r8
    1622:	9f 92       	push	r9
    1624:	af 92       	push	r10
    1626:	bf 92       	push	r11
    1628:	cf 92       	push	r12
    162a:	df 92       	push	r13
    162c:	ef 92       	push	r14
    162e:	ff 92       	push	r15
    1630:	0f 93       	push	r16
    1632:	1f 93       	push	r17
    1634:	df 93       	push	r29
    1636:	cf 93       	push	r28
    1638:	cd b7       	in	r28, 0x3d	; 61
    163a:	de b7       	in	r29, 0x3e	; 62
    163c:	c4 55       	subi	r28, 0x54	; 84
    163e:	d0 40       	sbci	r29, 0x00	; 0
    1640:	cd bf       	out	0x3d, r28	; 61
    1642:	de bf       	out	0x3e, r29	; 62
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    1644:	e1 2c       	mov	r14, r1
    1646:	f0 e9       	ldi	r31, 0x90	; 144
    1648:	ff 2e       	mov	r15, r31
    164a:	ff e3       	ldi	r31, 0x3F	; 63
    164c:	0f 2f       	mov	r16, r31
    164e:	11 2d       	mov	r17, r1
    1650:	e9 82       	std	Y+1, r14	; 0x01
    1652:	fa 82       	std	Y+2, r15	; 0x02
    1654:	0b 83       	std	Y+3, r16	; 0x03
    1656:	1c 83       	std	Y+4, r17	; 0x04
	FileEntry_ST			sFileEntry;
	uint16_t				iCount = 0;
	uint8_t					blockNum = 0;

	printf_P ( PSTR("\r\n#	Name			Block Num	Duration	Reserved\r\n"));
    1658:	00 d0       	rcall	.+0      	; 0x165a <FS_ShowFileInformation+0x44>
    165a:	89 ed       	ldi	r24, 0xD9	; 217
    165c:	91 e0       	ldi	r25, 0x01	; 1
    165e:	ad b7       	in	r26, 0x3d	; 61
    1660:	be b7       	in	r27, 0x3e	; 62
    1662:	11 96       	adiw	r26, 0x01	; 1
    1664:	8d 93       	st	X+, r24
    1666:	9c 93       	st	X, r25
    1668:	12 97       	sbiw	r26, 0x02	; 2
    166a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>

	Address = ENTRY_TABLE_ADDR;
    166e:	e9 82       	std	Y+1, r14	; 0x01
    1670:	fa 82       	std	Y+2, r15	; 0x02
    1672:	0b 83       	std	Y+3, r16	; 0x03
    1674:	1c 83       	std	Y+4, r17	; 0x04

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    1676:	0f 90       	pop	r0
    1678:	0f 90       	pop	r0
// File System - Show on uart the file system contents
void FS_ShowFileInformation ( void )
{
	uint32_t 				Address = ENTRY_TABLE_ADDR;
	FileEntry_ST			sFileEntry;
	uint16_t				iCount = 0;
    167a:	cc 24       	eor	r12, r12
    167c:	dd 24       	eor	r13, r13
    167e:	8e 01       	movw	r16, r28
    1680:	0f 5f       	subi	r16, 0xFF	; 255
    1682:	1f 4f       	sbci	r17, 0xFF	; 255
    1684:	e5 e0       	ldi	r30, 0x05	; 5
    1686:	ae 2e       	mov	r10, r30
    1688:	b1 2c       	mov	r11, r1
    168a:	ac 0e       	add	r10, r28
    168c:	bd 1e       	adc	r11, r29
	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
	{
		iCount ++;
		printf_P(PSTR("%d	%s		%d		%d		%d\r\n"), 	iCount,
    168e:	75 ec       	ldi	r23, 0xC5	; 197
    1690:	87 2e       	mov	r8, r23
    1692:	71 e0       	ldi	r23, 0x01	; 1
    1694:	97 2e       	mov	r9, r23
    1696:	67 e0       	ldi	r22, 0x07	; 7
    1698:	46 2e       	mov	r4, r22
    169a:	51 2c       	mov	r5, r1
    169c:	4c 0e       	add	r4, r28
    169e:	5d 1e       	adc	r5, r29
															sFileEntry.sFileName,
															sFileEntry.iBlockList[0],
															sFileEntry.Reserved1,
    16a0:	53 e5       	ldi	r21, 0x53	; 83
    16a2:	25 2e       	mov	r2, r21
    16a4:	31 2c       	mov	r3, r1
    16a6:	2c 0e       	add	r2, r28
    16a8:	3d 1e       	adc	r3, r29
    16aa:	46 eb       	ldi	r20, 0xB6	; 182
    16ac:	e4 2e       	mov	r14, r20
    16ae:	41 e0       	ldi	r20, 0x01	; 1
    16b0:	f4 2e       	mov	r15, r20

	printf_P ( PSTR("\r\n#	Name			Block Num	Duration	Reserved\r\n"));

	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    16b2:	c8 01       	movw	r24, r16
    16b4:	b5 01       	movw	r22, r10
    16b6:	0e 94 49 07 	call	0xe92	; 0xe92 <FS_ReadEntry>
    16ba:	88 23       	and	r24, r24
    16bc:	09 f4       	brne	.+2      	; 0x16c0 <FS_ShowFileInformation+0xaa>
    16be:	7b c0       	rjmp	.+246    	; 0x17b6 <FS_ShowFileInformation+0x1a0>
	{
		iCount ++;
    16c0:	08 94       	sec
    16c2:	c1 1c       	adc	r12, r1
    16c4:	d1 1c       	adc	r13, r1
		printf_P(PSTR("%d	%s		%d		%d		%d\r\n"), 	iCount,
    16c6:	ed b7       	in	r30, 0x3d	; 61
    16c8:	fe b7       	in	r31, 0x3e	; 62
    16ca:	3c 97       	sbiw	r30, 0x0c	; 12
    16cc:	ed bf       	out	0x3d, r30	; 61
    16ce:	fe bf       	out	0x3e, r31	; 62
    16d0:	31 96       	adiw	r30, 0x01	; 1
    16d2:	ad b7       	in	r26, 0x3d	; 61
    16d4:	be b7       	in	r27, 0x3e	; 62
    16d6:	11 96       	adiw	r26, 0x01	; 1
    16d8:	8d 92       	st	X+, r8
    16da:	9c 92       	st	X, r9
    16dc:	12 97       	sbiw	r26, 0x02	; 2
    16de:	c2 82       	std	Z+2, r12	; 0x02
    16e0:	d3 82       	std	Z+3, r13	; 0x03
    16e2:	44 82       	std	Z+4, r4	; 0x04
    16e4:	55 82       	std	Z+5, r5	; 0x05
    16e6:	8b 89       	ldd	r24, Y+19	; 0x13
    16e8:	9c 89       	ldd	r25, Y+20	; 0x14
    16ea:	86 83       	std	Z+6, r24	; 0x06
    16ec:	97 83       	std	Z+7, r25	; 0x07
    16ee:	d1 01       	movw	r26, r2
    16f0:	8c 91       	ld	r24, X
    16f2:	80 87       	std	Z+8, r24	; 0x08
    16f4:	11 86       	std	Z+9, r1	; 0x09
    16f6:	65 96       	adiw	r28, 0x15	; 21
    16f8:	8f ad       	ldd	r24, Y+63	; 0x3f
    16fa:	65 97       	sbiw	r28, 0x15	; 21
    16fc:	82 87       	std	Z+10, r24	; 0x0a
    16fe:	13 86       	std	Z+11, r1	; 0x0b
    1700:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
															sFileEntry.iBlockList[0],
															sFileEntry.Reserved1,
															sFileEntry.Reserved2 );


		if (sFileEntry.iNumFrames>1)
    1704:	ed b7       	in	r30, 0x3d	; 61
    1706:	fe b7       	in	r31, 0x3e	; 62
    1708:	3c 96       	adiw	r30, 0x0c	; 12
    170a:	ed bf       	out	0x3d, r30	; 61
    170c:	fe bf       	out	0x3e, r31	; 62
    170e:	8d 81       	ldd	r24, Y+5	; 0x05
    1710:	9e 81       	ldd	r25, Y+6	; 0x06
    1712:	82 30       	cpi	r24, 0x02	; 2
    1714:	91 05       	cpc	r25, r1
    1716:	08 f4       	brcc	.+2      	; 0x171a <FS_ShowFileInformation+0x104>
    1718:	43 c0       	rjmp	.+134    	; 0x17a0 <FS_ShowFileInformation+0x18a>
		{		
			printf_P ( PSTR("Blocks:\r\n"));
    171a:	00 d0       	rcall	.+0      	; 0x171c <FS_ShowFileInformation+0x106>
    171c:	eb eb       	ldi	r30, 0xBB	; 187
    171e:	f1 e0       	ldi	r31, 0x01	; 1
    1720:	ad b7       	in	r26, 0x3d	; 61
    1722:	be b7       	in	r27, 0x3e	; 62
    1724:	11 96       	adiw	r26, 0x01	; 1
    1726:	ed 93       	st	X+, r30
    1728:	fc 93       	st	X, r31
    172a:	12 97       	sbiw	r26, 0x02	; 2
    172c:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
			for (blockNum = 0; blockNum < sFileEntry.iNumFrames; blockNum++ )
    1730:	0f 90       	pop	r0
    1732:	0f 90       	pop	r0
    1734:	8d 81       	ldd	r24, Y+5	; 0x05
    1736:	9e 81       	ldd	r25, Y+6	; 0x06
    1738:	00 97       	sbiw	r24, 0x00	; 0
    173a:	29 f1       	breq	.+74     	; 0x1786 <FS_ShowFileInformation+0x170>
    173c:	77 24       	eor	r7, r7
    173e:	80 e0       	ldi	r24, 0x00	; 0
    1740:	90 e0       	ldi	r25, 0x00	; 0
			{
				printf_P( PSTR("%d, "), sFileEntry.iBlockList[blockNum] );
    1742:	00 d0       	rcall	.+0      	; 0x1744 <FS_ShowFileInformation+0x12e>
    1744:	00 d0       	rcall	.+0      	; 0x1746 <FS_ShowFileInformation+0x130>
    1746:	ad b7       	in	r26, 0x3d	; 61
    1748:	be b7       	in	r27, 0x3e	; 62
    174a:	11 96       	adiw	r26, 0x01	; 1
    174c:	ed 92       	st	X+, r14
    174e:	fc 92       	st	X, r15
    1750:	12 97       	sbiw	r26, 0x02	; 2
    1752:	07 96       	adiw	r24, 0x07	; 7
    1754:	88 0f       	add	r24, r24
    1756:	99 1f       	adc	r25, r25
    1758:	80 0f       	add	r24, r16
    175a:	91 1f       	adc	r25, r17
    175c:	fc 01       	movw	r30, r24
    175e:	84 81       	ldd	r24, Z+4	; 0x04
    1760:	95 81       	ldd	r25, Z+5	; 0x05
    1762:	13 96       	adiw	r26, 0x03	; 3
    1764:	8d 93       	st	X+, r24
    1766:	9c 93       	st	X, r25
    1768:	14 97       	sbiw	r26, 0x04	; 4
    176a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>


		if (sFileEntry.iNumFrames>1)
		{		
			printf_P ( PSTR("Blocks:\r\n"));
			for (blockNum = 0; blockNum < sFileEntry.iNumFrames; blockNum++ )
    176e:	73 94       	inc	r7
    1770:	87 2d       	mov	r24, r7
    1772:	90 e0       	ldi	r25, 0x00	; 0
    1774:	0f 90       	pop	r0
    1776:	0f 90       	pop	r0
    1778:	0f 90       	pop	r0
    177a:	0f 90       	pop	r0
    177c:	2d 81       	ldd	r18, Y+5	; 0x05
    177e:	3e 81       	ldd	r19, Y+6	; 0x06
    1780:	82 17       	cp	r24, r18
    1782:	93 07       	cpc	r25, r19
    1784:	f0 f2       	brcs	.-68     	; 0x1742 <FS_ShowFileInformation+0x12c>
			{
				printf_P( PSTR("%d, "), sFileEntry.iBlockList[blockNum] );
			}
			printf_P ( PSTR("\r\n"));
    1786:	00 d0       	rcall	.+0      	; 0x1788 <FS_ShowFileInformation+0x172>
    1788:	e3 eb       	ldi	r30, 0xB3	; 179
    178a:	f1 e0       	ldi	r31, 0x01	; 1
    178c:	ad b7       	in	r26, 0x3d	; 61
    178e:	be b7       	in	r27, 0x3e	; 62
    1790:	11 96       	adiw	r26, 0x01	; 1
    1792:	ed 93       	st	X+, r30
    1794:	fc 93       	st	X, r31
    1796:	12 97       	sbiw	r26, 0x02	; 2
    1798:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    179c:	0f 90       	pop	r0
    179e:	0f 90       	pop	r0
		}

		iNumOfFiles = iCount;
    17a0:	c0 92 04 20 	sts	0x2004, r12
    17a4:	d0 92 05 20 	sts	0x2005, r13

	printf_P ( PSTR("\r\n#	Name			Block Num	Duration	Reserved\r\n"));

	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    17a8:	c8 01       	movw	r24, r16
    17aa:	b5 01       	movw	r22, r10
    17ac:	0e 94 49 07 	call	0xe92	; 0xe92 <FS_ReadEntry>
    17b0:	88 23       	and	r24, r24
    17b2:	09 f0       	breq	.+2      	; 0x17b6 <FS_ShowFileInformation+0x1a0>
    17b4:	85 cf       	rjmp	.-246    	; 0x16c0 <FS_ShowFileInformation+0xaa>
		}

		iNumOfFiles = iCount;
	}

	if (iCount)
    17b6:	c1 14       	cp	r12, r1
    17b8:	d1 04       	cpc	r13, r1
    17ba:	c9 f4       	brne	.+50     	; 0x17ee <FS_ShowFileInformation+0x1d8>
		bFS_Empty = 0;
	else
		bFS_Empty = 1;
    17bc:	81 e0       	ldi	r24, 0x01	; 1
    17be:	80 93 23 22 	sts	0x2223, r24
}
    17c2:	cc 5a       	subi	r28, 0xAC	; 172
    17c4:	df 4f       	sbci	r29, 0xFF	; 255
    17c6:	cd bf       	out	0x3d, r28	; 61
    17c8:	de bf       	out	0x3e, r29	; 62
    17ca:	cf 91       	pop	r28
    17cc:	df 91       	pop	r29
    17ce:	1f 91       	pop	r17
    17d0:	0f 91       	pop	r16
    17d2:	ff 90       	pop	r15
    17d4:	ef 90       	pop	r14
    17d6:	df 90       	pop	r13
    17d8:	cf 90       	pop	r12
    17da:	bf 90       	pop	r11
    17dc:	af 90       	pop	r10
    17de:	9f 90       	pop	r9
    17e0:	8f 90       	pop	r8
    17e2:	7f 90       	pop	r7
    17e4:	5f 90       	pop	r5
    17e6:	4f 90       	pop	r4
    17e8:	3f 90       	pop	r3
    17ea:	2f 90       	pop	r2
    17ec:	08 95       	ret

		iNumOfFiles = iCount;
	}

	if (iCount)
		bFS_Empty = 0;
    17ee:	10 92 23 22 	sts	0x2223, r1
    17f2:	e7 cf       	rjmp	.-50     	; 0x17c2 <FS_ShowFileInformation+0x1ac>

000017f4 <FS_SearchFile>:

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
    17f4:	2f 92       	push	r2
    17f6:	3f 92       	push	r3
    17f8:	4f 92       	push	r4
    17fa:	5f 92       	push	r5
    17fc:	6f 92       	push	r6
    17fe:	7f 92       	push	r7
    1800:	8f 92       	push	r8
    1802:	9f 92       	push	r9
    1804:	af 92       	push	r10
    1806:	bf 92       	push	r11
    1808:	cf 92       	push	r12
    180a:	df 92       	push	r13
    180c:	ef 92       	push	r14
    180e:	ff 92       	push	r15
    1810:	0f 93       	push	r16
    1812:	1f 93       	push	r17
    1814:	df 93       	push	r29
    1816:	cf 93       	push	r28
    1818:	cd b7       	in	r28, 0x3d	; 61
    181a:	de b7       	in	r29, 0x3e	; 62
    181c:	28 97       	sbiw	r28, 0x08	; 8
    181e:	cd bf       	out	0x3d, r28	; 61
    1820:	de bf       	out	0x3e, r29	; 62
    1822:	3c 01       	movw	r6, r24
    1824:	6b 01       	movw	r12, r22
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    1826:	80 e0       	ldi	r24, 0x00	; 0
    1828:	90 e9       	ldi	r25, 0x90	; 144
    182a:	af e3       	ldi	r26, 0x3F	; 63
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	89 83       	std	Y+1, r24	; 0x01
    1830:	9a 83       	std	Y+2, r25	; 0x02
    1832:	ab 83       	std	Y+3, r26	; 0x03
    1834:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1836:	4e 01       	movw	r8, r28
    1838:	08 94       	sec
    183a:	81 1c       	adc	r8, r1
    183c:	91 1c       	adc	r9, r1
    183e:	c4 01       	movw	r24, r8
    1840:	a3 01       	movw	r20, r6
    1842:	0e 94 b9 08 	call	0x1172	; 0x1172 <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    1846:	88 23       	and	r24, r24
    1848:	09 f4       	brne	.+2      	; 0x184c <FS_SearchFile+0x58>
    184a:	a0 c0       	rjmp	.+320    	; 0x198c <FS_SearchFile+0x198>
    184c:	00 e0       	ldi	r16, 0x00	; 0
	{
		if ( iSucc == 1 )	// Success
		{
			printf_P(PSTR("Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n"),
    184e:	19 e9       	ldi	r17, 0x99	; 153
    1850:	41 2e       	mov	r4, r17
    1852:	11 e0       	ldi	r17, 0x01	; 1
    1854:	51 2e       	mov	r5, r17
    1856:	b2 e0       	ldi	r27, 0x02	; 2
    1858:	2b 2e       	mov	r2, r27
    185a:	31 2c       	mov	r3, r1
    185c:	2c 0c       	add	r2, r12
    185e:	3d 1c       	adc	r3, r13
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
    1860:	96 01       	movw	r18, r12
    1862:	22 5b       	subi	r18, 0xB2	; 178
    1864:	3f 4f       	sbci	r19, 0xFF	; 255
    1866:	2d 83       	std	Y+5, r18	; 0x05
    1868:	3e 83       	std	Y+6, r19	; 0x06
}

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
    186a:	d6 01       	movw	r26, r12
    186c:	1e 96       	adiw	r26, 0x0e	; 14
    186e:	af 83       	std	Y+7, r26	; 0x07
    1870:	b8 87       	std	Y+8, r27	; 0x08
    1872:	ae e8       	ldi	r26, 0x8E	; 142
    1874:	aa 2e       	mov	r10, r26
    1876:	a1 e0       	ldi	r26, 0x01	; 1
    1878:	ba 2e       	mov	r11, r26
    187a:	08 c0       	rjmp	.+16     	; 0x188c <FS_SearchFile+0x98>

			printf_P ( PSTR("\r\n\r\n") );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    187c:	c4 01       	movw	r24, r8
    187e:	b6 01       	movw	r22, r12
    1880:	a3 01       	movw	r20, r6
    1882:	0e 94 b9 08 	call	0x1172	; 0x1172 <FS_ReadEntry_FileMatch>
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1886:	88 23       	and	r24, r24
    1888:	09 f4       	brne	.+2      	; 0x188c <FS_SearchFile+0x98>
    188a:	67 c0       	rjmp	.+206    	; 0x195a <FS_SearchFile+0x166>
	{
		if ( iSucc == 1 )	// Success
    188c:	81 30       	cpi	r24, 0x01	; 1
    188e:	b1 f7       	brne	.-20     	; 0x187c <FS_SearchFile+0x88>
		{
			printf_P(PSTR("Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n"),
    1890:	ed b7       	in	r30, 0x3d	; 61
    1892:	fe b7       	in	r31, 0x3e	; 62
    1894:	38 97       	sbiw	r30, 0x08	; 8
    1896:	ed bf       	out	0x3d, r30	; 61
    1898:	fe bf       	out	0x3e, r31	; 62
    189a:	31 96       	adiw	r30, 0x01	; 1
    189c:	ad b7       	in	r26, 0x3d	; 61
    189e:	be b7       	in	r27, 0x3e	; 62
    18a0:	11 96       	adiw	r26, 0x01	; 1
    18a2:	4d 92       	st	X+, r4
    18a4:	5c 92       	st	X, r5
    18a6:	12 97       	sbiw	r26, 0x02	; 2
    18a8:	22 82       	std	Z+2, r2	; 0x02
    18aa:	33 82       	std	Z+3, r3	; 0x03
    18ac:	ad 81       	ldd	r26, Y+5	; 0x05
    18ae:	be 81       	ldd	r27, Y+6	; 0x06
    18b0:	8c 91       	ld	r24, X
    18b2:	84 83       	std	Z+4, r24	; 0x04
    18b4:	15 82       	std	Z+5, r1	; 0x05
    18b6:	d6 01       	movw	r26, r12
    18b8:	8d 91       	ld	r24, X+
    18ba:	9c 91       	ld	r25, X
    18bc:	86 83       	std	Z+6, r24	; 0x06
    18be:	97 83       	std	Z+7, r25	; 0x07
    18c0:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );
    18c4:	ed b7       	in	r30, 0x3d	; 61
    18c6:	fe b7       	in	r31, 0x3e	; 62
    18c8:	36 96       	adiw	r30, 0x06	; 6
    18ca:	ed bf       	out	0x3d, r30	; 61
    18cc:	fe bf       	out	0x3e, r31	; 62
    18ce:	22 e9       	ldi	r18, 0x92	; 146
    18d0:	31 e0       	ldi	r19, 0x01	; 1
    18d2:	21 83       	std	Z+1, r18	; 0x01
    18d4:	32 83       	std	Z+2, r19	; 0x02
    18d6:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    18da:	0f 90       	pop	r0
    18dc:	0f 90       	pop	r0
    18de:	d6 01       	movw	r26, r12
    18e0:	8d 91       	ld	r24, X+
    18e2:	9c 91       	ld	r25, X
    18e4:	11 97       	sbiw	r26, 0x01	; 1
    18e6:	00 97       	sbiw	r24, 0x00	; 0
    18e8:	11 f1       	breq	.+68     	; 0x192e <FS_SearchFile+0x13a>
}

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
    18ea:	ef 80       	ldd	r14, Y+7	; 0x07
    18ec:	f8 84       	ldd	r15, Y+8	; 0x08
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    18ee:	00 e0       	ldi	r16, 0x00	; 0
    18f0:	10 e0       	ldi	r17, 0x00	; 0
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
    18f2:	f7 01       	movw	r30, r14
    18f4:	81 91       	ld	r24, Z+
    18f6:	91 91       	ld	r25, Z+
    18f8:	7f 01       	movw	r14, r30
    18fa:	00 d0       	rcall	.+0      	; 0x18fc <FS_SearchFile+0x108>
    18fc:	00 d0       	rcall	.+0      	; 0x18fe <FS_SearchFile+0x10a>
    18fe:	ad b7       	in	r26, 0x3d	; 61
    1900:	be b7       	in	r27, 0x3e	; 62
    1902:	11 96       	adiw	r26, 0x01	; 1
    1904:	ad 92       	st	X+, r10
    1906:	bc 92       	st	X, r11
    1908:	12 97       	sbiw	r26, 0x02	; 2
    190a:	13 96       	adiw	r26, 0x03	; 3
    190c:	8d 93       	st	X+, r24
    190e:	9c 93       	st	X, r25
    1910:	14 97       	sbiw	r26, 0x04	; 4
    1912:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    1916:	0f 5f       	subi	r16, 0xFF	; 255
    1918:	1f 4f       	sbci	r17, 0xFF	; 255
    191a:	0f 90       	pop	r0
    191c:	0f 90       	pop	r0
    191e:	0f 90       	pop	r0
    1920:	0f 90       	pop	r0
    1922:	f6 01       	movw	r30, r12
    1924:	80 81       	ld	r24, Z
    1926:	91 81       	ldd	r25, Z+1	; 0x01
    1928:	08 17       	cp	r16, r24
    192a:	19 07       	cpc	r17, r25
    192c:	10 f3       	brcs	.-60     	; 0x18f2 <FS_SearchFile+0xfe>
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
			}

			printf_P ( PSTR("\r\n\r\n") );
    192e:	00 d0       	rcall	.+0      	; 0x1930 <FS_SearchFile+0x13c>
    1930:	e9 e8       	ldi	r30, 0x89	; 137
    1932:	f1 e0       	ldi	r31, 0x01	; 1
    1934:	ad b7       	in	r26, 0x3d	; 61
    1936:	be b7       	in	r27, 0x3e	; 62
    1938:	11 96       	adiw	r26, 0x01	; 1
    193a:	ed 93       	st	X+, r30
    193c:	fc 93       	st	X, r31
    193e:	12 97       	sbiw	r26, 0x02	; 2
    1940:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1944:	0f 90       	pop	r0
    1946:	0f 90       	pop	r0
			bFound = 1;
    1948:	01 e0       	ldi	r16, 0x01	; 1
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    194a:	c4 01       	movw	r24, r8
    194c:	b6 01       	movw	r22, r12
    194e:	a3 01       	movw	r20, r6
    1950:	0e 94 b9 08 	call	0x1172	; 0x1172 <FS_ReadEntry_FileMatch>
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1954:	88 23       	and	r24, r24
    1956:	09 f0       	breq	.+2      	; 0x195a <FS_SearchFile+0x166>
    1958:	99 cf       	rjmp	.-206    	; 0x188c <FS_SearchFile+0x98>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    195a:	00 23       	and	r16, r16
    195c:	b9 f0       	breq	.+46     	; 0x198c <FS_SearchFile+0x198>
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
		return 0;	// Fail
	}

	return 1; 		// Success
    195e:	81 e0       	ldi	r24, 0x01	; 1

}
    1960:	28 96       	adiw	r28, 0x08	; 8
    1962:	cd bf       	out	0x3d, r28	; 61
    1964:	de bf       	out	0x3e, r29	; 62
    1966:	cf 91       	pop	r28
    1968:	df 91       	pop	r29
    196a:	1f 91       	pop	r17
    196c:	0f 91       	pop	r16
    196e:	ff 90       	pop	r15
    1970:	ef 90       	pop	r14
    1972:	df 90       	pop	r13
    1974:	cf 90       	pop	r12
    1976:	bf 90       	pop	r11
    1978:	af 90       	pop	r10
    197a:	9f 90       	pop	r9
    197c:	8f 90       	pop	r8
    197e:	7f 90       	pop	r7
    1980:	6f 90       	pop	r6
    1982:	5f 90       	pop	r5
    1984:	4f 90       	pop	r4
    1986:	3f 90       	pop	r3
    1988:	2f 90       	pop	r2
    198a:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
    198c:	00 d0       	rcall	.+0      	; 0x198e <FS_SearchFile+0x19a>
    198e:	8b e7       	ldi	r24, 0x7B	; 123
    1990:	91 e0       	ldi	r25, 0x01	; 1
    1992:	ad b7       	in	r26, 0x3d	; 61
    1994:	be b7       	in	r27, 0x3e	; 62
    1996:	11 96       	adiw	r26, 0x01	; 1
    1998:	8d 93       	st	X+, r24
    199a:	9c 93       	st	X, r25
    199c:	12 97       	sbiw	r26, 0x02	; 2
    199e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return 0;	// Fail
    19a2:	0f 90       	pop	r0
    19a4:	0f 90       	pop	r0
    19a6:	80 e0       	ldi	r24, 0x00	; 0
    19a8:	db cf       	rjmp	.-74     	; 0x1960 <FS_SearchFile+0x16c>

000019aa <FS_StopReadingFrame>:

//__________________________________________________________________________________________________
// File System - Stop reading from memory
void FS_StopReadingFrame ( void )
{
	CS_UP;
    19aa:	80 e1       	ldi	r24, 0x10	; 16
    19ac:	e0 e6       	ldi	r30, 0x60	; 96
    19ae:	f6 e0       	ldi	r31, 0x06	; 6
    19b0:	85 83       	std	Z+5, r24	; 0x05
}
    19b2:	08 95       	ret

000019b4 <FS_WriteNewEntryTable>:
//__________________________________________________________________________________________________
// File System - Get new entry table
void FS_WriteNewEntryTable ( void )
{

}
    19b4:	08 95       	ret

000019b6 <initialize_hall_sensor>:
#include "AniBike2V7BT_Internal.h"

void (*hall_handler)( void ) = NULL;

void initialize_hall_sensor ( void )
{
    19b6:	ef 92       	push	r14
    19b8:	0f 93       	push	r16
	// Set pin2 to be input
	HALL_SENSOR_PORT.DIRCLR = HALL_SENSOR_PIN;
    19ba:	84 e0       	ldi	r24, 0x04	; 4
    19bc:	e0 e0       	ldi	r30, 0x00	; 0
    19be:	f6 e0       	ldi	r31, 0x06	; 6
    19c0:	82 83       	std	Z+2, r24	; 0x02
	
	// Setup asynchronous interrupt
	PORT_ConfigurePins( &HALL_SENSOR_PORT,
    19c2:	80 e0       	ldi	r24, 0x00	; 0
    19c4:	96 e0       	ldi	r25, 0x06	; 6
    19c6:	64 e0       	ldi	r22, 0x04	; 4
    19c8:	40 e0       	ldi	r20, 0x00	; 0
    19ca:	20 e0       	ldi	r18, 0x00	; 0
    19cc:	08 e1       	ldi	r16, 0x18	; 24
    19ce:	ee 24       	eor	r14, r14
    19d0:	e3 94       	inc	r14
    19d2:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
						false,
						false,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_RISING_gc );
						
	PORT_ConfigureInterrupt0( &HALL_SENSOR_PORT, PORT_INT0LVL_MED_gc, HALL_SENSOR_PIN );		
    19d6:	80 e0       	ldi	r24, 0x00	; 0
    19d8:	96 e0       	ldi	r25, 0x06	; 6
    19da:	62 e0       	ldi	r22, 0x02	; 2
    19dc:	44 e0       	ldi	r20, 0x04	; 4
    19de:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
}
    19e2:	0f 91       	pop	r16
    19e4:	ef 90       	pop	r14
    19e6:	08 95       	ret

000019e8 <set_hall_interrupt_handler>:

void	set_hall_interrupt_handler ( void (*Handler)( void ) )
{
	hall_handler = Handler;
    19e8:	80 93 24 22 	sts	0x2224, r24
    19ec:	90 93 25 22 	sts	0x2225, r25
}
    19f0:	08 95       	ret

000019f2 <__vector_66>:

ISR(PORTA_INT0_vect)
{	
    19f2:	1f 92       	push	r1
    19f4:	0f 92       	push	r0
    19f6:	0f b6       	in	r0, 0x3f	; 63
    19f8:	0f 92       	push	r0
    19fa:	11 24       	eor	r1, r1
    19fc:	2f 93       	push	r18
    19fe:	3f 93       	push	r19
    1a00:	4f 93       	push	r20
    1a02:	5f 93       	push	r21
    1a04:	6f 93       	push	r22
    1a06:	7f 93       	push	r23
    1a08:	8f 93       	push	r24
    1a0a:	9f 93       	push	r25
    1a0c:	af 93       	push	r26
    1a0e:	bf 93       	push	r27
    1a10:	ef 93       	push	r30
    1a12:	ff 93       	push	r31
	if (hall_handler!=NULL)
    1a14:	e0 91 24 22 	lds	r30, 0x2224
    1a18:	f0 91 25 22 	lds	r31, 0x2225
    1a1c:	30 97       	sbiw	r30, 0x00	; 0
    1a1e:	09 f0       	breq	.+2      	; 0x1a22 <__vector_66+0x30>
		hall_handler ( );
    1a20:	09 95       	icall
}
    1a22:	ff 91       	pop	r31
    1a24:	ef 91       	pop	r30
    1a26:	bf 91       	pop	r27
    1a28:	af 91       	pop	r26
    1a2a:	9f 91       	pop	r25
    1a2c:	8f 91       	pop	r24
    1a2e:	7f 91       	pop	r23
    1a30:	6f 91       	pop	r22
    1a32:	5f 91       	pop	r21
    1a34:	4f 91       	pop	r20
    1a36:	3f 91       	pop	r19
    1a38:	2f 91       	pop	r18
    1a3a:	0f 90       	pop	r0
    1a3c:	0f be       	out	0x3f, r0	; 63
    1a3e:	0f 90       	pop	r0
    1a40:	1f 90       	pop	r1
    1a42:	18 95       	reti

00001a44 <initialize_lighting_system>:
volatile uint16_t	g_iGreenCalibrationPeriod = 255;
volatile uint16_t	g_iBlueCalibrationPeriod = 255;


void initialize_lighting_system ( void )
{
    1a44:	cf 92       	push	r12
    1a46:	df 92       	push	r13
    1a48:	ef 92       	push	r14
    1a4a:	ff 92       	push	r15
    1a4c:	0f 93       	push	r16
    1a4e:	1f 93       	push	r17
    1a50:	cf 93       	push	r28
    1a52:	df 93       	push	r29
	// Row MUX control init
	MUX_CONTROL_PORT.DIRSET = MUX_CONTROL_PINS;
    1a54:	80 ef       	ldi	r24, 0xF0	; 240
    1a56:	e0 e0       	ldi	r30, 0x00	; 0
    1a58:	f6 e0       	ldi	r31, 0x06	; 6
    1a5a:	81 83       	std	Z+1, r24	; 0x01
	MUX_DISABLE;
    1a5c:	e5 e0       	ldi	r30, 0x05	; 5
    1a5e:	f6 e0       	ldi	r31, 0x06	; 6
    1a60:	80 e8       	ldi	r24, 0x80	; 128
    1a62:	80 83       	st	Z, r24
	MUX_SET_ROW(0);
    1a64:	80 e7       	ldi	r24, 0x70	; 112
    1a66:	80 93 06 06 	sts	0x0606, r24
    1a6a:	10 82       	st	Z, r1
	
	// Column ports init
	GREEN_PORT.DIRSET = LED_COLUMN_PINS;
    1a6c:	8f e0       	ldi	r24, 0x0F	; 15
    1a6e:	e0 e4       	ldi	r30, 0x40	; 64
    1a70:	f6 e0       	ldi	r31, 0x06	; 6
    1a72:	81 83       	std	Z+1, r24	; 0x01
	RED_PORT.DIRSET = LED_COLUMN_PINS;
    1a74:	e0 e6       	ldi	r30, 0x60	; 96
    1a76:	f6 e0       	ldi	r31, 0x06	; 6
    1a78:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PORT.DIRSET = LED_COLUMN_PINS;
    1a7a:	e0 e8       	ldi	r30, 0x80	; 128
    1a7c:	f6 e0       	ldi	r31, 0x06	; 6
    1a7e:	81 83       	std	Z+1, r24	; 0x01
	
	PORT_ConfigurePins( &RED_PORT,  LED_COLUMN_PINS, 1, 1, PORT_OPC_WIREDANDPULL_gc, PORT_ISC_INPUT_DISABLE_gc );
    1a80:	80 e6       	ldi	r24, 0x60	; 96
    1a82:	96 e0       	ldi	r25, 0x06	; 6
    1a84:	6f e0       	ldi	r22, 0x0F	; 15
    1a86:	41 e0       	ldi	r20, 0x01	; 1
    1a88:	21 e0       	ldi	r18, 0x01	; 1
    1a8a:	08 e3       	ldi	r16, 0x38	; 56
    1a8c:	37 e0       	ldi	r19, 0x07	; 7
    1a8e:	e3 2e       	mov	r14, r19
    1a90:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
	PORT_ConfigurePins( &GREEN_PORT,  LED_COLUMN_PINS, 1, 1, PORT_OPC_WIREDANDPULL_gc, PORT_ISC_INPUT_DISABLE_gc );
    1a94:	80 e4       	ldi	r24, 0x40	; 64
    1a96:	96 e0       	ldi	r25, 0x06	; 6
    1a98:	6f e0       	ldi	r22, 0x0F	; 15
    1a9a:	41 e0       	ldi	r20, 0x01	; 1
    1a9c:	21 e0       	ldi	r18, 0x01	; 1
    1a9e:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
	PORT_ConfigurePins( &BLUE_PORT,  LED_COLUMN_PINS, 1, 1, PORT_OPC_WIREDANDPULL_gc, PORT_ISC_INPUT_DISABLE_gc );
    1aa2:	80 e8       	ldi	r24, 0x80	; 128
    1aa4:	96 e0       	ldi	r25, 0x06	; 6
    1aa6:	6f e0       	ldi	r22, 0x0F	; 15
    1aa8:	41 e0       	ldi	r20, 0x01	; 1
    1aaa:	21 e0       	ldi	r18, 0x01	; 1
    1aac:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
	
	GREEN_PWM_CTRL.CTRLB |= TC0_CCAEN_bm;
    1ab0:	c0 e0       	ldi	r28, 0x00	; 0
    1ab2:	d8 e0       	ldi	r29, 0x08	; 8
    1ab4:	89 81       	ldd	r24, Y+1	; 0x01
    1ab6:	80 61       	ori	r24, 0x10	; 16
    1ab8:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC0_CCBEN_bm;
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	80 62       	ori	r24, 0x20	; 32
    1abe:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC0_CCCEN_bm;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	80 64       	ori	r24, 0x40	; 64
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC0_CCDEN_bm;
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	80 68       	ori	r24, 0x80	; 128
    1aca:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC_WGMODE_SS_gc;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	83 60       	ori	r24, 0x03	; 3
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	
	RED_PWM_CTRL.CTRLB |= TC0_CCAEN_bm;
    1ad2:	00 e0       	ldi	r16, 0x00	; 0
    1ad4:	19 e0       	ldi	r17, 0x09	; 9
    1ad6:	f8 01       	movw	r30, r16
    1ad8:	81 81       	ldd	r24, Z+1	; 0x01
    1ada:	80 61       	ori	r24, 0x10	; 16
    1adc:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC0_CCBEN_bm;
    1ade:	81 81       	ldd	r24, Z+1	; 0x01
    1ae0:	80 62       	ori	r24, 0x20	; 32
    1ae2:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC0_CCCEN_bm;
    1ae4:	81 81       	ldd	r24, Z+1	; 0x01
    1ae6:	80 64       	ori	r24, 0x40	; 64
    1ae8:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC0_CCDEN_bm;
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	80 68       	ori	r24, 0x80	; 128
    1aee:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC_WGMODE_SS_gc;
    1af0:	81 81       	ldd	r24, Z+1	; 0x01
    1af2:	83 60       	ori	r24, 0x03	; 3
    1af4:	81 83       	std	Z+1, r24	; 0x01
	
	BLUE_PWM_CTRL.CTRLB |= TC0_CCAEN_bm;
    1af6:	e1 2c       	mov	r14, r1
    1af8:	8a e0       	ldi	r24, 0x0A	; 10
    1afa:	f8 2e       	mov	r15, r24
    1afc:	f7 01       	movw	r30, r14
    1afe:	81 81       	ldd	r24, Z+1	; 0x01
    1b00:	80 61       	ori	r24, 0x10	; 16
    1b02:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC0_CCBEN_bm;
    1b04:	81 81       	ldd	r24, Z+1	; 0x01
    1b06:	80 62       	ori	r24, 0x20	; 32
    1b08:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC0_CCCEN_bm;
    1b0a:	81 81       	ldd	r24, Z+1	; 0x01
    1b0c:	80 64       	ori	r24, 0x40	; 64
    1b0e:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC0_CCDEN_bm;
    1b10:	81 81       	ldd	r24, Z+1	; 0x01
    1b12:	80 68       	ori	r24, 0x80	; 128
    1b14:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC_WGMODE_SS_gc;
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
    1b18:	83 60       	ori	r24, 0x03	; 3
    1b1a:	81 83       	std	Z+1, r24	; 0x01
	
	TC0_ConfigClockSource(&RED_PWM_CTRL, TC_CLKSEL_DIV1_gc);
    1b1c:	80 e0       	ldi	r24, 0x00	; 0
    1b1e:	99 e0       	ldi	r25, 0x09	; 9
    1b20:	61 e0       	ldi	r22, 0x01	; 1
    1b22:	0e 94 de 22 	call	0x45bc	; 0x45bc <TC0_ConfigClockSource>
	TC0_ConfigClockSource(&GREEN_PWM_CTRL, TC_CLKSEL_DIV1_gc);
    1b26:	80 e0       	ldi	r24, 0x00	; 0
    1b28:	98 e0       	ldi	r25, 0x08	; 8
    1b2a:	61 e0       	ldi	r22, 0x01	; 1
    1b2c:	0e 94 de 22 	call	0x45bc	; 0x45bc <TC0_ConfigClockSource>
	TC0_ConfigClockSource(&BLUE_PWM_CTRL, TC_CLKSEL_DIV1_gc);
    1b30:	80 e0       	ldi	r24, 0x00	; 0
    1b32:	9a e0       	ldi	r25, 0x0A	; 10
    1b34:	61 e0       	ldi	r22, 0x01	; 1
    1b36:	0e 94 de 22 	call	0x45bc	; 0x45bc <TC0_ConfigClockSource>
	BLUE_PWM_CTRL.CNT = 0;
}

void read_period_calibrations ( uint16_t *r, uint16_t *g, uint16_t *b )
{
	*r = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2);
    1b3a:	80 e0       	ldi	r24, 0x00	; 0
    1b3c:	60 e0       	ldi	r22, 0x00	; 0
    1b3e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1b42:	90 e0       	ldi	r25, 0x00	; 0
    1b44:	80 93 06 20 	sts	0x2006, r24
    1b48:	90 93 07 20 	sts	0x2007, r25
	*r |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2+1))<<8;
    1b4c:	c0 90 06 20 	lds	r12, 0x2006
    1b50:	d0 90 07 20 	lds	r13, 0x2007
    1b54:	80 e0       	ldi	r24, 0x00	; 0
    1b56:	61 e0       	ldi	r22, 0x01	; 1
    1b58:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1b5c:	38 2f       	mov	r19, r24
    1b5e:	20 e0       	ldi	r18, 0x00	; 0
    1b60:	c2 2a       	or	r12, r18
    1b62:	d3 2a       	or	r13, r19
    1b64:	c0 92 06 20 	sts	0x2006, r12
    1b68:	d0 92 07 20 	sts	0x2007, r13
	
	*g = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2);
    1b6c:	80 e0       	ldi	r24, 0x00	; 0
    1b6e:	62 e0       	ldi	r22, 0x02	; 2
    1b70:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1b74:	90 e0       	ldi	r25, 0x00	; 0
    1b76:	80 93 08 20 	sts	0x2008, r24
    1b7a:	90 93 09 20 	sts	0x2009, r25
	*g |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2+1))<<8;
    1b7e:	c0 90 08 20 	lds	r12, 0x2008
    1b82:	d0 90 09 20 	lds	r13, 0x2009
    1b86:	80 e0       	ldi	r24, 0x00	; 0
    1b88:	63 e0       	ldi	r22, 0x03	; 3
    1b8a:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1b8e:	38 2f       	mov	r19, r24
    1b90:	20 e0       	ldi	r18, 0x00	; 0
    1b92:	c2 2a       	or	r12, r18
    1b94:	d3 2a       	or	r13, r19
    1b96:	c0 92 08 20 	sts	0x2008, r12
    1b9a:	d0 92 09 20 	sts	0x2009, r13
	
	*b = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2);
    1b9e:	80 e0       	ldi	r24, 0x00	; 0
    1ba0:	64 e0       	ldi	r22, 0x04	; 4
    1ba2:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1ba6:	90 e0       	ldi	r25, 0x00	; 0
    1ba8:	80 93 0a 20 	sts	0x200A, r24
    1bac:	90 93 0b 20 	sts	0x200B, r25
	*b |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2+1))<<8;
    1bb0:	c0 90 0a 20 	lds	r12, 0x200A
    1bb4:	d0 90 0b 20 	lds	r13, 0x200B
    1bb8:	80 e0       	ldi	r24, 0x00	; 0
    1bba:	65 e0       	ldi	r22, 0x05	; 5
    1bbc:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1bc0:	38 2f       	mov	r19, r24
    1bc2:	20 e0       	ldi	r18, 0x00	; 0
    1bc4:	c2 2a       	or	r12, r18
    1bc6:	d3 2a       	or	r13, r19
    1bc8:	c0 92 0a 20 	sts	0x200A, r12
    1bcc:	d0 92 0b 20 	sts	0x200B, r13
	TC0_ConfigClockSource(&GREEN_PWM_CTRL, TC_CLKSEL_DIV1_gc);
	TC0_ConfigClockSource(&BLUE_PWM_CTRL, TC_CLKSEL_DIV1_gc);
	
	read_period_calibrations ( &g_iRedCalibrationPeriod, &g_iGreenCalibrationPeriod, &g_iBlueCalibrationPeriod );
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g_iGreenCalibrationPeriod);
    1bd0:	80 91 08 20 	lds	r24, 0x2008
    1bd4:	90 91 09 20 	lds	r25, 0x2009
    1bd8:	8e a3       	std	Y+38, r24	; 0x26
    1bda:	9f a3       	std	Y+39, r25	; 0x27
	TC_SetPeriod(&RED_PWM_CTRL, g_iRedCalibrationPeriod);
    1bdc:	80 91 06 20 	lds	r24, 0x2006
    1be0:	90 91 07 20 	lds	r25, 0x2007
    1be4:	f8 01       	movw	r30, r16
    1be6:	86 a3       	std	Z+38, r24	; 0x26
    1be8:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetPeriod(&BLUE_PWM_CTRL, g_iBlueCalibrationPeriod);
    1bea:	80 91 0a 20 	lds	r24, 0x200A
    1bee:	90 91 0b 20 	lds	r25, 0x200B
    1bf2:	f7 01       	movw	r30, r14
    1bf4:	86 a3       	std	Z+38, r24	; 0x26
    1bf6:	97 a3       	std	Z+39, r25	; 0x27
	
	RED_PWM_CTRL.CNT = 0;
    1bf8:	f8 01       	movw	r30, r16
    1bfa:	10 a2       	std	Z+32, r1	; 0x20
    1bfc:	11 a2       	std	Z+33, r1	; 0x21
	GREEN_PWM_CTRL.CNT = 0;
    1bfe:	18 a2       	std	Y+32, r1	; 0x20
    1c00:	19 a2       	std	Y+33, r1	; 0x21
	BLUE_PWM_CTRL.CNT = 0;
    1c02:	f7 01       	movw	r30, r14
    1c04:	10 a2       	std	Z+32, r1	; 0x20
    1c06:	11 a2       	std	Z+33, r1	; 0x21
}
    1c08:	df 91       	pop	r29
    1c0a:	cf 91       	pop	r28
    1c0c:	1f 91       	pop	r17
    1c0e:	0f 91       	pop	r16
    1c10:	ff 90       	pop	r15
    1c12:	ef 90       	pop	r14
    1c14:	df 90       	pop	r13
    1c16:	cf 90       	pop	r12
    1c18:	08 95       	ret

00001c1a <read_period_calibrations>:

void read_period_calibrations ( uint16_t *r, uint16_t *g, uint16_t *b )
{
    1c1a:	cf 92       	push	r12
    1c1c:	df 92       	push	r13
    1c1e:	ef 92       	push	r14
    1c20:	ff 92       	push	r15
    1c22:	0f 93       	push	r16
    1c24:	1f 93       	push	r17
    1c26:	cf 93       	push	r28
    1c28:	df 93       	push	r29
    1c2a:	7c 01       	movw	r14, r24
    1c2c:	6b 01       	movw	r12, r22
    1c2e:	ea 01       	movw	r28, r20
	*r = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2);
    1c30:	80 e0       	ldi	r24, 0x00	; 0
    1c32:	60 e0       	ldi	r22, 0x00	; 0
    1c34:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1c38:	08 2f       	mov	r16, r24
    1c3a:	10 e0       	ldi	r17, 0x00	; 0
    1c3c:	f7 01       	movw	r30, r14
    1c3e:	00 83       	st	Z, r16
    1c40:	11 83       	std	Z+1, r17	; 0x01
	*r |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2+1))<<8;
    1c42:	80 e0       	ldi	r24, 0x00	; 0
    1c44:	61 e0       	ldi	r22, 0x01	; 1
    1c46:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1c4a:	38 2f       	mov	r19, r24
    1c4c:	20 e0       	ldi	r18, 0x00	; 0
    1c4e:	02 2b       	or	r16, r18
    1c50:	13 2b       	or	r17, r19
    1c52:	f7 01       	movw	r30, r14
    1c54:	00 83       	st	Z, r16
    1c56:	11 83       	std	Z+1, r17	; 0x01
	
	*g = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2);
    1c58:	80 e0       	ldi	r24, 0x00	; 0
    1c5a:	62 e0       	ldi	r22, 0x02	; 2
    1c5c:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1c60:	08 2f       	mov	r16, r24
    1c62:	10 e0       	ldi	r17, 0x00	; 0
    1c64:	f6 01       	movw	r30, r12
    1c66:	00 83       	st	Z, r16
    1c68:	11 83       	std	Z+1, r17	; 0x01
	*g |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2+1))<<8;
    1c6a:	80 e0       	ldi	r24, 0x00	; 0
    1c6c:	63 e0       	ldi	r22, 0x03	; 3
    1c6e:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1c72:	38 2f       	mov	r19, r24
    1c74:	20 e0       	ldi	r18, 0x00	; 0
    1c76:	02 2b       	or	r16, r18
    1c78:	13 2b       	or	r17, r19
    1c7a:	f6 01       	movw	r30, r12
    1c7c:	00 83       	st	Z, r16
    1c7e:	11 83       	std	Z+1, r17	; 0x01
	
	*b = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2);
    1c80:	80 e0       	ldi	r24, 0x00	; 0
    1c82:	64 e0       	ldi	r22, 0x04	; 4
    1c84:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1c88:	08 2f       	mov	r16, r24
    1c8a:	10 e0       	ldi	r17, 0x00	; 0
    1c8c:	08 83       	st	Y, r16
    1c8e:	19 83       	std	Y+1, r17	; 0x01
	*b |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2+1))<<8;
    1c90:	80 e0       	ldi	r24, 0x00	; 0
    1c92:	65 e0       	ldi	r22, 0x05	; 5
    1c94:	0e 94 00 1f 	call	0x3e00	; 0x3e00 <EEPROM_ReadByte>
    1c98:	38 2f       	mov	r19, r24
    1c9a:	20 e0       	ldi	r18, 0x00	; 0
    1c9c:	02 2b       	or	r16, r18
    1c9e:	13 2b       	or	r17, r19
    1ca0:	08 83       	st	Y, r16
    1ca2:	19 83       	std	Y+1, r17	; 0x01
}
    1ca4:	df 91       	pop	r29
    1ca6:	cf 91       	pop	r28
    1ca8:	1f 91       	pop	r17
    1caa:	0f 91       	pop	r16
    1cac:	ff 90       	pop	r15
    1cae:	ef 90       	pop	r14
    1cb0:	df 90       	pop	r13
    1cb2:	cf 90       	pop	r12
    1cb4:	08 95       	ret

00001cb6 <write_period_calibrations>:

void write_period_calibrations ( uint16_t r, uint16_t g, uint16_t b )
{
    1cb6:	cf 92       	push	r12
    1cb8:	df 92       	push	r13
    1cba:	ef 92       	push	r14
    1cbc:	ff 92       	push	r15
    1cbe:	0f 93       	push	r16
    1cc0:	1f 93       	push	r17
    1cc2:	cf 93       	push	r28
    1cc4:	df 93       	push	r29
    1cc6:	7c 01       	movw	r14, r24
    1cc8:	8b 01       	movw	r16, r22
    1cca:	ea 01       	movw	r28, r20
	EEPROM_ErasePage( EEPROM_LED_CONFIG_PAGE );
    1ccc:	80 e0       	ldi	r24, 0x00	; 0
    1cce:	0e 94 9d 1f 	call	0x3f3a	; 0x3f3a <EEPROM_ErasePage>
	
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2, r&0xFF);
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	60 e0       	ldi	r22, 0x00	; 0
    1cd6:	4e 2d       	mov	r20, r14
    1cd8:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <EEPROM_WriteByte>
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2+1, (r>>8)&0xFF);
    1cdc:	80 e0       	ldi	r24, 0x00	; 0
    1cde:	61 e0       	ldi	r22, 0x01	; 1
    1ce0:	4f 2d       	mov	r20, r15
    1ce2:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <EEPROM_WriteByte>
	
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2, g&0xFF);
    1ce6:	80 e0       	ldi	r24, 0x00	; 0
    1ce8:	62 e0       	ldi	r22, 0x02	; 2
    1cea:	40 2f       	mov	r20, r16
    1cec:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <EEPROM_WriteByte>
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2+1, (g>>8)&0xFF);
    1cf0:	80 e0       	ldi	r24, 0x00	; 0
    1cf2:	63 e0       	ldi	r22, 0x03	; 3
    1cf4:	41 2f       	mov	r20, r17
    1cf6:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <EEPROM_WriteByte>
	
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2, b&0xFF);
    1cfa:	80 e0       	ldi	r24, 0x00	; 0
    1cfc:	64 e0       	ldi	r22, 0x04	; 4
    1cfe:	6e 01       	movw	r12, r28
    1d00:	4c 2f       	mov	r20, r28
    1d02:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <EEPROM_WriteByte>
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2+1, (b>>8)&0xFF);
    1d06:	80 e0       	ldi	r24, 0x00	; 0
    1d08:	65 e0       	ldi	r22, 0x05	; 5
    1d0a:	4d 2d       	mov	r20, r13
    1d0c:	0e 94 bc 1e 	call	0x3d78	; 0x3d78 <EEPROM_WriteByte>
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g);
    1d10:	e0 e0       	ldi	r30, 0x00	; 0
    1d12:	f8 e0       	ldi	r31, 0x08	; 8
    1d14:	06 a3       	std	Z+38, r16	; 0x26
    1d16:	17 a3       	std	Z+39, r17	; 0x27
	TC_SetPeriod(&RED_PWM_CTRL, r);
    1d18:	e0 e0       	ldi	r30, 0x00	; 0
    1d1a:	f9 e0       	ldi	r31, 0x09	; 9
    1d1c:	e6 a2       	std	Z+38, r14	; 0x26
    1d1e:	f7 a2       	std	Z+39, r15	; 0x27
	TC_SetPeriod(&BLUE_PWM_CTRL, b);
    1d20:	e0 e0       	ldi	r30, 0x00	; 0
    1d22:	fa e0       	ldi	r31, 0x0A	; 10
    1d24:	c6 a3       	std	Z+38, r28	; 0x26
    1d26:	d7 a3       	std	Z+39, r29	; 0x27
    1d28:	df 91       	pop	r29
    1d2a:	cf 91       	pop	r28
    1d2c:	1f 91       	pop	r17
    1d2e:	0f 91       	pop	r16
    1d30:	ff 90       	pop	r15
    1d32:	ef 90       	pop	r14
    1d34:	df 90       	pop	r13
    1d36:	cf 90       	pop	r12
    1d38:	08 95       	ret

00001d3a <hall_sensor_handler>:

#include "AniBike2V7BT_Internal.h"

void hall_sensor_handler ( void )
{
	printf_P ( PSTR("Hall Sensor\r\n"));
    1d3a:	00 d0       	rcall	.+0      	; 0x1d3c <hall_sensor_handler+0x2>
    1d3c:	8b e1       	ldi	r24, 0x1B	; 27
    1d3e:	92 e0       	ldi	r25, 0x02	; 2
    1d40:	ed b7       	in	r30, 0x3d	; 61
    1d42:	fe b7       	in	r31, 0x3e	; 62
    1d44:	81 83       	std	Z+1, r24	; 0x01
    1d46:	92 83       	std	Z+2, r25	; 0x02
    1d48:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1d4c:	0f 90       	pop	r0
    1d4e:	0f 90       	pop	r0
}
    1d50:	08 95       	ret

00001d52 <main>:
/*****************************************************************
 *			M A I N    F U N C T I O N 
 *****************************************************************/
int main(void)
{
	SetClockFreq ( 16 );
    1d52:	80 e1       	ldi	r24, 0x10	; 16
    1d54:	0e 94 bc 04 	call	0x978	; 0x978 <SetClockFreq>
	
	initialize_hall_sensor(  );
    1d58:	0e 94 db 0c 	call	0x19b6	; 0x19b6 <initialize_hall_sensor>
	initialize_lighting_system(  );	
    1d5c:	0e 94 22 0d 	call	0x1a44	; 0x1a44 <initialize_lighting_system>
	dataflash_spi_init (  );
    1d60:	0e 94 72 1b 	call	0x36e4	; 0x36e4 <dataflash_spi_init>
	
	swUART_ConfigureDevice ( 0 );
    1d64:	80 e0       	ldi	r24, 0x00	; 0
    1d66:	90 e0       	ldi	r25, 0x00	; 0
    1d68:	0e 94 dc 21 	call	0x43b8	; 0x43b8 <swUART_ConfigureDevice>
	swUART_SetRxInterruptLevel ( 3 );
    1d6c:	83 e0       	ldi	r24, 0x03	; 3
    1d6e:	90 e0       	ldi	r25, 0x00	; 0
    1d70:	0e 94 46 22 	call	0x448c	; 0x448c <swUART_SetRxInterruptLevel>
	swUART_SetInterruptHandler ( rx_handler );
    1d74:	82 e8       	ldi	r24, 0x82	; 130
    1d76:	98 e1       	ldi	r25, 0x18	; 24
    1d78:	0e 94 a0 22 	call	0x4540	; 0x4540 <swUART_SetInterruptHandler>
	set_hall_interrupt_handler( hall_sensor_handler );
    1d7c:	8d e9       	ldi	r24, 0x9D	; 157
    1d7e:	9e e0       	ldi	r25, 0x0E	; 14
    1d80:	0e 94 f4 0c 	call	0x19e8	; 0x19e8 <set_hall_interrupt_handler>
	
	anibike_dl_initialize ( ANIBIKE_DL_MASTER );	
    1d84:	80 e0       	ldi	r24, 0x00	; 0
    1d86:	0e 94 04 05 	call	0xa08	; 0xa08 <anibike_dl_initialize>
	
	sei ( );
    1d8a:	78 94       	sei
    1d8c:	ff cf       	rjmp	.-2      	; 0x1d8c <main+0x3a>

00001d8e <tm_cmd_software_reset>:
	Resets the microcontroller   
*/
/**************************************************************************/
void tm_cmd_software_reset	(U8 argc, char **argv)
{
	CPU_CCP=CCP_IOREG_gc;
    1d8e:	88 ed       	ldi	r24, 0xD8	; 216
    1d90:	84 bf       	out	0x34, r24	; 52
	RST.CTRL=RST_SWRST_bm;
    1d92:	81 e0       	ldi	r24, 0x01	; 1
    1d94:	e8 e7       	ldi	r30, 0x78	; 120
    1d96:	f0 e0       	ldi	r31, 0x00	; 0
    1d98:	81 83       	std	Z+1, r24	; 0x01
}
    1d9a:	08 95       	ret

00001d9c <tm_cmd_write_dl>:
/*!
	Send data to Secondary ANIBIKE Board and get the response  
*/
/**************************************************************************/
void tm_cmd_write_dl		(U8 argc, char **argv)
{
    1d9c:	fb 01       	movw	r30, r22
	uint8_t result = anibike_dl_send_data ((uint8_t*)((void*)(argv[1])), strlen(argv[1]));	
    1d9e:	82 81       	ldd	r24, Z+2	; 0x02
    1da0:	93 81       	ldd	r25, Z+3	; 0x03
    1da2:	fc 01       	movw	r30, r24
    1da4:	df 01       	movw	r26, r30
    1da6:	0d 90       	ld	r0, X+
    1da8:	00 20       	and	r0, r0
    1daa:	e9 f7       	brne	.-6      	; 0x1da6 <tm_cmd_write_dl+0xa>
    1dac:	bd 01       	movw	r22, r26
    1dae:	61 50       	subi	r22, 0x01	; 1
    1db0:	70 40       	sbci	r23, 0x00	; 0
    1db2:	6e 1b       	sub	r22, r30
    1db4:	7f 0b       	sbc	r23, r31
    1db6:	0e 94 6a 05 	call	0xad4	; 0xad4 <anibike_dl_send_data>
	
	switch (result)
    1dba:	81 30       	cpi	r24, 0x01	; 1
    1dbc:	09 f1       	breq	.+66     	; 0x1e00 <tm_cmd_write_dl+0x64>
    1dbe:	81 30       	cpi	r24, 0x01	; 1
    1dc0:	28 f0       	brcs	.+10     	; 0x1dcc <tm_cmd_write_dl+0x30>
    1dc2:	82 30       	cpi	r24, 0x02	; 2
    1dc4:	59 f1       	breq	.+86     	; 0x1e1c <tm_cmd_write_dl+0x80>
    1dc6:	83 30       	cpi	r24, 0x03	; 3
    1dc8:	69 f0       	breq	.+26     	; 0x1de4 <tm_cmd_write_dl+0x48>
    1dca:	08 95       	ret
	{
		case 0: printf_P( PSTR("transaction successful (ACKed)\r\n")); break;
    1dcc:	00 d0       	rcall	.+0      	; 0x1dce <tm_cmd_write_dl+0x32>
    1dce:	86 e6       	ldi	r24, 0x66	; 102
    1dd0:	92 e0       	ldi	r25, 0x02	; 2
    1dd2:	ed b7       	in	r30, 0x3d	; 61
    1dd4:	fe b7       	in	r31, 0x3e	; 62
    1dd6:	81 83       	std	Z+1, r24	; 0x01
    1dd8:	92 83       	std	Z+2, r25	; 0x02
    1dda:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1dde:	0f 90       	pop	r0
    1de0:	0f 90       	pop	r0
    1de2:	08 95       	ret
		case 1: printf_P( PSTR("no slave detected\r\n")); break;
		case 2: printf_P( PSTR("slave does not respond\r\n")); break;
		case 3: printf_P( PSTR("received NACK\r\n")); break;
    1de4:	00 d0       	rcall	.+0      	; 0x1de6 <tm_cmd_write_dl+0x4a>
    1de6:	89 e2       	ldi	r24, 0x29	; 41
    1de8:	92 e0       	ldi	r25, 0x02	; 2
    1dea:	ad b7       	in	r26, 0x3d	; 61
    1dec:	be b7       	in	r27, 0x3e	; 62
    1dee:	11 96       	adiw	r26, 0x01	; 1
    1df0:	8d 93       	st	X+, r24
    1df2:	9c 93       	st	X, r25
    1df4:	12 97       	sbiw	r26, 0x02	; 2
    1df6:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1dfa:	0f 90       	pop	r0
    1dfc:	0f 90       	pop	r0
    1dfe:	08 95       	ret
	uint8_t result = anibike_dl_send_data ((uint8_t*)((void*)(argv[1])), strlen(argv[1]));	
	
	switch (result)
	{
		case 0: printf_P( PSTR("transaction successful (ACKed)\r\n")); break;
		case 1: printf_P( PSTR("no slave detected\r\n")); break;
    1e00:	00 d0       	rcall	.+0      	; 0x1e02 <tm_cmd_write_dl+0x66>
    1e02:	82 e5       	ldi	r24, 0x52	; 82
    1e04:	92 e0       	ldi	r25, 0x02	; 2
    1e06:	ad b7       	in	r26, 0x3d	; 61
    1e08:	be b7       	in	r27, 0x3e	; 62
    1e0a:	11 96       	adiw	r26, 0x01	; 1
    1e0c:	8d 93       	st	X+, r24
    1e0e:	9c 93       	st	X, r25
    1e10:	12 97       	sbiw	r26, 0x02	; 2
    1e12:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1e16:	0f 90       	pop	r0
    1e18:	0f 90       	pop	r0
    1e1a:	08 95       	ret
		case 2: printf_P( PSTR("slave does not respond\r\n")); break;
    1e1c:	00 d0       	rcall	.+0      	; 0x1e1e <tm_cmd_write_dl+0x82>
    1e1e:	89 e3       	ldi	r24, 0x39	; 57
    1e20:	92 e0       	ldi	r25, 0x02	; 2
    1e22:	ed b7       	in	r30, 0x3d	; 61
    1e24:	fe b7       	in	r31, 0x3e	; 62
    1e26:	81 83       	std	Z+1, r24	; 0x01
    1e28:	92 83       	std	Z+2, r25	; 0x02
    1e2a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1e2e:	0f 90       	pop	r0
    1e30:	0f 90       	pop	r0
    1e32:	08 95       	ret

00001e34 <tm_cmd_cs_high>:
	Pull up CS pin   
*/
/**************************************************************************/
void tm_cmd_cs_high			(U8 argc, char **argv)
{
	CS_UP;
    1e34:	80 e1       	ldi	r24, 0x10	; 16
    1e36:	e0 e6       	ldi	r30, 0x60	; 96
    1e38:	f6 e0       	ldi	r31, 0x06	; 6
    1e3a:	85 83       	std	Z+5, r24	; 0x05
	printf_P (PSTR("OK\r\n"));
    1e3c:	00 d0       	rcall	.+0      	; 0x1e3e <tm_cmd_cs_high+0xa>
    1e3e:	87 ed       	ldi	r24, 0xD7	; 215
    1e40:	96 e0       	ldi	r25, 0x06	; 6
    1e42:	ed b7       	in	r30, 0x3d	; 61
    1e44:	fe b7       	in	r31, 0x3e	; 62
    1e46:	81 83       	std	Z+1, r24	; 0x01
    1e48:	92 83       	std	Z+2, r25	; 0x02
    1e4a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1e4e:	0f 90       	pop	r0
    1e50:	0f 90       	pop	r0
}
    1e52:	08 95       	ret

00001e54 <tm_cmd_cs_low>:
	Pull down CS pin   
*/
/**************************************************************************/
void tm_cmd_cs_low			(U8 argc, char **argv)
{
	CS_DOWN;
    1e54:	80 e1       	ldi	r24, 0x10	; 16
    1e56:	e0 e6       	ldi	r30, 0x60	; 96
    1e58:	f6 e0       	ldi	r31, 0x06	; 6
    1e5a:	86 83       	std	Z+6, r24	; 0x06
	printf_P (PSTR("OK\r\n"));
    1e5c:	00 d0       	rcall	.+0      	; 0x1e5e <tm_cmd_cs_low+0xa>
    1e5e:	8c ed       	ldi	r24, 0xDC	; 220
    1e60:	96 e0       	ldi	r25, 0x06	; 6
    1e62:	ed b7       	in	r30, 0x3d	; 61
    1e64:	fe b7       	in	r31, 0x3e	; 62
    1e66:	81 83       	std	Z+1, r24	; 0x01
    1e68:	92 83       	std	Z+2, r25	; 0x02
    1e6a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1e6e:	0f 90       	pop	r0
    1e70:	0f 90       	pop	r0
}
    1e72:	08 95       	ret

00001e74 <tm_cmd_repa>:
	Print-out the soft parameters of the system   
*/
/**************************************************************************/
void tm_cmd_repa			(U8 argc, char **argv)
{
	printf_P ( PSTR("COLOR_DEPTH:%03d;"
    1e74:	8d b7       	in	r24, 0x3d	; 61
    1e76:	9e b7       	in	r25, 0x3e	; 62
    1e78:	0a 97       	sbiw	r24, 0x0a	; 10
    1e7a:	8d bf       	out	0x3d, r24	; 61
    1e7c:	9e bf       	out	0x3e, r25	; 62
    1e7e:	ed b7       	in	r30, 0x3d	; 61
    1e80:	fe b7       	in	r31, 0x3e	; 62
    1e82:	31 96       	adiw	r30, 0x01	; 1
    1e84:	8f ed       	ldi	r24, 0xDF	; 223
    1e86:	97 e0       	ldi	r25, 0x07	; 7
    1e88:	ad b7       	in	r26, 0x3d	; 61
    1e8a:	be b7       	in	r27, 0x3e	; 62
    1e8c:	11 96       	adiw	r26, 0x01	; 1
    1e8e:	8d 93       	st	X+, r24
    1e90:	9c 93       	st	X, r25
    1e92:	12 97       	sbiw	r26, 0x02	; 2
    1e94:	84 e0       	ldi	r24, 0x04	; 4
    1e96:	90 e0       	ldi	r25, 0x00	; 0
    1e98:	82 83       	std	Z+2, r24	; 0x02
    1e9a:	93 83       	std	Z+3, r25	; 0x03
    1e9c:	83 e0       	ldi	r24, 0x03	; 3
    1e9e:	90 e0       	ldi	r25, 0x00	; 0
    1ea0:	84 83       	std	Z+4, r24	; 0x04
    1ea2:	95 83       	std	Z+5, r25	; 0x05
    1ea4:	8c e0       	ldi	r24, 0x0C	; 12
    1ea6:	90 e0       	ldi	r25, 0x00	; 0
    1ea8:	86 83       	std	Z+6, r24	; 0x06
    1eaa:	97 83       	std	Z+7, r25	; 0x07
    1eac:	80 e2       	ldi	r24, 0x20	; 32
    1eae:	90 e0       	ldi	r25, 0x00	; 0
    1eb0:	80 87       	std	Z+8, r24	; 0x08
    1eb2:	91 87       	std	Z+9, r25	; 0x09
    1eb4:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1eb8:	8d b7       	in	r24, 0x3d	; 61
    1eba:	9e b7       	in	r25, 0x3e	; 62
    1ebc:	0a 96       	adiw	r24, 0x0a	; 10
    1ebe:	8d bf       	out	0x3d, r24	; 61
    1ec0:	9e bf       	out	0x3e, r25	; 62
					"MAX_FRAMES:%03d;\n"), 
				ANIBIKE_COLOR_DEPTH,
				FS_FRAME_BLOCKS,
				FS_FILENAME_LENGTH,
				FS_FILE_MAX_FRAMES);
}
    1ec2:	08 95       	ret

00001ec4 <tm_cmd_echo_on>:
	echo is on
*/
/**************************************************************************/
void tm_cmd_echo_on(U8 argc, char **argv)
{
	g_EchoOnOff = 1;
    1ec4:	81 e0       	ldi	r24, 0x01	; 1
    1ec6:	80 93 30 20 	sts	0x2030, r24
	printf_P (PSTR("OK\r\n"));
    1eca:	00 d0       	rcall	.+0      	; 0x1ecc <tm_cmd_echo_on+0x8>
    1ecc:	85 ee       	ldi	r24, 0xE5	; 229
    1ece:	98 e0       	ldi	r25, 0x08	; 8
    1ed0:	ed b7       	in	r30, 0x3d	; 61
    1ed2:	fe b7       	in	r31, 0x3e	; 62
    1ed4:	81 83       	std	Z+1, r24	; 0x01
    1ed6:	92 83       	std	Z+2, r25	; 0x02
    1ed8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1edc:	0f 90       	pop	r0
    1ede:	0f 90       	pop	r0
}
    1ee0:	08 95       	ret

00001ee2 <tm_cmd_start_all>:
	Exited the transfer mode so start up all the other stuff
*/
/**************************************************************************/
void tm_cmd_start_all(U8 argc, char **argv)
{
	g_isOperating = 1;
    1ee2:	81 e0       	ldi	r24, 0x01	; 1
    1ee4:	80 93 2b 22 	sts	0x222B, r24

//	TIMSK1 = (1<<OCIE1A);	// Compare Interrupt
//	TIMSK2 = (1<<OCIE2A); 	// Compare interrupt
//	SET_ROW(0);

	CS_UP;
    1ee8:	80 e1       	ldi	r24, 0x10	; 16
    1eea:	e0 e6       	ldi	r30, 0x60	; 96
    1eec:	f6 e0       	ldi	r31, 0x06	; 6
    1eee:	85 83       	std	Z+5, r24	; 0x05
//	g_iCurrentFrameCycle = 0;

	
	printf_P (PSTR("OK\r\n"));
    1ef0:	00 d0       	rcall	.+0      	; 0x1ef2 <tm_cmd_start_all+0x10>
    1ef2:	8a ee       	ldi	r24, 0xEA	; 234
    1ef4:	98 e0       	ldi	r25, 0x08	; 8
    1ef6:	ed b7       	in	r30, 0x3d	; 61
    1ef8:	fe b7       	in	r31, 0x3e	; 62
    1efa:	81 83       	std	Z+1, r24	; 0x01
    1efc:	92 83       	std	Z+2, r25	; 0x02
    1efe:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1f02:	0f 90       	pop	r0
    1f04:	0f 90       	pop	r0
}
    1f06:	08 95       	ret

00001f08 <tm_cmd_stop_all>:
	Entered the transfer mode so stop all the other stuff
*/
/**************************************************************************/
void tm_cmd_stop_all(U8 argc, char **argv)
{
	g_isOperating = 0;
    1f08:	10 92 2b 22 	sts	0x222B, r1
//	TIMSK1 = 0;	// Compare Interrupt
//	TIMSK2 = 0; // Compare interrupt

//	ROW_PORT = 0x00;

	CS_UP;
    1f0c:	80 e1       	ldi	r24, 0x10	; 16
    1f0e:	e0 e6       	ldi	r30, 0x60	; 96
    1f10:	f6 e0       	ldi	r31, 0x06	; 6
    1f12:	85 83       	std	Z+5, r24	; 0x05

	printf_P (PSTR("OK\r\n"));
    1f14:	00 d0       	rcall	.+0      	; 0x1f16 <tm_cmd_stop_all+0xe>
    1f16:	8f ee       	ldi	r24, 0xEF	; 239
    1f18:	98 e0       	ldi	r25, 0x08	; 8
    1f1a:	ed b7       	in	r30, 0x3d	; 61
    1f1c:	fe b7       	in	r31, 0x3e	; 62
    1f1e:	81 83       	std	Z+1, r24	; 0x01
    1f20:	92 83       	std	Z+2, r25	; 0x02
    1f22:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1f26:	0f 90       	pop	r0
    1f28:	0f 90       	pop	r0
}
    1f2a:	08 95       	ret

00001f2c <tm_cmd_echo_off>:
	echo is off    
*/
/**************************************************************************/
void tm_cmd_echo_off(U8 argc, char **argv)
{
	g_EchoOnOff = 0;
    1f2c:	10 92 30 20 	sts	0x2030, r1
	printf_P (PSTR("OK\r\n"));
    1f30:	00 d0       	rcall	.+0      	; 0x1f32 <tm_cmd_echo_off+0x6>
    1f32:	84 ef       	ldi	r24, 0xF4	; 244
    1f34:	98 e0       	ldi	r25, 0x08	; 8
    1f36:	ed b7       	in	r30, 0x3d	; 61
    1f38:	fe b7       	in	r31, 0x3e	; 62
    1f3a:	81 83       	std	Z+1, r24	; 0x01
    1f3c:	92 83       	std	Z+2, r25	; 0x02
    1f3e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    1f42:	0f 90       	pop	r0
    1f44:	0f 90       	pop	r0
}
    1f46:	08 95       	ret

00001f48 <tm_cmd_write_led_cal>:
/*!
	Store the calibration values for the LEDs (max counter number)  
*/
/**************************************************************************/
void tm_cmd_write_led_cal (U8 argc, char **argv)
{
    1f48:	af 92       	push	r10
    1f4a:	bf 92       	push	r11
    1f4c:	cf 92       	push	r12
    1f4e:	df 92       	push	r13
    1f50:	ef 92       	push	r14
    1f52:	ff 92       	push	r15
    1f54:	0f 93       	push	r16
    1f56:	1f 93       	push	r17
    1f58:	cf 93       	push	r28
    1f5a:	df 93       	push	r29
    1f5c:	eb 01       	movw	r28, r22
	if (argc != 4)
    1f5e:	84 30       	cpi	r24, 0x04	; 4
    1f60:	b1 f0       	breq	.+44     	; 0x1f8e <tm_cmd_write_led_cal+0x46>
	{
		printf_P( PSTR("usage: write_cal red16 green16 blue16\r\n"));
    1f62:	00 d0       	rcall	.+0      	; 0x1f64 <tm_cmd_write_led_cal+0x1c>
    1f64:	87 e8       	ldi	r24, 0x87	; 135
    1f66:	92 e0       	ldi	r25, 0x02	; 2
    1f68:	ed b7       	in	r30, 0x3d	; 61
    1f6a:	fe b7       	in	r31, 0x3e	; 62
    1f6c:	81 83       	std	Z+1, r24	; 0x01
    1f6e:	92 83       	std	Z+2, r25	; 0x02
    1f70:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    1f74:	0f 90       	pop	r0
    1f76:	0f 90       	pop	r0
	write_period_calibrations ( g_iRedCalibrationPeriod, g_iGreenCalibrationPeriod, g_iBlueCalibrationPeriod );
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g_iGreenCalibrationPeriod);
	TC_SetPeriod(&RED_PWM_CTRL, g_iRedCalibrationPeriod);
	TC_SetPeriod(&BLUE_PWM_CTRL, g_iBlueCalibrationPeriod);
}
    1f78:	df 91       	pop	r29
    1f7a:	cf 91       	pop	r28
    1f7c:	1f 91       	pop	r17
    1f7e:	0f 91       	pop	r16
    1f80:	ff 90       	pop	r15
    1f82:	ef 90       	pop	r14
    1f84:	df 90       	pop	r13
    1f86:	cf 90       	pop	r12
    1f88:	bf 90       	pop	r11
    1f8a:	af 90       	pop	r10
    1f8c:	08 95       	ret
	if (argc != 4)
	{
		printf_P( PSTR("usage: write_cal red16 green16 blue16\r\n"));
		return;	
	}
	g_iRedCalibrationPeriod = atol(argv[1]);
    1f8e:	8a 81       	ldd	r24, Y+2	; 0x02
    1f90:	9b 81       	ldd	r25, Y+3	; 0x03
    1f92:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    1f96:	7b 01       	movw	r14, r22
    1f98:	8c 01       	movw	r16, r24
    1f9a:	60 93 06 20 	sts	0x2006, r22
    1f9e:	70 93 07 20 	sts	0x2007, r23
	g_iGreenCalibrationPeriod = atol(argv[2]);
    1fa2:	8c 81       	ldd	r24, Y+4	; 0x04
    1fa4:	9d 81       	ldd	r25, Y+5	; 0x05
    1fa6:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    1faa:	5b 01       	movw	r10, r22
    1fac:	6c 01       	movw	r12, r24
    1fae:	60 93 08 20 	sts	0x2008, r22
    1fb2:	70 93 09 20 	sts	0x2009, r23
	g_iBlueCalibrationPeriod = atol(argv[3]);
    1fb6:	8e 81       	ldd	r24, Y+6	; 0x06
    1fb8:	9f 81       	ldd	r25, Y+7	; 0x07
    1fba:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    1fbe:	9b 01       	movw	r18, r22
    1fc0:	ac 01       	movw	r20, r24
    1fc2:	60 93 0a 20 	sts	0x200A, r22
    1fc6:	70 93 0b 20 	sts	0x200B, r23
	
	write_period_calibrations ( g_iRedCalibrationPeriod, g_iGreenCalibrationPeriod, g_iBlueCalibrationPeriod );
    1fca:	c7 01       	movw	r24, r14
    1fcc:	b5 01       	movw	r22, r10
    1fce:	a9 01       	movw	r20, r18
    1fd0:	0e 94 5b 0e 	call	0x1cb6	; 0x1cb6 <write_period_calibrations>
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g_iGreenCalibrationPeriod);
    1fd4:	80 91 08 20 	lds	r24, 0x2008
    1fd8:	90 91 09 20 	lds	r25, 0x2009
    1fdc:	e0 e0       	ldi	r30, 0x00	; 0
    1fde:	f8 e0       	ldi	r31, 0x08	; 8
    1fe0:	86 a3       	std	Z+38, r24	; 0x26
    1fe2:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetPeriod(&RED_PWM_CTRL, g_iRedCalibrationPeriod);
    1fe4:	80 91 06 20 	lds	r24, 0x2006
    1fe8:	90 91 07 20 	lds	r25, 0x2007
    1fec:	e0 e0       	ldi	r30, 0x00	; 0
    1fee:	f9 e0       	ldi	r31, 0x09	; 9
    1ff0:	86 a3       	std	Z+38, r24	; 0x26
    1ff2:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetPeriod(&BLUE_PWM_CTRL, g_iBlueCalibrationPeriod);
    1ff4:	80 91 0a 20 	lds	r24, 0x200A
    1ff8:	90 91 0b 20 	lds	r25, 0x200B
    1ffc:	e0 e0       	ldi	r30, 0x00	; 0
    1ffe:	fa e0       	ldi	r31, 0x0A	; 10
    2000:	86 a3       	std	Z+38, r24	; 0x26
    2002:	97 a3       	std	Z+39, r25	; 0x27
    2004:	b9 cf       	rjmp	.-142    	; 0x1f78 <tm_cmd_write_led_cal+0x30>

00002006 <tm_cmd_read_led_cal>:
	Read the calibration values for the LEDs (max counter number)  
*/
/**************************************************************************/
void tm_cmd_read_led_cal	(U8 argc, char **argv)
{
	read_period_calibrations ( &g_iRedCalibrationPeriod, &g_iGreenCalibrationPeriod, &g_iBlueCalibrationPeriod );
    2006:	86 e0       	ldi	r24, 0x06	; 6
    2008:	90 e2       	ldi	r25, 0x20	; 32
    200a:	68 e0       	ldi	r22, 0x08	; 8
    200c:	70 e2       	ldi	r23, 0x20	; 32
    200e:	4a e0       	ldi	r20, 0x0A	; 10
    2010:	50 e2       	ldi	r21, 0x20	; 32
    2012:	0e 94 0d 0e 	call	0x1c1a	; 0x1c1a <read_period_calibrations>
	
	printf_P (PSTR("Red: %u;  Green: %u;  Blue: %u; \r\n"), g_iRedCalibrationPeriod,
    2016:	8d b7       	in	r24, 0x3d	; 61
    2018:	9e b7       	in	r25, 0x3e	; 62
    201a:	08 97       	sbiw	r24, 0x08	; 8
    201c:	8d bf       	out	0x3d, r24	; 61
    201e:	9e bf       	out	0x3e, r25	; 62
    2020:	ed b7       	in	r30, 0x3d	; 61
    2022:	fe b7       	in	r31, 0x3e	; 62
    2024:	31 96       	adiw	r30, 0x01	; 1
    2026:	8f ea       	ldi	r24, 0xAF	; 175
    2028:	92 e0       	ldi	r25, 0x02	; 2
    202a:	ad b7       	in	r26, 0x3d	; 61
    202c:	be b7       	in	r27, 0x3e	; 62
    202e:	11 96       	adiw	r26, 0x01	; 1
    2030:	8d 93       	st	X+, r24
    2032:	9c 93       	st	X, r25
    2034:	12 97       	sbiw	r26, 0x02	; 2
    2036:	80 91 06 20 	lds	r24, 0x2006
    203a:	90 91 07 20 	lds	r25, 0x2007
    203e:	82 83       	std	Z+2, r24	; 0x02
    2040:	93 83       	std	Z+3, r25	; 0x03
    2042:	80 91 08 20 	lds	r24, 0x2008
    2046:	90 91 09 20 	lds	r25, 0x2009
    204a:	84 83       	std	Z+4, r24	; 0x04
    204c:	95 83       	std	Z+5, r25	; 0x05
    204e:	80 91 0a 20 	lds	r24, 0x200A
    2052:	90 91 0b 20 	lds	r25, 0x200B
    2056:	86 83       	std	Z+6, r24	; 0x06
    2058:	97 83       	std	Z+7, r25	; 0x07
    205a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    205e:	8d b7       	in	r24, 0x3d	; 61
    2060:	9e b7       	in	r25, 0x3e	; 62
    2062:	08 96       	adiw	r24, 0x08	; 8
    2064:	8d bf       	out	0x3d, r24	; 61
    2066:	9e bf       	out	0x3e, r25	; 62
															g_iGreenCalibrationPeriod,
															g_iBlueCalibrationPeriod);
}
    2068:	08 95       	ret

0000206a <tm_cmd_configure_bt>:
/*!
	Configure the BT module for ANIBIKE  
*/
/**************************************************************************/
void tm_cmd_configure_bt (U8 argc, char **argv)
{
    206a:	cf 92       	push	r12
    206c:	df 92       	push	r13
    206e:	ef 92       	push	r14
    2070:	ff 92       	push	r15
    2072:	0f 93       	push	r16
    2074:	1f 93       	push	r17
    2076:	df 93       	push	r29
    2078:	cf 93       	push	r28
    207a:	cd b7       	in	r28, 0x3d	; 61
    207c:	de b7       	in	r29, 0x3e	; 62
    207e:	e0 97       	sbiw	r28, 0x30	; 48
    2080:	cd bf       	out	0x3d, r28	; 61
    2082:	de bf       	out	0x3e, r29	; 62
	uint8_t iTestCommandPass = 0;
	uint8_t iNameChanged = 0;
	uint8_t iUARTChanged = 0;
	char sVersion[16] = {0};
    2084:	7e 01       	movw	r14, r28
    2086:	08 94       	sec
    2088:	e1 1c       	adc	r14, r1
    208a:	f1 1c       	adc	r15, r1
    208c:	80 e1       	ldi	r24, 0x10	; 16
    208e:	d7 01       	movw	r26, r14
    2090:	1d 92       	st	X+, r1
    2092:	8a 95       	dec	r24
    2094:	e9 f7       	brne	.-6      	; 0x2090 <tm_cmd_configure_bt+0x26>
	char sTemp[32] = {0};
    2096:	8e 01       	movw	r16, r28
    2098:	0f 5e       	subi	r16, 0xEF	; 239
    209a:	1f 4f       	sbci	r17, 0xFF	; 255
    209c:	80 e2       	ldi	r24, 0x20	; 32
    209e:	f8 01       	movw	r30, r16
    20a0:	11 92       	st	Z+, r1
    20a2:	8a 95       	dec	r24
    20a4:	e9 f7       	brne	.-6      	; 0x20a0 <tm_cmd_configure_bt+0x36>
	char *cTok = NULL;
	
	printf_P( PSTR("Enterring AT mode...\r\n"));
    20a6:	00 d0       	rcall	.+0      	; 0x20a8 <tm_cmd_configure_bt+0x3e>
    20a8:	8d e6       	ldi	r24, 0x6D	; 109
    20aa:	93 e0       	ldi	r25, 0x03	; 3
    20ac:	ad b7       	in	r26, 0x3d	; 61
    20ae:	be b7       	in	r27, 0x3e	; 62
    20b0:	11 96       	adiw	r26, 0x01	; 1
    20b2:	8d 93       	st	X+, r24
    20b4:	9c 93       	st	X, r25
    20b6:	12 97       	sbiw	r26, 0x02	; 2
    20b8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	PORTA.DIRSET = PIN3_bm;
    20bc:	e0 e0       	ldi	r30, 0x00	; 0
    20be:	f6 e0       	ldi	r31, 0x06	; 6
    20c0:	88 e0       	ldi	r24, 0x08	; 8
    20c2:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = PIN3_bm;
    20c4:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20c6:	8f e3       	ldi	r24, 0x3F	; 63
    20c8:	9d e0       	ldi	r25, 0x0D	; 13
    20ca:	a3 e0       	ldi	r26, 0x03	; 3
    20cc:	81 50       	subi	r24, 0x01	; 1
    20ce:	90 40       	sbci	r25, 0x00	; 0
    20d0:	a0 40       	sbci	r26, 0x00	; 0
    20d2:	e1 f7       	brne	.-8      	; 0x20cc <tm_cmd_configure_bt+0x62>
    20d4:	00 c0       	rjmp	.+0      	; 0x20d6 <tm_cmd_configure_bt+0x6c>
    20d6:	00 00       	nop
	
	_delay_ms(1000);
	
	printf_P( PSTR("AT\r\n"));
    20d8:	88 e6       	ldi	r24, 0x68	; 104
    20da:	93 e0       	ldi	r25, 0x03	; 3
    20dc:	ad b7       	in	r26, 0x3d	; 61
    20de:	be b7       	in	r27, 0x3e	; 62
    20e0:	11 96       	adiw	r26, 0x01	; 1
    20e2:	8d 93       	st	X+, r24
    20e4:	9c 93       	st	X, r25
    20e6:	12 97       	sbiw	r26, 0x02	; 2
    20e8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	if ( gets(sTemp) )
    20ec:	0f 90       	pop	r0
    20ee:	0f 90       	pop	r0
    20f0:	c8 01       	movw	r24, r16
    20f2:	0e 94 9d 24 	call	0x493a	; 0x493a <gets>
    20f6:	00 97       	sbiw	r24, 0x00	; 0
    20f8:	09 f4       	brne	.+2      	; 0x20fc <tm_cmd_configure_bt+0x92>
    20fa:	7a c0       	rjmp	.+244    	; 0x21f0 <tm_cmd_configure_bt+0x186>
	{
		if ( strstr(sTemp, "OK") )
    20fc:	c8 01       	movw	r24, r16
    20fe:	6c e0       	ldi	r22, 0x0C	; 12
    2100:	70 e2       	ldi	r23, 0x20	; 32
    2102:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <strstr>
    2106:	21 e0       	ldi	r18, 0x01	; 1
    2108:	c2 2e       	mov	r12, r18
    210a:	d1 2c       	mov	r13, r1
    210c:	00 97       	sbiw	r24, 0x00	; 0
    210e:	09 f4       	brne	.+2      	; 0x2112 <tm_cmd_configure_bt+0xa8>
    2110:	6f c0       	rjmp	.+222    	; 0x21f0 <tm_cmd_configure_bt+0x186>
			iTestCommandPass = 1;
	}
	
	printf_P( PSTR("AT+VERSION?\r\n"));
    2112:	00 d0       	rcall	.+0      	; 0x2114 <tm_cmd_configure_bt+0xaa>
    2114:	8a e5       	ldi	r24, 0x5A	; 90
    2116:	93 e0       	ldi	r25, 0x03	; 3
    2118:	ed b7       	in	r30, 0x3d	; 61
    211a:	fe b7       	in	r31, 0x3e	; 62
    211c:	81 83       	std	Z+1, r24	; 0x01
    211e:	92 83       	std	Z+2, r25	; 0x02
    2120:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	if ( gets(sTemp) )
    2124:	0f 90       	pop	r0
    2126:	0f 90       	pop	r0
    2128:	c8 01       	movw	r24, r16
    212a:	0e 94 9d 24 	call	0x493a	; 0x493a <gets>
    212e:	00 97       	sbiw	r24, 0x00	; 0
    2130:	79 f0       	breq	.+30     	; 0x2150 <tm_cmd_configure_bt+0xe6>
	{
		cTok = strtok ( sTemp, ":\n" );
    2132:	c8 01       	movw	r24, r16
    2134:	6f e0       	ldi	r22, 0x0F	; 15
    2136:	70 e2       	ldi	r23, 0x20	; 32
    2138:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
		cTok = strtok ( NULL, ":\n" );
    213c:	80 e0       	ldi	r24, 0x00	; 0
    213e:	90 e0       	ldi	r25, 0x00	; 0
    2140:	6f e0       	ldi	r22, 0x0F	; 15
    2142:	70 e2       	ldi	r23, 0x20	; 32
    2144:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    2148:	bc 01       	movw	r22, r24
		strcpy (sVersion, cTok);
    214a:	c7 01       	movw	r24, r14
    214c:	0e 94 ca 23 	call	0x4794	; 0x4794 <strcpy>
	}
	
	printf_P( PSTR("AT+NAME=ANIBIKE_2V7_BT\r\n"));
    2150:	00 d0       	rcall	.+0      	; 0x2152 <tm_cmd_configure_bt+0xe8>
    2152:	81 e4       	ldi	r24, 0x41	; 65
    2154:	93 e0       	ldi	r25, 0x03	; 3
    2156:	ad b7       	in	r26, 0x3d	; 61
    2158:	be b7       	in	r27, 0x3e	; 62
    215a:	11 96       	adiw	r26, 0x01	; 1
    215c:	8d 93       	st	X+, r24
    215e:	9c 93       	st	X, r25
    2160:	12 97       	sbiw	r26, 0x02	; 2
    2162:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	if ( gets(sTemp) )
    2166:	0f 90       	pop	r0
    2168:	0f 90       	pop	r0
    216a:	c8 01       	movw	r24, r16
    216c:	0e 94 9d 24 	call	0x493a	; 0x493a <gets>
    2170:	00 97       	sbiw	r24, 0x00	; 0
    2172:	09 f4       	brne	.+2      	; 0x2176 <tm_cmd_configure_bt+0x10c>
    2174:	40 c0       	rjmp	.+128    	; 0x21f6 <tm_cmd_configure_bt+0x18c>
	{
		if ( strstr(sTemp, "OK") )
    2176:	c8 01       	movw	r24, r16
    2178:	6c e0       	ldi	r22, 0x0C	; 12
    217a:	70 e2       	ldi	r23, 0x20	; 32
    217c:	0e 94 d1 23 	call	0x47a2	; 0x47a2 <strstr>
    2180:	01 e0       	ldi	r16, 0x01	; 1
    2182:	10 e0       	ldi	r17, 0x00	; 0
    2184:	00 97       	sbiw	r24, 0x00	; 0
    2186:	b9 f1       	breq	.+110    	; 0x21f6 <tm_cmd_configure_bt+0x18c>
	{
		if ( strstr(sTemp, "OK") )
			iUARTChanged = 1;
	}	*/
	
	PORTA.OUTCLR = PIN3_bm;	
    2188:	88 e0       	ldi	r24, 0x08	; 8
    218a:	e0 e0       	ldi	r30, 0x00	; 0
    218c:	f6 e0       	ldi	r31, 0x06	; 6
    218e:	86 83       	std	Z+6, r24	; 0x06
	printf_P( PSTR("Exiting AT mode... Configuration complete.\r\n"));
    2190:	00 d0       	rcall	.+0      	; 0x2192 <tm_cmd_configure_bt+0x128>
    2192:	84 e1       	ldi	r24, 0x14	; 20
    2194:	93 e0       	ldi	r25, 0x03	; 3
    2196:	ed b7       	in	r30, 0x3d	; 61
    2198:	fe b7       	in	r31, 0x3e	; 62
    219a:	81 83       	std	Z+1, r24	; 0x01
    219c:	92 83       	std	Z+2, r25	; 0x02
    219e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	printf_P( PSTR("Bluetooth info:\r\n  Status: %d\r\n  Version: %s\r\n  Name change: %d\r\n"), iTestCommandPass, sVersion, iNameChanged);
    21a2:	00 d0       	rcall	.+0      	; 0x21a4 <tm_cmd_configure_bt+0x13a>
    21a4:	00 d0       	rcall	.+0      	; 0x21a6 <tm_cmd_configure_bt+0x13c>
    21a6:	00 d0       	rcall	.+0      	; 0x21a8 <tm_cmd_configure_bt+0x13e>
    21a8:	ed b7       	in	r30, 0x3d	; 61
    21aa:	fe b7       	in	r31, 0x3e	; 62
    21ac:	31 96       	adiw	r30, 0x01	; 1
    21ae:	82 ed       	ldi	r24, 0xD2	; 210
    21b0:	92 e0       	ldi	r25, 0x02	; 2
    21b2:	ad b7       	in	r26, 0x3d	; 61
    21b4:	be b7       	in	r27, 0x3e	; 62
    21b6:	11 96       	adiw	r26, 0x01	; 1
    21b8:	8d 93       	st	X+, r24
    21ba:	9c 93       	st	X, r25
    21bc:	12 97       	sbiw	r26, 0x02	; 2
    21be:	c2 82       	std	Z+2, r12	; 0x02
    21c0:	d3 82       	std	Z+3, r13	; 0x03
    21c2:	e4 82       	std	Z+4, r14	; 0x04
    21c4:	f5 82       	std	Z+5, r15	; 0x05
    21c6:	06 83       	std	Z+6, r16	; 0x06
    21c8:	17 83       	std	Z+7, r17	; 0x07
    21ca:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    21ce:	ed b7       	in	r30, 0x3d	; 61
    21d0:	fe b7       	in	r31, 0x3e	; 62
    21d2:	38 96       	adiw	r30, 0x08	; 8
    21d4:	ed bf       	out	0x3d, r30	; 61
    21d6:	fe bf       	out	0x3e, r31	; 62
}
    21d8:	e0 96       	adiw	r28, 0x30	; 48
    21da:	cd bf       	out	0x3d, r28	; 61
    21dc:	de bf       	out	0x3e, r29	; 62
    21de:	cf 91       	pop	r28
    21e0:	df 91       	pop	r29
    21e2:	1f 91       	pop	r17
    21e4:	0f 91       	pop	r16
    21e6:	ff 90       	pop	r15
    21e8:	ef 90       	pop	r14
    21ea:	df 90       	pop	r13
    21ec:	cf 90       	pop	r12
    21ee:	08 95       	ret
	PORTA.OUTSET = PIN3_bm;
	
	_delay_ms(1000);
	
	printf_P( PSTR("AT\r\n"));
	if ( gets(sTemp) )
    21f0:	cc 24       	eor	r12, r12
    21f2:	dd 24       	eor	r13, r13
    21f4:	8e cf       	rjmp	.-228    	; 0x2112 <tm_cmd_configure_bt+0xa8>
		cTok = strtok ( NULL, ":\n" );
		strcpy (sVersion, cTok);
	}
	
	printf_P( PSTR("AT+NAME=ANIBIKE_2V7_BT\r\n"));
	if ( gets(sTemp) )
    21f6:	00 e0       	ldi	r16, 0x00	; 0
    21f8:	10 e0       	ldi	r17, 0x00	; 0
    21fa:	c6 cf       	rjmp	.-116    	; 0x2188 <tm_cmd_configure_bt+0x11e>

000021fc <tm_cmd_help>:
/*!
	This function shows the help menu to the user
*/
/**************************************************************************/
void tm_cmd_help			(U8 argc, char **argv)
{
    21fc:	df 92       	push	r13
    21fe:	ef 92       	push	r14
    2200:	ff 92       	push	r15
    2202:	0f 93       	push	r16
    2204:	1f 93       	push	r17
    2206:	cf 93       	push	r28
    2208:	df 93       	push	r29
	if (argc > 2)
    220a:	83 30       	cpi	r24, 0x03	; 3
    220c:	08 f0       	brcs	.+2      	; 0x2210 <tm_cmd_help+0x14>
    220e:	a7 c0       	rjmp	.+334    	; 0x235e <tm_cmd_help+0x162>
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    2210:	82 30       	cpi	r24, 0x02	; 2
    2212:	09 f4       	brne	.+2      	; 0x2216 <tm_cmd_help+0x1a>
    2214:	4d c0       	rjmp	.+154    	; 0x22b0 <tm_cmd_help+0xb4>
		}	
	}
	else
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
    2216:	42 e1       	ldi	r20, 0x12	; 18
    2218:	50 e2       	ldi	r21, 0x20	; 32
    221a:	80 e0       	ldi	r24, 0x00	; 0
    221c:	90 e0       	ldi	r25, 0x00	; 0
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    221e:	00 e0       	ldi	r16, 0x00	; 0
    2220:	20 e0       	ldi	r18, 0x00	; 0
    2222:	30 e0       	ldi	r19, 0x00	; 0
    2224:	74 e8       	ldi	r23, 0x84	; 132
    2226:	e7 2e       	mov	r14, r23
    2228:	73 e0       	ldi	r23, 0x03	; 3
    222a:	f7 2e       	mov	r15, r23
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
		{ 
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
    222c:	f9 01       	movw	r30, r18
    222e:	e8 0f       	add	r30, r24
    2230:	f9 1f       	adc	r31, r25
    2232:	ee 0f       	add	r30, r30
    2234:	ff 1f       	adc	r31, r31
    2236:	ec 59       	subi	r30, 0x9C	; 156
    2238:	fe 4d       	sbci	r31, 0xDE	; 222
    223a:	04 80       	ldd	r0, Z+4	; 0x04
    223c:	f5 81       	ldd	r31, Z+5	; 0x05
    223e:	e0 2d       	mov	r30, r0
	else
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
		{ 
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
    2240:	80 81       	ld	r24, Z
    2242:	88 23       	and	r24, r24
    2244:	11 f4       	brne	.+4      	; 0x224a <tm_cmd_help+0x4e>
    2246:	e7 e1       	ldi	r30, 0x17	; 23
    2248:	f0 e2       	ldi	r31, 0x20	; 32
    224a:	00 d0       	rcall	.+0      	; 0x224c <tm_cmd_help+0x50>
    224c:	00 d0       	rcall	.+0      	; 0x224e <tm_cmd_help+0x52>
    224e:	00 d0       	rcall	.+0      	; 0x2250 <tm_cmd_help+0x54>
    2250:	ad b7       	in	r26, 0x3d	; 61
    2252:	be b7       	in	r27, 0x3e	; 62
    2254:	11 96       	adiw	r26, 0x01	; 1
    2256:	cd b7       	in	r28, 0x3d	; 61
    2258:	de b7       	in	r29, 0x3e	; 62
    225a:	e9 82       	std	Y+1, r14	; 0x01
    225c:	fa 82       	std	Y+2, r15	; 0x02
    225e:	12 96       	adiw	r26, 0x02	; 2
    2260:	4d 93       	st	X+, r20
    2262:	5c 93       	st	X, r21
    2264:	13 97       	sbiw	r26, 0x03	; 3
    2266:	14 96       	adiw	r26, 0x04	; 4
    2268:	ed 93       	st	X+, r30
    226a:	fc 93       	st	X, r31
    226c:	15 97       	sbiw	r26, 0x05	; 5
    226e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
    2272:	0f 5f       	subi	r16, 0xFF	; 255
		}	
	}
	else
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
    2274:	80 2f       	mov	r24, r16
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	9c 01       	movw	r18, r24
    227a:	22 0f       	add	r18, r18
    227c:	33 1f       	adc	r19, r19
    227e:	f9 01       	movw	r30, r18
    2280:	e8 0f       	add	r30, r24
    2282:	f9 1f       	adc	r31, r25
    2284:	ee 0f       	add	r30, r30
    2286:	ff 1f       	adc	r31, r31
    2288:	ec 59       	subi	r30, 0x9C	; 156
    228a:	fe 4d       	sbci	r31, 0xDE	; 222
    228c:	40 81       	ld	r20, Z
    228e:	51 81       	ldd	r21, Z+1	; 0x01
    2290:	ed b7       	in	r30, 0x3d	; 61
    2292:	fe b7       	in	r31, 0x3e	; 62
    2294:	36 96       	adiw	r30, 0x06	; 6
    2296:	ed bf       	out	0x3d, r30	; 61
    2298:	fe bf       	out	0x3e, r31	; 62
    229a:	41 15       	cp	r20, r1
    229c:	51 05       	cpc	r21, r1
    229e:	31 f6       	brne	.-116    	; 0x222c <tm_cmd_help+0x30>
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
		}
	}
}
    22a0:	df 91       	pop	r29
    22a2:	cf 91       	pop	r28
    22a4:	1f 91       	pop	r17
    22a6:	0f 91       	pop	r16
    22a8:	ff 90       	pop	r15
    22aa:	ef 90       	pop	r14
    22ac:	df 90       	pop	r13
    22ae:	08 95       	ret
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    22b0:	fb 01       	movw	r30, r22
    22b2:	e2 80       	ldd	r14, Z+2	; 0x02
    22b4:	f3 80       	ldd	r15, Z+3	; 0x03
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
    22b6:	02 e1       	ldi	r16, 0x12	; 18
    22b8:	10 e2       	ldi	r17, 0x20	; 32
    22ba:	c0 e0       	ldi	r28, 0x00	; 0
    22bc:	d0 e0       	ldi	r29, 0x00	; 0
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    22be:	dd 24       	eor	r13, r13
    22c0:	11 c0       	rjmp	.+34     	; 0x22e4 <tm_cmd_help+0xe8>
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
			{ i++; }
    22c2:	d3 94       	inc	r13
		return;	
	}
	else if (argc == 2)
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
    22c4:	cd 2d       	mov	r28, r13
    22c6:	d0 e0       	ldi	r29, 0x00	; 0
    22c8:	fe 01       	movw	r30, r28
    22ca:	ee 0f       	add	r30, r30
    22cc:	ff 1f       	adc	r31, r31
    22ce:	ec 0f       	add	r30, r28
    22d0:	fd 1f       	adc	r31, r29
    22d2:	ee 0f       	add	r30, r30
    22d4:	ff 1f       	adc	r31, r31
    22d6:	ec 59       	subi	r30, 0x9C	; 156
    22d8:	fe 4d       	sbci	r31, 0xDE	; 222
    22da:	00 81       	ld	r16, Z
    22dc:	11 81       	ldd	r17, Z+1	; 0x01
    22de:	01 15       	cp	r16, r1
    22e0:	11 05       	cpc	r17, r1
    22e2:	f1 f2       	breq	.-68     	; 0x22a0 <tm_cmd_help+0xa4>
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
    22e4:	c8 01       	movw	r24, r16
    22e6:	b7 01       	movw	r22, r14
    22e8:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
		return;	
	}
	else if (argc == 2)
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	49 f7       	brne	.-46     	; 0x22c2 <tm_cmd_help+0xc6>
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
			{ i++; }
		
		if ( cmd_tbl[i].cmd != NULL )
    22f0:	01 15       	cp	r16, r1
    22f2:	11 05       	cpc	r17, r1
    22f4:	a9 f2       	breq	.-86     	; 0x22a0 <tm_cmd_help+0xa4>
		{
			printf_P( PSTR("usage: %s %s\r\n"), cmd_tbl[i].cmd, 
					((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));	
    22f6:	fe 01       	movw	r30, r28
    22f8:	ee 0f       	add	r30, r30
    22fa:	ff 1f       	adc	r31, r31
    22fc:	ec 0f       	add	r30, r28
    22fe:	fd 1f       	adc	r31, r29
    2300:	ee 0f       	add	r30, r30
    2302:	ff 1f       	adc	r31, r31
    2304:	ec 59       	subi	r30, 0x9C	; 156
    2306:	fe 4d       	sbci	r31, 0xDE	; 222
    2308:	04 80       	ldd	r0, Z+4	; 0x04
    230a:	f5 81       	ldd	r31, Z+5	; 0x05
    230c:	e0 2d       	mov	r30, r0
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
			{ i++; }
		
		if ( cmd_tbl[i].cmd != NULL )
		{
			printf_P( PSTR("usage: %s %s\r\n"), cmd_tbl[i].cmd, 
    230e:	80 81       	ld	r24, Z
    2310:	88 23       	and	r24, r24
    2312:	11 f4       	brne	.+4      	; 0x2318 <tm_cmd_help+0x11c>
    2314:	e7 e1       	ldi	r30, 0x17	; 23
    2316:	f0 e2       	ldi	r31, 0x20	; 32
    2318:	00 d0       	rcall	.+0      	; 0x231a <tm_cmd_help+0x11e>
    231a:	00 d0       	rcall	.+0      	; 0x231c <tm_cmd_help+0x120>
    231c:	00 d0       	rcall	.+0      	; 0x231e <tm_cmd_help+0x122>
    231e:	ad b7       	in	r26, 0x3d	; 61
    2320:	be b7       	in	r27, 0x3e	; 62
    2322:	11 96       	adiw	r26, 0x01	; 1
    2324:	8d e8       	ldi	r24, 0x8D	; 141
    2326:	93 e0       	ldi	r25, 0x03	; 3
    2328:	cd b7       	in	r28, 0x3d	; 61
    232a:	de b7       	in	r29, 0x3e	; 62
    232c:	89 83       	std	Y+1, r24	; 0x01
    232e:	9a 83       	std	Y+2, r25	; 0x02
    2330:	12 96       	adiw	r26, 0x02	; 2
    2332:	0d 93       	st	X+, r16
    2334:	1c 93       	st	X, r17
    2336:	13 97       	sbiw	r26, 0x03	; 3
    2338:	14 96       	adiw	r26, 0x04	; 4
    233a:	ed 93       	st	X+, r30
    233c:	fc 93       	st	X, r31
    233e:	15 97       	sbiw	r26, 0x05	; 5
    2340:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2344:	ed b7       	in	r30, 0x3d	; 61
    2346:	fe b7       	in	r31, 0x3e	; 62
    2348:	36 96       	adiw	r30, 0x06	; 6
    234a:	ed bf       	out	0x3d, r30	; 61
    234c:	fe bf       	out	0x3e, r31	; 62
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
		}
	}
}
    234e:	df 91       	pop	r29
    2350:	cf 91       	pop	r28
    2352:	1f 91       	pop	r17
    2354:	0f 91       	pop	r16
    2356:	ff 90       	pop	r15
    2358:	ef 90       	pop	r14
    235a:	df 90       	pop	r13
    235c:	08 95       	ret
/**************************************************************************/
void tm_cmd_help			(U8 argc, char **argv)
{
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
    235e:	00 d0       	rcall	.+0      	; 0x2360 <tm_cmd_help+0x164>
    2360:	8c e9       	ldi	r24, 0x9C	; 156
    2362:	93 e0       	ldi	r25, 0x03	; 3
    2364:	cd b7       	in	r28, 0x3d	; 61
    2366:	de b7       	in	r29, 0x3e	; 62
    2368:	89 83       	std	Y+1, r24	; 0x01
    236a:	9a 83       	std	Y+2, r25	; 0x02
    236c:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    2370:	0f 90       	pop	r0
    2372:	0f 90       	pop	r0
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
		}
	}
}
    2374:	df 91       	pop	r29
    2376:	cf 91       	pop	r28
    2378:	1f 91       	pop	r17
    237a:	0f 91       	pop	r16
    237c:	ff 90       	pop	r15
    237e:	ef 90       	pop	r14
    2380:	df 90       	pop	r13
    2382:	08 95       	ret

00002384 <tm_cmd_test_memory>:
/*!
	Test the flash memory integrity (chip and communication)   
*/
/**************************************************************************/
void tm_cmd_test_memory		(U8 argc, char **argv)
{
    2384:	6f 92       	push	r6
    2386:	7f 92       	push	r7
    2388:	8f 92       	push	r8
    238a:	9f 92       	push	r9
    238c:	af 92       	push	r10
    238e:	bf 92       	push	r11
    2390:	cf 92       	push	r12
    2392:	df 92       	push	r13
    2394:	ef 92       	push	r14
    2396:	ff 92       	push	r15
    2398:	0f 93       	push	r16
    239a:	1f 93       	push	r17
    239c:	df 93       	push	r29
    239e:	cf 93       	push	r28
    23a0:	0f 92       	push	r0
    23a2:	cd b7       	in	r28, 0x3d	; 61
    23a4:	de b7       	in	r29, 0x3e	; 62
	uint32_t ErrCounter = 0;
	uint32_t pos = 0;	
	uint8_t retVal = 0, Val = 0;

	// Erase memory
	printf_P ( PSTR("Deleting all information from flash...\r\n") );
    23a6:	00 d0       	rcall	.+0      	; 0x23a8 <tm_cmd_test_memory+0x24>
    23a8:	80 e3       	ldi	r24, 0x30	; 48
    23aa:	94 e0       	ldi	r25, 0x04	; 4
    23ac:	ad b7       	in	r26, 0x3d	; 61
    23ae:	be b7       	in	r27, 0x3e	; 62
    23b0:	11 96       	adiw	r26, 0x01	; 1
    23b2:	8d 93       	st	X+, r24
    23b4:	9c 93       	st	X, r25
    23b6:	12 97       	sbiw	r26, 0x02	; 2
    23b8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	
	dataflash_erase_all ( );
    23bc:	0f 90       	pop	r0
    23be:	0f 90       	pop	r0
    23c0:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <dataflash_erase_all>

	printf_P ( PSTR("Unprotecting entire flash...\r\n") );
    23c4:	00 d0       	rcall	.+0      	; 0x23c6 <tm_cmd_test_memory+0x42>
    23c6:	81 e1       	ldi	r24, 0x11	; 17
    23c8:	94 e0       	ldi	r25, 0x04	; 4
    23ca:	ed b7       	in	r30, 0x3d	; 61
    23cc:	fe b7       	in	r31, 0x3e	; 62
    23ce:	81 83       	std	Z+1, r24	; 0x01
    23d0:	92 83       	std	Z+2, r25	; 0x02
    23d2:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>

	dataflash_unprotect_all ( );
    23d6:	0f 90       	pop	r0
    23d8:	0f 90       	pop	r0
    23da:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <dataflash_unprotect_all>
    23de:	8f ef       	ldi	r24, 0xFF	; 255
    23e0:	94 e3       	ldi	r25, 0x34	; 52
    23e2:	ac e0       	ldi	r26, 0x0C	; 12
    23e4:	81 50       	subi	r24, 0x01	; 1
    23e6:	90 40       	sbci	r25, 0x00	; 0
    23e8:	a0 40       	sbci	r26, 0x00	; 0
    23ea:	e1 f7       	brne	.-8      	; 0x23e4 <tm_cmd_test_memory+0x60>
    23ec:	00 c0       	rjmp	.+0      	; 0x23ee <tm_cmd_test_memory+0x6a>
    23ee:	00 00       	nop

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	printf_P ( PSTR("Writing testing sequence...\r\n") );
    23f0:	00 d0       	rcall	.+0      	; 0x23f2 <tm_cmd_test_memory+0x6e>
    23f2:	83 ef       	ldi	r24, 0xF3	; 243
    23f4:	93 e0       	ldi	r25, 0x03	; 3
    23f6:	ad b7       	in	r26, 0x3d	; 61
    23f8:	be b7       	in	r27, 0x3e	; 62
    23fa:	11 96       	adiw	r26, 0x01	; 1
    23fc:	8d 93       	st	X+, r24
    23fe:	9c 93       	st	X, r25
    2400:	12 97       	sbiw	r26, 0x02	; 2
    2402:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2406:	0f 90       	pop	r0
    2408:	0f 90       	pop	r0
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    240a:	ee 24       	eor	r14, r14
    240c:	ff 24       	eor	r15, r15
    240e:	87 01       	movw	r16, r14
	{
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
			printf_P ( PSTR("%lu "), pos);
    2410:	9e ee       	ldi	r25, 0xEE	; 238
    2412:	a9 2e       	mov	r10, r25
    2414:	93 e0       	ldi	r25, 0x03	; 3
    2416:	b9 2e       	mov	r11, r25
    2418:	12 c0       	rjmp	.+36     	; 0x243e <tm_cmd_test_memory+0xba>

		dataflash_write	( pos, Val );
    241a:	c8 01       	movw	r24, r16
    241c:	b7 01       	movw	r22, r14
    241e:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <dataflash_write>
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	printf_P ( PSTR("Writing testing sequence...\r\n") );
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    2422:	08 94       	sec
    2424:	e1 1c       	adc	r14, r1
    2426:	f1 1c       	adc	r15, r1
    2428:	01 1d       	adc	r16, r1
    242a:	11 1d       	adc	r17, r1
    242c:	f0 e0       	ldi	r31, 0x00	; 0
    242e:	ef 16       	cp	r14, r31
    2430:	f0 e0       	ldi	r31, 0x00	; 0
    2432:	ff 06       	cpc	r15, r31
    2434:	f0 e4       	ldi	r31, 0x40	; 64
    2436:	0f 07       	cpc	r16, r31
    2438:	f0 e0       	ldi	r31, 0x00	; 0
    243a:	1f 07       	cpc	r17, r31
    243c:	19 f1       	breq	.+70     	; 0x2484 <tm_cmd_test_memory+0x100>

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	printf_P ( PSTR("Writing testing sequence...\r\n") );
    243e:	4e 2d       	mov	r20, r14
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
	{
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
    2440:	d8 01       	movw	r26, r16
    2442:	c7 01       	movw	r24, r14
    2444:	9f 70       	andi	r25, 0x0F	; 15
    2446:	a0 70       	andi	r26, 0x00	; 0
    2448:	b0 70       	andi	r27, 0x00	; 0
    244a:	00 97       	sbiw	r24, 0x00	; 0
    244c:	a1 05       	cpc	r26, r1
    244e:	b1 05       	cpc	r27, r1
    2450:	21 f7       	brne	.-56     	; 0x241a <tm_cmd_test_memory+0x96>
			printf_P ( PSTR("%lu "), pos);
    2452:	00 d0       	rcall	.+0      	; 0x2454 <tm_cmd_test_memory+0xd0>
    2454:	00 d0       	rcall	.+0      	; 0x2456 <tm_cmd_test_memory+0xd2>
    2456:	00 d0       	rcall	.+0      	; 0x2458 <tm_cmd_test_memory+0xd4>
    2458:	ed b7       	in	r30, 0x3d	; 61
    245a:	fe b7       	in	r31, 0x3e	; 62
    245c:	a1 82       	std	Z+1, r10	; 0x01
    245e:	b2 82       	std	Z+2, r11	; 0x02
    2460:	ad b7       	in	r26, 0x3d	; 61
    2462:	be b7       	in	r27, 0x3e	; 62
    2464:	13 96       	adiw	r26, 0x03	; 3
    2466:	ed 92       	st	X+, r14
    2468:	fd 92       	st	X+, r15
    246a:	0d 93       	st	X+, r16
    246c:	1c 93       	st	X, r17
    246e:	16 97       	sbiw	r26, 0x06	; 6
    2470:	e9 82       	std	Y+1, r14	; 0x01
    2472:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2476:	ed b7       	in	r30, 0x3d	; 61
    2478:	fe b7       	in	r31, 0x3e	; 62
    247a:	36 96       	adiw	r30, 0x06	; 6
    247c:	ed bf       	out	0x3d, r30	; 61
    247e:	fe bf       	out	0x3e, r31	; 62
    2480:	49 81       	ldd	r20, Y+1	; 0x01
    2482:	cb cf       	rjmp	.-106    	; 0x241a <tm_cmd_test_memory+0x96>
    2484:	8f e7       	ldi	r24, 0x7F	; 127
    2486:	94 e8       	ldi	r25, 0x84	; 132
    2488:	ae e1       	ldi	r26, 0x1E	; 30
    248a:	81 50       	subi	r24, 0x01	; 1
    248c:	90 40       	sbci	r25, 0x00	; 0
    248e:	a0 40       	sbci	r26, 0x00	; 0
    2490:	e1 f7       	brne	.-8      	; 0x248a <tm_cmd_test_memory+0x106>
    2492:	00 c0       	rjmp	.+0      	; 0x2494 <tm_cmd_test_memory+0x110>
    2494:	00 00       	nop
	}

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10000);
#endif
	printf_P ( PSTR("Reading the testing sequence..\r\n") );
    2496:	00 d0       	rcall	.+0      	; 0x2498 <tm_cmd_test_memory+0x114>
    2498:	8d ec       	ldi	r24, 0xCD	; 205
    249a:	93 e0       	ldi	r25, 0x03	; 3
    249c:	ad b7       	in	r26, 0x3d	; 61
    249e:	be b7       	in	r27, 0x3e	; 62
    24a0:	11 96       	adiw	r26, 0x01	; 1
    24a2:	8d 93       	st	X+, r24
    24a4:	9c 93       	st	X, r25
    24a6:	12 97       	sbiw	r26, 0x02	; 2
    24a8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    24ac:	0f 90       	pop	r0
    24ae:	0f 90       	pop	r0

	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    24b0:	ee 24       	eor	r14, r14
    24b2:	ff 24       	eor	r15, r15
    24b4:	87 01       	movw	r16, r14
	Test the flash memory integrity (chip and communication)   
*/
/**************************************************************************/
void tm_cmd_test_memory		(U8 argc, char **argv)
{
	uint32_t ErrCounter = 0;
    24b6:	aa 24       	eor	r10, r10
    24b8:	bb 24       	eor	r11, r11
    24ba:	65 01       	movw	r12, r10
	{
		retVal = dataflash_read	( pos );
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
			printf_P ( PSTR("%lu "), pos);
    24bc:	88 ec       	ldi	r24, 0xC8	; 200
    24be:	68 2e       	mov	r6, r24
    24c0:	83 e0       	ldi	r24, 0x03	; 3
    24c2:	78 2e       	mov	r7, r24
    24c4:	15 c0       	rjmp	.+42     	; 0x24f0 <tm_cmd_test_memory+0x16c>
		
		if (retVal!=Val)
    24c6:	89 14       	cp	r8, r9
    24c8:	29 f0       	breq	.+10     	; 0x24d4 <tm_cmd_test_memory+0x150>
			ErrCounter ++;
    24ca:	08 94       	sec
    24cc:	a1 1c       	adc	r10, r1
    24ce:	b1 1c       	adc	r11, r1
    24d0:	c1 1c       	adc	r12, r1
    24d2:	d1 1c       	adc	r13, r1
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10000);
#endif
	printf_P ( PSTR("Reading the testing sequence..\r\n") );

	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    24d4:	08 94       	sec
    24d6:	e1 1c       	adc	r14, r1
    24d8:	f1 1c       	adc	r15, r1
    24da:	01 1d       	adc	r16, r1
    24dc:	11 1d       	adc	r17, r1
    24de:	f0 e0       	ldi	r31, 0x00	; 0
    24e0:	ef 16       	cp	r14, r31
    24e2:	f0 e0       	ldi	r31, 0x00	; 0
    24e4:	ff 06       	cpc	r15, r31
    24e6:	f0 e4       	ldi	r31, 0x40	; 64
    24e8:	0f 07       	cpc	r16, r31
    24ea:	f0 e0       	ldi	r31, 0x00	; 0
    24ec:	1f 07       	cpc	r17, r31
    24ee:	39 f1       	breq	.+78     	; 0x253e <tm_cmd_test_memory+0x1ba>
	{
		retVal = dataflash_read	( pos );
    24f0:	c8 01       	movw	r24, r16
    24f2:	b7 01       	movw	r22, r14
    24f4:	0e 94 2c 1c 	call	0x3858	; 0x3858 <dataflash_read>
    24f8:	98 2e       	mov	r9, r24
    24fa:	8e 2c       	mov	r8, r14
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
    24fc:	a8 01       	movw	r20, r16
    24fe:	97 01       	movw	r18, r14
    2500:	3f 70       	andi	r19, 0x0F	; 15
    2502:	40 70       	andi	r20, 0x00	; 0
    2504:	50 70       	andi	r21, 0x00	; 0
    2506:	21 15       	cp	r18, r1
    2508:	31 05       	cpc	r19, r1
    250a:	41 05       	cpc	r20, r1
    250c:	51 05       	cpc	r21, r1
    250e:	d9 f6       	brne	.-74     	; 0x24c6 <tm_cmd_test_memory+0x142>
			printf_P ( PSTR("%lu "), pos);
    2510:	00 d0       	rcall	.+0      	; 0x2512 <tm_cmd_test_memory+0x18e>
    2512:	00 d0       	rcall	.+0      	; 0x2514 <tm_cmd_test_memory+0x190>
    2514:	00 d0       	rcall	.+0      	; 0x2516 <tm_cmd_test_memory+0x192>
    2516:	ed b7       	in	r30, 0x3d	; 61
    2518:	fe b7       	in	r31, 0x3e	; 62
    251a:	61 82       	std	Z+1, r6	; 0x01
    251c:	72 82       	std	Z+2, r7	; 0x02
    251e:	ad b7       	in	r26, 0x3d	; 61
    2520:	be b7       	in	r27, 0x3e	; 62
    2522:	13 96       	adiw	r26, 0x03	; 3
    2524:	ed 92       	st	X+, r14
    2526:	fd 92       	st	X+, r15
    2528:	0d 93       	st	X+, r16
    252a:	1c 93       	st	X, r17
    252c:	16 97       	sbiw	r26, 0x06	; 6
    252e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2532:	ed b7       	in	r30, 0x3d	; 61
    2534:	fe b7       	in	r31, 0x3e	; 62
    2536:	36 96       	adiw	r30, 0x06	; 6
    2538:	ed bf       	out	0x3d, r30	; 61
    253a:	fe bf       	out	0x3e, r31	; 62
    253c:	c4 cf       	rjmp	.-120    	; 0x24c6 <tm_cmd_test_memory+0x142>
		
		if (retVal!=Val)
			ErrCounter ++;
	}

	printf_P(PSTR("Number of errors: %lu\r\n"), ErrCounter);
    253e:	00 d0       	rcall	.+0      	; 0x2540 <tm_cmd_test_memory+0x1bc>
    2540:	00 d0       	rcall	.+0      	; 0x2542 <tm_cmd_test_memory+0x1be>
    2542:	00 d0       	rcall	.+0      	; 0x2544 <tm_cmd_test_memory+0x1c0>
    2544:	80 eb       	ldi	r24, 0xB0	; 176
    2546:	93 e0       	ldi	r25, 0x03	; 3
    2548:	ad b7       	in	r26, 0x3d	; 61
    254a:	be b7       	in	r27, 0x3e	; 62
    254c:	11 96       	adiw	r26, 0x01	; 1
    254e:	8d 93       	st	X+, r24
    2550:	9c 93       	st	X, r25
    2552:	12 97       	sbiw	r26, 0x02	; 2
    2554:	ed b7       	in	r30, 0x3d	; 61
    2556:	fe b7       	in	r31, 0x3e	; 62
    2558:	a3 82       	std	Z+3, r10	; 0x03
    255a:	b4 82       	std	Z+4, r11	; 0x04
    255c:	c5 82       	std	Z+5, r12	; 0x05
    255e:	d6 82       	std	Z+6, r13	; 0x06
    2560:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2564:	8d b7       	in	r24, 0x3d	; 61
    2566:	9e b7       	in	r25, 0x3e	; 62
    2568:	06 96       	adiw	r24, 0x06	; 6
    256a:	8d bf       	out	0x3d, r24	; 61
    256c:	9e bf       	out	0x3e, r25	; 62
}
    256e:	0f 90       	pop	r0
    2570:	cf 91       	pop	r28
    2572:	df 91       	pop	r29
    2574:	1f 91       	pop	r17
    2576:	0f 91       	pop	r16
    2578:	ff 90       	pop	r15
    257a:	ef 90       	pop	r14
    257c:	df 90       	pop	r13
    257e:	cf 90       	pop	r12
    2580:	bf 90       	pop	r11
    2582:	af 90       	pop	r10
    2584:	9f 90       	pop	r9
    2586:	8f 90       	pop	r8
    2588:	7f 90       	pop	r7
    258a:	6f 90       	pop	r6
    258c:	08 95       	ret

0000258e <tm_cmd_read>:
/*!
	read out data from the flash chip   
*/
/**************************************************************************/
void tm_cmd_read			(U8 argc, char **argv)
{
    258e:	2f 92       	push	r2
    2590:	3f 92       	push	r3
    2592:	4f 92       	push	r4
    2594:	5f 92       	push	r5
    2596:	6f 92       	push	r6
    2598:	7f 92       	push	r7
    259a:	8f 92       	push	r8
    259c:	9f 92       	push	r9
    259e:	af 92       	push	r10
    25a0:	bf 92       	push	r11
    25a2:	cf 92       	push	r12
    25a4:	df 92       	push	r13
    25a6:	ef 92       	push	r14
    25a8:	ff 92       	push	r15
    25aa:	0f 93       	push	r16
    25ac:	1f 93       	push	r17
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
    25b2:	eb 01       	movw	r28, r22
	if ( argc != 3 )
    25b4:	83 30       	cpi	r24, 0x03	; 3
    25b6:	01 f1       	breq	.+64     	; 0x25f8 <tm_cmd_read+0x6a>
	{
		printf_P( PSTR("usage: read [start_address] [length]\r\n"));
    25b8:	00 d0       	rcall	.+0      	; 0x25ba <tm_cmd_read+0x2c>
    25ba:	88 eb       	ldi	r24, 0xB8	; 184
    25bc:	97 e0       	ldi	r25, 0x07	; 7
    25be:	ad b7       	in	r26, 0x3d	; 61
    25c0:	be b7       	in	r27, 0x3e	; 62
    25c2:	11 96       	adiw	r26, 0x01	; 1
    25c4:	8d 93       	st	X+, r24
    25c6:	9c 93       	st	X, r25
    25c8:	12 97       	sbiw	r26, 0x02	; 2
    25ca:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    25ce:	0f 90       	pop	r0
    25d0:	0f 90       	pop	r0

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
			printf_P( PSTR("A%lu:   0x%x\r\n"), (iStart+iIterator), 
									dataflash_read (iStart+iIterator) );
	}
}
    25d2:	df 91       	pop	r29
    25d4:	cf 91       	pop	r28
    25d6:	1f 91       	pop	r17
    25d8:	0f 91       	pop	r16
    25da:	ff 90       	pop	r15
    25dc:	ef 90       	pop	r14
    25de:	df 90       	pop	r13
    25e0:	cf 90       	pop	r12
    25e2:	bf 90       	pop	r11
    25e4:	af 90       	pop	r10
    25e6:	9f 90       	pop	r9
    25e8:	8f 90       	pop	r8
    25ea:	7f 90       	pop	r7
    25ec:	6f 90       	pop	r6
    25ee:	5f 90       	pop	r5
    25f0:	4f 90       	pop	r4
    25f2:	3f 90       	pop	r3
    25f4:	2f 90       	pop	r2
    25f6:	08 95       	ret
		return;	
	}
	else
	{
		uint32_t iIterator;
		uint32_t iStart = atol (argv[1]);
    25f8:	8a 81       	ldd	r24, Y+2	; 0x02
    25fa:	9b 81       	ldd	r25, Y+3	; 0x03
    25fc:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    2600:	3b 01       	movw	r6, r22
    2602:	4c 01       	movw	r8, r24
		uint32_t iLength = atol (argv[2]);
    2604:	8c 81       	ldd	r24, Y+4	; 0x04
    2606:	9d 81       	ldd	r25, Y+5	; 0x05
    2608:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    260c:	1b 01       	movw	r2, r22
    260e:	2c 01       	movw	r4, r24

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);
    2610:	ed b7       	in	r30, 0x3d	; 61
    2612:	fe b7       	in	r31, 0x3e	; 62
    2614:	3a 97       	sbiw	r30, 0x0a	; 10
    2616:	ed bf       	out	0x3d, r30	; 61
    2618:	fe bf       	out	0x3e, r31	; 62
    261a:	31 96       	adiw	r30, 0x01	; 1
    261c:	81 ea       	ldi	r24, 0xA1	; 161
    261e:	97 e0       	ldi	r25, 0x07	; 7
    2620:	ad b7       	in	r26, 0x3d	; 61
    2622:	be b7       	in	r27, 0x3e	; 62
    2624:	11 96       	adiw	r26, 0x01	; 1
    2626:	8d 93       	st	X+, r24
    2628:	9c 93       	st	X, r25
    262a:	12 97       	sbiw	r26, 0x02	; 2
    262c:	62 82       	std	Z+2, r6	; 0x02
    262e:	73 82       	std	Z+3, r7	; 0x03
    2630:	84 82       	std	Z+4, r8	; 0x04
    2632:	95 82       	std	Z+5, r9	; 0x05
    2634:	d2 01       	movw	r26, r4
    2636:	c1 01       	movw	r24, r2
    2638:	86 0d       	add	r24, r6
    263a:	97 1d       	adc	r25, r7
    263c:	a8 1d       	adc	r26, r8
    263e:	b9 1d       	adc	r27, r9
    2640:	86 83       	std	Z+6, r24	; 0x06
    2642:	97 83       	std	Z+7, r25	; 0x07
    2644:	a0 87       	std	Z+8, r26	; 0x08
    2646:	b1 87       	std	Z+9, r27	; 0x09
    2648:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    264c:	ed b7       	in	r30, 0x3d	; 61
    264e:	fe b7       	in	r31, 0x3e	; 62
    2650:	3a 96       	adiw	r30, 0x0a	; 10
    2652:	ed bf       	out	0x3d, r30	; 61
    2654:	fe bf       	out	0x3e, r31	; 62

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    2656:	ee 24       	eor	r14, r14
    2658:	ff 24       	eor	r15, r15
    265a:	87 01       	movw	r16, r14
    265c:	c2 e9       	ldi	r28, 0x92	; 146
    265e:	d7 e0       	ldi	r29, 0x07	; 7
	{
		uint32_t iIterator;
		uint32_t iStart = atol (argv[1]);
		uint32_t iLength = atol (argv[2]);

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);
    2660:	64 01       	movw	r12, r8
    2662:	53 01       	movw	r10, r6
    2664:	ae 0c       	add	r10, r14
    2666:	bf 1c       	adc	r11, r15
    2668:	c0 1e       	adc	r12, r16
    266a:	d1 1e       	adc	r13, r17

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
			printf_P( PSTR("A%lu:   0x%x\r\n"), (iStart+iIterator), 
									dataflash_read (iStart+iIterator) );
    266c:	c6 01       	movw	r24, r12
    266e:	b5 01       	movw	r22, r10
    2670:	0e 94 2c 1c 	call	0x3858	; 0x3858 <dataflash_read>
		uint32_t iLength = atol (argv[2]);

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
			printf_P( PSTR("A%lu:   0x%x\r\n"), (iStart+iIterator), 
    2674:	2d b7       	in	r18, 0x3d	; 61
    2676:	3e b7       	in	r19, 0x3e	; 62
    2678:	28 50       	subi	r18, 0x08	; 8
    267a:	30 40       	sbci	r19, 0x00	; 0
    267c:	2d bf       	out	0x3d, r18	; 61
    267e:	3e bf       	out	0x3e, r19	; 62
    2680:	ed b7       	in	r30, 0x3d	; 61
    2682:	fe b7       	in	r31, 0x3e	; 62
    2684:	31 96       	adiw	r30, 0x01	; 1
    2686:	ad b7       	in	r26, 0x3d	; 61
    2688:	be b7       	in	r27, 0x3e	; 62
    268a:	11 96       	adiw	r26, 0x01	; 1
    268c:	cd 93       	st	X+, r28
    268e:	dc 93       	st	X, r29
    2690:	12 97       	sbiw	r26, 0x02	; 2
    2692:	a2 82       	std	Z+2, r10	; 0x02
    2694:	b3 82       	std	Z+3, r11	; 0x03
    2696:	c4 82       	std	Z+4, r12	; 0x04
    2698:	d5 82       	std	Z+5, r13	; 0x05
    269a:	86 83       	std	Z+6, r24	; 0x06
    269c:	17 82       	std	Z+7, r1	; 0x07
    269e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		uint32_t iStart = atol (argv[1]);
		uint32_t iLength = atol (argv[2]);

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    26a2:	08 94       	sec
    26a4:	e1 1c       	adc	r14, r1
    26a6:	f1 1c       	adc	r15, r1
    26a8:	01 1d       	adc	r16, r1
    26aa:	11 1d       	adc	r17, r1
    26ac:	ed b7       	in	r30, 0x3d	; 61
    26ae:	fe b7       	in	r31, 0x3e	; 62
    26b0:	38 96       	adiw	r30, 0x08	; 8
    26b2:	ed bf       	out	0x3d, r30	; 61
    26b4:	fe bf       	out	0x3e, r31	; 62
    26b6:	2e 14       	cp	r2, r14
    26b8:	3f 04       	cpc	r3, r15
    26ba:	40 06       	cpc	r4, r16
    26bc:	51 06       	cpc	r5, r17
    26be:	80 f6       	brcc	.-96     	; 0x2660 <tm_cmd_read+0xd2>
    26c0:	88 cf       	rjmp	.-240    	; 0x25d2 <tm_cmd_read+0x44>

000026c2 <tm_cmd_test_led>:
/*!
	Test some LEDs with brightness values   
*/
/**************************************************************************/
void tm_cmd_test_led		(U8 argc, char **argv)
{
    26c2:	df 92       	push	r13
    26c4:	ef 92       	push	r14
    26c6:	ff 92       	push	r15
    26c8:	0f 93       	push	r16
    26ca:	1f 93       	push	r17
    26cc:	cf 93       	push	r28
    26ce:	df 93       	push	r29
    26d0:	eb 01       	movw	r28, r22
	if ( argc < 2 )
    26d2:	82 30       	cpi	r24, 0x02	; 2
    26d4:	08 f4       	brcc	.+2      	; 0x26d8 <tm_cmd_test_led+0x16>
    26d6:	72 c0       	rjmp	.+228    	; 0x27bc <tm_cmd_test_led+0xfa>
	else
	{
		uint8_t i;
		uint16_t val = 0;
		
		MUX_ENABLE;
    26d8:	80 e8       	ldi	r24, 0x80	; 128
    26da:	80 93 06 06 	sts	0x0606, r24
		
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
    26de:	80 e7       	ldi	r24, 0x70	; 112
    26e0:	80 93 06 06 	sts	0x0606, r24
    26e4:	8a 81       	ldd	r24, Y+2	; 0x02
    26e6:	9b 81       	ldd	r25, Y+3	; 0x03
    26e8:	0e 94 77 23 	call	0x46ee	; 0x46ee <atoi>
    26ec:	82 95       	swap	r24
    26ee:	80 7f       	andi	r24, 0xF0	; 240
    26f0:	80 93 05 06 	sts	0x0605, r24
		
		val = atol (argv[3]);
    26f4:	8e 81       	ldd	r24, Y+6	; 0x06
    26f6:	9f 81       	ldd	r25, Y+7	; 0x07
    26f8:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    26fc:	24 e0       	ldi	r18, 0x04	; 4
    26fe:	e2 2e       	mov	r14, r18
    2700:	f1 2c       	mov	r15, r1
    2702:	ec 0e       	add	r14, r28
    2704:	fd 1e       	adc	r15, r29
			
		for (i = 0; i<strlen(argv[2]); i++)
    2706:	dd 24       	eor	r13, r13
    2708:	f7 01       	movw	r30, r14
    270a:	80 81       	ld	r24, Z
    270c:	91 81       	ldd	r25, Z+1	; 0x01
		{
			if (argv[2][i]=='R')
			{
				RED_PWM_CTRL.CCABUF = val;        
    270e:	40 e0       	ldi	r20, 0x00	; 0
    2710:	59 e0       	ldi	r21, 0x09	; 9
				RED_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='G')
			{
				GREEN_PWM_CTRL.CCABUF = val;        
    2712:	c0 e0       	ldi	r28, 0x00	; 0
    2714:	d8 e0       	ldi	r29, 0x08	; 8
				GREEN_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='B')
			{
				BLUE_PWM_CTRL.CCABUF = val;        
    2716:	00 e0       	ldi	r16, 0x00	; 0
    2718:	1a e0       	ldi	r17, 0x0A	; 10
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
		
		val = atol (argv[3]);
			
		for (i = 0; i<strlen(argv[2]); i++)
    271a:	2d 2d       	mov	r18, r13
    271c:	30 e0       	ldi	r19, 0x00	; 0
    271e:	fc 01       	movw	r30, r24
    2720:	01 90       	ld	r0, Z+
    2722:	00 20       	and	r0, r0
    2724:	e9 f7       	brne	.-6      	; 0x2720 <tm_cmd_test_led+0x5e>
    2726:	31 97       	sbiw	r30, 0x01	; 1
    2728:	e8 1b       	sub	r30, r24
    272a:	f9 0b       	sbc	r31, r25
    272c:	2e 17       	cp	r18, r30
    272e:	3f 07       	cpc	r19, r31
    2730:	08 f0       	brcs	.+2      	; 0x2734 <tm_cmd_test_led+0x72>
    2732:	51 c0       	rjmp	.+162    	; 0x27d6 <tm_cmd_test_led+0x114>
		{
			if (argv[2][i]=='R')
    2734:	fc 01       	movw	r30, r24
    2736:	e2 0f       	add	r30, r18
    2738:	f3 1f       	adc	r31, r19
    273a:	e0 81       	ld	r30, Z
    273c:	e2 35       	cpi	r30, 0x52	; 82
    273e:	29 f1       	breq	.+74     	; 0x278a <tm_cmd_test_led+0xc8>
				RED_PWM_CTRL.CCBBUF = val;
				RED_PWM_CTRL.CCCBUF = val;
				RED_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='G')
    2740:	e7 34       	cpi	r30, 0x47	; 71
    2742:	99 f0       	breq	.+38     	; 0x276a <tm_cmd_test_led+0xa8>
				GREEN_PWM_CTRL.CCBBUF = val;
				GREEN_PWM_CTRL.CCCBUF = val;
				GREEN_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='B')
    2744:	e2 34       	cpi	r30, 0x42	; 66
    2746:	11 f0       	breq	.+4      	; 0x274c <tm_cmd_test_led+0x8a>
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
		
		val = atol (argv[3]);
			
		for (i = 0; i<strlen(argv[2]); i++)
    2748:	d3 94       	inc	r13
    274a:	e7 cf       	rjmp	.-50     	; 0x271a <tm_cmd_test_led+0x58>
				GREEN_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='B')
			{
				BLUE_PWM_CTRL.CCABUF = val;        
    274c:	f8 01       	movw	r30, r16
    274e:	60 af       	std	Z+56, r22	; 0x38
    2750:	71 af       	std	Z+57, r23	; 0x39
				BLUE_PWM_CTRL.CCBBUF = val;
    2752:	62 af       	std	Z+58, r22	; 0x3a
    2754:	73 af       	std	Z+59, r23	; 0x3b
				BLUE_PWM_CTRL.CCCBUF = val;
    2756:	64 af       	std	Z+60, r22	; 0x3c
    2758:	75 af       	std	Z+61, r23	; 0x3d
				BLUE_PWM_CTRL.CCDBUF = val;
    275a:	66 af       	std	Z+62, r22	; 0x3e
    275c:	77 af       	std	Z+63, r23	; 0x3f
    275e:	d7 01       	movw	r26, r14
    2760:	8d 91       	ld	r24, X+
    2762:	9c 91       	ld	r25, X
    2764:	11 97       	sbiw	r26, 0x01	; 1
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
		
		val = atol (argv[3]);
			
		for (i = 0; i<strlen(argv[2]); i++)
    2766:	d3 94       	inc	r13
    2768:	d8 cf       	rjmp	.-80     	; 0x271a <tm_cmd_test_led+0x58>
				RED_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='G')
			{
				GREEN_PWM_CTRL.CCABUF = val;        
    276a:	68 af       	std	Y+56, r22	; 0x38
    276c:	79 af       	std	Y+57, r23	; 0x39
				GREEN_PWM_CTRL.CCBBUF = val;
    276e:	6a af       	std	Y+58, r22	; 0x3a
    2770:	7b af       	std	Y+59, r23	; 0x3b
				GREEN_PWM_CTRL.CCCBUF = val;
    2772:	6c af       	std	Y+60, r22	; 0x3c
    2774:	7d af       	std	Y+61, r23	; 0x3d
				GREEN_PWM_CTRL.CCDBUF = val;
    2776:	6e af       	std	Y+62, r22	; 0x3e
    2778:	7f af       	std	Y+63, r23	; 0x3f
    277a:	d7 01       	movw	r26, r14
    277c:	8d 91       	ld	r24, X+
    277e:	9c 91       	ld	r25, X
    2780:	28 0f       	add	r18, r24
    2782:	39 1f       	adc	r19, r25
    2784:	d9 01       	movw	r26, r18
    2786:	ec 91       	ld	r30, X
    2788:	dd cf       	rjmp	.-70     	; 0x2744 <tm_cmd_test_led+0x82>
			
		for (i = 0; i<strlen(argv[2]); i++)
		{
			if (argv[2][i]=='R')
			{
				RED_PWM_CTRL.CCABUF = val;        
    278a:	da 01       	movw	r26, r20
    278c:	d8 96       	adiw	r26, 0x38	; 56
    278e:	6d 93       	st	X+, r22
    2790:	7c 93       	st	X, r23
    2792:	d9 97       	sbiw	r26, 0x39	; 57
				RED_PWM_CTRL.CCBBUF = val;
    2794:	da 96       	adiw	r26, 0x3a	; 58
    2796:	6d 93       	st	X+, r22
    2798:	7c 93       	st	X, r23
    279a:	db 97       	sbiw	r26, 0x3b	; 59
				RED_PWM_CTRL.CCCBUF = val;
    279c:	dc 96       	adiw	r26, 0x3c	; 60
    279e:	6d 93       	st	X+, r22
    27a0:	7c 93       	st	X, r23
    27a2:	dd 97       	sbiw	r26, 0x3d	; 61
				RED_PWM_CTRL.CCDBUF = val;
    27a4:	de 96       	adiw	r26, 0x3e	; 62
    27a6:	6d 93       	st	X+, r22
    27a8:	7c 93       	st	X, r23
    27aa:	df 97       	sbiw	r26, 0x3f	; 63
    27ac:	f7 01       	movw	r30, r14
    27ae:	80 81       	ld	r24, Z
    27b0:	91 81       	ldd	r25, Z+1	; 0x01
    27b2:	fc 01       	movw	r30, r24
    27b4:	e2 0f       	add	r30, r18
    27b6:	f3 1f       	adc	r31, r19
    27b8:	e0 81       	ld	r30, Z
    27ba:	c2 cf       	rjmp	.-124    	; 0x2740 <tm_cmd_test_led+0x7e>
/**************************************************************************/
void tm_cmd_test_led		(U8 argc, char **argv)
{
	if ( argc < 2 )
	{
		printf_P(PSTR("usage: test_led [row#] [RGB] [val]\n"));
    27bc:	00 d0       	rcall	.+0      	; 0x27be <tm_cmd_test_led+0xfc>
    27be:	89 e5       	ldi	r24, 0x59	; 89
    27c0:	94 e0       	ldi	r25, 0x04	; 4
    27c2:	ad b7       	in	r26, 0x3d	; 61
    27c4:	be b7       	in	r27, 0x3e	; 62
    27c6:	11 96       	adiw	r26, 0x01	; 1
    27c8:	8d 93       	st	X+, r24
    27ca:	9c 93       	st	X, r25
    27cc:	12 97       	sbiw	r26, 0x02	; 2
    27ce:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    27d2:	0f 90       	pop	r0
    27d4:	0f 90       	pop	r0
				BLUE_PWM_CTRL.CCCBUF = val;
				BLUE_PWM_CTRL.CCDBUF = val;
			}
		}
	} 
}
    27d6:	df 91       	pop	r29
    27d8:	cf 91       	pop	r28
    27da:	1f 91       	pop	r17
    27dc:	0f 91       	pop	r16
    27de:	ff 90       	pop	r15
    27e0:	ef 90       	pop	r14
    27e2:	df 90       	pop	r13
    27e4:	08 95       	ret

000027e6 <tm_cmd_write>:
/*!
	write stuff to the flash   
*/
/**************************************************************************/
void tm_cmd_write			(U8 argc, char **argv)
{
    27e6:	1f 93       	push	r17
    27e8:	cf 93       	push	r28
    27ea:	df 93       	push	r29
    27ec:	eb 01       	movw	r28, r22
	if ( argc != 3 )
    27ee:	83 30       	cpi	r24, 0x03	; 3
    27f0:	09 f0       	breq	.+2      	; 0x27f4 <tm_cmd_write+0xe>
    27f2:	51 c0       	rjmp	.+162    	; 0x2896 <tm_cmd_write+0xb0>
		printf_P (PSTR("usage: write [32bit start_address] [8bit length]\r\n"));
		return;	
	}
	else
	{
		g_dataStartAddress = atol(argv[1]);
    27f4:	8a 81       	ldd	r24, Y+2	; 0x02
    27f6:	9b 81       	ldd	r25, Y+3	; 0x03
    27f8:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    27fc:	9b 01       	movw	r18, r22
    27fe:	ac 01       	movw	r20, r24
    2800:	20 93 27 22 	sts	0x2227, r18
    2804:	30 93 28 22 	sts	0x2228, r19
    2808:	40 93 29 22 	sts	0x2229, r20
    280c:	50 93 2a 22 	sts	0x222A, r21
		g_leftDataToGet = atoi(argv[2]);
    2810:	8c 81       	ldd	r24, Y+4	; 0x04
    2812:	9d 81       	ldd	r25, Y+5	; 0x05
    2814:	0e 94 77 23 	call	0x46ee	; 0x46ee <atoi>
    2818:	80 93 26 22 	sts	0x2226, r24

		if ( g_leftDataToGet > 15 ) g_leftDataToGet = 15;	// Don't allow more then 15 bytes
    281c:	80 91 26 22 	lds	r24, 0x2226
    2820:	80 31       	cpi	r24, 0x10	; 16
    2822:	a8 f5       	brcc	.+106    	; 0x288e <tm_cmd_write+0xa8>

		printf_P (PSTR("writing: %lu to %lu;\r\n"), g_dataStartAddress, 
    2824:	20 91 27 22 	lds	r18, 0x2227
    2828:	30 91 28 22 	lds	r19, 0x2228
    282c:	40 91 29 22 	lds	r20, 0x2229
    2830:	50 91 2a 22 	lds	r21, 0x222A
    2834:	10 91 26 22 	lds	r17, 0x2226
    2838:	80 91 27 22 	lds	r24, 0x2227
    283c:	90 91 28 22 	lds	r25, 0x2228
    2840:	a0 91 29 22 	lds	r26, 0x2229
    2844:	b0 91 2a 22 	lds	r27, 0x222A
    2848:	ed b7       	in	r30, 0x3d	; 61
    284a:	fe b7       	in	r31, 0x3e	; 62
    284c:	3a 97       	sbiw	r30, 0x0a	; 10
    284e:	ed bf       	out	0x3d, r30	; 61
    2850:	fe bf       	out	0x3e, r31	; 62
    2852:	31 96       	adiw	r30, 0x01	; 1
    2854:	68 e4       	ldi	r22, 0x48	; 72
    2856:	77 e0       	ldi	r23, 0x07	; 7
    2858:	cd b7       	in	r28, 0x3d	; 61
    285a:	de b7       	in	r29, 0x3e	; 62
    285c:	69 83       	std	Y+1, r22	; 0x01
    285e:	7a 83       	std	Y+2, r23	; 0x02
    2860:	22 83       	std	Z+2, r18	; 0x02
    2862:	33 83       	std	Z+3, r19	; 0x03
    2864:	44 83       	std	Z+4, r20	; 0x04
    2866:	55 83       	std	Z+5, r21	; 0x05
    2868:	81 0f       	add	r24, r17
    286a:	91 1d       	adc	r25, r1
    286c:	a1 1d       	adc	r26, r1
    286e:	b1 1d       	adc	r27, r1
    2870:	86 83       	std	Z+6, r24	; 0x06
    2872:	97 83       	std	Z+7, r25	; 0x07
    2874:	a0 87       	std	Z+8, r26	; 0x08
    2876:	b1 87       	std	Z+9, r27	; 0x09
    2878:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    287c:	ed b7       	in	r30, 0x3d	; 61
    287e:	fe b7       	in	r31, 0x3e	; 62
    2880:	3a 96       	adiw	r30, 0x0a	; 10
    2882:	ed bf       	out	0x3d, r30	; 61
    2884:	fe bf       	out	0x3e, r31	; 62
											g_dataStartAddress+g_leftDataToGet);

//		for (iIterator=0; iIterator<=iLength; iIterator ++ )
//			dataflash_write ( iStart+iIterator, swUART_ReadChar( ) );
	}
}
    2886:	df 91       	pop	r29
    2888:	cf 91       	pop	r28
    288a:	1f 91       	pop	r17
    288c:	08 95       	ret
	else
	{
		g_dataStartAddress = atol(argv[1]);
		g_leftDataToGet = atoi(argv[2]);

		if ( g_leftDataToGet > 15 ) g_leftDataToGet = 15;	// Don't allow more then 15 bytes
    288e:	8f e0       	ldi	r24, 0x0F	; 15
    2890:	80 93 26 22 	sts	0x2226, r24
    2894:	c7 cf       	rjmp	.-114    	; 0x2824 <tm_cmd_write+0x3e>
/**************************************************************************/
void tm_cmd_write			(U8 argc, char **argv)
{
	if ( argc != 3 )
	{
		printf_P (PSTR("usage: write [32bit start_address] [8bit length]\r\n"));
    2896:	00 d0       	rcall	.+0      	; 0x2898 <tm_cmd_write+0xb2>
    2898:	8f e5       	ldi	r24, 0x5F	; 95
    289a:	97 e0       	ldi	r25, 0x07	; 7
    289c:	cd b7       	in	r28, 0x3d	; 61
    289e:	de b7       	in	r29, 0x3e	; 62
    28a0:	89 83       	std	Y+1, r24	; 0x01
    28a2:	9a 83       	std	Y+2, r25	; 0x02
    28a4:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    28a8:	0f 90       	pop	r0
    28aa:	0f 90       	pop	r0
											g_dataStartAddress+g_leftDataToGet);

//		for (iIterator=0; iIterator<=iLength; iIterator ++ )
//			dataflash_write ( iStart+iIterator, swUART_ReadChar( ) );
	}
}
    28ac:	df 91       	pop	r29
    28ae:	cf 91       	pop	r28
    28b0:	1f 91       	pop	r17
    28b2:	08 95       	ret

000028b4 <tm_cmd_read_block>:
/*!
	read the whole block from the flash   
*/
/**************************************************************************/
void tm_cmd_read_block		(U8 argc, char **argv)
{
    28b4:	ef 92       	push	r14
    28b6:	ff 92       	push	r15
    28b8:	0f 93       	push	r16
    28ba:	1f 93       	push	r17
	if ( argc != 2 )
    28bc:	82 30       	cpi	r24, 0x02	; 2
    28be:	09 f0       	breq	.+2      	; 0x28c2 <tm_cmd_read_block+0xe>
    28c0:	3f c0       	rjmp	.+126    	; 0x2940 <tm_cmd_read_block+0x8c>
	}
	else
	{
		uint32_t iIterator = 0;
		
		g_dataStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
    28c2:	fb 01       	movw	r30, r22
    28c4:	82 81       	ldd	r24, Z+2	; 0x02
    28c6:	93 81       	ldd	r25, Z+3	; 0x03
    28c8:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    28cc:	3c e0       	ldi	r19, 0x0C	; 12
    28ce:	66 0f       	add	r22, r22
    28d0:	77 1f       	adc	r23, r23
    28d2:	88 1f       	adc	r24, r24
    28d4:	99 1f       	adc	r25, r25
    28d6:	3a 95       	dec	r19
    28d8:	d1 f7       	brne	.-12     	; 0x28ce <tm_cmd_read_block+0x1a>
    28da:	60 93 27 22 	sts	0x2227, r22
    28de:	70 93 28 22 	sts	0x2228, r23
    28e2:	80 93 29 22 	sts	0x2229, r24
    28e6:	90 93 2a 22 	sts	0x222A, r25
	
		for (iIterator=0; iIterator<=FLASH_BLOCK4_SIZE; iIterator ++ )
    28ea:	ee 24       	eor	r14, r14
    28ec:	ff 24       	eor	r15, r15
    28ee:	87 01       	movw	r16, r14
			putchar(dataflash_read ( g_dataStartAddress+iIterator ));
    28f0:	60 91 27 22 	lds	r22, 0x2227
    28f4:	70 91 28 22 	lds	r23, 0x2228
    28f8:	80 91 29 22 	lds	r24, 0x2229
    28fc:	90 91 2a 22 	lds	r25, 0x222A
    2900:	6e 0d       	add	r22, r14
    2902:	7f 1d       	adc	r23, r15
    2904:	80 1f       	adc	r24, r16
    2906:	91 1f       	adc	r25, r17
    2908:	0e 94 2c 1c 	call	0x3858	; 0x3858 <dataflash_read>
    290c:	60 91 27 23 	lds	r22, 0x2327
    2910:	70 91 28 23 	lds	r23, 0x2328
    2914:	90 e0       	ldi	r25, 0x00	; 0
    2916:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
	{
		uint32_t iIterator = 0;
		
		g_dataStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
	
		for (iIterator=0; iIterator<=FLASH_BLOCK4_SIZE; iIterator ++ )
    291a:	08 94       	sec
    291c:	e1 1c       	adc	r14, r1
    291e:	f1 1c       	adc	r15, r1
    2920:	01 1d       	adc	r16, r1
    2922:	11 1d       	adc	r17, r1
    2924:	f1 e0       	ldi	r31, 0x01	; 1
    2926:	ef 16       	cp	r14, r31
    2928:	f0 e1       	ldi	r31, 0x10	; 16
    292a:	ff 06       	cpc	r15, r31
    292c:	f0 e0       	ldi	r31, 0x00	; 0
    292e:	0f 07       	cpc	r16, r31
    2930:	f0 e0       	ldi	r31, 0x00	; 0
    2932:	1f 07       	cpc	r17, r31
    2934:	e9 f6       	brne	.-70     	; 0x28f0 <tm_cmd_read_block+0x3c>
			putchar(dataflash_read ( g_dataStartAddress+iIterator ));
	}
}
    2936:	1f 91       	pop	r17
    2938:	0f 91       	pop	r16
    293a:	ff 90       	pop	r15
    293c:	ef 90       	pop	r14
    293e:	08 95       	ret
/**************************************************************************/
void tm_cmd_read_block		(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: read_block [start_block]\r\n"));
    2940:	00 d0       	rcall	.+0      	; 0x2942 <tm_cmd_read_block+0x8e>
    2942:	81 ee       	ldi	r24, 0xE1	; 225
    2944:	96 e0       	ldi	r25, 0x06	; 6
    2946:	ed b7       	in	r30, 0x3d	; 61
    2948:	fe b7       	in	r31, 0x3e	; 62
    294a:	81 83       	std	Z+1, r24	; 0x01
    294c:	92 83       	std	Z+2, r25	; 0x02
    294e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    2952:	0f 90       	pop	r0
    2954:	0f 90       	pop	r0
		g_dataStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
	
		for (iIterator=0; iIterator<=FLASH_BLOCK4_SIZE; iIterator ++ )
			putchar(dataflash_read ( g_dataStartAddress+iIterator ));
	}
}
    2956:	1f 91       	pop	r17
    2958:	0f 91       	pop	r16
    295a:	ff 90       	pop	r15
    295c:	ef 90       	pop	r14
    295e:	08 95       	ret

00002960 <tm_cmd_get_fs>:
/*!
	Send out the whole files-system boot table
*/
/**************************************************************************/
void tm_cmd_get_fs			(U8 argc, char **argv)
{
    2960:	af 92       	push	r10
    2962:	bf 92       	push	r11
    2964:	cf 92       	push	r12
    2966:	df 92       	push	r13
    2968:	ef 92       	push	r14
    296a:	ff 92       	push	r15
    296c:	0f 93       	push	r16
    296e:	1f 93       	push	r17
    2970:	df 93       	push	r29
    2972:	cf 93       	push	r28
    2974:	cd b7       	in	r28, 0x3d	; 61
    2976:	de b7       	in	r29, 0x3e	; 62
    2978:	c4 55       	subi	r28, 0x54	; 84
    297a:	d0 40       	sbci	r29, 0x00	; 0
    297c:	cd bf       	out	0x3d, r28	; 61
    297e:	de bf       	out	0x3e, r29	; 62
	FileEntry_ST sCurEntry;
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
    2980:	80 e0       	ldi	r24, 0x00	; 0
    2982:	90 e9       	ldi	r25, 0x90	; 144
    2984:	af e3       	ldi	r26, 0x3F	; 63
    2986:	b0 e0       	ldi	r27, 0x00	; 0
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	9a 83       	std	Y+2, r25	; 0x02
    298c:	ab 83       	std	Y+3, r26	; 0x03
    298e:	bc 83       	std	Y+4, r27	; 0x04
	uint8_t	itr = 0;
    2990:	00 e0       	ldi	r16, 0x00	; 0
    2992:	55 e0       	ldi	r21, 0x05	; 5
    2994:	c5 2e       	mov	r12, r21
    2996:	d1 2c       	mov	r13, r1
    2998:	cc 0e       	add	r12, r28
    299a:	dd 1e       	adc	r13, r29
    299c:	5e 01       	movw	r10, r28
    299e:	08 94       	sec
    29a0:	a1 1c       	adc	r10, r1
    29a2:	b1 1c       	adc	r11, r1
/**************************************************************************/
/*!
	Send out the whole files-system boot table
*/
/**************************************************************************/
void tm_cmd_get_fs			(U8 argc, char **argv)
    29a4:	45 e5       	ldi	r20, 0x55	; 85
    29a6:	e4 2e       	mov	r14, r20
    29a8:	f1 2c       	mov	r15, r1
    29aa:	ec 0e       	add	r14, r28
    29ac:	fd 1e       	adc	r15, r29
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    29ae:	c5 01       	movw	r24, r10
    29b0:	b6 01       	movw	r22, r12
    29b2:	0e 94 49 07 	call	0xe92	; 0xe92 <FS_ReadEntry>
    29b6:	88 23       	and	r24, r24
    29b8:	a9 f0       	breq	.+42     	; 0x29e4 <tm_cmd_get_fs+0x84>
	{
		cEntry = (char*)(&sCurEntry);
    29ba:	86 01       	movw	r16, r12
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			putchar( cEntry[itr] );		
    29bc:	60 91 27 23 	lds	r22, 0x2327
    29c0:	70 91 28 23 	lds	r23, 0x2328
    29c4:	f8 01       	movw	r30, r16
    29c6:	81 91       	ld	r24, Z+
    29c8:	8f 01       	movw	r16, r30
    29ca:	90 e0       	ldi	r25, 0x00	; 0
    29cc:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
	{
		cEntry = (char*)(&sCurEntry);
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
    29d0:	0e 15       	cp	r16, r14
    29d2:	1f 05       	cpc	r17, r15
    29d4:	99 f7       	brne	.-26     	; 0x29bc <tm_cmd_get_fs+0x5c>
    29d6:	00 e5       	ldi	r16, 0x50	; 80
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    29d8:	c5 01       	movw	r24, r10
    29da:	b6 01       	movw	r22, r12
    29dc:	0e 94 49 07 	call	0xe92	; 0xe92 <FS_ReadEntry>
    29e0:	88 23       	and	r24, r24
    29e2:	59 f7       	brne	.-42     	; 0x29ba <tm_cmd_get_fs+0x5a>
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			putchar( cEntry[itr] );		
	}

	if ( itr == 0 )		// nothing was read then FS empty
    29e4:	00 23       	and	r16, r16
    29e6:	59 f4       	brne	.+22     	; 0x29fe <tm_cmd_get_fs+0x9e>
	{
		printf_P(PSTR("EMPTY\r\n") );
    29e8:	00 d0       	rcall	.+0      	; 0x29ea <tm_cmd_get_fs+0x8a>
    29ea:	8d e7       	ldi	r24, 0x7D	; 125
    29ec:	94 e0       	ldi	r25, 0x04	; 4
    29ee:	ed b7       	in	r30, 0x3d	; 61
    29f0:	fe b7       	in	r31, 0x3e	; 62
    29f2:	81 83       	std	Z+1, r24	; 0x01
    29f4:	92 83       	std	Z+2, r25	; 0x02
    29f6:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    29fa:	0f 90       	pop	r0
    29fc:	0f 90       	pop	r0
	}
}
    29fe:	cc 5a       	subi	r28, 0xAC	; 172
    2a00:	df 4f       	sbci	r29, 0xFF	; 255
    2a02:	cd bf       	out	0x3d, r28	; 61
    2a04:	de bf       	out	0x3e, r29	; 62
    2a06:	cf 91       	pop	r28
    2a08:	df 91       	pop	r29
    2a0a:	1f 91       	pop	r17
    2a0c:	0f 91       	pop	r16
    2a0e:	ff 90       	pop	r15
    2a10:	ef 90       	pop	r14
    2a12:	df 90       	pop	r13
    2a14:	cf 90       	pop	r12
    2a16:	bf 90       	pop	r11
    2a18:	af 90       	pop	r10
    2a1a:	08 95       	ret

00002a1c <tm_cmd_dir>:
	Show file list in the shell   
*/
/**************************************************************************/
void tm_cmd_dir				(U8 argc, char **argv)
{
	FS_ShowFileInformation ( );
    2a1c:	0e 94 0b 0b 	call	0x1616	; 0x1616 <FS_ShowFileInformation>
}
    2a20:	08 95       	ret

00002a22 <tm_cmd_flash_status>:
/*!
	Retrieve the flash statuses and print out on the shell   
*/
/**************************************************************************/
void tm_cmd_flash_status	(U8 argc, char **argv)
{
    2a22:	1f 93       	push	r17
    2a24:	cf 93       	push	r28
    2a26:	df 93       	push	r29
	uint8_t stat_flash = dataflash_read_status ( );
    2a28:	0e 94 a1 1e 	call	0x3d42	; 0x3d42 <dataflash_read_status>
    2a2c:	18 2f       	mov	r17, r24

	if (stat_flash&FLASH_READY)
    2a2e:	c8 2f       	mov	r28, r24
    2a30:	d0 e0       	ldi	r29, 0x00	; 0
    2a32:	ce 01       	movw	r24, r28
    2a34:	80 ff       	sbrs	r24, 0
    2a36:	55 c0       	rjmp	.+170    	; 0x2ae2 <tm_cmd_flash_status+0xc0>
		printf_P( PSTR("\r\n#0 NOT ready (1)") );
    2a38:	00 d0       	rcall	.+0      	; 0x2a3a <tm_cmd_flash_status+0x18>
    2a3a:	8d ee       	ldi	r24, 0xED	; 237
    2a3c:	95 e0       	ldi	r25, 0x05	; 5
    2a3e:	ed b7       	in	r30, 0x3d	; 61
    2a40:	fe b7       	in	r31, 0x3e	; 62
    2a42:	81 83       	std	Z+1, r24	; 0x01
    2a44:	92 83       	std	Z+2, r25	; 0x02
    2a46:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2a4a:	0f 90       	pop	r0
    2a4c:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#0 ready (0)") );

	if (stat_flash&FLASH_WE)
    2a4e:	c1 ff       	sbrs	r28, 1
    2a50:	55 c0       	rjmp	.+170    	; 0x2afc <tm_cmd_flash_status+0xda>
		printf_P( PSTR("\r\n#1 write enabled (1)") );
    2a52:	00 d0       	rcall	.+0      	; 0x2a54 <tm_cmd_flash_status+0x32>
    2a54:	87 ec       	ldi	r24, 0xC7	; 199
    2a56:	95 e0       	ldi	r25, 0x05	; 5
    2a58:	ed b7       	in	r30, 0x3d	; 61
    2a5a:	fe b7       	in	r31, 0x3e	; 62
    2a5c:	81 83       	std	Z+1, r24	; 0x01
    2a5e:	92 83       	std	Z+2, r25	; 0x02
    2a60:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2a64:	0f 90       	pop	r0
    2a66:	0f 90       	pop	r0

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		printf_P( PSTR("\r\n#23 write protected (11)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		printf_P( PSTR("\r\n#23 partly write protected (01)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    2a68:	9e 01       	movw	r18, r28
    2a6a:	2c 70       	andi	r18, 0x0C	; 12
    2a6c:	30 70       	andi	r19, 0x00	; 0
    2a6e:	21 15       	cp	r18, r1
    2a70:	31 05       	cpc	r19, r1
    2a72:	09 f0       	breq	.+2      	; 0x2a76 <tm_cmd_flash_status+0x54>
    2a74:	55 c0       	rjmp	.+170    	; 0x2b20 <tm_cmd_flash_status+0xfe>
		printf_P( PSTR("\r\n#23 NOT write protected (00)") );
    2a76:	00 d0       	rcall	.+0      	; 0x2a78 <tm_cmd_flash_status+0x56>
    2a78:	8d e8       	ldi	r24, 0x8D	; 141
    2a7a:	95 e0       	ldi	r25, 0x05	; 5
    2a7c:	ed b7       	in	r30, 0x3d	; 61
    2a7e:	fe b7       	in	r31, 0x3e	; 62
    2a80:	81 83       	std	Z+1, r24	; 0x01
    2a82:	92 83       	std	Z+2, r25	; 0x02
    2a84:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2a88:	0f 90       	pop	r0
    2a8a:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#23 protection unknown (10 reserved)") );

	if (stat_flash&FLASH_WP_PIN)
    2a8c:	c4 ff       	sbrs	r28, 4
    2a8e:	55 c0       	rjmp	.+170    	; 0x2b3a <tm_cmd_flash_status+0x118>
		printf_P( PSTR("\r\n#4 NOT write protected (1)") );
    2a90:	00 d0       	rcall	.+0      	; 0x2a92 <tm_cmd_flash_status+0x70>
    2a92:	29 e4       	ldi	r18, 0x49	; 73
    2a94:	35 e0       	ldi	r19, 0x05	; 5
    2a96:	ed b7       	in	r30, 0x3d	; 61
    2a98:	fe b7       	in	r31, 0x3e	; 62
    2a9a:	21 83       	std	Z+1, r18	; 0x01
    2a9c:	32 83       	std	Z+2, r19	; 0x02
    2a9e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2aa2:	0f 90       	pop	r0
    2aa4:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#4 write protected (0)") );

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    2aa6:	c5 ff       	sbrs	r28, 5
    2aa8:	55 c0       	rjmp	.+170    	; 0x2b54 <tm_cmd_flash_status+0x132>
		printf_P( PSTR("\r\n#5 failed program (erase) (1)") );
    2aaa:	00 d0       	rcall	.+0      	; 0x2aac <tm_cmd_flash_status+0x8a>
    2aac:	20 e1       	ldi	r18, 0x10	; 16
    2aae:	35 e0       	ldi	r19, 0x05	; 5
    2ab0:	ed b7       	in	r30, 0x3d	; 61
    2ab2:	fe b7       	in	r31, 0x3e	; 62
    2ab4:	21 83       	std	Z+1, r18	; 0x01
    2ab6:	32 83       	std	Z+2, r19	; 0x02
    2ab8:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2abc:	0f 90       	pop	r0
    2abe:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#5 program (erase) was successfull (0)") );

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    2ac0:	17 fd       	sbrc	r17, 7
    2ac2:	55 c0       	rjmp	.+170    	; 0x2b6e <tm_cmd_flash_status+0x14c>
		printf_P( PSTR("\r\n#7 sector protection registers LOCKED (1)\r\n\r\n") );
	else
		printf_P(PSTR("\r\n#7 sector protection registers UNLOCKED (0)\r\n\r\n") );
    2ac4:	00 d0       	rcall	.+0      	; 0x2ac6 <tm_cmd_flash_status+0xa4>
    2ac6:	85 e8       	ldi	r24, 0x85	; 133
    2ac8:	94 e0       	ldi	r25, 0x04	; 4
    2aca:	ed b7       	in	r30, 0x3d	; 61
    2acc:	fe b7       	in	r31, 0x3e	; 62
    2ace:	81 83       	std	Z+1, r24	; 0x01
    2ad0:	92 83       	std	Z+2, r25	; 0x02
    2ad2:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2ad6:	0f 90       	pop	r0
    2ad8:	0f 90       	pop	r0
}
    2ada:	df 91       	pop	r29
    2adc:	cf 91       	pop	r28
    2ade:	1f 91       	pop	r17
    2ae0:	08 95       	ret
	uint8_t stat_flash = dataflash_read_status ( );

	if (stat_flash&FLASH_READY)
		printf_P( PSTR("\r\n#0 NOT ready (1)") );
	else
		printf_P( PSTR("\r\n#0 ready (0)") );
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <tm_cmd_flash_status+0xc2>
    2ae4:	8e ed       	ldi	r24, 0xDE	; 222
    2ae6:	95 e0       	ldi	r25, 0x05	; 5
    2ae8:	ed b7       	in	r30, 0x3d	; 61
    2aea:	fe b7       	in	r31, 0x3e	; 62
    2aec:	81 83       	std	Z+1, r24	; 0x01
    2aee:	92 83       	std	Z+2, r25	; 0x02
    2af0:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0

	if (stat_flash&FLASH_WE)
    2af8:	c1 fd       	sbrc	r28, 1
    2afa:	ab cf       	rjmp	.-170    	; 0x2a52 <tm_cmd_flash_status+0x30>
		printf_P( PSTR("\r\n#1 write enabled (1)") );
	else
		printf_P( PSTR("\r\n#1 NOT write enabled (0)") );
    2afc:	00 d0       	rcall	.+0      	; 0x2afe <tm_cmd_flash_status+0xdc>
    2afe:	8c ea       	ldi	r24, 0xAC	; 172
    2b00:	95 e0       	ldi	r25, 0x05	; 5
    2b02:	ed b7       	in	r30, 0x3d	; 61
    2b04:	fe b7       	in	r31, 0x3e	; 62
    2b06:	81 83       	std	Z+1, r24	; 0x01
    2b08:	92 83       	std	Z+2, r25	; 0x02
    2b0a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2b0e:	0f 90       	pop	r0
    2b10:	0f 90       	pop	r0

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		printf_P( PSTR("\r\n#23 write protected (11)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		printf_P( PSTR("\r\n#23 partly write protected (01)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    2b12:	9e 01       	movw	r18, r28
    2b14:	2c 70       	andi	r18, 0x0C	; 12
    2b16:	30 70       	andi	r19, 0x00	; 0
    2b18:	21 15       	cp	r18, r1
    2b1a:	31 05       	cpc	r19, r1
    2b1c:	09 f4       	brne	.+2      	; 0x2b20 <tm_cmd_flash_status+0xfe>
    2b1e:	ab cf       	rjmp	.-170    	; 0x2a76 <tm_cmd_flash_status+0x54>
		printf_P( PSTR("\r\n#23 NOT write protected (00)") );
	else
		printf_P( PSTR("\r\n#23 protection unknown (10 reserved)") );
    2b20:	00 d0       	rcall	.+0      	; 0x2b22 <tm_cmd_flash_status+0x100>
    2b22:	26 e6       	ldi	r18, 0x66	; 102
    2b24:	35 e0       	ldi	r19, 0x05	; 5
    2b26:	ed b7       	in	r30, 0x3d	; 61
    2b28:	fe b7       	in	r31, 0x3e	; 62
    2b2a:	21 83       	std	Z+1, r18	; 0x01
    2b2c:	32 83       	std	Z+2, r19	; 0x02
    2b2e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2b32:	0f 90       	pop	r0
    2b34:	0f 90       	pop	r0

	if (stat_flash&FLASH_WP_PIN)
    2b36:	c4 fd       	sbrc	r28, 4
    2b38:	ab cf       	rjmp	.-170    	; 0x2a90 <tm_cmd_flash_status+0x6e>
		printf_P( PSTR("\r\n#4 NOT write protected (1)") );
	else
		printf_P( PSTR("\r\n#4 write protected (0)") );
    2b3a:	00 d0       	rcall	.+0      	; 0x2b3c <tm_cmd_flash_status+0x11a>
    2b3c:	20 e3       	ldi	r18, 0x30	; 48
    2b3e:	35 e0       	ldi	r19, 0x05	; 5
    2b40:	ed b7       	in	r30, 0x3d	; 61
    2b42:	fe b7       	in	r31, 0x3e	; 62
    2b44:	21 83       	std	Z+1, r18	; 0x01
    2b46:	32 83       	std	Z+2, r19	; 0x02
    2b48:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2b4c:	0f 90       	pop	r0
    2b4e:	0f 90       	pop	r0

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    2b50:	c5 fd       	sbrc	r28, 5
    2b52:	ab cf       	rjmp	.-170    	; 0x2aaa <tm_cmd_flash_status+0x88>
		printf_P( PSTR("\r\n#5 failed program (erase) (1)") );
	else
		printf_P( PSTR("\r\n#5 program (erase) was successfull (0)") );
    2b54:	00 d0       	rcall	.+0      	; 0x2b56 <tm_cmd_flash_status+0x134>
    2b56:	27 ee       	ldi	r18, 0xE7	; 231
    2b58:	34 e0       	ldi	r19, 0x04	; 4
    2b5a:	ed b7       	in	r30, 0x3d	; 61
    2b5c:	fe b7       	in	r31, 0x3e	; 62
    2b5e:	21 83       	std	Z+1, r18	; 0x01
    2b60:	32 83       	std	Z+2, r19	; 0x02
    2b62:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2b66:	0f 90       	pop	r0
    2b68:	0f 90       	pop	r0

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    2b6a:	17 ff       	sbrs	r17, 7
    2b6c:	ab cf       	rjmp	.-170    	; 0x2ac4 <tm_cmd_flash_status+0xa2>
		printf_P( PSTR("\r\n#7 sector protection registers LOCKED (1)\r\n\r\n") );
    2b6e:	00 d0       	rcall	.+0      	; 0x2b70 <tm_cmd_flash_status+0x14e>
    2b70:	87 eb       	ldi	r24, 0xB7	; 183
    2b72:	94 e0       	ldi	r25, 0x04	; 4
    2b74:	ed b7       	in	r30, 0x3d	; 61
    2b76:	fe b7       	in	r31, 0x3e	; 62
    2b78:	81 83       	std	Z+1, r24	; 0x01
    2b7a:	92 83       	std	Z+2, r25	; 0x02
    2b7c:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2b80:	0f 90       	pop	r0
    2b82:	0f 90       	pop	r0
	else
		printf_P(PSTR("\r\n#7 sector protection registers UNLOCKED (0)\r\n\r\n") );
}
    2b84:	df 91       	pop	r29
    2b86:	cf 91       	pop	r28
    2b88:	1f 91       	pop	r17
    2b8a:	08 95       	ret

00002b8c <tm_cmd_unprotect_flash>:
/*!
	Write-UnProtect the flash memory    
*/
/**************************************************************************/
void tm_cmd_unprotect_flash	(U8 argc, char **argv)
{
    2b8c:	cf 93       	push	r28
    2b8e:	df 93       	push	r29
	if ( argc != 2 )
    2b90:	82 30       	cpi	r24, 0x02	; 2
    2b92:	49 f5       	brne	.+82     	; 0x2be6 <tm_cmd_unprotect_flash+0x5a>
		printf_P( PSTR("usage: unprot_flash [<block number> or <ALL>]\r\n"));
		return;		
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
    2b94:	fb 01       	movw	r30, r22
    2b96:	c2 81       	ldd	r28, Z+2	; 0x02
    2b98:	d3 81       	ldd	r29, Z+3	; 0x03
    2b9a:	ce 01       	movw	r24, r28
    2b9c:	65 e2       	ldi	r22, 0x25	; 37
    2b9e:	70 e2       	ldi	r23, 0x20	; 32
    2ba0:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    2ba4:	00 97       	sbiw	r24, 0x00	; 0
    2ba6:	e1 f0       	breq	.+56     	; 0x2be0 <tm_cmd_unprotect_flash+0x54>
		else
		{
			uint32_t iBlock;
			uint32_t iAddress;

			iBlock = atol (argv[1]);						// This is the data
    2ba8:	ce 01       	movw	r24, r28
    2baa:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    2bae:	dc 01       	movw	r26, r24
    2bb0:	cb 01       	movw	r24, r22

			// Calculate address
			iAddress = iBlock * (uint32_t)(FLASH_BLOCK4_SIZE);
    2bb2:	6c e0       	ldi	r22, 0x0C	; 12
    2bb4:	88 0f       	add	r24, r24
    2bb6:	99 1f       	adc	r25, r25
    2bb8:	aa 1f       	adc	r26, r26
    2bba:	bb 1f       	adc	r27, r27
    2bbc:	6a 95       	dec	r22
    2bbe:	d1 f7       	brne	.-12     	; 0x2bb4 <tm_cmd_unprotect_flash+0x28>

			dataflash_unprotect_block4 ( iAddress );
    2bc0:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <dataflash_unprotect_block4>
		}
	}
	printf_P (PSTR("OK\r\n"));
    2bc4:	00 d0       	rcall	.+0      	; 0x2bc6 <tm_cmd_unprotect_flash+0x3a>
    2bc6:	87 e6       	ldi	r24, 0x67	; 103
    2bc8:	96 e0       	ldi	r25, 0x06	; 6
    2bca:	ed b7       	in	r30, 0x3d	; 61
    2bcc:	fe b7       	in	r31, 0x3e	; 62
    2bce:	81 83       	std	Z+1, r24	; 0x01
    2bd0:	92 83       	std	Z+2, r25	; 0x02
    2bd2:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
}
    2bda:	df 91       	pop	r29
    2bdc:	cf 91       	pop	r28
    2bde:	08 95       	ret
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
		{
			dataflash_unprotect_all ( );
    2be0:	0e 94 68 1c 	call	0x38d0	; 0x38d0 <dataflash_unprotect_all>
    2be4:	ef cf       	rjmp	.-34     	; 0x2bc4 <tm_cmd_unprotect_flash+0x38>
/**************************************************************************/
void tm_cmd_unprotect_flash	(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: unprot_flash [<block number> or <ALL>]\r\n"));
    2be6:	00 d0       	rcall	.+0      	; 0x2be8 <tm_cmd_unprotect_flash+0x5c>
    2be8:	8c e6       	ldi	r24, 0x6C	; 108
    2bea:	96 e0       	ldi	r25, 0x06	; 6
    2bec:	ed b7       	in	r30, 0x3d	; 61
    2bee:	fe b7       	in	r31, 0x3e	; 62
    2bf0:	81 83       	std	Z+1, r24	; 0x01
    2bf2:	92 83       	std	Z+2, r25	; 0x02
    2bf4:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;		
    2bf8:	0f 90       	pop	r0
    2bfa:	0f 90       	pop	r0

			dataflash_unprotect_block4 ( iAddress );
		}
	}
	printf_P (PSTR("OK\r\n"));
}
    2bfc:	df 91       	pop	r29
    2bfe:	cf 91       	pop	r28
    2c00:	08 95       	ret

00002c02 <tm_cmd_erase_flash>:
/*!
	Erase the flash chip - per block of ALL   
*/
/**************************************************************************/
void tm_cmd_erase_flash		(U8 argc, char **argv)
{
    2c02:	ef 92       	push	r14
    2c04:	ff 92       	push	r15
    2c06:	0f 93       	push	r16
    2c08:	1f 93       	push	r17
    2c0a:	cf 93       	push	r28
    2c0c:	df 93       	push	r29
	if ( argc != 2 )
    2c0e:	82 30       	cpi	r24, 0x02	; 2
    2c10:	51 f5       	brne	.+84     	; 0x2c66 <tm_cmd_erase_flash+0x64>
		printf_P( PSTR("usage: erase_flash [<block number> or <ALL>]\r\n"));
		return;		
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
    2c12:	fb 01       	movw	r30, r22
    2c14:	c2 81       	ldd	r28, Z+2	; 0x02
    2c16:	d3 81       	ldd	r29, Z+3	; 0x03
    2c18:	ce 01       	movw	r24, r28
    2c1a:	65 e2       	ldi	r22, 0x25	; 37
    2c1c:	70 e2       	ldi	r23, 0x20	; 32
    2c1e:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    2c22:	00 97       	sbiw	r24, 0x00	; 0
    2c24:	e9 f0       	breq	.+58     	; 0x2c60 <tm_cmd_erase_flash+0x5e>
		}
		else
		{
			uint32_t iBlock;

			iBlock = atol (argv[1]);						// This is the data
    2c26:	ce 01       	movw	r24, r28
    2c28:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    2c2c:	7b 01       	movw	r14, r22
    2c2e:	8c 01       	movw	r16, r24
			
			dataflash_unprotect_block4 ( (uint16_t)(iBlock) );
    2c30:	cb 01       	movw	r24, r22
    2c32:	0e 94 ff 1d 	call	0x3bfe	; 0x3bfe <dataflash_unprotect_block4>

			dataflash_erase_block4 ( (uint16_t)(iBlock) );
    2c36:	c7 01       	movw	r24, r14
    2c38:	0e 94 ae 1d 	call	0x3b5c	; 0x3b5c <dataflash_erase_block4>
		}
	}
	printf_P (PSTR("OK\r\n"));
    2c3c:	00 d0       	rcall	.+0      	; 0x2c3e <tm_cmd_erase_flash+0x3c>
    2c3e:	80 e0       	ldi	r24, 0x00	; 0
    2c40:	96 e0       	ldi	r25, 0x06	; 6
    2c42:	ed b7       	in	r30, 0x3d	; 61
    2c44:	fe b7       	in	r31, 0x3e	; 62
    2c46:	81 83       	std	Z+1, r24	; 0x01
    2c48:	92 83       	std	Z+2, r25	; 0x02
    2c4a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2c4e:	0f 90       	pop	r0
    2c50:	0f 90       	pop	r0
}
    2c52:	df 91       	pop	r29
    2c54:	cf 91       	pop	r28
    2c56:	1f 91       	pop	r17
    2c58:	0f 91       	pop	r16
    2c5a:	ff 90       	pop	r15
    2c5c:	ef 90       	pop	r14
    2c5e:	08 95       	ret
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
		{
			dataflash_erase_all ( );
    2c60:	0e 94 20 1d 	call	0x3a40	; 0x3a40 <dataflash_erase_all>
    2c64:	eb cf       	rjmp	.-42     	; 0x2c3c <tm_cmd_erase_flash+0x3a>
/**************************************************************************/
void tm_cmd_erase_flash		(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: erase_flash [<block number> or <ALL>]\r\n"));
    2c66:	00 d0       	rcall	.+0      	; 0x2c68 <tm_cmd_erase_flash+0x66>
    2c68:	85 e0       	ldi	r24, 0x05	; 5
    2c6a:	96 e0       	ldi	r25, 0x06	; 6
    2c6c:	ed b7       	in	r30, 0x3d	; 61
    2c6e:	fe b7       	in	r31, 0x3e	; 62
    2c70:	81 83       	std	Z+1, r24	; 0x01
    2c72:	92 83       	std	Z+2, r25	; 0x02
    2c74:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;		
    2c78:	0f 90       	pop	r0
    2c7a:	0f 90       	pop	r0

			dataflash_erase_block4 ( (uint16_t)(iBlock) );
		}
	}
	printf_P (PSTR("OK\r\n"));
}
    2c7c:	df 91       	pop	r29
    2c7e:	cf 91       	pop	r28
    2c80:	1f 91       	pop	r17
    2c82:	0f 91       	pop	r16
    2c84:	ff 90       	pop	r15
    2c86:	ef 90       	pop	r14
    2c88:	08 95       	ret

00002c8a <tm_cmd_protect_flash>:
/*!
	Write-Protect the flash memory   
*/
/**************************************************************************/
void tm_cmd_protect_flash	(U8 argc, char **argv)
{
    2c8a:	cf 93       	push	r28
    2c8c:	df 93       	push	r29
	if ( argc != 2 )
    2c8e:	82 30       	cpi	r24, 0x02	; 2
    2c90:	49 f5       	brne	.+82     	; 0x2ce4 <tm_cmd_protect_flash+0x5a>
		printf_P( PSTR("usage: prot_flash [<block number> or <ALL>]\r\n"));
		return;		
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
    2c92:	fb 01       	movw	r30, r22
    2c94:	c2 81       	ldd	r28, Z+2	; 0x02
    2c96:	d3 81       	ldd	r29, Z+3	; 0x03
    2c98:	ce 01       	movw	r24, r28
    2c9a:	65 e2       	ldi	r22, 0x25	; 37
    2c9c:	70 e2       	ldi	r23, 0x20	; 32
    2c9e:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    2ca2:	00 97       	sbiw	r24, 0x00	; 0
    2ca4:	e1 f0       	breq	.+56     	; 0x2cde <tm_cmd_protect_flash+0x54>
		else
		{
			uint32_t iBlock;
			uint32_t iAddress;

			iBlock = atol (argv[1]);						// This is the data
    2ca6:	ce 01       	movw	r24, r28
    2ca8:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    2cac:	dc 01       	movw	r26, r24
    2cae:	cb 01       	movw	r24, r22

			// Calculate address
			iAddress = iBlock * (uint32_t)(FLASH_BLOCK4_SIZE);
    2cb0:	7c e0       	ldi	r23, 0x0C	; 12
    2cb2:	88 0f       	add	r24, r24
    2cb4:	99 1f       	adc	r25, r25
    2cb6:	aa 1f       	adc	r26, r26
    2cb8:	bb 1f       	adc	r27, r27
    2cba:	7a 95       	dec	r23
    2cbc:	d1 f7       	brne	.-12     	; 0x2cb2 <tm_cmd_protect_flash+0x28>

			dataflash_protect_block4 ( iAddress );
    2cbe:	0e 94 50 1e 	call	0x3ca0	; 0x3ca0 <dataflash_protect_block4>
		}
	}
	printf_P (PSTR("OK\r\n"));
    2cc2:	00 d0       	rcall	.+0      	; 0x2cc4 <tm_cmd_protect_flash+0x3a>
    2cc4:	84 e3       	ldi	r24, 0x34	; 52
    2cc6:	96 e0       	ldi	r25, 0x06	; 6
    2cc8:	ed b7       	in	r30, 0x3d	; 61
    2cca:	fe b7       	in	r31, 0x3e	; 62
    2ccc:	81 83       	std	Z+1, r24	; 0x01
    2cce:	92 83       	std	Z+2, r25	; 0x02
    2cd0:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2cd4:	0f 90       	pop	r0
    2cd6:	0f 90       	pop	r0
}
    2cd8:	df 91       	pop	r29
    2cda:	cf 91       	pop	r28
    2cdc:	08 95       	ret
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
		{
			dataflash_protect_all ( );
    2cde:	0e 94 c4 1c 	call	0x3988	; 0x3988 <dataflash_protect_all>
    2ce2:	ef cf       	rjmp	.-34     	; 0x2cc2 <tm_cmd_protect_flash+0x38>
/**************************************************************************/
void tm_cmd_protect_flash	(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: prot_flash [<block number> or <ALL>]\r\n"));
    2ce4:	00 d0       	rcall	.+0      	; 0x2ce6 <tm_cmd_protect_flash+0x5c>
    2ce6:	89 e3       	ldi	r24, 0x39	; 57
    2ce8:	96 e0       	ldi	r25, 0x06	; 6
    2cea:	ed b7       	in	r30, 0x3d	; 61
    2cec:	fe b7       	in	r31, 0x3e	; 62
    2cee:	81 83       	std	Z+1, r24	; 0x01
    2cf0:	92 83       	std	Z+2, r25	; 0x02
    2cf2:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;		
    2cf6:	0f 90       	pop	r0
    2cf8:	0f 90       	pop	r0

			dataflash_protect_block4 ( iAddress );
		}
	}
	printf_P (PSTR("OK\r\n"));
}
    2cfa:	df 91       	pop	r29
    2cfc:	cf 91       	pop	r28
    2cfe:	08 95       	ret

00002d00 <tm_cmd_spi_transfer>:
/*!
	Send an spi commant to the flash memory   
*/
/**************************************************************************/
void tm_cmd_spi_transfer	(U8 argc, char **argv)
{
    2d00:	df 93       	push	r29
    2d02:	cf 93       	push	r28
    2d04:	0f 92       	push	r0
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
	if ( argc != 2)
    2d0a:	82 30       	cpi	r24, 0x02	; 2
    2d0c:	89 f0       	breq	.+34     	; 0x2d30 <tm_cmd_spi_transfer+0x30>
	{
		printf_P( PSTR("usage: spi_trans [byte]\r\n"));
    2d0e:	00 d0       	rcall	.+0      	; 0x2d10 <tm_cmd_spi_transfer+0x10>
    2d10:	8d eb       	ldi	r24, 0xBD	; 189
    2d12:	96 e0       	ldi	r25, 0x06	; 6
    2d14:	ad b7       	in	r26, 0x3d	; 61
    2d16:	be b7       	in	r27, 0x3e	; 62
    2d18:	11 96       	adiw	r26, 0x01	; 1
    2d1a:	8d 93       	st	X+, r24
    2d1c:	9c 93       	st	X, r25
    2d1e:	12 97       	sbiw	r26, 0x02	; 2
    2d20:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;		
    2d24:	0f 90       	pop	r0
    2d26:	0f 90       	pop	r0
		printf_P( PSTR("\r\nSending 0x%x"), byte_sent );
		byte_rec = SPI_MasterTransceiveByte(&spiMasterD, byte_sent);

		printf_P( PSTR("\r\nRecieved 0x%x\r\n"), byte_rec );
	}
}
    2d28:	0f 90       	pop	r0
    2d2a:	cf 91       	pop	r28
    2d2c:	df 91       	pop	r29
    2d2e:	08 95       	ret
	else
	{
		U8 byte_sent;
		U8 byte_rec;

		byte_sent = atoi (argv[1]);	
    2d30:	fb 01       	movw	r30, r22
    2d32:	82 81       	ldd	r24, Z+2	; 0x02
    2d34:	93 81       	ldd	r25, Z+3	; 0x03
    2d36:	0e 94 77 23 	call	0x46ee	; 0x46ee <atoi>

		printf_P( PSTR("\r\nSending 0x%x"), byte_sent );
    2d3a:	00 d0       	rcall	.+0      	; 0x2d3c <tm_cmd_spi_transfer+0x3c>
    2d3c:	00 d0       	rcall	.+0      	; 0x2d3e <tm_cmd_spi_transfer+0x3e>
    2d3e:	ed b7       	in	r30, 0x3d	; 61
    2d40:	fe b7       	in	r31, 0x3e	; 62
    2d42:	31 96       	adiw	r30, 0x01	; 1
    2d44:	2e ea       	ldi	r18, 0xAE	; 174
    2d46:	36 e0       	ldi	r19, 0x06	; 6
    2d48:	ad b7       	in	r26, 0x3d	; 61
    2d4a:	be b7       	in	r27, 0x3e	; 62
    2d4c:	11 96       	adiw	r26, 0x01	; 1
    2d4e:	2d 93       	st	X+, r18
    2d50:	3c 93       	st	X, r19
    2d52:	12 97       	sbiw	r26, 0x02	; 2
    2d54:	82 83       	std	Z+2, r24	; 0x02
    2d56:	13 82       	std	Z+3, r1	; 0x03
    2d58:	89 83       	std	Y+1, r24	; 0x01
    2d5a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		byte_rec = SPI_MasterTransceiveByte(&spiMasterD, byte_sent);
    2d5e:	0f 90       	pop	r0
    2d60:	0f 90       	pop	r0
    2d62:	0f 90       	pop	r0
    2d64:	0f 90       	pop	r0
    2d66:	8e e1       	ldi	r24, 0x1E	; 30
    2d68:	93 e2       	ldi	r25, 0x23	; 35
    2d6a:	69 81       	ldd	r22, Y+1	; 0x01
    2d6c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

		printf_P( PSTR("\r\nRecieved 0x%x\r\n"), byte_rec );
    2d70:	00 d0       	rcall	.+0      	; 0x2d72 <tm_cmd_spi_transfer+0x72>
    2d72:	00 d0       	rcall	.+0      	; 0x2d74 <tm_cmd_spi_transfer+0x74>
    2d74:	ed b7       	in	r30, 0x3d	; 61
    2d76:	fe b7       	in	r31, 0x3e	; 62
    2d78:	31 96       	adiw	r30, 0x01	; 1
    2d7a:	2c e9       	ldi	r18, 0x9C	; 156
    2d7c:	36 e0       	ldi	r19, 0x06	; 6
    2d7e:	ad b7       	in	r26, 0x3d	; 61
    2d80:	be b7       	in	r27, 0x3e	; 62
    2d82:	11 96       	adiw	r26, 0x01	; 1
    2d84:	2d 93       	st	X+, r18
    2d86:	3c 93       	st	X, r19
    2d88:	12 97       	sbiw	r26, 0x02	; 2
    2d8a:	82 83       	std	Z+2, r24	; 0x02
    2d8c:	13 82       	std	Z+3, r1	; 0x03
    2d8e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2d92:	0f 90       	pop	r0
    2d94:	0f 90       	pop	r0
    2d96:	0f 90       	pop	r0
    2d98:	0f 90       	pop	r0
	}
}
    2d9a:	0f 90       	pop	r0
    2d9c:	cf 91       	pop	r28
    2d9e:	df 91       	pop	r29
    2da0:	08 95       	ret

00002da2 <tm_cmd_write_block>:
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
{
    2da2:	2f 92       	push	r2
    2da4:	3f 92       	push	r3
    2da6:	4f 92       	push	r4
    2da8:	5f 92       	push	r5
    2daa:	6f 92       	push	r6
    2dac:	7f 92       	push	r7
    2dae:	8f 92       	push	r8
    2db0:	9f 92       	push	r9
    2db2:	af 92       	push	r10
    2db4:	bf 92       	push	r11
    2db6:	cf 92       	push	r12
    2db8:	df 92       	push	r13
    2dba:	ef 92       	push	r14
    2dbc:	ff 92       	push	r15
    2dbe:	0f 93       	push	r16
    2dc0:	1f 93       	push	r17
    2dc2:	df 93       	push	r29
    2dc4:	cf 93       	push	r28
    2dc6:	cd b7       	in	r28, 0x3d	; 61
    2dc8:	de b7       	in	r29, 0x3e	; 62
    2dca:	c8 54       	subi	r28, 0x48	; 72
    2dcc:	d0 40       	sbci	r29, 0x00	; 0
    2dce:	cd bf       	out	0x3d, r28	; 61
    2dd0:	de bf       	out	0x3e, r29	; 62
    2dd2:	7b 01       	movw	r14, r22
	if ( argc != 4 )
    2dd4:	84 30       	cpi	r24, 0x04	; 4
    2dd6:	21 f1       	breq	.+72     	; 0x2e20 <tm_cmd_write_block+0x7e>
	{
		printf_P( PSTR("usage: write_block [start_block] [quant] [length]\r\n"));
    2dd8:	00 d0       	rcall	.+0      	; 0x2dda <tm_cmd_write_block+0x38>
    2dda:	84 e1       	ldi	r24, 0x14	; 20
    2ddc:	97 e0       	ldi	r25, 0x07	; 7
    2dde:	ad b7       	in	r26, 0x3d	; 61
    2de0:	be b7       	in	r27, 0x3e	; 62
    2de2:	11 96       	adiw	r26, 0x01	; 1
    2de4:	8d 93       	st	X+, r24
    2de6:	9c 93       	st	X, r25
    2de8:	12 97       	sbiw	r26, 0x02	; 2
    2dea:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		return;	
    2dee:	0f 90       	pop	r0
    2df0:	0f 90       	pop	r0
			{
				printf_P (PSTR("FAIL\r\n"));
			}
		}
	}
}
    2df2:	c8 5b       	subi	r28, 0xB8	; 184
    2df4:	df 4f       	sbci	r29, 0xFF	; 255
    2df6:	cd bf       	out	0x3d, r28	; 61
    2df8:	de bf       	out	0x3e, r29	; 62
    2dfa:	cf 91       	pop	r28
    2dfc:	df 91       	pop	r29
    2dfe:	1f 91       	pop	r17
    2e00:	0f 91       	pop	r16
    2e02:	ff 90       	pop	r15
    2e04:	ef 90       	pop	r14
    2e06:	df 90       	pop	r13
    2e08:	cf 90       	pop	r12
    2e0a:	bf 90       	pop	r11
    2e0c:	af 90       	pop	r10
    2e0e:	9f 90       	pop	r9
    2e10:	8f 90       	pop	r8
    2e12:	7f 90       	pop	r7
    2e14:	6f 90       	pop	r6
    2e16:	5f 90       	pop	r5
    2e18:	4f 90       	pop	r4
    2e1a:	3f 90       	pop	r3
    2e1c:	2f 90       	pop	r2
    2e1e:	08 95       	ret
		uint32_t msgCount;
		uint8_t currQuant;
		uint32_t iPlace;
		uint16_t crc16 = 0xffff;
		
		uint32_t iStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
    2e20:	fb 01       	movw	r30, r22
    2e22:	82 81       	ldd	r24, Z+2	; 0x02
    2e24:	93 81       	ldd	r25, Z+3	; 0x03
    2e26:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    2e2a:	5b 01       	movw	r10, r22
    2e2c:	6c 01       	movw	r12, r24
		uint8_t iQuant = atoi(argv[2]);
    2e2e:	d7 01       	movw	r26, r14
    2e30:	14 96       	adiw	r26, 0x04	; 4
    2e32:	8d 91       	ld	r24, X+
    2e34:	9c 91       	ld	r25, X
    2e36:	15 97       	sbiw	r26, 0x05	; 5
    2e38:	0e 94 77 23 	call	0x46ee	; 0x46ee <atoi>
    2e3c:	98 2e       	mov	r9, r24
		uint32_t iLength = atol(argv[3]);
    2e3e:	f7 01       	movw	r30, r14
    2e40:	86 81       	ldd	r24, Z+6	; 0x06
    2e42:	97 81       	ldd	r25, Z+7	; 0x07
    2e44:	0e 94 95 23 	call	0x472a	; 0x472a <atol>
    2e48:	2b 01       	movw	r4, r22
    2e4a:	3c 01       	movw	r6, r24
		iPlace = iStartAddress;
		
		msgCount = iLength;
		
		// Send the OK that says we are ready to get data chunks
		printf_P (PSTR("OK\r\n"));
    2e4c:	00 d0       	rcall	.+0      	; 0x2e4e <tm_cmd_write_block+0xac>
    2e4e:	8f e0       	ldi	r24, 0x0F	; 15
    2e50:	97 e0       	ldi	r25, 0x07	; 7
    2e52:	ad b7       	in	r26, 0x3d	; 61
    2e54:	be b7       	in	r27, 0x3e	; 62
    2e56:	11 96       	adiw	r26, 0x01	; 1
    2e58:	8d 93       	st	X+, r24
    2e5a:	9c 93       	st	X, r25
    2e5c:	12 97       	sbiw	r26, 0x02	; 2
    2e5e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
		
		while (msgCount)
    2e62:	0f 90       	pop	r0
    2e64:	0f 90       	pop	r0
    2e66:	41 14       	cp	r4, r1
    2e68:	51 04       	cpc	r5, r1
    2e6a:	61 04       	cpc	r6, r1
    2e6c:	71 04       	cpc	r7, r1
    2e6e:	09 f2       	breq	.-126    	; 0x2df2 <tm_cmd_write_block+0x50>
		uint32_t msgCount;
		uint8_t currQuant;
		uint32_t iPlace;
		uint16_t crc16 = 0xffff;
		
		uint32_t iStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
    2e70:	29 2d       	mov	r18, r9
    2e72:	30 e0       	ldi	r19, 0x00	; 0
    2e74:	40 e0       	ldi	r20, 0x00	; 0
    2e76:	50 e0       	ldi	r21, 0x00	; 0
    2e78:	25 96       	adiw	r28, 0x05	; 5
    2e7a:	2c af       	std	Y+60, r18	; 0x3c
    2e7c:	3d af       	std	Y+61, r19	; 0x3d
    2e7e:	4e af       	std	Y+62, r20	; 0x3e
    2e80:	5f af       	std	Y+63, r21	; 0x3f
    2e82:	25 97       	sbiw	r28, 0x05	; 5
		uint8_t iQuant = atoi(argv[2]);
		uint32_t iLength = atol(argv[3]);
		iPlace = iStartAddress;
    2e84:	d6 01       	movw	r26, r12
    2e86:	c5 01       	movw	r24, r10
    2e88:	1c e0       	ldi	r17, 0x0C	; 12
    2e8a:	88 0f       	add	r24, r24
    2e8c:	99 1f       	adc	r25, r25
    2e8e:	aa 1f       	adc	r26, r26
    2e90:	bb 1f       	adc	r27, r27
    2e92:	1a 95       	dec	r17
    2e94:	d1 f7       	brne	.-12     	; 0x2e8a <tm_cmd_write_block+0xe8>
    2e96:	29 96       	adiw	r28, 0x09	; 9
    2e98:	8c af       	std	Y+60, r24	; 0x3c
    2e9a:	9d af       	std	Y+61, r25	; 0x3d
    2e9c:	ae af       	std	Y+62, r26	; 0x3e
    2e9e:	bf af       	std	Y+63, r27	; 0x3f
    2ea0:	29 97       	sbiw	r28, 0x09	; 9
    2ea2:	5e 01       	movw	r10, r28
    2ea4:	08 94       	sec
    2ea6:	a1 1c       	adc	r10, r1
    2ea8:	b1 1c       	adc	r11, r1
/**************************************************************************/
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
    2eaa:	a2 e0       	ldi	r26, 0x02	; 2
    2eac:	8a 2e       	mov	r8, r26
    2eae:	8a 0c       	add	r8, r10
    2eb0:	f2 e0       	ldi	r31, 0x02	; 2
    2eb2:	2f 2e       	mov	r2, r31
    2eb4:	31 2c       	mov	r3, r1
    2eb6:	2c 0e       	add	r2, r28
    2eb8:	3d 1e       	adc	r3, r29
		// Send the OK that says we are ready to get data chunks
		printf_P (PSTR("OK\r\n"));
		
		while (msgCount)
		{
			currQuant = (iQuant>msgCount)?msgCount:iQuant;
    2eba:	94 2c       	mov	r9, r4
    2ebc:	25 96       	adiw	r28, 0x05	; 5
    2ebe:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ec0:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ec2:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ec4:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ec6:	25 97       	sbiw	r28, 0x05	; 5
    2ec8:	24 15       	cp	r18, r4
    2eca:	35 05       	cpc	r19, r5
    2ecc:	46 05       	cpc	r20, r6
    2ece:	57 05       	cpc	r21, r7
    2ed0:	08 f4       	brcc	.+2      	; 0x2ed4 <tm_cmd_write_block+0x132>
    2ed2:	92 2e       	mov	r9, r18
			count = currQuant + 2;		// added 2 bytes of crc16
			dataIt = rawData;
			
			while (count--) *dataIt++=getchar( );
    2ed4:	39 2d       	mov	r19, r9
    2ed6:	3e 3f       	cpi	r19, 0xFE	; 254
    2ed8:	71 f0       	breq	.+28     	; 0x2ef6 <tm_cmd_write_block+0x154>
		
		while (msgCount)
		{
			currQuant = (iQuant>msgCount)?msgCount:iQuant;
			count = currQuant + 2;		// added 2 bytes of crc16
			dataIt = rawData;
    2eda:	75 01       	movw	r14, r10
/**************************************************************************/
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
    2edc:	c9 2c       	mov	r12, r9
    2ede:	c8 0c       	add	r12, r8
		{
			currQuant = (iQuant>msgCount)?msgCount:iQuant;
			count = currQuant + 2;		// added 2 bytes of crc16
			dataIt = rawData;
			
			while (count--) *dataIt++=getchar( );
    2ee0:	80 91 25 23 	lds	r24, 0x2325
    2ee4:	90 91 26 23 	lds	r25, 0x2326
    2ee8:	0e 94 2f 24 	call	0x485e	; 0x485e <fgetc>
    2eec:	d7 01       	movw	r26, r14
    2eee:	8d 93       	st	X+, r24
    2ef0:	7d 01       	movw	r14, r26
    2ef2:	ca 16       	cp	r12, r26
    2ef4:	a9 f7       	brne	.-22     	; 0x2ee0 <tm_cmd_write_block+0x13e>
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
    2ef6:	99 20       	and	r9, r9
    2ef8:	09 f4       	brne	.+2      	; 0x2efc <tm_cmd_write_block+0x15a>
    2efa:	8e c0       	rjmp	.+284    	; 0x3018 <__stack+0x19>
    2efc:	f5 01       	movw	r30, r10
/**************************************************************************/
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
    2efe:	89 2d       	mov	r24, r9
    2f00:	81 50       	subi	r24, 0x01	; 1
    2f02:	91 01       	movw	r18, r2
    2f04:	28 0f       	add	r18, r24
    2f06:	31 1d       	adc	r19, r1
    2f08:	8f ef       	ldi	r24, 0xFF	; 255
    2f0a:	9f ef       	ldi	r25, 0xFF	; 255
			while (count--) *dataIt++=getchar( );
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
				crc16 = _crc16_update(crc16, rawData[i]);
    2f0c:	41 91       	ld	r20, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    2f0e:	84 27       	eor	r24, r20
    2f10:	48 2f       	mov	r20, r24
    2f12:	42 95       	swap	r20
    2f14:	48 27       	eor	r20, r24
    2f16:	04 2e       	mov	r0, r20
    2f18:	46 95       	lsr	r20
    2f1a:	46 95       	lsr	r20
    2f1c:	40 25       	eor	r20, r0
    2f1e:	04 2e       	mov	r0, r20
    2f20:	46 95       	lsr	r20
    2f22:	40 25       	eor	r20, r0
    2f24:	47 70       	andi	r20, 0x07	; 7
    2f26:	08 2e       	mov	r0, r24
    2f28:	89 2f       	mov	r24, r25
    2f2a:	46 95       	lsr	r20
    2f2c:	07 94       	ror	r0
    2f2e:	47 95       	ror	r20
    2f30:	90 2d       	mov	r25, r0
    2f32:	84 27       	eor	r24, r20
    2f34:	06 94       	lsr	r0
    2f36:	47 95       	ror	r20
    2f38:	90 25       	eor	r25, r0
    2f3a:	84 27       	eor	r24, r20
			
			while (count--) *dataIt++=getchar( );
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
    2f3c:	e2 17       	cp	r30, r18
    2f3e:	f3 07       	cpc	r31, r19
    2f40:	29 f7       	brne	.-54     	; 0x2f0c <tm_cmd_write_block+0x16a>
				crc16 = _crc16_update(crc16, rawData[i]);
			
			// check success	
			if ((crc16&0xff)==rawData[currQuant] && ((crc16>>8)&0xff)==rawData[currQuant+1])
    2f42:	29 2d       	mov	r18, r9
    2f44:	30 e0       	ldi	r19, 0x00	; 0
    2f46:	bc 01       	movw	r22, r24
    2f48:	70 70       	andi	r23, 0x00	; 0
    2f4a:	f5 01       	movw	r30, r10
    2f4c:	e2 0f       	add	r30, r18
    2f4e:	f3 1f       	adc	r31, r19
    2f50:	40 81       	ld	r20, Z
    2f52:	50 e0       	ldi	r21, 0x00	; 0
    2f54:	64 17       	cp	r22, r20
    2f56:	75 07       	cpc	r23, r21
    2f58:	51 f4       	brne	.+20     	; 0x2f6e <tm_cmd_write_block+0x1cc>
    2f5a:	89 2f       	mov	r24, r25
    2f5c:	99 27       	eor	r25, r25
    2f5e:	22 0d       	add	r18, r2
    2f60:	33 1d       	adc	r19, r3
    2f62:	f9 01       	movw	r30, r18
    2f64:	20 81       	ld	r18, Z
    2f66:	30 e0       	ldi	r19, 0x00	; 0
    2f68:	82 17       	cp	r24, r18
    2f6a:	93 07       	cpc	r25, r19
    2f6c:	a1 f0       	breq	.+40     	; 0x2f96 <tm_cmd_write_block+0x1f4>
				msgCount -= iQuant;
				printf_P (PSTR("OK\r\n"));
			}
			else
			{
				printf_P (PSTR("FAIL\r\n"));
    2f6e:	00 d0       	rcall	.+0      	; 0x2f70 <tm_cmd_write_block+0x1ce>
    2f70:	e3 e0       	ldi	r30, 0x03	; 3
    2f72:	f7 e0       	ldi	r31, 0x07	; 7
    2f74:	ad b7       	in	r26, 0x3d	; 61
    2f76:	be b7       	in	r27, 0x3e	; 62
    2f78:	11 96       	adiw	r26, 0x01	; 1
    2f7a:	ed 93       	st	X+, r30
    2f7c:	fc 93       	st	X, r31
    2f7e:	12 97       	sbiw	r26, 0x02	; 2
    2f80:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    2f84:	0f 90       	pop	r0
    2f86:	0f 90       	pop	r0
		msgCount = iLength;
		
		// Send the OK that says we are ready to get data chunks
		printf_P (PSTR("OK\r\n"));
		
		while (msgCount)
    2f88:	41 14       	cp	r4, r1
    2f8a:	51 04       	cpc	r5, r1
    2f8c:	61 04       	cpc	r6, r1
    2f8e:	71 04       	cpc	r7, r1
    2f90:	09 f0       	breq	.+2      	; 0x2f94 <tm_cmd_write_block+0x1f2>
    2f92:	93 cf       	rjmp	.-218    	; 0x2eba <tm_cmd_write_block+0x118>
    2f94:	2e cf       	rjmp	.-420    	; 0x2df2 <tm_cmd_write_block+0x50>
			
			// check success	
			if ((crc16&0xff)==rawData[currQuant] && ((crc16>>8)&0xff)==rawData[currQuant+1])
			{
				// write those stuff to the flash memory and post success message
				for (i=0; i<currQuant; i++)	dataflash_write	( iPlace+i, rawData[i] );
    2f96:	99 20       	and	r9, r9
    2f98:	b9 f0       	breq	.+46     	; 0x2fc8 <tm_cmd_write_block+0x226>
    2f9a:	29 96       	adiw	r28, 0x09	; 9
    2f9c:	ec ac       	ldd	r14, Y+60	; 0x3c
    2f9e:	fd ac       	ldd	r15, Y+61	; 0x3d
    2fa0:	0e ad       	ldd	r16, Y+62	; 0x3e
    2fa2:	1f ad       	ldd	r17, Y+63	; 0x3f
    2fa4:	29 97       	sbiw	r28, 0x09	; 9
    2fa6:	65 01       	movw	r12, r10
    2fa8:	d6 01       	movw	r26, r12
    2faa:	4d 91       	ld	r20, X+
    2fac:	6d 01       	movw	r12, r26
    2fae:	c8 01       	movw	r24, r16
    2fb0:	b7 01       	movw	r22, r14
    2fb2:	0e 94 dd 1b 	call	0x37ba	; 0x37ba <dataflash_write>
    2fb6:	08 94       	sec
    2fb8:	e1 1c       	adc	r14, r1
    2fba:	f1 1c       	adc	r15, r1
    2fbc:	01 1d       	adc	r16, r1
    2fbe:	11 1d       	adc	r17, r1
    2fc0:	8c 2d       	mov	r24, r12
    2fc2:	8a 19       	sub	r24, r10
    2fc4:	89 15       	cp	r24, r9
    2fc6:	80 f3       	brcs	.-32     	; 0x2fa8 <tm_cmd_write_block+0x206>
				iPlace += iQuant;
    2fc8:	29 96       	adiw	r28, 0x09	; 9
    2fca:	2c ad       	ldd	r18, Y+60	; 0x3c
    2fcc:	3d ad       	ldd	r19, Y+61	; 0x3d
    2fce:	4e ad       	ldd	r20, Y+62	; 0x3e
    2fd0:	5f ad       	ldd	r21, Y+63	; 0x3f
    2fd2:	29 97       	sbiw	r28, 0x09	; 9
    2fd4:	25 96       	adiw	r28, 0x05	; 5
    2fd6:	8c ad       	ldd	r24, Y+60	; 0x3c
    2fd8:	9d ad       	ldd	r25, Y+61	; 0x3d
    2fda:	ae ad       	ldd	r26, Y+62	; 0x3e
    2fdc:	bf ad       	ldd	r27, Y+63	; 0x3f
    2fde:	25 97       	sbiw	r28, 0x05	; 5
    2fe0:	28 0f       	add	r18, r24
    2fe2:	39 1f       	adc	r19, r25
    2fe4:	4a 1f       	adc	r20, r26
    2fe6:	5b 1f       	adc	r21, r27
    2fe8:	29 96       	adiw	r28, 0x09	; 9
    2fea:	2c af       	std	Y+60, r18	; 0x3c
    2fec:	3d af       	std	Y+61, r19	; 0x3d
    2fee:	4e af       	std	Y+62, r20	; 0x3e
    2ff0:	5f af       	std	Y+63, r21	; 0x3f
    2ff2:	29 97       	sbiw	r28, 0x09	; 9
				msgCount -= iQuant;
    2ff4:	48 1a       	sub	r4, r24
    2ff6:	59 0a       	sbc	r5, r25
    2ff8:	6a 0a       	sbc	r6, r26
    2ffa:	7b 0a       	sbc	r7, r27
				printf_P (PSTR("OK\r\n"));
    2ffc:	00 d0       	rcall	.+0      	; 0x2ffe <tm_cmd_write_block+0x25c>
    2ffe:	ea e0       	ldi	r30, 0x0A	; 10
    3000:	f7 e0       	ldi	r31, 0x07	; 7
    3002:	ad b7       	in	r26, 0x3d	; 61
    3004:	be b7       	in	r27, 0x3e	; 62
    3006:	11 96       	adiw	r26, 0x01	; 1
    3008:	ed 93       	st	X+, r30
    300a:	fc 93       	st	X, r31
    300c:	12 97       	sbiw	r26, 0x02	; 2
    300e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    3012:	0f 90       	pop	r0
    3014:	0f 90       	pop	r0
    3016:	b8 cf       	rjmp	.-144    	; 0x2f88 <tm_cmd_write_block+0x1e6>
			
			while (count--) *dataIt++=getchar( );
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
    3018:	8f ef       	ldi	r24, 0xFF	; 255
    301a:	9f ef       	ldi	r25, 0xFF	; 255
    301c:	92 cf       	rjmp	.-220    	; 0x2f42 <tm_cmd_write_block+0x1a0>

0000301e <tm_cmd_idn>:
/*!
	Print out an identification information   
*/
/**************************************************************************/
void tm_cmd_idn				(U8 argc, char **argv)
{
    301e:	df 93       	push	r29
    3020:	cf 93       	push	r28
    3022:	00 d0       	rcall	.+0      	; 0x3024 <tm_cmd_idn+0x6>
    3024:	00 d0       	rcall	.+0      	; 0x3026 <tm_cmd_idn+0x8>
    3026:	cd b7       	in	r28, 0x3d	; 61
    3028:	de b7       	in	r29, 0x3e	; 62
	char ManID, DevID1, DevID2, ExData;

	printf_P ( PSTR("ANIBIKE VERSION:%03d.%d;"			// The project
    302a:	8d b7       	in	r24, 0x3d	; 61
    302c:	9e b7       	in	r25, 0x3e	; 62
    302e:	40 97       	sbiw	r24, 0x10	; 16
    3030:	8d bf       	out	0x3d, r24	; 61
    3032:	9e bf       	out	0x3e, r25	; 62
    3034:	ed b7       	in	r30, 0x3d	; 61
    3036:	fe b7       	in	r31, 0x3e	; 62
    3038:	31 96       	adiw	r30, 0x01	; 1
    303a:	88 e6       	ldi	r24, 0x68	; 104
    303c:	98 e0       	ldi	r25, 0x08	; 8
    303e:	ad b7       	in	r26, 0x3d	; 61
    3040:	be b7       	in	r27, 0x3e	; 62
    3042:	11 96       	adiw	r26, 0x01	; 1
    3044:	8d 93       	st	X+, r24
    3046:	9c 93       	st	X, r25
    3048:	12 97       	sbiw	r26, 0x02	; 2
    304a:	82 e0       	ldi	r24, 0x02	; 2
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	82 83       	std	Z+2, r24	; 0x02
    3050:	93 83       	std	Z+3, r25	; 0x03
    3052:	87 e0       	ldi	r24, 0x07	; 7
    3054:	90 e0       	ldi	r25, 0x00	; 0
    3056:	84 83       	std	Z+4, r24	; 0x04
    3058:	95 83       	std	Z+5, r25	; 0x05
    305a:	80 e2       	ldi	r24, 0x20	; 32
    305c:	90 e0       	ldi	r25, 0x00	; 0
    305e:	86 83       	std	Z+6, r24	; 0x06
    3060:	97 83       	std	Z+7, r25	; 0x07
    3062:	80 87       	std	Z+8, r24	; 0x08
    3064:	91 87       	std	Z+9, r25	; 0x09
    3066:	82 87       	std	Z+10, r24	; 0x0a
    3068:	93 87       	std	Z+11, r25	; 0x0b
    306a:	81 e0       	ldi	r24, 0x01	; 1
    306c:	90 e0       	ldi	r25, 0x00	; 0
    306e:	84 87       	std	Z+12, r24	; 0x0c
    3070:	95 87       	std	Z+13, r25	; 0x0d
    3072:	80 e0       	ldi	r24, 0x00	; 0
    3074:	90 e1       	ldi	r25, 0x10	; 16
    3076:	86 87       	std	Z+14, r24	; 0x0e
    3078:	97 87       	std	Z+15, r25	; 0x0f
    307a:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
					ANIBIKE_CLOCK_SPEED,
					ANIBIKE_NUM_LEDS,
					ANIBIKE_IS_RGB,
					FLASH_BLOCK4_SIZE );

	printf_P ( PSTR("\r\nFlashInfo:\r\n") );
    307e:	ed b7       	in	r30, 0x3d	; 61
    3080:	fe b7       	in	r31, 0x3e	; 62
    3082:	3e 96       	adiw	r30, 0x0e	; 14
    3084:	ed bf       	out	0x3d, r30	; 61
    3086:	fe bf       	out	0x3e, r31	; 62
    3088:	89 e5       	ldi	r24, 0x59	; 89
    308a:	98 e0       	ldi	r25, 0x08	; 8
    308c:	81 83       	std	Z+1, r24	; 0x01
    308e:	92 83       	std	Z+2, r25	; 0x02
    3090:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    3094:	0f 90       	pop	r0
    3096:	0f 90       	pop	r0
    3098:	ce 01       	movw	r24, r28
    309a:	01 96       	adiw	r24, 0x01	; 1
    309c:	be 01       	movw	r22, r28
    309e:	6e 5f       	subi	r22, 0xFE	; 254
    30a0:	7f 4f       	sbci	r23, 0xFF	; 255
    30a2:	ae 01       	movw	r20, r28
    30a4:	4d 5f       	subi	r20, 0xFD	; 253
    30a6:	5f 4f       	sbci	r21, 0xFF	; 255
    30a8:	9e 01       	movw	r18, r28
    30aa:	2c 5f       	subi	r18, 0xFC	; 252
    30ac:	3f 4f       	sbci	r19, 0xFF	; 255
    30ae:	0e 94 98 1b 	call	0x3730	; 0x3730 <dataflash_spi_idn>

	printf_P ( PSTR("ManID = 0x%x; DevID1 = 0x%x; DevID2 = 0x%x; ExData = 0x%x\r\n"),
    30b2:	8d b7       	in	r24, 0x3d	; 61
    30b4:	9e b7       	in	r25, 0x3e	; 62
    30b6:	0a 97       	sbiw	r24, 0x0a	; 10
    30b8:	8d bf       	out	0x3d, r24	; 61
    30ba:	9e bf       	out	0x3e, r25	; 62
    30bc:	ed b7       	in	r30, 0x3d	; 61
    30be:	fe b7       	in	r31, 0x3e	; 62
    30c0:	31 96       	adiw	r30, 0x01	; 1
    30c2:	8d e1       	ldi	r24, 0x1D	; 29
    30c4:	98 e0       	ldi	r25, 0x08	; 8
    30c6:	ad b7       	in	r26, 0x3d	; 61
    30c8:	be b7       	in	r27, 0x3e	; 62
    30ca:	11 96       	adiw	r26, 0x01	; 1
    30cc:	8d 93       	st	X+, r24
    30ce:	9c 93       	st	X, r25
    30d0:	12 97       	sbiw	r26, 0x02	; 2
    30d2:	89 81       	ldd	r24, Y+1	; 0x01
    30d4:	82 83       	std	Z+2, r24	; 0x02
    30d6:	13 82       	std	Z+3, r1	; 0x03
    30d8:	8a 81       	ldd	r24, Y+2	; 0x02
    30da:	84 83       	std	Z+4, r24	; 0x04
    30dc:	15 82       	std	Z+5, r1	; 0x05
    30de:	8b 81       	ldd	r24, Y+3	; 0x03
    30e0:	86 83       	std	Z+6, r24	; 0x06
    30e2:	17 82       	std	Z+7, r1	; 0x07
    30e4:	8c 81       	ldd	r24, Y+4	; 0x04
    30e6:	80 87       	std	Z+8, r24	; 0x08
    30e8:	11 86       	std	Z+9, r1	; 0x09
    30ea:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    30ee:	ed b7       	in	r30, 0x3d	; 61
    30f0:	fe b7       	in	r31, 0x3e	; 62
    30f2:	3a 96       	adiw	r30, 0x0a	; 10
    30f4:	ed bf       	out	0x3d, r30	; 61
    30f6:	fe bf       	out	0x3e, r31	; 62
					ManID, DevID1, DevID2, ExData );

}
    30f8:	24 96       	adiw	r28, 0x04	; 4
    30fa:	cd bf       	out	0x3d, r28	; 61
    30fc:	de bf       	out	0x3e, r29	; 62
    30fe:	cf 91       	pop	r28
    3100:	df 91       	pop	r29
    3102:	08 95       	ret

00003104 <rx_handler>:
	and echoing it back. As the cmd is finished transmitting, it sends it
	to the parser
*/
/**************************************************************************/
void rx_handler ( void )
{
    3104:	2f 92       	push	r2
    3106:	3f 92       	push	r3
    3108:	4f 92       	push	r4
    310a:	5f 92       	push	r5
    310c:	6f 92       	push	r6
    310e:	7f 92       	push	r7
    3110:	8f 92       	push	r8
    3112:	9f 92       	push	r9
    3114:	af 92       	push	r10
    3116:	bf 92       	push	r11
    3118:	cf 92       	push	r12
    311a:	df 92       	push	r13
    311c:	ef 92       	push	r14
    311e:	ff 92       	push	r15
    3120:	0f 93       	push	r16
    3122:	1f 93       	push	r17
    3124:	df 93       	push	r29
    3126:	cf 93       	push	r28
    3128:	cd b7       	in	r28, 0x3d	; 61
    312a:	de b7       	in	r29, 0x3e	; 62
    312c:	ec 97       	sbiw	r28, 0x3c	; 60
    312e:	cd bf       	out	0x3d, r28	; 61
    3130:	de bf       	out	0x3e, r29	; 62
	char c;
	bool bInLoop = true;
	
	printf_P( PSTR("ANIBIKE INC. VER. 2.7 BT.\r\n") );
    3132:	00 d0       	rcall	.+0      	; 0x3134 <rx_handler+0x30>
    3134:	8e e1       	ldi	r24, 0x1E	; 30
    3136:	99 e0       	ldi	r25, 0x09	; 9
    3138:	ed b7       	in	r30, 0x3d	; 61
    313a:	fe b7       	in	r31, 0x3e	; 62
    313c:	81 83       	std	Z+1, r24	; 0x01
    313e:	92 83       	std	Z+2, r25	; 0x02
    3140:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    3144:	80 91 26 22 	lds	r24, 0x2226
    3148:	0f 90       	pop	r0
    314a:	0f 90       	pop	r0
    314c:	88 23       	and	r24, r24
    314e:	29 f4       	brne	.+10     	; 0x315a <rx_handler+0x56>
    3150:	80 91 30 20 	lds	r24, 0x2030
    3154:	81 30       	cpi	r24, 0x01	; 1
    3156:	09 f4       	brne	.+2      	; 0x315a <rx_handler+0x56>
    3158:	33 c1       	rjmp	.+614    	; 0x33c0 <rx_handler+0x2bc>
    315a:	7e e2       	ldi	r23, 0x2E	; 46
    315c:	87 2e       	mov	r8, r23
    315e:	72 e2       	ldi	r23, 0x22	; 34
    3160:	97 2e       	mov	r9, r23
    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    do
    {
        argv[++i] = strtok(NULL, " ");
    3162:	65 e0       	ldi	r22, 0x05	; 5
    3164:	c6 2e       	mov	r12, r22
    3166:	d1 2c       	mov	r13, r1
    3168:	cc 0e       	add	r12, r28
    316a:	dd 1e       	adc	r13, r29
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
        {
            cmd_tbl[i].func(argc, argv);
    316c:	3e 01       	movw	r6, r28
    316e:	08 94       	sec
    3170:	61 1c       	adc	r6, r1
    3172:	71 1c       	adc	r7, r1

	        *msg_ptr = '\0';

			if (g_EchoOnOff)
			{
		        printf_P( PSTR("\r\n") );
    3174:	5b e1       	ldi	r21, 0x1B	; 27
    3176:	45 2e       	mov	r4, r21
    3178:	59 e0       	ldi	r21, 0x09	; 9
    317a:	55 2e       	mov	r5, r21
//	TIMSK1 = 0;	// Compare Interrupt
//	TIMSK2 = 0; // Compare interrupt

//	ROW_PORT = 0x00;

	CS_UP;
    317c:	40 e6       	ldi	r20, 0x60	; 96
    317e:	24 2e       	mov	r2, r20
    3180:	46 e0       	ldi	r20, 0x06	; 6
    3182:	34 2e       	mov	r3, r20
	printf_P( PSTR("ANIBIKE INC. VER. 2.7 BT.\r\n") );
	cmd_menu ( );
	
	while (bInLoop)
	{
	    c = swUART_ReadChar( );
    3184:	0e 94 c8 21 	call	0x4390	; 0x4390 <swUART_ReadChar>
    3188:	08 2f       	mov	r16, r24

	    switch (c)
    318a:	8d 30       	cpi	r24, 0x0D	; 13
    318c:	c1 f0       	breq	.+48     	; 0x31be <rx_handler+0xba>
    318e:	8a 33       	cpi	r24, 0x3A	; 58
    3190:	b1 f0       	breq	.+44     	; 0x31be <rx_handler+0xba>
    3192:	88 30       	cpi	r24, 0x08	; 8
    3194:	09 f4       	brne	.+2      	; 0x3198 <rx_handler+0x94>
    3196:	4b c0       	rjmp	.+150    	; 0x322e <rx_handler+0x12a>
			}
	        break;
			
           
	    default:
			if (g_EchoOnOff)
    3198:	80 91 30 20 	lds	r24, 0x2030
    319c:	88 23       	and	r24, r24
    319e:	09 f0       	breq	.+2      	; 0x31a2 <rx_handler+0x9e>
    31a0:	e4 c0       	rjmp	.+456    	; 0x336a <rx_handler+0x266>
				swUART_PutChar ( c );

	        *msg_ptr++ = c;
    31a2:	e0 91 2c 22 	lds	r30, 0x222C
    31a6:	f0 91 2d 22 	lds	r31, 0x222D
    31aa:	01 93       	st	Z+, r16
    31ac:	e0 93 2c 22 	sts	0x222C, r30
    31b0:	f0 93 2d 22 	sts	0x222D, r31
	printf_P( PSTR("ANIBIKE INC. VER. 2.7 BT.\r\n") );
	cmd_menu ( );
	
	while (bInLoop)
	{
	    c = swUART_ReadChar( );
    31b4:	0e 94 c8 21 	call	0x4390	; 0x4390 <swUART_ReadChar>
    31b8:	08 2f       	mov	r16, r24

	    switch (c)
    31ba:	8d 30       	cpi	r24, 0x0D	; 13
    31bc:	41 f7       	brne	.-48     	; 0x318e <rx_handler+0x8a>
	    {
		case ':':
	    case '\r':
	        // terminate the msg and reset the msg ptr. then send
	        // it to the handler for processing.
			if (g_isOperating != 0)
    31be:	80 91 2b 22 	lds	r24, 0x222B
    31c2:	88 23       	and	r24, r24
    31c4:	09 f0       	breq	.+2      	; 0x31c8 <rx_handler+0xc4>
    31c6:	c0 c0       	rjmp	.+384    	; 0x3348 <rx_handler+0x244>
			{
				tm_cmd_stop_all(0, NULL);
			}

	        *msg_ptr = '\0';
    31c8:	e0 91 2c 22 	lds	r30, 0x222C
    31cc:	f0 91 2d 22 	lds	r31, 0x222D
    31d0:	10 82       	st	Z, r1

			if (g_EchoOnOff)
    31d2:	80 91 30 20 	lds	r24, 0x2030
    31d6:	88 23       	and	r24, r24
    31d8:	09 f0       	breq	.+2      	; 0x31dc <rx_handler+0xd8>
    31da:	ac c0       	rjmp	.+344    	; 0x3334 <rx_handler+0x230>
			{
		        printf_P( PSTR("\r\n") );
			}				
	               
			if ( strcmp ((char*)msg, "exit") == 0 )
    31dc:	8e e2       	ldi	r24, 0x2E	; 46
    31de:	92 e2       	ldi	r25, 0x22	; 34
    31e0:	69 e2       	ldi	r22, 0x29	; 41
    31e2:	70 e2       	ldi	r23, 0x20	; 32
    31e4:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    31e8:	00 97       	sbiw	r24, 0x00	; 0
    31ea:	d1 f5       	brne	.+116    	; 0x3260 <rx_handler+0x15c>
			{
				bInLoop = false;
				printf_P( PSTR("Goodbye...\r\n"));
    31ec:	00 d0       	rcall	.+0      	; 0x31ee <rx_handler+0xea>
    31ee:	8e e0       	ldi	r24, 0x0E	; 14
    31f0:	99 e0       	ldi	r25, 0x09	; 9
    31f2:	ed b7       	in	r30, 0x3d	; 61
    31f4:	fe b7       	in	r31, 0x3e	; 62
    31f6:	81 83       	std	Z+1, r24	; 0x01
    31f8:	92 83       	std	Z+2, r25	; 0x02
    31fa:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>

	        *msg_ptr++ = c;
	        break;
	    }
	}		
}
    31fe:	0f 90       	pop	r0
    3200:	0f 90       	pop	r0
    3202:	ec 96       	adiw	r28, 0x3c	; 60
    3204:	cd bf       	out	0x3d, r28	; 61
    3206:	de bf       	out	0x3e, r29	; 62
    3208:	cf 91       	pop	r28
    320a:	df 91       	pop	r29
    320c:	1f 91       	pop	r17
    320e:	0f 91       	pop	r16
    3210:	ff 90       	pop	r15
    3212:	ef 90       	pop	r14
    3214:	df 90       	pop	r13
    3216:	cf 90       	pop	r12
    3218:	bf 90       	pop	r11
    321a:	af 90       	pop	r10
    321c:	9f 90       	pop	r9
    321e:	8f 90       	pop	r8
    3220:	7f 90       	pop	r7
    3222:	6f 90       	pop	r6
    3224:	5f 90       	pop	r5
    3226:	4f 90       	pop	r4
    3228:	3f 90       	pop	r3
    322a:	2f 90       	pop	r2
    322c:	08 95       	ret
			cmd_parse((char *)msg);
	        msg_ptr = msg;
	        break;
            
	    case '\b':
	        if (msg_ptr > msg)
    322e:	80 91 2c 22 	lds	r24, 0x222C
    3232:	90 91 2d 22 	lds	r25, 0x222D
    3236:	e2 e2       	ldi	r30, 0x22	; 34
    3238:	8e 32       	cpi	r24, 0x2E	; 46
    323a:	9e 07       	cpc	r25, r30
    323c:	09 f0       	breq	.+2      	; 0x3240 <rx_handler+0x13c>
    323e:	08 f4       	brcc	.+2      	; 0x3242 <rx_handler+0x13e>
    3240:	a1 cf       	rjmp	.-190    	; 0x3184 <rx_handler+0x80>
	        {
	            msg_ptr--;
    3242:	01 97       	sbiw	r24, 0x01	; 1
    3244:	80 93 2c 22 	sts	0x222C, r24
    3248:	90 93 2d 22 	sts	0x222D, r25
				swUART_PutChar ( c );
    324c:	88 e0       	ldi	r24, 0x08	; 8
    324e:	0e 94 b2 21 	call	0x4364	; 0x4364 <swUART_PutChar>
				swUART_PutChar ( ' ' );
    3252:	80 e2       	ldi	r24, 0x20	; 32
    3254:	0e 94 b2 21 	call	0x4364	; 0x4364 <swUART_PutChar>
				swUART_PutChar ( c );
    3258:	88 e0       	ldi	r24, 0x08	; 8
    325a:	0e 94 b2 21 	call	0x4364	; 0x4364 <swUART_PutChar>
    325e:	92 cf       	rjmp	.-220    	; 0x3184 <rx_handler+0x80>
				bInLoop = false;
				printf_P( PSTR("Goodbye...\r\n"));
				break;
			}									   
			
			strcpy (last_msg, msg);	    
    3260:	80 e6       	ldi	r24, 0x60	; 96
    3262:	92 e2       	ldi	r25, 0x22	; 34
    3264:	6e e2       	ldi	r22, 0x2E	; 46
    3266:	72 e2       	ldi	r23, 0x22	; 34
    3268:	0e 94 ca 23 	call	0x4794	; 0x4794 <strcpy>
    U8 argc, i = 0;
    char *argv[30];

    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    326c:	8e e2       	ldi	r24, 0x2E	; 46
    326e:	92 e2       	ldi	r25, 0x22	; 34
    3270:	6e e2       	ldi	r22, 0x2E	; 46
    3272:	70 e2       	ldi	r23, 0x20	; 32
    3274:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    3278:	89 83       	std	Y+1, r24	; 0x01
    327a:	9a 83       	std	Y+2, r25	; 0x02
    do
    {
        argv[++i] = strtok(NULL, " ");
    327c:	80 e0       	ldi	r24, 0x00	; 0
    327e:	90 e0       	ldi	r25, 0x00	; 0
    3280:	6e e2       	ldi	r22, 0x2E	; 46
    3282:	70 e2       	ldi	r23, 0x20	; 32
    3284:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    3288:	28 2f       	mov	r18, r24
    328a:	39 2f       	mov	r19, r25
    328c:	2b 83       	std	Y+3, r18	; 0x03
    328e:	3c 83       	std	Y+4, r19	; 0x04
    3290:	86 01       	movw	r16, r12
    3292:	bb 24       	eor	r11, r11
    3294:	b3 94       	inc	r11
    3296:	10 c0       	rjmp	.+32     	; 0x32b8 <rx_handler+0x1b4>
    3298:	b3 94       	inc	r11
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	6e e2       	ldi	r22, 0x2E	; 46
    32a0:	70 e2       	ldi	r23, 0x20	; 32
    32a2:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    32a6:	28 2f       	mov	r18, r24
    32a8:	39 2f       	mov	r19, r25
    32aa:	f8 01       	movw	r30, r16
    32ac:	21 93       	st	Z+, r18
    32ae:	31 93       	st	Z+, r19
    32b0:	8f 01       	movw	r16, r30
    } while ((i < 30) && (argv[i] != NULL));
    32b2:	fb 2d       	mov	r31, r11
    32b4:	fe 31       	cpi	r31, 0x1E	; 30
    32b6:	19 f0       	breq	.+6      	; 0x32be <rx_handler+0x1ba>
    32b8:	21 15       	cp	r18, r1
    32ba:	31 05       	cpc	r19, r1
    32bc:	69 f7       	brne	.-38     	; 0x3298 <rx_handler+0x194>
    32be:	e9 80       	ldd	r14, Y+1	; 0x01
    32c0:	fa 80       	ldd	r15, Y+2	; 0x02
    
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    32c2:	62 e1       	ldi	r22, 0x12	; 18
    32c4:	70 e2       	ldi	r23, 0x20	; 32
    32c6:	00 e0       	ldi	r16, 0x00	; 0
    32c8:	10 e0       	ldi	r17, 0x00	; 0
    32ca:	aa 24       	eor	r10, r10
    32cc:	12 c0       	rjmp	.+36     	; 0x32f2 <rx_handler+0x1ee>
    32ce:	a3 94       	inc	r10
    32d0:	0a 2d       	mov	r16, r10
    32d2:	10 e0       	ldi	r17, 0x00	; 0
    32d4:	f8 01       	movw	r30, r16
    32d6:	ee 0f       	add	r30, r30
    32d8:	ff 1f       	adc	r31, r31
    32da:	e0 0f       	add	r30, r16
    32dc:	f1 1f       	adc	r31, r17
    32de:	ee 0f       	add	r30, r30
    32e0:	ff 1f       	adc	r31, r31
    32e2:	ec 59       	subi	r30, 0x9C	; 156
    32e4:	fe 4d       	sbci	r31, 0xDE	; 222
    32e6:	60 81       	ld	r22, Z
    32e8:	71 81       	ldd	r23, Z+1	; 0x01
    32ea:	61 15       	cp	r22, r1
    32ec:	71 05       	cpc	r23, r1
    32ee:	09 f4       	brne	.+2      	; 0x32f2 <rx_handler+0x1ee>
    32f0:	40 c0       	rjmp	.+128    	; 0x3372 <rx_handler+0x26e>
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
    32f2:	c7 01       	movw	r24, r14
    32f4:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    32f8:	00 97       	sbiw	r24, 0x00	; 0
    32fa:	49 f7       	brne	.-46     	; 0x32ce <rx_handler+0x1ca>
        {
            cmd_tbl[i].func(argc, argv);
    32fc:	f8 01       	movw	r30, r16
    32fe:	ee 0f       	add	r30, r30
    3300:	ff 1f       	adc	r31, r31
    3302:	e0 0f       	add	r30, r16
    3304:	f1 1f       	adc	r31, r17
    3306:	ee 0f       	add	r30, r30
    3308:	ff 1f       	adc	r31, r31
    330a:	ec 59       	subi	r30, 0x9C	; 156
    330c:	fe 4d       	sbci	r31, 0xDE	; 222
    330e:	02 80       	ldd	r0, Z+2	; 0x02
    3310:	f3 81       	ldd	r31, Z+3	; 0x03
    3312:	e0 2d       	mov	r30, r0
    3314:	8b 2d       	mov	r24, r11
    3316:	b3 01       	movw	r22, r6
    3318:	09 95       	icall
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    331a:	80 91 26 22 	lds	r24, 0x2226
    331e:	88 23       	and	r24, r24
    3320:	21 f4       	brne	.+8      	; 0x332a <rx_handler+0x226>
    3322:	80 91 30 20 	lds	r24, 0x2030
    3326:	81 30       	cpi	r24, 0x01	; 1
    3328:	b9 f1       	breq	.+110    	; 0x3398 <rx_handler+0x294>
				break;
			}									   
			
			strcpy (last_msg, msg);	    
			cmd_parse((char *)msg);
	        msg_ptr = msg;
    332a:	80 92 2c 22 	sts	0x222C, r8
    332e:	90 92 2d 22 	sts	0x222D, r9
	        break;
    3332:	28 cf       	rjmp	.-432    	; 0x3184 <rx_handler+0x80>

	        *msg_ptr = '\0';

			if (g_EchoOnOff)
			{
		        printf_P( PSTR("\r\n") );
    3334:	00 d0       	rcall	.+0      	; 0x3336 <rx_handler+0x232>
    3336:	ed b7       	in	r30, 0x3d	; 61
    3338:	fe b7       	in	r31, 0x3e	; 62
    333a:	41 82       	std	Z+1, r4	; 0x01
    333c:	52 82       	std	Z+2, r5	; 0x02
    333e:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    3342:	0f 90       	pop	r0
    3344:	0f 90       	pop	r0
    3346:	4a cf       	rjmp	.-364    	; 0x31dc <rx_handler+0xd8>
	Entered the transfer mode so stop all the other stuff
*/
/**************************************************************************/
void tm_cmd_stop_all(U8 argc, char **argv)
{
	g_isOperating = 0;
    3348:	10 92 2b 22 	sts	0x222B, r1
//	TIMSK1 = 0;	// Compare Interrupt
//	TIMSK2 = 0; // Compare interrupt

//	ROW_PORT = 0x00;

	CS_UP;
    334c:	20 e1       	ldi	r18, 0x10	; 16
    334e:	f1 01       	movw	r30, r2
    3350:	25 83       	std	Z+5, r18	; 0x05

	printf_P (PSTR("OK\r\n"));
    3352:	00 d0       	rcall	.+0      	; 0x3354 <rx_handler+0x250>
    3354:	8f ee       	ldi	r24, 0xEF	; 239
    3356:	98 e0       	ldi	r25, 0x08	; 8
    3358:	ed b7       	in	r30, 0x3d	; 61
    335a:	fe b7       	in	r31, 0x3e	; 62
    335c:	81 83       	std	Z+1, r24	; 0x01
    335e:	92 83       	std	Z+2, r25	; 0x02
    3360:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    3364:	0f 90       	pop	r0
    3366:	0f 90       	pop	r0
    3368:	2f cf       	rjmp	.-418    	; 0x31c8 <rx_handler+0xc4>
	        break;
			
           
	    default:
			if (g_EchoOnOff)
				swUART_PutChar ( c );
    336a:	80 2f       	mov	r24, r16
    336c:	0e 94 b2 21 	call	0x4364	; 0x4364 <swUART_PutChar>
    3370:	18 cf       	rjmp	.-464    	; 0x31a2 <rx_handler+0x9e>
            cmd_tbl[i].func(argc, argv);
            cmd_menu();
            return;
        }
    }
    printf_P( PSTR("CMD: Command not recognized.\r\n"));
    3372:	00 d0       	rcall	.+0      	; 0x3374 <rx_handler+0x270>
    3374:	86 ec       	ldi	r24, 0xC6	; 198
    3376:	98 e0       	ldi	r25, 0x08	; 8
    3378:	ed b7       	in	r30, 0x3d	; 61
    337a:	fe b7       	in	r31, 0x3e	; 62
    337c:	81 83       	std	Z+1, r24	; 0x01
    337e:	92 83       	std	Z+2, r25	; 0x02
    3380:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    3384:	80 91 26 22 	lds	r24, 0x2226
    3388:	0f 90       	pop	r0
    338a:	0f 90       	pop	r0
    338c:	88 23       	and	r24, r24
    338e:	69 f6       	brne	.-102    	; 0x332a <rx_handler+0x226>
    3390:	80 91 30 20 	lds	r24, 0x2030
    3394:	81 30       	cpi	r24, 0x01	; 1
    3396:	49 f6       	brne	.-110    	; 0x332a <rx_handler+0x226>
	{
    	printf_P( PSTR("\r\n"));
    3398:	00 d0       	rcall	.+0      	; 0x339a <rx_handler+0x296>
    339a:	8b e0       	ldi	r24, 0x0B	; 11
    339c:	99 e0       	ldi	r25, 0x09	; 9
    339e:	ed b7       	in	r30, 0x3d	; 61
    33a0:	fe b7       	in	r31, 0x3e	; 62
    33a2:	81 83       	std	Z+1, r24	; 0x01
    33a4:	92 83       	std	Z+2, r25	; 0x02
    33a6:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    33aa:	89 ef       	ldi	r24, 0xF9	; 249
    33ac:	98 e0       	ldi	r25, 0x08	; 8
    33ae:	ed b7       	in	r30, 0x3d	; 61
    33b0:	fe b7       	in	r31, 0x3e	; 62
    33b2:	81 83       	std	Z+1, r24	; 0x01
    33b4:	92 83       	std	Z+2, r25	; 0x02
    33b6:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    33ba:	0f 90       	pop	r0
    33bc:	0f 90       	pop	r0
    33be:	b5 cf       	rjmp	.-150    	; 0x332a <rx_handler+0x226>
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
	{
    	printf_P( PSTR("\r\n"));
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <rx_handler+0x2be>
    33c2:	8b e0       	ldi	r24, 0x0B	; 11
    33c4:	99 e0       	ldi	r25, 0x09	; 9
    33c6:	ed b7       	in	r30, 0x3d	; 61
    33c8:	fe b7       	in	r31, 0x3e	; 62
    33ca:	81 83       	std	Z+1, r24	; 0x01
    33cc:	92 83       	std	Z+2, r25	; 0x02
    33ce:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    33d2:	89 ef       	ldi	r24, 0xF9	; 249
    33d4:	98 e0       	ldi	r25, 0x08	; 8
    33d6:	ed b7       	in	r30, 0x3d	; 61
    33d8:	fe b7       	in	r31, 0x3e	; 62
    33da:	81 83       	std	Z+1, r24	; 0x01
    33dc:	92 83       	std	Z+2, r25	; 0x02
    33de:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	b9 ce       	rjmp	.-654    	; 0x315a <rx_handler+0x56>

000033e8 <cmd_menu>:
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    33e8:	80 91 26 22 	lds	r24, 0x2226
    33ec:	88 23       	and	r24, r24
    33ee:	21 f4       	brne	.+8      	; 0x33f8 <cmd_menu+0x10>
    33f0:	80 91 30 20 	lds	r24, 0x2030
    33f4:	81 30       	cpi	r24, 0x01	; 1
    33f6:	09 f0       	breq	.+2      	; 0x33fa <cmd_menu+0x12>
    33f8:	08 95       	ret
	{
    	printf_P( PSTR("\r\n"));
    33fa:	00 d0       	rcall	.+0      	; 0x33fc <cmd_menu+0x14>
    33fc:	8b e0       	ldi	r24, 0x0B	; 11
    33fe:	99 e0       	ldi	r25, 0x09	; 9
    3400:	ed b7       	in	r30, 0x3d	; 61
    3402:	fe b7       	in	r31, 0x3e	; 62
    3404:	81 83       	std	Z+1, r24	; 0x01
    3406:	92 83       	std	Z+2, r25	; 0x02
    3408:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    340c:	89 ef       	ldi	r24, 0xF9	; 249
    340e:	98 e0       	ldi	r25, 0x08	; 8
    3410:	ed b7       	in	r30, 0x3d	; 61
    3412:	fe b7       	in	r31, 0x3e	; 62
    3414:	81 83       	std	Z+1, r24	; 0x01
    3416:	92 83       	std	Z+2, r25	; 0x02
    3418:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    341c:	0f 90       	pop	r0
    341e:	0f 90       	pop	r0
    3420:	08 95       	ret

00003422 <cmd_parse>:
	to find a suitable command line in the cmd_table. Then invokes the
	appropriate function given in the cmd_table.    
*/
/**************************************************************************/
void cmd_parse(char *cmd)
{
    3422:	cf 92       	push	r12
    3424:	df 92       	push	r13
    3426:	ef 92       	push	r14
    3428:	ff 92       	push	r15
    342a:	0f 93       	push	r16
    342c:	1f 93       	push	r17
    342e:	df 93       	push	r29
    3430:	cf 93       	push	r28
    3432:	cd b7       	in	r28, 0x3d	; 61
    3434:	de b7       	in	r29, 0x3e	; 62
    3436:	ec 97       	sbiw	r28, 0x3c	; 60
    3438:	cd bf       	out	0x3d, r28	; 61
    343a:	de bf       	out	0x3e, r29	; 62
    U8 argc, i = 0;
    char *argv[30];

    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    343c:	6e e2       	ldi	r22, 0x2E	; 46
    343e:	70 e2       	ldi	r23, 0x20	; 32
    3440:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    3444:	89 83       	std	Y+1, r24	; 0x01
    3446:	9a 83       	std	Y+2, r25	; 0x02
    do
    {
        argv[++i] = strtok(NULL, " ");
    3448:	80 e0       	ldi	r24, 0x00	; 0
    344a:	90 e0       	ldi	r25, 0x00	; 0
    344c:	6e e2       	ldi	r22, 0x2E	; 46
    344e:	70 e2       	ldi	r23, 0x20	; 32
    3450:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    3454:	28 2f       	mov	r18, r24
    3456:	39 2f       	mov	r19, r25
    3458:	2b 83       	std	Y+3, r18	; 0x03
    345a:	3c 83       	std	Y+4, r19	; 0x04
    345c:	8e 01       	movw	r16, r28
    345e:	0b 5f       	subi	r16, 0xFB	; 251
    3460:	1f 4f       	sbci	r17, 0xFF	; 255
    3462:	dd 24       	eor	r13, r13
    3464:	d3 94       	inc	r13
    3466:	10 c0       	rjmp	.+32     	; 0x3488 <cmd_parse+0x66>
    3468:	d3 94       	inc	r13
    346a:	80 e0       	ldi	r24, 0x00	; 0
    346c:	90 e0       	ldi	r25, 0x00	; 0
    346e:	6e e2       	ldi	r22, 0x2E	; 46
    3470:	70 e2       	ldi	r23, 0x20	; 32
    3472:	0e 94 bc 23 	call	0x4778	; 0x4778 <strtok>
    3476:	28 2f       	mov	r18, r24
    3478:	39 2f       	mov	r19, r25
    347a:	f8 01       	movw	r30, r16
    347c:	21 93       	st	Z+, r18
    347e:	31 93       	st	Z+, r19
    3480:	8f 01       	movw	r16, r30
    } while ((i < 30) && (argv[i] != NULL));
    3482:	fd 2d       	mov	r31, r13
    3484:	fe 31       	cpi	r31, 0x1E	; 30
    3486:	19 f0       	breq	.+6      	; 0x348e <cmd_parse+0x6c>
    3488:	21 15       	cp	r18, r1
    348a:	31 05       	cpc	r19, r1
    348c:	69 f7       	brne	.-38     	; 0x3468 <cmd_parse+0x46>
    348e:	e9 80       	ldd	r14, Y+1	; 0x01
    3490:	fa 80       	ldd	r15, Y+2	; 0x02
    
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    3492:	62 e1       	ldi	r22, 0x12	; 18
    3494:	70 e2       	ldi	r23, 0x20	; 32
    3496:	00 e0       	ldi	r16, 0x00	; 0
    3498:	10 e0       	ldi	r17, 0x00	; 0
    349a:	cc 24       	eor	r12, r12
    349c:	11 c0       	rjmp	.+34     	; 0x34c0 <cmd_parse+0x9e>
    349e:	c3 94       	inc	r12
    34a0:	0c 2d       	mov	r16, r12
    34a2:	10 e0       	ldi	r17, 0x00	; 0
    34a4:	f8 01       	movw	r30, r16
    34a6:	ee 0f       	add	r30, r30
    34a8:	ff 1f       	adc	r31, r31
    34aa:	e0 0f       	add	r30, r16
    34ac:	f1 1f       	adc	r31, r17
    34ae:	ee 0f       	add	r30, r30
    34b0:	ff 1f       	adc	r31, r31
    34b2:	ec 59       	subi	r30, 0x9C	; 156
    34b4:	fe 4d       	sbci	r31, 0xDE	; 222
    34b6:	60 81       	ld	r22, Z
    34b8:	71 81       	ldd	r23, Z+1	; 0x01
    34ba:	61 15       	cp	r22, r1
    34bc:	71 05       	cpc	r23, r1
    34be:	51 f1       	breq	.+84     	; 0x3514 <cmd_parse+0xf2>
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
    34c0:	c7 01       	movw	r24, r14
    34c2:	0e 94 c1 23 	call	0x4782	; 0x4782 <strcmp>
    34c6:	00 97       	sbiw	r24, 0x00	; 0
    34c8:	51 f7       	brne	.-44     	; 0x349e <cmd_parse+0x7c>
        {
            cmd_tbl[i].func(argc, argv);
    34ca:	f8 01       	movw	r30, r16
    34cc:	ee 0f       	add	r30, r30
    34ce:	ff 1f       	adc	r31, r31
    34d0:	e0 0f       	add	r30, r16
    34d2:	f1 1f       	adc	r31, r17
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	ec 59       	subi	r30, 0x9C	; 156
    34da:	fe 4d       	sbci	r31, 0xDE	; 222
    34dc:	02 80       	ldd	r0, Z+2	; 0x02
    34de:	f3 81       	ldd	r31, Z+3	; 0x03
    34e0:	e0 2d       	mov	r30, r0
    34e2:	8d 2d       	mov	r24, r13
    34e4:	be 01       	movw	r22, r28
    34e6:	6f 5f       	subi	r22, 0xFF	; 255
    34e8:	7f 4f       	sbci	r23, 0xFF	; 255
    34ea:	09 95       	icall
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    34ec:	80 91 26 22 	lds	r24, 0x2226
    34f0:	88 23       	and	r24, r24
    34f2:	21 f4       	brne	.+8      	; 0x34fc <cmd_parse+0xda>
    34f4:	80 91 30 20 	lds	r24, 0x2030
    34f8:	81 30       	cpi	r24, 0x01	; 1
    34fa:	f9 f0       	breq	.+62     	; 0x353a <cmd_parse+0x118>
        }
    }
    printf_P( PSTR("CMD: Command not recognized.\r\n"));

    cmd_menu();
}
    34fc:	ec 96       	adiw	r28, 0x3c	; 60
    34fe:	cd bf       	out	0x3d, r28	; 61
    3500:	de bf       	out	0x3e, r29	; 62
    3502:	cf 91       	pop	r28
    3504:	df 91       	pop	r29
    3506:	1f 91       	pop	r17
    3508:	0f 91       	pop	r16
    350a:	ff 90       	pop	r15
    350c:	ef 90       	pop	r14
    350e:	df 90       	pop	r13
    3510:	cf 90       	pop	r12
    3512:	08 95       	ret
            cmd_tbl[i].func(argc, argv);
            cmd_menu();
            return;
        }
    }
    printf_P( PSTR("CMD: Command not recognized.\r\n"));
    3514:	00 d0       	rcall	.+0      	; 0x3516 <cmd_parse+0xf4>
    3516:	86 ec       	ldi	r24, 0xC6	; 198
    3518:	98 e0       	ldi	r25, 0x08	; 8
    351a:	ed b7       	in	r30, 0x3d	; 61
    351c:	fe b7       	in	r31, 0x3e	; 62
    351e:	81 83       	std	Z+1, r24	; 0x01
    3520:	92 83       	std	Z+2, r25	; 0x02
    3522:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    3526:	80 91 26 22 	lds	r24, 0x2226
    352a:	0f 90       	pop	r0
    352c:	0f 90       	pop	r0
    352e:	88 23       	and	r24, r24
    3530:	29 f7       	brne	.-54     	; 0x34fc <cmd_parse+0xda>
    3532:	80 91 30 20 	lds	r24, 0x2030
    3536:	81 30       	cpi	r24, 0x01	; 1
    3538:	09 f7       	brne	.-62     	; 0x34fc <cmd_parse+0xda>
	{
    	printf_P( PSTR("\r\n"));
    353a:	00 d0       	rcall	.+0      	; 0x353c <cmd_parse+0x11a>
    353c:	8b e0       	ldi	r24, 0x0B	; 11
    353e:	99 e0       	ldi	r25, 0x09	; 9
    3540:	ed b7       	in	r30, 0x3d	; 61
    3542:	fe b7       	in	r31, 0x3e	; 62
    3544:	81 83       	std	Z+1, r24	; 0x01
    3546:	92 83       	std	Z+2, r25	; 0x02
    3548:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    354c:	89 ef       	ldi	r24, 0xF9	; 249
    354e:	98 e0       	ldi	r25, 0x08	; 8
    3550:	ed b7       	in	r30, 0x3d	; 61
    3552:	fe b7       	in	r31, 0x3e	; 62
    3554:	81 83       	std	Z+1, r24	; 0x01
    3556:	92 83       	std	Z+2, r25	; 0x02
    3558:	0e 94 c9 24 	call	0x4992	; 0x4992 <printf_P>
    355c:	0f 90       	pop	r0
    355e:	0f 90       	pop	r0
    3560:	cd cf       	rjmp	.-102    	; 0x34fc <cmd_parse+0xda>

00003562 <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    3562:	0f 93       	push	r16
    3564:	df 93       	push	r29
    3566:	cf 93       	push	r28
    3568:	0f 92       	push	r0
    356a:	cd b7       	in	r28, 0x3d	; 61
    356c:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    356e:	2f b7       	in	r18, 0x3f	; 63
    3570:	29 83       	std	Y+1, r18	; 0x01
    3572:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3574:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3576:	fc 01       	movw	r30, r24
    3578:	08 ed       	ldi	r16, 0xD8	; 216
    357a:	04 bf       	out	0x34, r16	; 52
    357c:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    357e:	89 81       	ldd	r24, Y+1	; 0x01
    3580:	8f bf       	out	0x3f, r24	; 63
#endif
}
    3582:	0f 90       	pop	r0
    3584:	cf 91       	pop	r28
    3586:	df 91       	pop	r29
    3588:	0f 91       	pop	r16
    358a:	08 95       	ret

0000358c <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    358c:	66 23       	and	r22, r22
    358e:	39 f4       	brne	.+14     	; 0x359e <CLKSYS_XOSC_Config+0x12>
    3590:	90 e0       	ldi	r25, 0x00	; 0
    3592:	84 2b       	or	r24, r20
    3594:	89 2b       	or	r24, r25
    3596:	e0 e5       	ldi	r30, 0x50	; 80
    3598:	f0 e0       	ldi	r31, 0x00	; 0
    359a:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    359c:	08 95       	ret
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    359e:	90 e2       	ldi	r25, 0x20	; 32
    35a0:	84 2b       	or	r24, r20
    35a2:	89 2b       	or	r24, r25
    35a4:	e0 e5       	ldi	r30, 0x50	; 80
    35a6:	f0 e0       	ldi	r31, 0x00	; 0
    35a8:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    35aa:	08 95       	ret

000035ac <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
    35ac:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    35ae:	68 2b       	or	r22, r24
    35b0:	e0 e5       	ldi	r30, 0x50	; 80
    35b2:	f0 e0       	ldi	r31, 0x00	; 0
    35b4:	65 83       	std	Z+5, r22	; 0x05
}
    35b6:	08 95       	ret

000035b8 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    35b8:	e0 e5       	ldi	r30, 0x50	; 80
    35ba:	f0 e0       	ldi	r31, 0x00	; 0
    35bc:	20 81       	ld	r18, Z
    35be:	98 2f       	mov	r25, r24
    35c0:	90 95       	com	r25
    35c2:	92 23       	and	r25, r18
    35c4:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    35c6:	90 81       	ld	r25, Z
	return clkEnabled;
}
    35c8:	89 23       	and	r24, r25
    35ca:	08 95       	ret

000035cc <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    35cc:	0f 93       	push	r16
    35ce:	df 93       	push	r29
    35d0:	cf 93       	push	r28
    35d2:	0f 92       	push	r0
    35d4:	cd b7       	in	r28, 0x3d	; 61
    35d6:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    35d8:	9f b7       	in	r25, 0x3f	; 63
    35da:	99 83       	std	Y+1, r25	; 0x01
    35dc:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    35de:	1b be       	out	0x3b, r1	; 59
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    35e0:	68 2b       	or	r22, r24
	AVR_ENTER_CRITICAL_REGION( );
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
#endif
	asm volatile(
    35e2:	81 e4       	ldi	r24, 0x41	; 65
    35e4:	90 e0       	ldi	r25, 0x00	; 0
    35e6:	fc 01       	movw	r30, r24
    35e8:	08 ed       	ldi	r16, 0xD8	; 216
    35ea:	04 bf       	out	0x34, r16	; 52
    35ec:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    35ee:	89 81       	ldd	r24, Y+1	; 0x01
    35f0:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
    35f2:	0f 90       	pop	r0
    35f4:	cf 91       	pop	r28
    35f6:	df 91       	pop	r29
    35f8:	0f 91       	pop	r16
    35fa:	08 95       	ret

000035fc <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    35fc:	0f 93       	push	r16
    35fe:	df 93       	push	r29
    3600:	cf 93       	push	r28
    3602:	0f 92       	push	r0
    3604:	cd b7       	in	r28, 0x3d	; 61
    3606:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3608:	a0 e4       	ldi	r26, 0x40	; 64
    360a:	b0 e0       	ldi	r27, 0x00	; 0
    360c:	9c 91       	ld	r25, X

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    360e:	2f b7       	in	r18, 0x3f	; 63
    3610:	29 83       	std	Y+1, r18	; 0x01
    3612:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3614:	1b be       	out	0x3b, r1	; 59
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3616:	98 7f       	andi	r25, 0xF8	; 248
    3618:	98 2b       	or	r25, r24
	AVR_ENTER_CRITICAL_REGION( );
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
#endif
	asm volatile(
    361a:	20 e4       	ldi	r18, 0x40	; 64
    361c:	30 e0       	ldi	r19, 0x00	; 0
    361e:	f9 01       	movw	r30, r18
    3620:	08 ed       	ldi	r16, 0xD8	; 216
    3622:	04 bf       	out	0x34, r16	; 52
    3624:	90 83       	st	Z, r25
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    3626:	99 81       	ldd	r25, Y+1	; 0x01
    3628:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
    362a:	9c 91       	ld	r25, X
	return clkCtrl;
}
    362c:	89 23       	and	r24, r25
    362e:	0f 90       	pop	r0
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	0f 91       	pop	r16
    3636:	08 95       	ret

00003638 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    3638:	e0 e4       	ldi	r30, 0x40	; 64
    363a:	f0 e0       	ldi	r31, 0x00	; 0
    363c:	93 81       	ldd	r25, Z+3	; 0x03
    363e:	91 7f       	andi	r25, 0xF1	; 241
    3640:	91 60       	ori	r25, 0x01	; 1
    3642:	98 2b       	or	r25, r24
    3644:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    3646:	08 95       	ret

00003648 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    3648:	30 91 56 00 	lds	r19, 0x0056
    364c:	28 2f       	mov	r18, r24
    364e:	98 2f       	mov	r25, r24
    3650:	90 95       	com	r25
    3652:	93 23       	and	r25, r19
    3654:	66 23       	and	r22, r22
    3656:	09 f4       	brne	.+2      	; 0x365a <CLKSYS_AutoCalibration_Enable+0x12>
    3658:	20 e0       	ldi	r18, 0x00	; 0
    365a:	92 2b       	or	r25, r18
    365c:	e0 e5       	ldi	r30, 0x50	; 80
    365e:	f0 e0       	ldi	r31, 0x00	; 0
    3660:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    3662:	81 30       	cpi	r24, 0x01	; 1
    3664:	49 f0       	breq	.+18     	; 0x3678 <CLKSYS_AutoCalibration_Enable+0x30>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
	} else if (clkSource == OSC_RC32MCREF_bm) {
    3666:	82 30       	cpi	r24, 0x02	; 2
    3668:	09 f0       	breq	.+2      	; 0x366c <CLKSYS_AutoCalibration_Enable+0x24>
    366a:	08 95       	ret
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    366c:	80 91 60 00 	lds	r24, 0x0060
    3670:	81 60       	ori	r24, 0x01	; 1
    3672:	80 93 60 00 	sts	0x0060, r24
    3676:	08 95       	ret
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    3678:	80 91 68 00 	lds	r24, 0x0068
    367c:	81 60       	ori	r24, 0x01	; 1
    367e:	80 93 68 00 	sts	0x0068, r24
    3682:	08 95       	ret

00003684 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
    3684:	0f 93       	push	r16
    3686:	df 93       	push	r29
    3688:	cf 93       	push	r28
    368a:	0f 92       	push	r0
    368c:	cd b7       	in	r28, 0x3d	; 61
    368e:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    3690:	8f b7       	in	r24, 0x3f	; 63
    3692:	89 83       	std	Y+1, r24	; 0x01
    3694:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3696:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3698:	23 e0       	ldi	r18, 0x03	; 3
    369a:	83 e5       	ldi	r24, 0x53	; 83
    369c:	90 e0       	ldi	r25, 0x00	; 0
    369e:	fc 01       	movw	r30, r24
    36a0:	08 ed       	ldi	r16, 0xD8	; 216
    36a2:	04 bf       	out	0x34, r16	; 52
    36a4:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    36a6:	89 81       	ldd	r24, Y+1	; 0x01
    36a8:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
    36aa:	0f 90       	pop	r0
    36ac:	cf 91       	pop	r28
    36ae:	df 91       	pop	r29
    36b0:	0f 91       	pop	r16
    36b2:	08 95       	ret

000036b4 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
    36b4:	0f 93       	push	r16
    36b6:	df 93       	push	r29
    36b8:	cf 93       	push	r28
    36ba:	0f 92       	push	r0
    36bc:	cd b7       	in	r28, 0x3d	; 61
    36be:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    36c0:	8f b7       	in	r24, 0x3f	; 63
    36c2:	89 83       	std	Y+1, r24	; 0x01
    36c4:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    36c6:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    36c8:	21 e0       	ldi	r18, 0x01	; 1
    36ca:	82 e4       	ldi	r24, 0x42	; 66
    36cc:	90 e0       	ldi	r25, 0x00	; 0
    36ce:	fc 01       	movw	r30, r24
    36d0:	08 ed       	ldi	r16, 0xD8	; 216
    36d2:	04 bf       	out	0x34, r16	; 52
    36d4:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    36d6:	89 81       	ldd	r24, Y+1	; 0x01
    36d8:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
    36da:	0f 90       	pop	r0
    36dc:	cf 91       	pop	r28
    36de:	df 91       	pop	r29
    36e0:	0f 91       	pop	r16
    36e2:	08 95       	ret

000036e4 <dataflash_spi_init>:

SPI_Master_t spiMasterD;

//__________________________________________________________________________________________________
void dataflash_spi_init(void)
{
    36e4:	8f 92       	push	r8
    36e6:	af 92       	push	r10
    36e8:	cf 92       	push	r12
    36ea:	ef 92       	push	r14
    36ec:	0f 93       	push	r16
    36ee:	1f 93       	push	r17
    36f0:	cf 93       	push	r28
    36f2:	df 93       	push	r29
	/* Init SS pin as output with wired AND and pull-up. */
	PORTD.DIRSET = PIN4_bm;
    36f4:	c0 e6       	ldi	r28, 0x60	; 96
    36f6:	d6 e0       	ldi	r29, 0x06	; 6
    36f8:	10 e1       	ldi	r17, 0x10	; 16
    36fa:	19 83       	std	Y+1, r17	; 0x01

	/* Set SS output to high. (No slave addressed). */
	//PORTD.OUTSET = PIN4_bm;
	
	/* Initialize SPI master on port DATAFLASH_PORT. */
	SPI_MasterInit(&spiMasterD,
    36fc:	8e e1       	ldi	r24, 0x1E	; 30
    36fe:	93 e2       	ldi	r25, 0x23	; 35
    3700:	60 ec       	ldi	r22, 0xC0	; 192
    3702:	79 e0       	ldi	r23, 0x09	; 9
    3704:	40 e6       	ldi	r20, 0x60	; 96
    3706:	56 e0       	ldi	r21, 0x06	; 6
    3708:	20 e0       	ldi	r18, 0x00	; 0
    370a:	00 e0       	ldi	r16, 0x00	; 0
    370c:	ee 24       	eor	r14, r14
    370e:	cc 24       	eor	r12, r12
    3710:	c3 94       	inc	r12
    3712:	aa 24       	eor	r10, r10
    3714:	88 24       	eor	r8, r8
    3716:	83 94       	inc	r8
    3718:	0e 94 45 20 	call	0x408a	; 0x408a <SPI_MasterInit>
	               SPI_INTLVL_OFF_gc,
	               true,
	               SPI_PRESCALER_DIV4_gc, 1);
				   
	// Set CS
	CS_UP;
    371c:	1d 83       	std	Y+5, r17	; 0x05
}
    371e:	df 91       	pop	r29
    3720:	cf 91       	pop	r28
    3722:	1f 91       	pop	r17
    3724:	0f 91       	pop	r16
    3726:	ef 90       	pop	r14
    3728:	cf 90       	pop	r12
    372a:	af 90       	pop	r10
    372c:	8f 90       	pop	r8
    372e:	08 95       	ret

00003730 <dataflash_spi_idn>:



//__________________________________________________________________________________________________
void dataflash_spi_idn ( char *ManID, char* DevID1, char* DevID2, char* ExData )
{
    3730:	7f 92       	push	r7
    3732:	8f 92       	push	r8
    3734:	9f 92       	push	r9
    3736:	af 92       	push	r10
    3738:	bf 92       	push	r11
    373a:	cf 92       	push	r12
    373c:	df 92       	push	r13
    373e:	ef 92       	push	r14
    3740:	ff 92       	push	r15
    3742:	0f 93       	push	r16
    3744:	1f 93       	push	r17
    3746:	cf 93       	push	r28
    3748:	df 93       	push	r29
    374a:	4c 01       	movw	r8, r24
    374c:	5b 01       	movw	r10, r22
    374e:	6a 01       	movw	r12, r20
    3750:	79 01       	movw	r14, r18
	CS_DOWN;
    3752:	00 e6       	ldi	r16, 0x60	; 96
    3754:	16 e0       	ldi	r17, 0x06	; 6
    3756:	80 e1       	ldi	r24, 0x10	; 16
    3758:	78 2e       	mov	r7, r24
    375a:	f8 01       	movw	r30, r16
    375c:	76 82       	std	Z+6, r7	; 0x06
	
	SPI_MasterTransceiveByte(&spiMasterD, IDN);			// Write IDN? command
    375e:	ce e1       	ldi	r28, 0x1E	; 30
    3760:	d3 e2       	ldi	r29, 0x23	; 35
    3762:	ce 01       	movw	r24, r28
    3764:	6f e9       	ldi	r22, 0x9F	; 159
    3766:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	*ManID = SPI_MasterTransceiveByte(&spiMasterD, 0);
    376a:	ce 01       	movw	r24, r28
    376c:	60 e0       	ldi	r22, 0x00	; 0
    376e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    3772:	f4 01       	movw	r30, r8
    3774:	80 83       	st	Z, r24
	*DevID1 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    3776:	ce 01       	movw	r24, r28
    3778:	60 e0       	ldi	r22, 0x00	; 0
    377a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    377e:	f5 01       	movw	r30, r10
    3780:	80 83       	st	Z, r24
	*DevID2 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    3782:	ce 01       	movw	r24, r28
    3784:	60 e0       	ldi	r22, 0x00	; 0
    3786:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    378a:	f6 01       	movw	r30, r12
    378c:	80 83       	st	Z, r24
	*ExData = SPI_MasterTransceiveByte(&spiMasterD, 0);
    378e:	ce 01       	movw	r24, r28
    3790:	60 e0       	ldi	r22, 0x00	; 0
    3792:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
    3796:	f7 01       	movw	r30, r14
    3798:	80 83       	st	Z, r24

	CS_UP;
    379a:	f8 01       	movw	r30, r16
    379c:	75 82       	std	Z+5, r7	; 0x05
}
    379e:	df 91       	pop	r29
    37a0:	cf 91       	pop	r28
    37a2:	1f 91       	pop	r17
    37a4:	0f 91       	pop	r16
    37a6:	ff 90       	pop	r15
    37a8:	ef 90       	pop	r14
    37aa:	df 90       	pop	r13
    37ac:	cf 90       	pop	r12
    37ae:	bf 90       	pop	r11
    37b0:	af 90       	pop	r10
    37b2:	9f 90       	pop	r9
    37b4:	8f 90       	pop	r8
    37b6:	7f 90       	pop	r7
    37b8:	08 95       	ret

000037ba <dataflash_write>:

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
    37ba:	cf 92       	push	r12
    37bc:	df 92       	push	r13
    37be:	ef 92       	push	r14
    37c0:	ff 92       	push	r15
    37c2:	0f 93       	push	r16
    37c4:	1f 93       	push	r17
    37c6:	cf 93       	push	r28
    37c8:	df 93       	push	r29
    37ca:	6b 01       	movw	r12, r22
    37cc:	7c 01       	movw	r14, r24
    37ce:	04 2f       	mov	r16, r20
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
	      
	CS_DOWN;
    37d0:	c0 e6       	ldi	r28, 0x60	; 96
    37d2:	d6 e0       	ldi	r29, 0x06	; 6
    37d4:	10 e1       	ldi	r17, 0x10	; 16
    37d6:	1e 83       	std	Y+6, r17	; 0x06

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    37d8:	8e e1       	ldi	r24, 0x1E	; 30
    37da:	93 e2       	ldi	r25, 0x23	; 35
    37dc:	66 e0       	ldi	r22, 0x06	; 6
    37de:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    37e2:	1d 83       	std	Y+5, r17	; 0x05
	
	CS_DOWN;
    37e4:	1e 83       	std	Y+6, r17	; 0x06

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_BYTE_PAGE);	// Write command   
    37e6:	8e e1       	ldi	r24, 0x1E	; 30
    37e8:	93 e2       	ldi	r25, 0x23	; 35
    37ea:	62 e0       	ldi	r22, 0x02	; 2
    37ec:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
    37f0:	97 01       	movw	r18, r14
    37f2:	44 27       	eor	r20, r20
    37f4:	55 27       	eor	r21, r21
	
	CS_DOWN;

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_BYTE_PAGE);	// Write command   

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    37f6:	8e e1       	ldi	r24, 0x1E	; 30
    37f8:	93 e2       	ldi	r25, 0x23	; 35
    37fa:	62 2f       	mov	r22, r18
    37fc:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
    3800:	55 27       	eor	r21, r21
    3802:	4f 2d       	mov	r20, r15
    3804:	3e 2d       	mov	r19, r14
    3806:	2d 2d       	mov	r18, r13
	CS_DOWN;

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_BYTE_PAGE);	// Write command   

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3808:	8e e1       	ldi	r24, 0x1E	; 30
    380a:	93 e2       	ldi	r25, 0x23	; 35
    380c:	62 2f       	mov	r22, r18
    380e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3812:	8e e1       	ldi	r24, 0x1E	; 30
    3814:	93 e2       	ldi	r25, 0x23	; 35
    3816:	6c 2d       	mov	r22, r12
    3818:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, Wrdat);			// Send data byte
    381c:	8e e1       	ldi	r24, 0x1E	; 30
    381e:	93 e2       	ldi	r25, 0x23	; 35
    3820:	60 2f       	mov	r22, r16
    3822:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;      
    3826:	1d 83       	std	Y+5, r17	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3828:	00 e1       	ldi	r16, 0x10	; 16
    382a:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    382c:	8e e1       	ldi	r24, 0x1E	; 30
    382e:	93 e2       	ldi	r25, 0x23	; 35
    3830:	65 e0       	ldi	r22, 0x05	; 5
    3832:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3836:	8e e1       	ldi	r24, 0x1E	; 30
    3838:	93 e2       	ldi	r25, 0x23	; 35
    383a:	60 e0       	ldi	r22, 0x00	; 0
    383c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3840:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, Wrdat);			// Send data byte

	CS_UP;      

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3842:	80 fd       	sbrc	r24, 0
    3844:	f2 cf       	rjmp	.-28     	; 0x382a <dataflash_write+0x70>
	{
		//_delay_us(10);
	}
}
    3846:	df 91       	pop	r29
    3848:	cf 91       	pop	r28
    384a:	1f 91       	pop	r17
    384c:	0f 91       	pop	r16
    384e:	ff 90       	pop	r15
    3850:	ef 90       	pop	r14
    3852:	df 90       	pop	r13
    3854:	cf 90       	pop	r12
    3856:	08 95       	ret

00003858 <dataflash_read>:

//__________________________________________________________________________________________________
char dataflash_read(uint32_t addr)
{
    3858:	bf 92       	push	r11
    385a:	cf 92       	push	r12
    385c:	df 92       	push	r13
    385e:	ef 92       	push	r14
    3860:	ff 92       	push	r15
    3862:	0f 93       	push	r16
    3864:	1f 93       	push	r17
    3866:	cf 93       	push	r28
    3868:	df 93       	push	r29
    386a:	7b 01       	movw	r14, r22
    386c:	8c 01       	movw	r16, r24

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
   
	CS_DOWN;
    386e:	60 e6       	ldi	r22, 0x60	; 96
    3870:	c6 2e       	mov	r12, r22
    3872:	66 e0       	ldi	r22, 0x06	; 6
    3874:	d6 2e       	mov	r13, r22
    3876:	50 e1       	ldi	r21, 0x10	; 16
    3878:	b5 2e       	mov	r11, r21
    387a:	f6 01       	movw	r30, r12
    387c:	b6 82       	std	Z+6, r11	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);		// Read command     
    387e:	ce e1       	ldi	r28, 0x1E	; 30
    3880:	d3 e2       	ldi	r29, 0x23	; 35
    3882:	ce 01       	movw	r24, r28
    3884:	63 e0       	ldi	r22, 0x03	; 3
    3886:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
char dataflash_read(uint32_t addr)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
    388a:	98 01       	movw	r18, r16
    388c:	44 27       	eor	r20, r20
    388e:	55 27       	eor	r21, r21
	adrByte3 = addr&0xff;     
   
	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);		// Read command     

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3890:	ce 01       	movw	r24, r28
    3892:	62 2f       	mov	r22, r18
    3894:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
    3898:	55 27       	eor	r21, r21
    389a:	41 2f       	mov	r20, r17
    389c:	30 2f       	mov	r19, r16
    389e:	2f 2d       	mov	r18, r15
   
	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);		// Read command     

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    38a0:	ce 01       	movw	r24, r28
    38a2:	62 2f       	mov	r22, r18
    38a4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    38a8:	ce 01       	movw	r24, r28
    38aa:	6e 2d       	mov	r22, r14
    38ac:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte( &spiMasterD, 0 );	
    38b0:	ce 01       	movw	r24, r28
    38b2:	60 e0       	ldi	r22, 0x00	; 0
    38b4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    38b8:	f6 01       	movw	r30, r12
    38ba:	b5 82       	std	Z+5, r11	; 0x05

	return data;
}
    38bc:	df 91       	pop	r29
    38be:	cf 91       	pop	r28
    38c0:	1f 91       	pop	r17
    38c2:	0f 91       	pop	r16
    38c4:	ff 90       	pop	r15
    38c6:	ef 90       	pop	r14
    38c8:	df 90       	pop	r13
    38ca:	cf 90       	pop	r12
    38cc:	bf 90       	pop	r11
    38ce:	08 95       	ret

000038d0 <dataflash_unprotect_all>:


//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
    38d0:	cf 92       	push	r12
    38d2:	df 92       	push	r13
    38d4:	ef 92       	push	r14
    38d6:	ff 92       	push	r15
    38d8:	0f 93       	push	r16
    38da:	1f 93       	push	r17
    38dc:	cf 93       	push	r28
    38de:	df 93       	push	r29
    38e0:	cc 24       	eor	r12, r12
    38e2:	dd 24       	eor	r13, r13
    38e4:	76 01       	movw	r14, r12
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    38e6:	c0 e6       	ldi	r28, 0x60	; 96
    38e8:	d6 e0       	ldi	r29, 0x06	; 6
    38ea:	10 e1       	ldi	r17, 0x10	; 16
    38ec:	00 e1       	ldi	r16, 0x10	; 16
    38ee:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    38f0:	8e e1       	ldi	r24, 0x1E	; 30
    38f2:	93 e2       	ldi	r25, 0x23	; 35
    38f4:	66 e0       	ldi	r22, 0x06	; 6
    38f6:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    38fa:	1d 83       	std	Y+5, r17	; 0x05

	CS_DOWN;
    38fc:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode
    38fe:	8e e1       	ldi	r24, 0x1E	; 30
    3900:	93 e2       	ldi	r25, 0x23	; 35
    3902:	69 e3       	ldi	r22, 0x39	; 57
    3904:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3908:	97 01       	movw	r18, r14
    390a:	44 27       	eor	r20, r20
    390c:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    390e:	8e e1       	ldi	r24, 0x1E	; 30
    3910:	93 e2       	ldi	r25, 0x23	; 35
    3912:	62 2f       	mov	r22, r18
    3914:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3918:	55 27       	eor	r21, r21
    391a:	4f 2d       	mov	r20, r15
    391c:	3e 2d       	mov	r19, r14
    391e:	2d 2d       	mov	r18, r13
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3920:	8e e1       	ldi	r24, 0x1E	; 30
    3922:	93 e2       	ldi	r25, 0x23	; 35
    3924:	62 2f       	mov	r22, r18
    3926:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    392a:	8e e1       	ldi	r24, 0x1E	; 30
    392c:	93 e2       	ldi	r25, 0x23	; 35
    392e:	60 e0       	ldi	r22, 0x00	; 0
    3930:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    3934:	1d 83       	std	Y+5, r17	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3936:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3938:	8e e1       	ldi	r24, 0x1E	; 30
    393a:	93 e2       	ldi	r25, 0x23	; 35
    393c:	65 e0       	ldi	r22, 0x05	; 5
    393e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3942:	8e e1       	ldi	r24, 0x1E	; 30
    3944:	93 e2       	ldi	r25, 0x23	; 35
    3946:	60 e0       	ldi	r22, 0x00	; 0
    3948:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    394c:	1d 83       	std	Y+5, r17	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    394e:	80 fd       	sbrc	r24, 0
    3950:	f2 cf       	rjmp	.-28     	; 0x3936 <dataflash_unprotect_all+0x66>
    3952:	80 e0       	ldi	r24, 0x00	; 0
    3954:	90 e1       	ldi	r25, 0x10	; 16
    3956:	a0 e0       	ldi	r26, 0x00	; 0
    3958:	b0 e0       	ldi	r27, 0x00	; 0
    395a:	c8 0e       	add	r12, r24
    395c:	d9 1e       	adc	r13, r25
    395e:	ea 1e       	adc	r14, r26
    3960:	fb 1e       	adc	r15, r27
//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    3962:	90 e0       	ldi	r25, 0x00	; 0
    3964:	c9 16       	cp	r12, r25
    3966:	90 e0       	ldi	r25, 0x00	; 0
    3968:	d9 06       	cpc	r13, r25
    396a:	90 e4       	ldi	r25, 0x40	; 64
    396c:	e9 06       	cpc	r14, r25
    396e:	90 e0       	ldi	r25, 0x00	; 0
    3970:	f9 06       	cpc	r15, r25
    3972:	09 f0       	breq	.+2      	; 0x3976 <dataflash_unprotect_all+0xa6>
    3974:	bc cf       	rjmp	.-136    	; 0x38ee <dataflash_unprotect_all+0x1e>
	{
		dataflash_unprotect_block4 (i);
	}
}
    3976:	df 91       	pop	r29
    3978:	cf 91       	pop	r28
    397a:	1f 91       	pop	r17
    397c:	0f 91       	pop	r16
    397e:	ff 90       	pop	r15
    3980:	ef 90       	pop	r14
    3982:	df 90       	pop	r13
    3984:	cf 90       	pop	r12
    3986:	08 95       	ret

00003988 <dataflash_protect_all>:

//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
    3988:	cf 92       	push	r12
    398a:	df 92       	push	r13
    398c:	ef 92       	push	r14
    398e:	ff 92       	push	r15
    3990:	0f 93       	push	r16
    3992:	1f 93       	push	r17
    3994:	cf 93       	push	r28
    3996:	df 93       	push	r29
    3998:	cc 24       	eor	r12, r12
    399a:	dd 24       	eor	r13, r13
    399c:	76 01       	movw	r14, r12
void		dataflash_protect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    399e:	c0 e6       	ldi	r28, 0x60	; 96
    39a0:	d6 e0       	ldi	r29, 0x06	; 6
    39a2:	10 e1       	ldi	r17, 0x10	; 16
    39a4:	00 e1       	ldi	r16, 0x10	; 16
    39a6:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);			// Write enable command
    39a8:	8e e1       	ldi	r24, 0x1E	; 30
    39aa:	93 e2       	ldi	r25, 0x23	; 35
    39ac:	66 e0       	ldi	r22, 0x06	; 6
    39ae:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    39b2:	1d 83       	std	Y+5, r17	; 0x05

	CS_DOWN;
    39b4:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode
    39b6:	8e e1       	ldi	r24, 0x1E	; 30
    39b8:	93 e2       	ldi	r25, 0x23	; 35
    39ba:	66 e3       	ldi	r22, 0x36	; 54
    39bc:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    39c0:	97 01       	movw	r18, r14
    39c2:	44 27       	eor	r20, r20
    39c4:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    39c6:	8e e1       	ldi	r24, 0x1E	; 30
    39c8:	93 e2       	ldi	r25, 0x23	; 35
    39ca:	62 2f       	mov	r22, r18
    39cc:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    39d0:	55 27       	eor	r21, r21
    39d2:	4f 2d       	mov	r20, r15
    39d4:	3e 2d       	mov	r19, r14
    39d6:	2d 2d       	mov	r18, r13
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    39d8:	8e e1       	ldi	r24, 0x1E	; 30
    39da:	93 e2       	ldi	r25, 0x23	; 35
    39dc:	62 2f       	mov	r22, r18
    39de:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    39e2:	8e e1       	ldi	r24, 0x1E	; 30
    39e4:	93 e2       	ldi	r25, 0x23	; 35
    39e6:	60 e0       	ldi	r22, 0x00	; 0
    39e8:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    39ec:	1d 83       	std	Y+5, r17	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    39ee:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    39f0:	8e e1       	ldi	r24, 0x1E	; 30
    39f2:	93 e2       	ldi	r25, 0x23	; 35
    39f4:	65 e0       	ldi	r22, 0x05	; 5
    39f6:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    39fa:	8e e1       	ldi	r24, 0x1E	; 30
    39fc:	93 e2       	ldi	r25, 0x23	; 35
    39fe:	60 e0       	ldi	r22, 0x00	; 0
    3a00:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3a04:	1d 83       	std	Y+5, r17	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3a06:	80 fd       	sbrc	r24, 0
    3a08:	f2 cf       	rjmp	.-28     	; 0x39ee <dataflash_protect_all+0x66>
    3a0a:	80 e0       	ldi	r24, 0x00	; 0
    3a0c:	90 e1       	ldi	r25, 0x10	; 16
    3a0e:	a0 e0       	ldi	r26, 0x00	; 0
    3a10:	b0 e0       	ldi	r27, 0x00	; 0
    3a12:	c8 0e       	add	r12, r24
    3a14:	d9 1e       	adc	r13, r25
    3a16:	ea 1e       	adc	r14, r26
    3a18:	fb 1e       	adc	r15, r27
//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    3a1a:	90 e0       	ldi	r25, 0x00	; 0
    3a1c:	c9 16       	cp	r12, r25
    3a1e:	90 e0       	ldi	r25, 0x00	; 0
    3a20:	d9 06       	cpc	r13, r25
    3a22:	90 e4       	ldi	r25, 0x40	; 64
    3a24:	e9 06       	cpc	r14, r25
    3a26:	90 e0       	ldi	r25, 0x00	; 0
    3a28:	f9 06       	cpc	r15, r25
    3a2a:	09 f0       	breq	.+2      	; 0x3a2e <dataflash_protect_all+0xa6>
    3a2c:	bc cf       	rjmp	.-136    	; 0x39a6 <dataflash_protect_all+0x1e>
	{
		dataflash_protect_block4 (i);
	}
}
    3a2e:	df 91       	pop	r29
    3a30:	cf 91       	pop	r28
    3a32:	1f 91       	pop	r17
    3a34:	0f 91       	pop	r16
    3a36:	ff 90       	pop	r15
    3a38:	ef 90       	pop	r14
    3a3a:	df 90       	pop	r13
    3a3c:	cf 90       	pop	r12
    3a3e:	08 95       	ret

00003a40 <dataflash_erase_all>:

//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
    3a40:	9f 92       	push	r9
    3a42:	af 92       	push	r10
    3a44:	bf 92       	push	r11
    3a46:	cf 92       	push	r12
    3a48:	df 92       	push	r13
    3a4a:	ef 92       	push	r14
    3a4c:	ff 92       	push	r15
    3a4e:	0f 93       	push	r16
    3a50:	1f 93       	push	r17
    3a52:	cf 93       	push	r28
    3a54:	df 93       	push	r29
    3a56:	aa 24       	eor	r10, r10
    3a58:	bb 24       	eor	r11, r11
    3a5a:	65 01       	movw	r12, r10
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    3a5c:	c0 e6       	ldi	r28, 0x60	; 96
    3a5e:	d6 e0       	ldi	r29, 0x06	; 6
    3a60:	40 e1       	ldi	r20, 0x10	; 16
    3a62:	f4 2e       	mov	r15, r20
    3a64:	30 e1       	ldi	r19, 0x10	; 16
    3a66:	e3 2e       	mov	r14, r19
    3a68:	ee 82       	std	Y+6, r14	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    3a6a:	8e e1       	ldi	r24, 0x1E	; 30
    3a6c:	93 e2       	ldi	r25, 0x23	; 35
    3a6e:	66 e0       	ldi	r22, 0x06	; 6
    3a70:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    3a74:	fd 82       	std	Y+5, r15	; 0x05

	CS_DOWN;
    3a76:	fe 82       	std	Y+6, r15	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode
    3a78:	8e e1       	ldi	r24, 0x1E	; 30
    3a7a:	93 e2       	ldi	r25, 0x23	; 35
    3a7c:	69 e3       	ldi	r22, 0x39	; 57
    3a7e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3a82:	96 01       	movw	r18, r12
    3a84:	44 27       	eor	r20, r20
    3a86:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3a88:	8e e1       	ldi	r24, 0x1E	; 30
    3a8a:	93 e2       	ldi	r25, 0x23	; 35
    3a8c:	62 2f       	mov	r22, r18
    3a8e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3a92:	55 27       	eor	r21, r21
    3a94:	4d 2d       	mov	r20, r13
    3a96:	3c 2d       	mov	r19, r12
    3a98:	2b 2d       	mov	r18, r11
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3a9a:	8e e1       	ldi	r24, 0x1E	; 30
    3a9c:	93 e2       	ldi	r25, 0x23	; 35
    3a9e:	62 2f       	mov	r22, r18
    3aa0:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3aa4:	8e e1       	ldi	r24, 0x1E	; 30
    3aa6:	93 e2       	ldi	r25, 0x23	; 35
    3aa8:	60 e0       	ldi	r22, 0x00	; 0
    3aaa:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    3aae:	fd 82       	std	Y+5, r15	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3ab0:	00 e6       	ldi	r16, 0x60	; 96
    3ab2:	16 e0       	ldi	r17, 0x06	; 6
    3ab4:	80 e1       	ldi	r24, 0x10	; 16
    3ab6:	98 2e       	mov	r9, r24
    3ab8:	ee 82       	std	Y+6, r14	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3aba:	8e e1       	ldi	r24, 0x1E	; 30
    3abc:	93 e2       	ldi	r25, 0x23	; 35
    3abe:	65 e0       	ldi	r22, 0x05	; 5
    3ac0:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3ac4:	8e e1       	ldi	r24, 0x1E	; 30
    3ac6:	93 e2       	ldi	r25, 0x23	; 35
    3ac8:	60 e0       	ldi	r22, 0x00	; 0
    3aca:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3ace:	fd 82       	std	Y+5, r15	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3ad0:	80 fd       	sbrc	r24, 0
    3ad2:	ee cf       	rjmp	.-36     	; 0x3ab0 <dataflash_erase_all+0x70>
    3ad4:	80 e0       	ldi	r24, 0x00	; 0
    3ad6:	90 e1       	ldi	r25, 0x10	; 16
    3ad8:	a0 e0       	ldi	r26, 0x00	; 0
    3ada:	b0 e0       	ldi	r27, 0x00	; 0
    3adc:	a8 0e       	add	r10, r24
    3ade:	b9 1e       	adc	r11, r25
    3ae0:	ca 1e       	adc	r12, r26
    3ae2:	db 1e       	adc	r13, r27
//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    3ae4:	90 e0       	ldi	r25, 0x00	; 0
    3ae6:	a9 16       	cp	r10, r25
    3ae8:	90 e0       	ldi	r25, 0x00	; 0
    3aea:	b9 06       	cpc	r11, r25
    3aec:	90 e4       	ldi	r25, 0x40	; 64
    3aee:	c9 06       	cpc	r12, r25
    3af0:	90 e0       	ldi	r25, 0x00	; 0
    3af2:	d9 06       	cpc	r13, r25
    3af4:	09 f0       	breq	.+2      	; 0x3af8 <dataflash_erase_all+0xb8>
    3af6:	b8 cf       	rjmp	.-144    	; 0x3a68 <dataflash_erase_all+0x28>
//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
	dataflash_unprotect_all ();

	CS_DOWN;
    3af8:	d8 01       	movw	r26, r16
    3afa:	16 96       	adiw	r26, 0x06	; 6
    3afc:	9c 92       	st	X, r9
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);	// Write enable command
    3afe:	8e e1       	ldi	r24, 0x1E	; 30
    3b00:	93 e2       	ldi	r25, 0x23	; 35
    3b02:	66 e0       	ldi	r22, 0x06	; 6
    3b04:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    3b08:	f8 01       	movw	r30, r16
    3b0a:	95 82       	std	Z+5, r9	; 0x05

	CS_DOWN;
    3b0c:	96 82       	std	Z+6, r9	; 0x06

	SPI_MasterTransceiveByte(&spiMasterD, CHIP_ERASE);     		// Write erase4 opcode
    3b0e:	8e e1       	ldi	r24, 0x1E	; 30
    3b10:	93 e2       	ldi	r25, 0x23	; 35
    3b12:	60 e6       	ldi	r22, 0x60	; 96
    3b14:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    3b18:	d8 01       	movw	r26, r16
    3b1a:	15 96       	adiw	r26, 0x05	; 5
    3b1c:	9c 92       	st	X, r9
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3b1e:	c0 e6       	ldi	r28, 0x60	; 96
    3b20:	d6 e0       	ldi	r29, 0x06	; 6
    3b22:	b0 e1       	ldi	r27, 0x10	; 16
    3b24:	fb 2e       	mov	r15, r27
    3b26:	00 e1       	ldi	r16, 0x10	; 16
    3b28:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3b2a:	8e e1       	ldi	r24, 0x1E	; 30
    3b2c:	93 e2       	ldi	r25, 0x23	; 35
    3b2e:	65 e0       	ldi	r22, 0x05	; 5
    3b30:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3b34:	8e e1       	ldi	r24, 0x1E	; 30
    3b36:	93 e2       	ldi	r25, 0x23	; 35
    3b38:	60 e0       	ldi	r22, 0x00	; 0
    3b3a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3b3e:	fd 82       	std	Y+5, r15	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, CHIP_ERASE);     		// Write erase4 opcode

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3b40:	80 fd       	sbrc	r24, 0
    3b42:	f2 cf       	rjmp	.-28     	; 0x3b28 <dataflash_erase_all+0xe8>
	{
		//_delay_ms(5);
	}
}
    3b44:	df 91       	pop	r29
    3b46:	cf 91       	pop	r28
    3b48:	1f 91       	pop	r17
    3b4a:	0f 91       	pop	r16
    3b4c:	ff 90       	pop	r15
    3b4e:	ef 90       	pop	r14
    3b50:	df 90       	pop	r13
    3b52:	cf 90       	pop	r12
    3b54:	bf 90       	pop	r11
    3b56:	af 90       	pop	r10
    3b58:	9f 90       	pop	r9
    3b5a:	08 95       	ret

00003b5c <dataflash_erase_block4>:

//__________________________________________________________________________________________________
void		dataflash_erase_block4		( uint16_t BlockNum )
{
    3b5c:	df 92       	push	r13
    3b5e:	ef 92       	push	r14
    3b60:	ff 92       	push	r15
    3b62:	0f 93       	push	r16
    3b64:	1f 93       	push	r17
    3b66:	cf 93       	push	r28
    3b68:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    3b6a:	7c 01       	movw	r14, r24
    3b6c:	00 e0       	ldi	r16, 0x00	; 0
    3b6e:	10 e0       	ldi	r17, 0x00	; 0
    3b70:	ec e0       	ldi	r30, 0x0C	; 12
    3b72:	ee 0c       	add	r14, r14
    3b74:	ff 1c       	adc	r15, r15
    3b76:	00 1f       	adc	r16, r16
    3b78:	11 1f       	adc	r17, r17
    3b7a:	ea 95       	dec	r30
    3b7c:	d1 f7       	brne	.-12     	; 0x3b72 <dataflash_erase_block4+0x16>

	CS_DOWN;
    3b7e:	c0 e6       	ldi	r28, 0x60	; 96
    3b80:	d6 e0       	ldi	r29, 0x06	; 6
    3b82:	70 e1       	ldi	r23, 0x10	; 16
    3b84:	d7 2e       	mov	r13, r23
    3b86:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);			// Write enable command
    3b88:	8e e1       	ldi	r24, 0x1E	; 30
    3b8a:	93 e2       	ldi	r25, 0x23	; 35
    3b8c:	66 e0       	ldi	r22, 0x06	; 6
    3b8e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    3b92:	dd 82       	std	Y+5, r13	; 0x05

	CS_DOWN;
    3b94:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, BLOCK_ERASE_4K);			// Write erase4 opcode
    3b96:	8e e1       	ldi	r24, 0x1E	; 30
    3b98:	93 e2       	ldi	r25, 0x23	; 35
    3b9a:	60 e2       	ldi	r22, 0x20	; 32
    3b9c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3ba0:	98 01       	movw	r18, r16
    3ba2:	44 27       	eor	r20, r20
    3ba4:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3ba6:	8e e1       	ldi	r24, 0x1E	; 30
    3ba8:	93 e2       	ldi	r25, 0x23	; 35
    3baa:	62 2f       	mov	r22, r18
    3bac:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, BLOCK_ERASE_4K);			// Write erase4 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3bb0:	ef 2c       	mov	r14, r15
    3bb2:	f0 2e       	mov	r15, r16
    3bb4:	01 2f       	mov	r16, r17
    3bb6:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3bb8:	8e e1       	ldi	r24, 0x1E	; 30
    3bba:	93 e2       	ldi	r25, 0x23	; 35
    3bbc:	6e 2d       	mov	r22, r14
    3bbe:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3bc2:	8e e1       	ldi	r24, 0x1E	; 30
    3bc4:	93 e2       	ldi	r25, 0x23	; 35
    3bc6:	60 e0       	ldi	r22, 0x00	; 0
    3bc8:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    3bcc:	dd 82       	std	Y+5, r13	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3bce:	00 e1       	ldi	r16, 0x10	; 16
    3bd0:	10 e1       	ldi	r17, 0x10	; 16
    3bd2:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3bd4:	8e e1       	ldi	r24, 0x1E	; 30
    3bd6:	93 e2       	ldi	r25, 0x23	; 35
    3bd8:	65 e0       	ldi	r22, 0x05	; 5
    3bda:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3bde:	8e e1       	ldi	r24, 0x1E	; 30
    3be0:	93 e2       	ldi	r25, 0x23	; 35
    3be2:	60 e0       	ldi	r22, 0x00	; 0
    3be4:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3be8:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3bea:	80 fd       	sbrc	r24, 0
    3bec:	f2 cf       	rjmp	.-28     	; 0x3bd2 <dataflash_erase_block4+0x76>
	{
		//_delay_ms(5);
	}
}
    3bee:	df 91       	pop	r29
    3bf0:	cf 91       	pop	r28
    3bf2:	1f 91       	pop	r17
    3bf4:	0f 91       	pop	r16
    3bf6:	ff 90       	pop	r15
    3bf8:	ef 90       	pop	r14
    3bfa:	df 90       	pop	r13
    3bfc:	08 95       	ret

00003bfe <dataflash_unprotect_block4>:

//__________________________________________________________________________________________________
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
    3bfe:	df 92       	push	r13
    3c00:	ef 92       	push	r14
    3c02:	ff 92       	push	r15
    3c04:	0f 93       	push	r16
    3c06:	1f 93       	push	r17
    3c08:	cf 93       	push	r28
    3c0a:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    3c0c:	7c 01       	movw	r14, r24
    3c0e:	00 e0       	ldi	r16, 0x00	; 0
    3c10:	10 e0       	ldi	r17, 0x00	; 0
    3c12:	8c e0       	ldi	r24, 0x0C	; 12
    3c14:	ee 0c       	add	r14, r14
    3c16:	ff 1c       	adc	r15, r15
    3c18:	00 1f       	adc	r16, r16
    3c1a:	11 1f       	adc	r17, r17
    3c1c:	8a 95       	dec	r24
    3c1e:	d1 f7       	brne	.-12     	; 0x3c14 <dataflash_unprotect_block4+0x16>

	CS_DOWN;
    3c20:	c0 e6       	ldi	r28, 0x60	; 96
    3c22:	d6 e0       	ldi	r29, 0x06	; 6
    3c24:	b0 e1       	ldi	r27, 0x10	; 16
    3c26:	db 2e       	mov	r13, r27
    3c28:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    3c2a:	8e e1       	ldi	r24, 0x1E	; 30
    3c2c:	93 e2       	ldi	r25, 0x23	; 35
    3c2e:	66 e0       	ldi	r22, 0x06	; 6
    3c30:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    3c34:	dd 82       	std	Y+5, r13	; 0x05

	CS_DOWN;
    3c36:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode
    3c38:	8e e1       	ldi	r24, 0x1E	; 30
    3c3a:	93 e2       	ldi	r25, 0x23	; 35
    3c3c:	69 e3       	ldi	r22, 0x39	; 57
    3c3e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3c42:	98 01       	movw	r18, r16
    3c44:	44 27       	eor	r20, r20
    3c46:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3c48:	8e e1       	ldi	r24, 0x1E	; 30
    3c4a:	93 e2       	ldi	r25, 0x23	; 35
    3c4c:	62 2f       	mov	r22, r18
    3c4e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3c52:	ef 2c       	mov	r14, r15
    3c54:	f0 2e       	mov	r15, r16
    3c56:	01 2f       	mov	r16, r17
    3c58:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3c5a:	8e e1       	ldi	r24, 0x1E	; 30
    3c5c:	93 e2       	ldi	r25, 0x23	; 35
    3c5e:	6e 2d       	mov	r22, r14
    3c60:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3c64:	8e e1       	ldi	r24, 0x1E	; 30
    3c66:	93 e2       	ldi	r25, 0x23	; 35
    3c68:	60 e0       	ldi	r22, 0x00	; 0
    3c6a:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    3c6e:	dd 82       	std	Y+5, r13	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3c70:	00 e1       	ldi	r16, 0x10	; 16
    3c72:	10 e1       	ldi	r17, 0x10	; 16
    3c74:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3c76:	8e e1       	ldi	r24, 0x1E	; 30
    3c78:	93 e2       	ldi	r25, 0x23	; 35
    3c7a:	65 e0       	ldi	r22, 0x05	; 5
    3c7c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3c80:	8e e1       	ldi	r24, 0x1E	; 30
    3c82:	93 e2       	ldi	r25, 0x23	; 35
    3c84:	60 e0       	ldi	r22, 0x00	; 0
    3c86:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3c8a:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3c8c:	80 fd       	sbrc	r24, 0
    3c8e:	f2 cf       	rjmp	.-28     	; 0x3c74 <dataflash_unprotect_block4+0x76>
	{
		//_delay_ms(5);
	}
}
    3c90:	df 91       	pop	r29
    3c92:	cf 91       	pop	r28
    3c94:	1f 91       	pop	r17
    3c96:	0f 91       	pop	r16
    3c98:	ff 90       	pop	r15
    3c9a:	ef 90       	pop	r14
    3c9c:	df 90       	pop	r13
    3c9e:	08 95       	ret

00003ca0 <dataflash_protect_block4>:

//__________________________________________________________________________________________________
void		dataflash_protect_block4	( uint16_t BlockNum )
{
    3ca0:	df 92       	push	r13
    3ca2:	ef 92       	push	r14
    3ca4:	ff 92       	push	r15
    3ca6:	0f 93       	push	r16
    3ca8:	1f 93       	push	r17
    3caa:	cf 93       	push	r28
    3cac:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    3cae:	7c 01       	movw	r14, r24
    3cb0:	00 e0       	ldi	r16, 0x00	; 0
    3cb2:	10 e0       	ldi	r17, 0x00	; 0
    3cb4:	4c e0       	ldi	r20, 0x0C	; 12
    3cb6:	ee 0c       	add	r14, r14
    3cb8:	ff 1c       	adc	r15, r15
    3cba:	00 1f       	adc	r16, r16
    3cbc:	11 1f       	adc	r17, r17
    3cbe:	4a 95       	dec	r20
    3cc0:	d1 f7       	brne	.-12     	; 0x3cb6 <dataflash_protect_block4+0x16>

	CS_DOWN;
    3cc2:	c0 e6       	ldi	r28, 0x60	; 96
    3cc4:	d6 e0       	ldi	r29, 0x06	; 6
    3cc6:	30 e1       	ldi	r19, 0x10	; 16
    3cc8:	d3 2e       	mov	r13, r19
    3cca:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);			// Write enable command
    3ccc:	8e e1       	ldi	r24, 0x1E	; 30
    3cce:	93 e2       	ldi	r25, 0x23	; 35
    3cd0:	66 e0       	ldi	r22, 0x06	; 6
    3cd2:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;
    3cd6:	dd 82       	std	Y+5, r13	; 0x05

	CS_DOWN;
    3cd8:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode
    3cda:	8e e1       	ldi	r24, 0x1E	; 30
    3cdc:	93 e2       	ldi	r25, 0x23	; 35
    3cde:	66 e3       	ldi	r22, 0x36	; 54
    3ce0:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3ce4:	98 01       	movw	r18, r16
    3ce6:	44 27       	eor	r20, r20
    3ce8:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3cea:	8e e1       	ldi	r24, 0x1E	; 30
    3cec:	93 e2       	ldi	r25, 0x23	; 35
    3cee:	62 2f       	mov	r22, r18
    3cf0:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3cf4:	ef 2c       	mov	r14, r15
    3cf6:	f0 2e       	mov	r15, r16
    3cf8:	01 2f       	mov	r16, r17
    3cfa:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3cfc:	8e e1       	ldi	r24, 0x1E	; 30
    3cfe:	93 e2       	ldi	r25, 0x23	; 35
    3d00:	6e 2d       	mov	r22, r14
    3d02:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3d06:	8e e1       	ldi	r24, 0x1E	; 30
    3d08:	93 e2       	ldi	r25, 0x23	; 35
    3d0a:	60 e0       	ldi	r22, 0x00	; 0
    3d0c:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	CS_UP;
    3d10:	dd 82       	std	Y+5, r13	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3d12:	00 e1       	ldi	r16, 0x10	; 16
    3d14:	10 e1       	ldi	r17, 0x10	; 16
    3d16:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3d18:	8e e1       	ldi	r24, 0x1E	; 30
    3d1a:	93 e2       	ldi	r25, 0x23	; 35
    3d1c:	65 e0       	ldi	r22, 0x05	; 5
    3d1e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3d22:	8e e1       	ldi	r24, 0x1E	; 30
    3d24:	93 e2       	ldi	r25, 0x23	; 35
    3d26:	60 e0       	ldi	r22, 0x00	; 0
    3d28:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3d2c:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3d2e:	80 fd       	sbrc	r24, 0
    3d30:	f2 cf       	rjmp	.-28     	; 0x3d16 <dataflash_protect_block4+0x76>
	{
		//_delay_ms(5);
	}

}
    3d32:	df 91       	pop	r29
    3d34:	cf 91       	pop	r28
    3d36:	1f 91       	pop	r17
    3d38:	0f 91       	pop	r16
    3d3a:	ff 90       	pop	r15
    3d3c:	ef 90       	pop	r14
    3d3e:	df 90       	pop	r13
    3d40:	08 95       	ret

00003d42 <dataflash_read_status>:

//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
    3d42:	ff 92       	push	r15
    3d44:	0f 93       	push	r16
    3d46:	1f 93       	push	r17
    3d48:	cf 93       	push	r28
    3d4a:	df 93       	push	r29
	uint8_t data;

	CS_DOWN;
    3d4c:	c0 e6       	ldi	r28, 0x60	; 96
    3d4e:	d6 e0       	ldi	r29, 0x06	; 6
    3d50:	50 e1       	ldi	r21, 0x10	; 16
    3d52:	f5 2e       	mov	r15, r21
    3d54:	fe 82       	std	Y+6, r15	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3d56:	0e e1       	ldi	r16, 0x1E	; 30
    3d58:	13 e2       	ldi	r17, 0x23	; 35
    3d5a:	c8 01       	movw	r24, r16
    3d5c:	65 e0       	ldi	r22, 0x05	; 5
    3d5e:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3d62:	c8 01       	movw	r24, r16
    3d64:	60 e0       	ldi	r22, 0x00	; 0
    3d66:	0e 94 4d 21 	call	0x429a	; 0x429a <SPI_MasterTransceiveByte>
	CS_UP;      
    3d6a:	fd 82       	std	Y+5, r15	; 0x05

	return data;
}
    3d6c:	df 91       	pop	r29
    3d6e:	cf 91       	pop	r28
    3d70:	1f 91       	pop	r17
    3d72:	0f 91       	pop	r16
    3d74:	ff 90       	pop	r15
    3d76:	08 95       	ret

00003d78 <EEPROM_WriteByte>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3d78:	90 91 cf 01 	lds	r25, 0x01CF
    3d7c:	97 fd       	sbrc	r25, 7
    3d7e:	fc cf       	rjmp	.-8      	; 0x3d78 <EEPROM_WriteByte>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3d80:	90 91 cf 01 	lds	r25, 0x01CF
    3d84:	91 ff       	sbrs	r25, 1
    3d86:	12 c0       	rjmp	.+36     	; 0x3dac <EEPROM_WriteByte+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3d88:	96 e3       	ldi	r25, 0x36	; 54
    3d8a:	e0 ec       	ldi	r30, 0xC0	; 192
    3d8c:	f1 e0       	ldi	r31, 0x01	; 1
    3d8e:	92 87       	std	Z+10, r25	; 0x0a
		NVM_EXEC();
    3d90:	ef 93       	push	r30
    3d92:	ff 93       	push	r31
    3d94:	0f 93       	push	r16
    3d96:	2f 93       	push	r18
    3d98:	eb ec       	ldi	r30, 0xCB	; 203
    3d9a:	f1 e0       	ldi	r31, 0x01	; 1
    3d9c:	08 ed       	ldi	r16, 0xD8	; 216
    3d9e:	21 e0       	ldi	r18, 0x01	; 1
    3da0:	04 bf       	out	0x34, r16	; 52
    3da2:	20 83       	st	Z, r18
    3da4:	2f 91       	pop	r18
    3da6:	0f 91       	pop	r16
    3da8:	ff 91       	pop	r31
    3daa:	ef 91       	pop	r30
{
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3dac:	e0 ec       	ldi	r30, 0xC0	; 192
    3dae:	f1 e0       	ldi	r31, 0x01	; 1
    3db0:	93 e3       	ldi	r25, 0x33	; 51
    3db2:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    3db4:	70 e0       	ldi	r23, 0x00	; 0
    3db6:	6f 71       	andi	r22, 0x1F	; 31
    3db8:	70 70       	andi	r23, 0x00	; 0
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	88 0f       	add	r24, r24
    3dbe:	99 1f       	adc	r25, r25
    3dc0:	82 95       	swap	r24
    3dc2:	92 95       	swap	r25
    3dc4:	90 7f       	andi	r25, 0xF0	; 240
    3dc6:	98 27       	eor	r25, r24
    3dc8:	80 7f       	andi	r24, 0xF0	; 240
    3dca:	98 27       	eor	r25, r24
    3dcc:	68 2b       	or	r22, r24
    3dce:	79 2b       	or	r23, r25
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    3dd0:	60 93 c0 01 	sts	0x01C0, r22
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3dd4:	87 2f       	mov	r24, r23
    3dd6:	8f 71       	andi	r24, 0x1F	; 31
    3dd8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3dda:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    3ddc:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3dde:	85 e3       	ldi	r24, 0x35	; 53
    3de0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3de2:	ef 93       	push	r30
    3de4:	ff 93       	push	r31
    3de6:	0f 93       	push	r16
    3de8:	2f 93       	push	r18
    3dea:	eb ec       	ldi	r30, 0xCB	; 203
    3dec:	f1 e0       	ldi	r31, 0x01	; 1
    3dee:	08 ed       	ldi	r16, 0xD8	; 216
    3df0:	21 e0       	ldi	r18, 0x01	; 1
    3df2:	04 bf       	out	0x34, r16	; 52
    3df4:	20 83       	st	Z, r18
    3df6:	2f 91       	pop	r18
    3df8:	0f 91       	pop	r16
    3dfa:	ff 91       	pop	r31
    3dfc:	ef 91       	pop	r30
}
    3dfe:	08 95       	ret

00003e00 <EEPROM_ReadByte>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3e00:	e0 ec       	ldi	r30, 0xC0	; 192
    3e02:	f1 e0       	ldi	r31, 0x01	; 1
    3e04:	90 91 cf 01 	lds	r25, 0x01CF
    3e08:	97 fd       	sbrc	r25, 7
    3e0a:	fa cf       	rjmp	.-12     	; 0x3e00 <EEPROM_ReadByte>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    3e0c:	70 e0       	ldi	r23, 0x00	; 0
    3e0e:	6f 71       	andi	r22, 0x1F	; 31
    3e10:	70 70       	andi	r23, 0x00	; 0
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    3e12:	90 e0       	ldi	r25, 0x00	; 0
    3e14:	88 0f       	add	r24, r24
    3e16:	99 1f       	adc	r25, r25
    3e18:	82 95       	swap	r24
    3e1a:	92 95       	swap	r25
    3e1c:	90 7f       	andi	r25, 0xF0	; 240
    3e1e:	98 27       	eor	r25, r24
    3e20:	80 7f       	andi	r24, 0xF0	; 240
    3e22:	98 27       	eor	r25, r24
    3e24:	68 2b       	or	r22, r24
    3e26:	79 2b       	or	r23, r25
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    3e28:	60 93 c0 01 	sts	0x01C0, r22
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3e2c:	87 2f       	mov	r24, r23
    3e2e:	8f 71       	andi	r24, 0x1F	; 31
    3e30:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3e32:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3e34:	86 e0       	ldi	r24, 0x06	; 6
    3e36:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3e38:	ef 93       	push	r30
    3e3a:	ff 93       	push	r31
    3e3c:	0f 93       	push	r16
    3e3e:	2f 93       	push	r18
    3e40:	eb ec       	ldi	r30, 0xCB	; 203
    3e42:	f1 e0       	ldi	r31, 0x01	; 1
    3e44:	08 ed       	ldi	r16, 0xD8	; 216
    3e46:	21 e0       	ldi	r18, 0x01	; 1
    3e48:	04 bf       	out	0x34, r16	; 52
    3e4a:	20 83       	st	Z, r18
    3e4c:	2f 91       	pop	r18
    3e4e:	0f 91       	pop	r16
    3e50:	ff 91       	pop	r31
    3e52:	ef 91       	pop	r30

	return NVM.DATA0;
    3e54:	80 91 c4 01 	lds	r24, 0x01C4
}
    3e58:	08 95       	ret

00003e5a <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3e5a:	80 91 cf 01 	lds	r24, 0x01CF
    3e5e:	87 fd       	sbrc	r24, 7
    3e60:	fc cf       	rjmp	.-8      	; 0x3e5a <EEPROM_WaitForNVM>
}
    3e62:	08 95       	ret

00003e64 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3e64:	80 91 cf 01 	lds	r24, 0x01CF
    3e68:	87 fd       	sbrc	r24, 7
    3e6a:	fc cf       	rjmp	.-8      	; 0x3e64 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3e6c:	80 91 cf 01 	lds	r24, 0x01CF
    3e70:	81 ff       	sbrs	r24, 1
    3e72:	12 c0       	rjmp	.+36     	; 0x3e98 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3e74:	86 e3       	ldi	r24, 0x36	; 54
    3e76:	e0 ec       	ldi	r30, 0xC0	; 192
    3e78:	f1 e0       	ldi	r31, 0x01	; 1
    3e7a:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    3e7c:	ef 93       	push	r30
    3e7e:	ff 93       	push	r31
    3e80:	0f 93       	push	r16
    3e82:	2f 93       	push	r18
    3e84:	eb ec       	ldi	r30, 0xCB	; 203
    3e86:	f1 e0       	ldi	r31, 0x01	; 1
    3e88:	08 ed       	ldi	r16, 0xD8	; 216
    3e8a:	21 e0       	ldi	r18, 0x01	; 1
    3e8c:	04 bf       	out	0x34, r16	; 52
    3e8e:	20 83       	st	Z, r18
    3e90:	2f 91       	pop	r18
    3e92:	0f 91       	pop	r16
    3e94:	ff 91       	pop	r31
    3e96:	ef 91       	pop	r30
    3e98:	08 95       	ret

00003e9a <EEPROM_LoadByte>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3e9a:	e0 ec       	ldi	r30, 0xC0	; 192
    3e9c:	f1 e0       	ldi	r31, 0x01	; 1
    3e9e:	90 91 cf 01 	lds	r25, 0x01CF
    3ea2:	97 fd       	sbrc	r25, 7
    3ea4:	fa cf       	rjmp	.-12     	; 0x3e9a <EEPROM_LoadByte>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3ea6:	93 e3       	ldi	r25, 0x33	; 51
    3ea8:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    3eaa:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = 0x00;
    3eae:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    3eb0:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    3eb2:	64 83       	std	Z+4, r22	; 0x04
}
    3eb4:	08 95       	ret

00003eb6 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    3eb6:	fc 01       	movw	r30, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3eb8:	a0 ec       	ldi	r26, 0xC0	; 192
    3eba:	b1 e0       	ldi	r27, 0x01	; 1
    3ebc:	80 91 cf 01 	lds	r24, 0x01CF
    3ec0:	87 fd       	sbrc	r24, 7
    3ec2:	fa cf       	rjmp	.-12     	; 0x3eb8 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3ec4:	83 e3       	ldi	r24, 0x33	; 51
    3ec6:	1a 96       	adiw	r26, 0x0a	; 10
    3ec8:	8c 93       	st	X, r24
    3eca:	1a 97       	sbiw	r26, 0x0a	; 10

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    3ecc:	11 96       	adiw	r26, 0x01	; 1
    3ece:	1c 92       	st	X, r1
    3ed0:	11 97       	sbiw	r26, 0x01	; 1
	NVM.ADDR2 = 0x00;
    3ed2:	12 96       	adiw	r26, 0x02	; 2
    3ed4:	1c 92       	st	X, r1
    3ed6:	12 97       	sbiw	r26, 0x02	; 2

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    3ed8:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    3eda:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    3ede:	91 91       	ld	r25, Z+
    3ee0:	14 96       	adiw	r26, 0x04	; 4
    3ee2:	9c 93       	st	X, r25
    3ee4:	14 97       	sbiw	r26, 0x04	; 4
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    3ee6:	8f 5f       	subi	r24, 0xFF	; 255
    3ee8:	80 32       	cpi	r24, 0x20	; 32
    3eea:	b9 f7       	brne	.-18     	; 0x3eda <EEPROM_LoadPage+0x24>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    3eec:	08 95       	ret

00003eee <EEPROM_AtomicWritePage>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3eee:	e0 ec       	ldi	r30, 0xC0	; 192
    3ef0:	f1 e0       	ldi	r31, 0x01	; 1
    3ef2:	90 91 cf 01 	lds	r25, 0x01CF
    3ef6:	97 fd       	sbrc	r25, 7
    3ef8:	fa cf       	rjmp	.-12     	; 0x3eee <EEPROM_AtomicWritePage>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3efa:	90 e0       	ldi	r25, 0x00	; 0
    3efc:	88 0f       	add	r24, r24
    3efe:	99 1f       	adc	r25, r25
    3f00:	82 95       	swap	r24
    3f02:	92 95       	swap	r25
    3f04:	90 7f       	andi	r25, 0xF0	; 240
    3f06:	98 27       	eor	r25, r24
    3f08:	80 7f       	andi	r24, 0xF0	; 240
    3f0a:	98 27       	eor	r25, r24

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3f0c:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3f10:	89 2f       	mov	r24, r25
    3f12:	8f 71       	andi	r24, 0x1F	; 31
    3f14:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3f16:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3f18:	85 e3       	ldi	r24, 0x35	; 53
    3f1a:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3f1c:	ef 93       	push	r30
    3f1e:	ff 93       	push	r31
    3f20:	0f 93       	push	r16
    3f22:	2f 93       	push	r18
    3f24:	eb ec       	ldi	r30, 0xCB	; 203
    3f26:	f1 e0       	ldi	r31, 0x01	; 1
    3f28:	08 ed       	ldi	r16, 0xD8	; 216
    3f2a:	21 e0       	ldi	r18, 0x01	; 1
    3f2c:	04 bf       	out	0x34, r16	; 52
    3f2e:	20 83       	st	Z, r18
    3f30:	2f 91       	pop	r18
    3f32:	0f 91       	pop	r16
    3f34:	ff 91       	pop	r31
    3f36:	ef 91       	pop	r30
}
    3f38:	08 95       	ret

00003f3a <EEPROM_ErasePage>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3f3a:	e0 ec       	ldi	r30, 0xC0	; 192
    3f3c:	f1 e0       	ldi	r31, 0x01	; 1
    3f3e:	90 91 cf 01 	lds	r25, 0x01CF
    3f42:	97 fd       	sbrc	r25, 7
    3f44:	fa cf       	rjmp	.-12     	; 0x3f3a <EEPROM_ErasePage>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3f46:	90 e0       	ldi	r25, 0x00	; 0
    3f48:	88 0f       	add	r24, r24
    3f4a:	99 1f       	adc	r25, r25
    3f4c:	82 95       	swap	r24
    3f4e:	92 95       	swap	r25
    3f50:	90 7f       	andi	r25, 0xF0	; 240
    3f52:	98 27       	eor	r25, r24
    3f54:	80 7f       	andi	r24, 0xF0	; 240
    3f56:	98 27       	eor	r25, r24

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3f58:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3f5c:	89 2f       	mov	r24, r25
    3f5e:	8f 71       	andi	r24, 0x1F	; 31
    3f60:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3f62:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    3f64:	82 e3       	ldi	r24, 0x32	; 50
    3f66:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3f68:	ef 93       	push	r30
    3f6a:	ff 93       	push	r31
    3f6c:	0f 93       	push	r16
    3f6e:	2f 93       	push	r18
    3f70:	eb ec       	ldi	r30, 0xCB	; 203
    3f72:	f1 e0       	ldi	r31, 0x01	; 1
    3f74:	08 ed       	ldi	r16, 0xD8	; 216
    3f76:	21 e0       	ldi	r18, 0x01	; 1
    3f78:	04 bf       	out	0x34, r16	; 52
    3f7a:	20 83       	st	Z, r18
    3f7c:	2f 91       	pop	r18
    3f7e:	0f 91       	pop	r16
    3f80:	ff 91       	pop	r31
    3f82:	ef 91       	pop	r30
}
    3f84:	08 95       	ret

00003f86 <EEPROM_SplitWritePage>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3f86:	e0 ec       	ldi	r30, 0xC0	; 192
    3f88:	f1 e0       	ldi	r31, 0x01	; 1
    3f8a:	90 91 cf 01 	lds	r25, 0x01CF
    3f8e:	97 fd       	sbrc	r25, 7
    3f90:	fa cf       	rjmp	.-12     	; 0x3f86 <EEPROM_SplitWritePage>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3f92:	90 e0       	ldi	r25, 0x00	; 0
    3f94:	88 0f       	add	r24, r24
    3f96:	99 1f       	adc	r25, r25
    3f98:	82 95       	swap	r24
    3f9a:	92 95       	swap	r25
    3f9c:	90 7f       	andi	r25, 0xF0	; 240
    3f9e:	98 27       	eor	r25, r24
    3fa0:	80 7f       	andi	r24, 0xF0	; 240
    3fa2:	98 27       	eor	r25, r24

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3fa4:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3fa8:	89 2f       	mov	r24, r25
    3faa:	8f 71       	andi	r24, 0x1F	; 31
    3fac:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3fae:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    3fb0:	84 e3       	ldi	r24, 0x34	; 52
    3fb2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3fb4:	ef 93       	push	r30
    3fb6:	ff 93       	push	r31
    3fb8:	0f 93       	push	r16
    3fba:	2f 93       	push	r18
    3fbc:	eb ec       	ldi	r30, 0xCB	; 203
    3fbe:	f1 e0       	ldi	r31, 0x01	; 1
    3fc0:	08 ed       	ldi	r16, 0xD8	; 216
    3fc2:	21 e0       	ldi	r18, 0x01	; 1
    3fc4:	04 bf       	out	0x34, r16	; 52
    3fc6:	20 83       	st	Z, r18
    3fc8:	2f 91       	pop	r18
    3fca:	0f 91       	pop	r16
    3fcc:	ff 91       	pop	r31
    3fce:	ef 91       	pop	r30
}
    3fd0:	08 95       	ret

00003fd2 <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3fd2:	80 91 cf 01 	lds	r24, 0x01CF
    3fd6:	87 fd       	sbrc	r24, 7
    3fd8:	fc cf       	rjmp	.-8      	; 0x3fd2 <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    3fda:	80 e3       	ldi	r24, 0x30	; 48
    3fdc:	e0 ec       	ldi	r30, 0xC0	; 192
    3fde:	f1 e0       	ldi	r31, 0x01	; 1
    3fe0:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3fe2:	ef 93       	push	r30
    3fe4:	ff 93       	push	r31
    3fe6:	0f 93       	push	r16
    3fe8:	2f 93       	push	r18
    3fea:	eb ec       	ldi	r30, 0xCB	; 203
    3fec:	f1 e0       	ldi	r31, 0x01	; 1
    3fee:	08 ed       	ldi	r16, 0xD8	; 216
    3ff0:	21 e0       	ldi	r18, 0x01	; 1
    3ff2:	04 bf       	out	0x34, r16	; 52
    3ff4:	20 83       	st	Z, r18
    3ff6:	2f 91       	pop	r18
    3ff8:	0f 91       	pop	r16
    3ffa:	ff 91       	pop	r31
    3ffc:	ef 91       	pop	r30
}
    3ffe:	08 95       	ret

00004000 <PORT_ConfigureInterrupt0>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 0.
 */
void PORT_ConfigureInterrupt0( PORT_t * port,
                               PORT_INT0LVL_t intLevel,
                               uint8_t pinMask )
{
    4000:	fc 01       	movw	r30, r24
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    4002:	81 85       	ldd	r24, Z+9	; 0x09
    4004:	8c 7f       	andi	r24, 0xFC	; 252
    4006:	68 2b       	or	r22, r24
    4008:	61 87       	std	Z+9, r22	; 0x09
	port->INT0MASK = pinMask;
    400a:	42 87       	std	Z+10, r20	; 0x0a
}
    400c:	08 95       	ret

0000400e <PORT_ConfigureInterrupt1>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 1.
 */
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
    400e:	fc 01       	movw	r30, r24
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
    4010:	81 85       	ldd	r24, Z+9	; 0x09
    4012:	83 7f       	andi	r24, 0xF3	; 243
    4014:	68 2b       	or	r22, r24
    4016:	61 87       	std	Z+9, r22	; 0x09
	port->INT1MASK = pinMask;
    4018:	43 87       	std	Z+11, r20	; 0x0b
}
    401a:	08 95       	ret

0000401c <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    401c:	ef 92       	push	r14
    401e:	0f 93       	push	r16
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    4020:	e0 2a       	or	r14, r16
    4022:	44 23       	and	r20, r20
    4024:	81 f0       	breq	.+32     	; 0x4046 <PORT_ConfigurePins+0x2a>
    4026:	30 e8       	ldi	r19, 0x80	; 128
    4028:	e3 2a       	or	r14, r19
    402a:	22 23       	and	r18, r18
    402c:	81 f4       	brne	.+32     	; 0x404e <PORT_ConfigurePins+0x32>
    402e:	20 e0       	ldi	r18, 0x00	; 0
    4030:	e2 2a       	or	r14, r18
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
    4032:	2f b7       	in	r18, 0x3f	; 63

	cli();
    4034:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    4036:	60 93 b0 00 	sts	0x00B0, r22
	port->PIN0CTRL = temp;
    403a:	fc 01       	movw	r30, r24
    403c:	e0 8a       	std	Z+16, r14	; 0x10

	/* Restore status register. */
	SREG = sreg;
    403e:	2f bf       	out	0x3f, r18	; 63
}
    4040:	0f 91       	pop	r16
    4042:	ef 90       	pop	r14
    4044:	08 95       	ret
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    4046:	30 e0       	ldi	r19, 0x00	; 0
    4048:	e3 2a       	or	r14, r19
    404a:	22 23       	and	r18, r18
    404c:	81 f3       	breq	.-32     	; 0x402e <PORT_ConfigurePins+0x12>
    404e:	20 e4       	ldi	r18, 0x40	; 64
    4050:	ef cf       	rjmp	.-34     	; 0x4030 <PORT_ConfigurePins+0x14>

00004052 <PORT_MapVirtualPort0>:
 *
 *  \param realPort Selects the real port to map to virtual port 0.
 */
void PORT_MapVirtualPort0(PORTCFG_VP0MAP_t realPort)
{
	PORTCFG.VPCTRLA = ( PORTCFG.VPCTRLA & ~PORTCFG_VP0MAP_gm ) | realPort;
    4052:	e0 eb       	ldi	r30, 0xB0	; 176
    4054:	f0 e0       	ldi	r31, 0x00	; 0
    4056:	92 81       	ldd	r25, Z+2	; 0x02
    4058:	90 7f       	andi	r25, 0xF0	; 240
    405a:	98 2b       	or	r25, r24
    405c:	92 83       	std	Z+2, r25	; 0x02
}
    405e:	08 95       	ret

00004060 <PORT_MapVirtualPort1>:
 *
 *  \param realPort Selects the real port to map to virtual port 1.
 */
void PORT_MapVirtualPort1(PORTCFG_VP1MAP_t realPort)
{
	PORTCFG.VPCTRLA = ( PORTCFG.VPCTRLA & ~PORTCFG_VP1MAP_gm ) | realPort;
    4060:	e0 eb       	ldi	r30, 0xB0	; 176
    4062:	f0 e0       	ldi	r31, 0x00	; 0
    4064:	92 81       	ldd	r25, Z+2	; 0x02
    4066:	9f 70       	andi	r25, 0x0F	; 15
    4068:	98 2b       	or	r25, r24
    406a:	92 83       	std	Z+2, r25	; 0x02
}
    406c:	08 95       	ret

0000406e <PORT_MapVirtualPort2>:
 *
 *  \param realPort Selects the real port to map to virtual port 2.
 */
void PORT_MapVirtualPort2(PORTCFG_VP2MAP_t realPort)
{
	PORTCFG.VPCTRLB = ( PORTCFG.VPCTRLB & ~PORTCFG_VP2MAP_gm ) | realPort;
    406e:	e0 eb       	ldi	r30, 0xB0	; 176
    4070:	f0 e0       	ldi	r31, 0x00	; 0
    4072:	93 81       	ldd	r25, Z+3	; 0x03
    4074:	90 7f       	andi	r25, 0xF0	; 240
    4076:	98 2b       	or	r25, r24
    4078:	93 83       	std	Z+3, r25	; 0x03
}
    407a:	08 95       	ret

0000407c <PORT_MapVirtualPort3>:
 *
 *  \param realPort Selects the real port to map to virtual port 3.
 */
void PORT_MapVirtualPort3(PORTCFG_VP3MAP_t realPort)
{
	PORTCFG.VPCTRLB = ( PORTCFG.VPCTRLB & ~PORTCFG_VP3MAP_gm ) | realPort;
    407c:	e0 eb       	ldi	r30, 0xB0	; 176
    407e:	f0 e0       	ldi	r31, 0x00	; 0
    4080:	93 81       	ldd	r25, Z+3	; 0x03
    4082:	9f 70       	andi	r25, 0x0F	; 15
    4084:	98 2b       	or	r25, r24
    4086:	93 83       	std	Z+3, r25	; 0x03
}
    4088:	08 95       	ret

0000408a <SPI_MasterInit>:
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision,
					bool enable)
{
    408a:	8f 92       	push	r8
    408c:	af 92       	push	r10
    408e:	cf 92       	push	r12
    4090:	ef 92       	push	r14
    4092:	0f 93       	push	r16
    4094:	df 93       	push	r29
    4096:	cf 93       	push	r28
    4098:	cd b7       	in	r28, 0x3d	; 61
    409a:	de b7       	in	r29, 0x3e	; 62
    409c:	fc 01       	movw	r30, r24
	spi->module         = module;
    409e:	60 83       	st	Z, r22
    40a0:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
    40a2:	42 83       	std	Z+2, r20	; 0x02
    40a4:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
    40a6:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    40a8:	cc 20       	and	r12, r12
    40aa:	39 f1       	breq	.+78     	; 0x40fa <SPI_MasterInit+0x70>
    40ac:	30 e8       	ldi	r19, 0x80	; 128
    40ae:	88 20       	and	r8, r8
    40b0:	39 f1       	breq	.+78     	; 0x4100 <SPI_MasterInit+0x76>
    40b2:	90 e4       	ldi	r25, 0x40	; 64
    40b4:	22 23       	and	r18, r18
    40b6:	39 f5       	brne	.+78     	; 0x4106 <SPI_MasterInit+0x7c>
    40b8:	80 e0       	ldi	r24, 0x00	; 0
    40ba:	00 61       	ori	r16, 0x10	; 16
    40bc:	0a 29       	or	r16, r10
    40be:	03 2b       	or	r16, r19
    40c0:	09 2b       	or	r16, r25
    40c2:	08 2b       	or	r16, r24
    40c4:	db 01       	movw	r26, r22
    40c6:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    40c8:	a0 81       	ld	r26, Z
    40ca:	b1 81       	ldd	r27, Z+1	; 0x01
    40cc:	11 96       	adiw	r26, 0x01	; 1
    40ce:	ec 92       	st	X, r14
	spi->module->STATUS = SPI_IF_bm;
    40d0:	a0 81       	ld	r26, Z
    40d2:	b1 81       	ldd	r27, Z+1	; 0x01
    40d4:	80 e8       	ldi	r24, 0x80	; 128
    40d6:	12 96       	adiw	r26, 0x02	; 2
    40d8:	8c 93       	st	X, r24
    40da:	12 97       	sbiw	r26, 0x02	; 2

	/* No assigned data packet. */
	spi->dataPacket = NULL;
    40dc:	15 82       	std	Z+5, r1	; 0x05
    40de:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
    40e0:	02 80       	ldd	r0, Z+2	; 0x02
    40e2:	f3 81       	ldd	r31, Z+3	; 0x03
    40e4:	e0 2d       	mov	r30, r0
    40e6:	80 ea       	ldi	r24, 0xA0	; 160
    40e8:	81 83       	std	Z+1, r24	; 0x01
}
    40ea:	cf 91       	pop	r28
    40ec:	df 91       	pop	r29
    40ee:	0f 91       	pop	r16
    40f0:	ef 90       	pop	r14
    40f2:	cf 90       	pop	r12
    40f4:	af 90       	pop	r10
    40f6:	8f 90       	pop	r8
    40f8:	08 95       	ret
{
	spi->module         = module;
	spi->port           = port;
	spi->interrupted    = false;

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    40fa:	30 e0       	ldi	r19, 0x00	; 0
    40fc:	88 20       	and	r8, r8
    40fe:	c9 f6       	brne	.-78     	; 0x40b2 <SPI_MasterInit+0x28>
    4100:	90 e0       	ldi	r25, 0x00	; 0
    4102:	22 23       	and	r18, r18
    4104:	c9 f2       	breq	.-78     	; 0x40b8 <SPI_MasterInit+0x2e>
    4106:	80 e2       	ldi	r24, 0x20	; 32
    4108:	d8 cf       	rjmp	.-80     	; 0x40ba <SPI_MasterInit+0x30>

0000410a <SPI_MasterEnable>:
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
}

void SPI_MasterEnable(SPI_Master_t *spi, uint8_t bEnable)
{
	if (bEnable)
    410a:	66 23       	and	r22, r22
    410c:	41 f4       	brne	.+16     	; 0x411e <SPI_MasterEnable+0x14>
		spi->module->CTRL |= SPI_ENABLE_bm;
	else
		spi->module->CTRL &= ~(SPI_ENABLE_bm);
    410e:	dc 01       	movw	r26, r24
    4110:	ed 91       	ld	r30, X+
    4112:	fc 91       	ld	r31, X
    4114:	11 97       	sbiw	r26, 0x01	; 1
    4116:	80 81       	ld	r24, Z
    4118:	8f 7b       	andi	r24, 0xBF	; 191
    411a:	80 83       	st	Z, r24
    411c:	08 95       	ret
}

void SPI_MasterEnable(SPI_Master_t *spi, uint8_t bEnable)
{
	if (bEnable)
		spi->module->CTRL |= SPI_ENABLE_bm;
    411e:	dc 01       	movw	r26, r24
    4120:	ed 91       	ld	r30, X+
    4122:	fc 91       	ld	r31, X
    4124:	11 97       	sbiw	r26, 0x01	; 1
    4126:	80 81       	ld	r24, Z
    4128:	80 64       	ori	r24, 0x40	; 64
    412a:	80 83       	st	Z, r24
    412c:	08 95       	ret

0000412e <SPI_SlaveInit>:
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
    412e:	ef 92       	push	r14
    4130:	0f 93       	push	r16
    4132:	fc 01       	movw	r30, r24
	/* SPI module. */
	spi->module       = module;
    4134:	60 83       	st	Z, r22
    4136:	71 83       	std	Z+1, r23	; 0x01
	spi->port         = port;
    4138:	42 83       	std	Z+2, r20	; 0x02
    413a:	53 83       	std	Z+3, r21	; 0x03

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    413c:	22 23       	and	r18, r18
    413e:	89 f4       	brne	.+34     	; 0x4162 <SPI_SlaveInit+0x34>
    4140:	80 e4       	ldi	r24, 0x40	; 64
    4142:	08 2b       	or	r16, r24
    4144:	db 01       	movw	r26, r22
    4146:	0c 93       	st	X, r16
	                    (lsbFirst ? SPI_DORD_bm : 0) | /* Data order. */
	                    mode;                          /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    4148:	a0 81       	ld	r26, Z
    414a:	b1 81       	ldd	r27, Z+1	; 0x01
    414c:	11 96       	adiw	r26, 0x01	; 1
    414e:	ec 92       	st	X, r14
    4150:	11 97       	sbiw	r26, 0x01	; 1

	/* MISO as output. */
	spi->port->DIRSET = SPI_MISO_bm;
    4152:	02 80       	ldd	r0, Z+2	; 0x02
    4154:	f3 81       	ldd	r31, Z+3	; 0x03
    4156:	e0 2d       	mov	r30, r0
    4158:	80 e4       	ldi	r24, 0x40	; 64
    415a:	81 83       	std	Z+1, r24	; 0x01
}
    415c:	0f 91       	pop	r16
    415e:	ef 90       	pop	r14
    4160:	08 95       	ret
{
	/* SPI module. */
	spi->module       = module;
	spi->port         = port;

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    4162:	80 e6       	ldi	r24, 0x60	; 96
    4164:	ee cf       	rjmp	.-36     	; 0x4142 <SPI_SlaveInit+0x14>

00004166 <SPI_MasterCreateDataPacket>:
                                const uint8_t *transmitData,
                                uint8_t *receiveData,
                                uint8_t bytesToTransceive,
                                PORT_t *ssPort,
                                uint8_t ssPinMask)
{
    4166:	ef 92       	push	r14
    4168:	0f 93       	push	r16
    416a:	1f 93       	push	r17
    416c:	fc 01       	movw	r30, r24
	dataPacket->ssPort            = ssPort;
    416e:	00 83       	st	Z, r16
    4170:	11 83       	std	Z+1, r17	; 0x01
	dataPacket->ssPinMask         = ssPinMask;
    4172:	e2 82       	std	Z+2, r14	; 0x02
	dataPacket->transmitData      = transmitData;
    4174:	63 83       	std	Z+3, r22	; 0x03
    4176:	74 83       	std	Z+4, r23	; 0x04
	dataPacket->receiveData       = receiveData;
    4178:	45 83       	std	Z+5, r20	; 0x05
    417a:	56 83       	std	Z+6, r21	; 0x06
	dataPacket->bytesToTransceive  = bytesToTransceive;
    417c:	27 83       	std	Z+7, r18	; 0x07
	dataPacket->bytesTransceived   = 0;
    417e:	10 86       	std	Z+8, r1	; 0x08
	dataPacket->complete          = false;
    4180:	11 86       	std	Z+9, r1	; 0x09
}
    4182:	1f 91       	pop	r17
    4184:	0f 91       	pop	r16
    4186:	ef 90       	pop	r14
    4188:	08 95       	ret

0000418a <SPI_MasterInterruptHandler>:
 *  a pointer to the related SPI_Master_t struct as argument.
 *
 *  \param spi        Pointer to the modules own SPI_Master_t struct.
 */
void SPI_MasterInterruptHandler(SPI_Master_t *spi)
{
    418a:	cf 93       	push	r28
    418c:	df 93       	push	r29
    418e:	fc 01       	movw	r30, r24
	uint8_t data;
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;
    4190:	a5 81       	ldd	r26, Z+5	; 0x05
    4192:	b6 81       	ldd	r27, Z+6	; 0x06
    4194:	18 96       	adiw	r26, 0x08	; 8
    4196:	8c 91       	ld	r24, X
    4198:	18 97       	sbiw	r26, 0x08	; 8

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
    419a:	c0 81       	ld	r28, Z
    419c:	d1 81       	ldd	r29, Z+1	; 0x01
    419e:	98 81       	ld	r25, Y
    41a0:	94 ff       	sbrs	r25, 4
    41a2:	37 c0       	rjmp	.+110    	; 0x4212 <SPI_MasterInterruptHandler+0x88>
	}

	else {  /* Data interrupt. */

		/* Store received data. */
		data = spi->module->DATA;
    41a4:	9b 81       	ldd	r25, Y+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    41a6:	15 96       	adiw	r26, 0x05	; 5
    41a8:	0d 90       	ld	r0, X+
    41aa:	bc 91       	ld	r27, X
    41ac:	a0 2d       	mov	r26, r0
    41ae:	a8 0f       	add	r26, r24
    41b0:	b1 1d       	adc	r27, r1
    41b2:	9c 93       	st	X, r25

		/* Next byte. */
		bytesTransceived++;
    41b4:	8f 5f       	subi	r24, 0xFF	; 255

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
    41b6:	a5 81       	ldd	r26, Z+5	; 0x05
    41b8:	b6 81       	ldd	r27, Z+6	; 0x06
    41ba:	17 96       	adiw	r26, 0x07	; 7
    41bc:	9c 91       	ld	r25, X
    41be:	17 97       	sbiw	r26, 0x07	; 7
    41c0:	89 17       	cp	r24, r25
    41c2:	a0 f0       	brcs	.+40     	; 0x41ec <SPI_MasterInterruptHandler+0x62>

		/* Transmission complete. */
		else {

			/* Release SS to slave(s). */
			uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    41c4:	12 96       	adiw	r26, 0x02	; 2
    41c6:	9c 91       	ld	r25, X
    41c8:	12 97       	sbiw	r26, 0x02	; 2
			SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    41ca:	0d 90       	ld	r0, X+
    41cc:	bc 91       	ld	r27, X
    41ce:	a0 2d       	mov	r26, r0
    41d0:	15 96       	adiw	r26, 0x05	; 5
    41d2:	9c 93       	st	X, r25

			spi->dataPacket->complete = true;
    41d4:	a5 81       	ldd	r26, Z+5	; 0x05
    41d6:	b6 81       	ldd	r27, Z+6	; 0x06
    41d8:	91 e0       	ldi	r25, 0x01	; 1
    41da:	19 96       	adiw	r26, 0x09	; 9
    41dc:	9c 93       	st	X, r25
    41de:	19 97       	sbiw	r26, 0x09	; 9
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    41e0:	18 96       	adiw	r26, 0x08	; 8
    41e2:	8c 93       	st	X, r24
    41e4:	18 97       	sbiw	r26, 0x08	; 8
}
    41e6:	df 91       	pop	r29
    41e8:	cf 91       	pop	r28
    41ea:	08 95       	ret
		bytesTransceived++;

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
			/* Put data byte in transmit data register. */
			data = spi->dataPacket->transmitData[bytesTransceived];
    41ec:	13 96       	adiw	r26, 0x03	; 3
    41ee:	0d 90       	ld	r0, X+
    41f0:	bc 91       	ld	r27, X
    41f2:	a0 2d       	mov	r26, r0
    41f4:	a8 0f       	add	r26, r24
    41f6:	b1 1d       	adc	r27, r1
    41f8:	9c 91       	ld	r25, X
			spi->module->DATA = data;
    41fa:	a0 81       	ld	r26, Z
    41fc:	b1 81       	ldd	r27, Z+1	; 0x01
    41fe:	13 96       	adiw	r26, 0x03	; 3
    4200:	9c 93       	st	X, r25
    4202:	a5 81       	ldd	r26, Z+5	; 0x05
    4204:	b6 81       	ldd	r27, Z+6	; 0x06

			spi->dataPacket->complete = true;
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    4206:	18 96       	adiw	r26, 0x08	; 8
    4208:	8c 93       	st	X, r24
    420a:	18 97       	sbiw	r26, 0x08	; 8
}
    420c:	df 91       	pop	r29
    420e:	cf 91       	pop	r28
    4210:	08 95       	ret
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
		spi->interrupted = true;
    4212:	91 e0       	ldi	r25, 0x01	; 1
    4214:	94 83       	std	Z+4, r25	; 0x04

			spi->dataPacket->complete = true;
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    4216:	18 96       	adiw	r26, 0x08	; 8
    4218:	8c 93       	st	X, r24
    421a:	18 97       	sbiw	r26, 0x08	; 8
}
    421c:	df 91       	pop	r29
    421e:	cf 91       	pop	r28
    4220:	08 95       	ret

00004222 <SPI_MasterInterruptTransceivePacket>:
 *  \retval SPI_BUSY          The SPI module is busy.
 *  \retval SPI_INTERRUPTED   The transmission was interrupted by another master.
 */
uint8_t SPI_MasterInterruptTransceivePacket(SPI_Master_t *spi,
                                            SPI_DataPacket_t *dataPacket)
{
    4222:	cf 93       	push	r28
    4224:	df 93       	push	r29
    4226:	fc 01       	movw	r30, r24
    4228:	db 01       	movw	r26, r22
	uint8_t data;
	bool interrupted = spi->interrupted;
    422a:	94 81       	ldd	r25, Z+4	; 0x04

	/* If no packets sent so far. */
	if (spi->dataPacket == NULL) {
    422c:	c5 81       	ldd	r28, Z+5	; 0x05
    422e:	d6 81       	ldd	r29, Z+6	; 0x06
    4230:	20 97       	sbiw	r28, 0x00	; 0
    4232:	29 f0       	breq	.+10     	; 0x423e <SPI_MasterInterruptTransceivePacket+0x1c>
		spi->dataPacket = dataPacket;
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
    4234:	89 85       	ldd	r24, Y+9	; 0x09
    4236:	88 23       	and	r24, r24
    4238:	61 f1       	breq	.+88     	; 0x4292 <SPI_MasterInterruptTransceivePacket+0x70>
		return (SPI_BUSY);
	}

	/* If interrupted by other master. */
	else if (interrupted) {
    423a:	99 23       	and	r25, r25
    423c:	09 f5       	brne	.+66     	; 0x4280 <SPI_MasterInterruptTransceivePacket+0x5e>
		}
	}

	/* NOT interrupted by other master.
	* Start transmission. */
	spi->dataPacket = dataPacket;
    423e:	a5 83       	std	Z+5, r26	; 0x05
    4240:	b6 83       	std	Z+6, r27	; 0x06
	spi->dataPacket->complete = false;
    4242:	19 96       	adiw	r26, 0x09	; 9
    4244:	1c 92       	st	X, r1
    4246:	19 97       	sbiw	r26, 0x09	; 9
	spi->interrupted = false;
    4248:	14 82       	std	Z+4, r1	; 0x04

	/* SS to slave(s) low.*/
	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    424a:	12 96       	adiw	r26, 0x02	; 2
    424c:	8c 91       	ld	r24, X
    424e:	12 97       	sbiw	r26, 0x02	; 2
	SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    4250:	0d 90       	ld	r0, X+
    4252:	bc 91       	ld	r27, X
    4254:	a0 2d       	mov	r26, r0
    4256:	16 96       	adiw	r26, 0x06	; 6
    4258:	8c 93       	st	X, r24

	spi->dataPacket->bytesTransceived = 0;
    425a:	a5 81       	ldd	r26, Z+5	; 0x05
    425c:	b6 81       	ldd	r27, Z+6	; 0x06
    425e:	18 96       	adiw	r26, 0x08	; 8
    4260:	1c 92       	st	X, r1

	/* Start sending data. */
	data = spi->dataPacket->transmitData[0];
    4262:	a5 81       	ldd	r26, Z+5	; 0x05
    4264:	b6 81       	ldd	r27, Z+6	; 0x06
    4266:	13 96       	adiw	r26, 0x03	; 3
    4268:	0d 90       	ld	r0, X+
    426a:	bc 91       	ld	r27, X
    426c:	a0 2d       	mov	r26, r0
    426e:	8c 91       	ld	r24, X
	spi->module->DATA = data;
    4270:	01 90       	ld	r0, Z+
    4272:	f0 81       	ld	r31, Z
    4274:	e0 2d       	mov	r30, r0
    4276:	83 83       	std	Z+3, r24	; 0x03

	/* Successs */
	return (SPI_OK);
    4278:	80 e0       	ldi	r24, 0x00	; 0
}
    427a:	df 91       	pop	r29
    427c:	cf 91       	pop	r28
    427e:	08 95       	ret
	}

	/* If interrupted by other master. */
	else if (interrupted) {
		/* If SS released. */
		if (spi->port->OUT & SPI_SS_bm) {
    4280:	c2 81       	ldd	r28, Z+2	; 0x02
    4282:	d3 81       	ldd	r29, Z+3	; 0x03
    4284:	8c 81       	ldd	r24, Y+4	; 0x04
    4286:	84 fd       	sbrc	r24, 4
    4288:	da cf       	rjmp	.-76     	; 0x423e <SPI_MasterInterruptTransceivePacket+0x1c>
			/* No longer interrupted. */
			interrupted = false;
		}
		else {
			return (SPI_INTERRUPTED);
    428a:	81 e0       	ldi	r24, 0x01	; 1
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
    428c:	df 91       	pop	r29
    428e:	cf 91       	pop	r28
    4290:	08 95       	ret
		spi->dataPacket = dataPacket;
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
		return (SPI_BUSY);
    4292:	82 e0       	ldi	r24, 0x02	; 2
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
    4294:	df 91       	pop	r29
    4296:	cf 91       	pop	r28
    4298:	08 95       	ret

0000429a <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
    429a:	fc 01       	movw	r30, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
    429c:	a0 81       	ld	r26, Z
    429e:	b1 81       	ldd	r27, Z+1	; 0x01
    42a0:	13 96       	adiw	r26, 0x03	; 3
    42a2:	6c 93       	st	X, r22
    42a4:	13 97       	sbiw	r26, 0x03	; 3
    42a6:	01 90       	ld	r0, Z+
    42a8:	f0 81       	ld	r31, Z
    42aa:	e0 2d       	mov	r30, r0

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
    42ac:	82 81       	ldd	r24, Z+2	; 0x02
    42ae:	87 ff       	sbrs	r24, 7
    42b0:	fd cf       	rjmp	.-6      	; 0x42ac <SPI_MasterTransceiveByte+0x12>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
    42b2:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
    42b4:	08 95       	ret

000042b6 <SPI_MasterTransceivePacket>:
 *  \retval true	   Success
 *  \retval false	   Failure
 */
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
    42b6:	cf 93       	push	r28
    42b8:	df 93       	push	r29
    42ba:	fc 01       	movw	r30, r24
    42bc:	eb 01       	movw	r28, r22
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
    42be:	20 97       	sbiw	r28, 0x00	; 0
    42c0:	09 f4       	brne	.+2      	; 0x42c4 <SPI_MasterTransceivePacket+0xe>
    42c2:	4c c0       	rjmp	.+152    	; 0x435c <SPI_MasterTransceivePacket+0xa6>
		return false;
	}

	/* Assign datapacket to SPI module. */
	spi->dataPacket = dataPacket;
    42c4:	65 83       	std	Z+5, r22	; 0x05
    42c6:	76 83       	std	Z+6, r23	; 0x06

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    42c8:	3a 81       	ldd	r19, Y+2	; 0x02

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    42ca:	a8 81       	ld	r26, Y
    42cc:	b9 81       	ldd	r27, Y+1	; 0x01
    42ce:	10 97       	sbiw	r26, 0x00	; 0
    42d0:	09 f4       	brne	.+2      	; 0x42d4 <SPI_MasterTransceivePacket+0x1e>
    42d2:	42 c0       	rjmp	.+132    	; 0x4358 <SPI_MasterTransceivePacket+0xa2>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    42d4:	16 96       	adiw	r26, 0x06	; 6
    42d6:	3c 93       	st	X, r19
    42d8:	a5 81       	ldd	r26, Z+5	; 0x05
    42da:	b6 81       	ldd	r27, Z+6	; 0x06
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
    42dc:	4f 81       	ldd	r20, Y+7	; 0x07
	while (bytesTransceived < bytesToTransceive) {
    42de:	44 23       	and	r20, r20
    42e0:	29 f1       	breq	.+74     	; 0x432c <SPI_MasterTransceivePacket+0x76>
    42e2:	80 e0       	ldi	r24, 0x00	; 0
    42e4:	90 e0       	ldi	r25, 0x00	; 0

		/* Send pattern. */
		uint8_t data = spi->dataPacket->transmitData[bytesTransceived];
    42e6:	13 96       	adiw	r26, 0x03	; 3
    42e8:	0d 90       	ld	r0, X+
    42ea:	bc 91       	ld	r27, X
    42ec:	a0 2d       	mov	r26, r0
    42ee:	a8 0f       	add	r26, r24
    42f0:	b9 1f       	adc	r27, r25
    42f2:	2c 91       	ld	r18, X
		spi->module->DATA = data;
    42f4:	a0 81       	ld	r26, Z
    42f6:	b1 81       	ldd	r27, Z+1	; 0x01
    42f8:	13 96       	adiw	r26, 0x03	; 3
    42fa:	2c 93       	st	X, r18
    42fc:	a0 81       	ld	r26, Z
    42fe:	b1 81       	ldd	r27, Z+1	; 0x01

		/* Wait for transmission complete. */
		while(!(spi->module->STATUS & SPI_IF_bm)) {
    4300:	12 96       	adiw	r26, 0x02	; 2
    4302:	2c 91       	ld	r18, X
    4304:	12 97       	sbiw	r26, 0x02	; 2
    4306:	27 ff       	sbrs	r18, 7
    4308:	fb cf       	rjmp	.-10     	; 0x4300 <SPI_MasterTransceivePacket+0x4a>

		}
		/* Read received data. */
		data = spi->module->DATA;
    430a:	13 96       	adiw	r26, 0x03	; 3
    430c:	2c 91       	ld	r18, X
		spi->dataPacket->receiveData[bytesTransceived] = data;
    430e:	a5 81       	ldd	r26, Z+5	; 0x05
    4310:	b6 81       	ldd	r27, Z+6	; 0x06
    4312:	15 96       	adiw	r26, 0x05	; 5
    4314:	0d 90       	ld	r0, X+
    4316:	bc 91       	ld	r27, X
    4318:	a0 2d       	mov	r26, r0
    431a:	a8 0f       	add	r26, r24
    431c:	b9 1f       	adc	r27, r25
    431e:	2c 93       	st	X, r18
    4320:	01 96       	adiw	r24, 0x01	; 1
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
	while (bytesTransceived < bytesToTransceive) {
    4322:	84 17       	cp	r24, r20
    4324:	20 f4       	brcc	.+8      	; 0x432e <SPI_MasterTransceivePacket+0x78>
    4326:	a5 81       	ldd	r26, Z+5	; 0x05
    4328:	b6 81       	ldd	r27, Z+6	; 0x06
    432a:	dd cf       	rjmp	.-70     	; 0x42e6 <SPI_MasterTransceivePacket+0x30>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
    432c:	40 e0       	ldi	r20, 0x00	; 0

		bytesTransceived++;
	}

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    432e:	a5 81       	ldd	r26, Z+5	; 0x05
    4330:	b6 81       	ldd	r27, Z+6	; 0x06
    4332:	cd 91       	ld	r28, X+
    4334:	dc 91       	ld	r29, X
    4336:	11 97       	sbiw	r26, 0x01	; 1
    4338:	20 97       	sbiw	r28, 0x00	; 0
    433a:	19 f0       	breq	.+6      	; 0x4342 <SPI_MasterTransceivePacket+0x8c>
		/* Release SS to slave(s). */
		SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    433c:	3d 83       	std	Y+5, r19	; 0x05
    433e:	a5 81       	ldd	r26, Z+5	; 0x05
    4340:	b6 81       	ldd	r27, Z+6	; 0x06
	}

	/* Set variables to indicate that transmission is complete. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    4342:	18 96       	adiw	r26, 0x08	; 8
    4344:	4c 93       	st	X, r20
    4346:	18 97       	sbiw	r26, 0x08	; 8
	spi->dataPacket->complete = true;
    4348:	05 80       	ldd	r0, Z+5	; 0x05
    434a:	f6 81       	ldd	r31, Z+6	; 0x06
    434c:	e0 2d       	mov	r30, r0
    434e:	81 e0       	ldi	r24, 0x01	; 1
    4350:	81 87       	std	Z+9, r24	; 0x09

	/* Report success. */
	return true;
}
    4352:	df 91       	pop	r29
    4354:	cf 91       	pop	r28
    4356:	08 95       	ret
	spi->dataPacket = dataPacket;

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    4358:	db 01       	movw	r26, r22
    435a:	c0 cf       	rjmp	.-128    	; 0x42dc <SPI_MasterTransceivePacket+0x26>
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
		return false;
    435c:	80 e0       	ldi	r24, 0x00	; 0
	spi->dataPacket->bytesTransceived = bytesTransceived;
	spi->dataPacket->complete = true;

	/* Report success. */
	return true;
}
    435e:	df 91       	pop	r29
    4360:	cf 91       	pop	r28
    4362:	08 95       	ret

00004364 <swUART_PutChar>:
 *	Input: uint8_t uiData - 8bit char to write
 *	Output: none
 *****************************************************************/
void swUART_PutChar ( uint8_t uiData )
{	 
	asm volatile (
    4364:	1f 93       	push	r17
    4366:	1f b7       	in	r17, 0x3f	; 63
    4368:	1f 93       	push	r17
    436a:	8f 93       	push	r24

0000436c <pchar>:
    436c:	1a e0       	ldi	r17, 0x0A	; 10
    436e:	80 95       	com	r24
    4370:	08 94       	sec

00004372 <pchar0>:
    4372:	10 f4       	brcc	.+4      	; 0x4378 <pchar1>
    4374:	8b 98       	cbi	0x11, 3	; 17
    4376:	02 c0       	rjmp	.+4      	; 0x437c <pchar2>

00004378 <pchar1>:
    4378:	8b 9a       	sbi	0x11, 3	; 17
	...

0000437c <pchar2>:
    437c:	11 d1       	rcall	.+546    	; 0x45a0 <swUART_Delay_Tx>
    437e:	10 d1       	rcall	.+544    	; 0x45a0 <swUART_Delay_Tx>
    4380:	86 95       	lsr	r24
    4382:	1a 95       	dec	r17
    4384:	b1 f7       	brne	.-20     	; 0x4372 <pchar0>
    4386:	8f 91       	pop	r24
    4388:	1f 91       	pop	r17
    438a:	1f bf       	out	0x3f, r17	; 63
    438c:	1f 91       	pop	r17
    438e:	08 95       	ret

00004390 <swUART_ReadChar>:
 *	Input: none
 *	Output: uint8_t - read value
 *****************************************************************/
uint8_t swUART_ReadChar ( void )
{
	asm volatile (
    4390:	3f 93       	push	r19
    4392:	3f b7       	in	r19, 0x3f	; 63
    4394:	3f 93       	push	r19

00004396 <getchar>:
    4396:	39 e0       	ldi	r19, 0x09	; 9

00004398 <getchar1>:
    4398:	92 99       	sbic	0x12, 2	; 18
    439a:	fe cf       	rjmp	.-4      	; 0x4398 <getchar1>
    439c:	08 d1       	rcall	.+528    	; 0x45ae <swUART_Delay_Rx>

0000439e <getchar2>:
    439e:	07 d1       	rcall	.+526    	; 0x45ae <swUART_Delay_Rx>
    43a0:	06 d1       	rcall	.+524    	; 0x45ae <swUART_Delay_Rx>
    43a2:	88 94       	clc
    43a4:	92 99       	sbic	0x12, 2	; 18
    43a6:	08 94       	sec
    43a8:	3a 95       	dec	r19
    43aa:	11 f0       	breq	.+4      	; 0x43b0 <getchar3>
    43ac:	87 95       	ror	r24
    43ae:	f7 cf       	rjmp	.-18     	; 0x439e <getchar2>

000043b0 <getchar3>:
    43b0:	3f 91       	pop	r19
    43b2:	3f bf       	out	0x3f, r19	; 63
    43b4:	3f 91       	pop	r19
    43b6:	08 95       	ret

000043b8 <swUART_ConfigureDevice>:
 *	Input: iIntLevel - the Rx interrupt level 
					   (see swUART_SetRxInterruptLevel function).
 *	Output: none
 *****************************************************************/
void swUART_ConfigureDevice ( int iIntLevel )
{
    43b8:	ef 92       	push	r14
    43ba:	0f 93       	push	r16
    43bc:	cf 93       	push	r28
    43be:	df 93       	push	r29
    43c0:	ec 01       	movw	r28, r24
	// Map port B to Virtual Port 0
	#ifdef UART_PORT_IS_PORTA
		PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTA_gc );	
	#else
		#ifdef UART_PORT_IS_PORTB
			PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTB_gc );
    43c2:	81 e0       	ldi	r24, 0x01	; 1
    43c4:	0e 94 29 20 	call	0x4052	; 0x4052 <PORT_MapVirtualPort0>
			#endif 
		#endif 
	#endif
	
		
	stdout = &file_str;
    43c8:	82 e1       	ldi	r24, 0x12	; 18
    43ca:	92 e2       	ldi	r25, 0x22	; 34
    43cc:	80 93 27 23 	sts	0x2327, r24
    43d0:	90 93 28 23 	sts	0x2328, r25
	stdin = &file_str;
    43d4:	80 93 25 23 	sts	0x2325, r24
    43d8:	90 93 26 23 	sts	0x2326, r25
	
	// configure pin directions
	VPORT0_DIR &= ~(1<<UART_RX_PIN);
    43dc:	82 98       	cbi	0x10, 2	; 16
	VPORT0_DIR |= (1<<UART_TX_PIN);
    43de:	83 9a       	sbi	0x10, 3	; 16
	VPORT0_OUT |= (1<<UART_TX_PIN);
    43e0:	8b 9a       	sbi	0x11, 3	; 17
 *					4 - interrupt enabled at high priority
 *	Output: none
 *****************************************************************/
void swUART_SetRxInterruptLevel ( int iIntLevel )
{
	if (iIntLevel != 0)
    43e2:	20 97       	sbiw	r28, 0x00	; 0
    43e4:	39 f1       	breq	.+78     	; 0x4434 <swUART_ConfigureDevice+0x7c>
	{
		bInterruptEnabled = true;
    43e6:	81 e0       	ldi	r24, 0x01	; 1
    43e8:	80 93 94 22 	sts	0x2294, r24
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    43ec:	80 e2       	ldi	r24, 0x20	; 32
    43ee:	96 e0       	ldi	r25, 0x06	; 6
    43f0:	64 e0       	ldi	r22, 0x04	; 4
    43f2:	40 e0       	ldi	r20, 0x00	; 0
    43f4:	20 e0       	ldi	r18, 0x00	; 0
    43f6:	00 e0       	ldi	r16, 0x00	; 0
    43f8:	52 e0       	ldi	r21, 0x02	; 2
    43fa:	e5 2e       	mov	r14, r21
    43fc:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    4400:	c2 30       	cpi	r28, 0x02	; 2
    4402:	d1 05       	cpc	r29, r1
    4404:	a9 f1       	breq	.+106    	; 0x4470 <swUART_ConfigureDevice+0xb8>
    4406:	c3 30       	cpi	r28, 0x03	; 3
    4408:	d1 05       	cpc	r29, r1
    440a:	2c f5       	brge	.+74     	; 0x4456 <swUART_ConfigureDevice+0x9e>
    440c:	c1 30       	cpi	r28, 0x01	; 1
    440e:	d1 05       	cpc	r29, r1
    4410:	31 f4       	brne	.+12     	; 0x441e <swUART_ConfigureDevice+0x66>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
    4412:	80 e2       	ldi	r24, 0x20	; 32
    4414:	96 e0       	ldi	r25, 0x06	; 6
    4416:	60 e0       	ldi	r22, 0x00	; 0
    4418:	44 e0       	ldi	r20, 0x04	; 4
    441a:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
			break;
			default:
			break;
		}				
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
    441e:	80 91 a2 00 	lds	r24, 0x00A2
    4422:	87 60       	ori	r24, 0x07	; 7
    4424:	e0 ea       	ldi	r30, 0xA0	; 160
    4426:	f0 e0       	ldi	r31, 0x00	; 0
    4428:	82 83       	std	Z+2, r24	; 0x02
	VPORT0_DIR &= ~(1<<UART_RX_PIN);
	VPORT0_DIR |= (1<<UART_TX_PIN);
	VPORT0_OUT |= (1<<UART_TX_PIN);
	
	swUART_SetRxInterruptLevel ( iIntLevel );
}
    442a:	df 91       	pop	r29
    442c:	cf 91       	pop	r28
    442e:	0f 91       	pop	r16
    4430:	ef 90       	pop	r14
    4432:	08 95       	ret
	
		// I don't turn on the interrupt handling for now. The main program will choose what to do.
	}		
	else
	{
		bInterruptEnabled = false;		
    4434:	10 92 94 22 	sts	0x2294, r1
		
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    4438:	80 e2       	ldi	r24, 0x20	; 32
    443a:	96 e0       	ldi	r25, 0x06	; 6
    443c:	64 e0       	ldi	r22, 0x04	; 4
    443e:	40 e0       	ldi	r20, 0x00	; 0
    4440:	20 e0       	ldi	r18, 0x00	; 0
    4442:	00 e0       	ldi	r16, 0x00	; 0
    4444:	37 e0       	ldi	r19, 0x07	; 7
    4446:	e3 2e       	mov	r14, r19
    4448:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
	VPORT0_DIR &= ~(1<<UART_RX_PIN);
	VPORT0_DIR |= (1<<UART_TX_PIN);
	VPORT0_OUT |= (1<<UART_TX_PIN);
	
	swUART_SetRxInterruptLevel ( iIntLevel );
}
    444c:	df 91       	pop	r29
    444e:	cf 91       	pop	r28
    4450:	0f 91       	pop	r16
    4452:	ef 90       	pop	r14
    4454:	08 95       	ret
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    4456:	c3 30       	cpi	r28, 0x03	; 3
    4458:	d1 05       	cpc	r29, r1
    445a:	89 f0       	breq	.+34     	; 0x447e <swUART_ConfigureDevice+0xc6>
    445c:	c4 30       	cpi	r28, 0x04	; 4
    445e:	d1 05       	cpc	r29, r1
    4460:	f1 f6       	brne	.-68     	; 0x441e <swUART_ConfigureDevice+0x66>
			break;
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
			break;
			case 4:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
    4462:	80 e2       	ldi	r24, 0x20	; 32
    4464:	96 e0       	ldi	r25, 0x06	; 6
    4466:	63 e0       	ldi	r22, 0x03	; 3
    4468:	44 e0       	ldi	r20, 0x04	; 4
    446a:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
    446e:	d7 cf       	rjmp	.-82     	; 0x441e <swUART_ConfigureDevice+0x66>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
			break;
			case 2:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_LO_gc, (1<<UART_RX_PIN) );		
    4470:	80 e2       	ldi	r24, 0x20	; 32
    4472:	96 e0       	ldi	r25, 0x06	; 6
    4474:	61 e0       	ldi	r22, 0x01	; 1
    4476:	44 e0       	ldi	r20, 0x04	; 4
    4478:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
    447c:	d0 cf       	rjmp	.-96     	; 0x441e <swUART_ConfigureDevice+0x66>
			break;
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
    447e:	80 e2       	ldi	r24, 0x20	; 32
    4480:	96 e0       	ldi	r25, 0x06	; 6
    4482:	62 e0       	ldi	r22, 0x02	; 2
    4484:	44 e0       	ldi	r20, 0x04	; 4
    4486:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
    448a:	c9 cf       	rjmp	.-110    	; 0x441e <swUART_ConfigureDevice+0x66>

0000448c <swUART_SetRxInterruptLevel>:
 *					3 - interrupt enabled at medium priority
 *					4 - interrupt enabled at high priority
 *	Output: none
 *****************************************************************/
void swUART_SetRxInterruptLevel ( int iIntLevel )
{
    448c:	ef 92       	push	r14
    448e:	0f 93       	push	r16
    4490:	cf 93       	push	r28
    4492:	df 93       	push	r29
    4494:	ec 01       	movw	r28, r24
	if (iIntLevel != 0)
    4496:	00 97       	sbiw	r24, 0x00	; 0
    4498:	39 f1       	breq	.+78     	; 0x44e8 <swUART_SetRxInterruptLevel+0x5c>
	{
		bInterruptEnabled = true;
    449a:	81 e0       	ldi	r24, 0x01	; 1
    449c:	80 93 94 22 	sts	0x2294, r24
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    44a0:	80 e2       	ldi	r24, 0x20	; 32
    44a2:	96 e0       	ldi	r25, 0x06	; 6
    44a4:	64 e0       	ldi	r22, 0x04	; 4
    44a6:	40 e0       	ldi	r20, 0x00	; 0
    44a8:	20 e0       	ldi	r18, 0x00	; 0
    44aa:	00 e0       	ldi	r16, 0x00	; 0
    44ac:	e2 e0       	ldi	r30, 0x02	; 2
    44ae:	ee 2e       	mov	r14, r30
    44b0:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    44b4:	c2 30       	cpi	r28, 0x02	; 2
    44b6:	d1 05       	cpc	r29, r1
    44b8:	a9 f1       	breq	.+106    	; 0x4524 <swUART_SetRxInterruptLevel+0x98>
    44ba:	c3 30       	cpi	r28, 0x03	; 3
    44bc:	d1 05       	cpc	r29, r1
    44be:	2c f5       	brge	.+74     	; 0x450a <swUART_SetRxInterruptLevel+0x7e>
    44c0:	c1 30       	cpi	r28, 0x01	; 1
    44c2:	d1 05       	cpc	r29, r1
    44c4:	31 f4       	brne	.+12     	; 0x44d2 <swUART_SetRxInterruptLevel+0x46>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
    44c6:	80 e2       	ldi	r24, 0x20	; 32
    44c8:	96 e0       	ldi	r25, 0x06	; 6
    44ca:	60 e0       	ldi	r22, 0x00	; 0
    44cc:	44 e0       	ldi	r20, 0x04	; 4
    44ce:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
			break;
			default:
			break;
		}				
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
    44d2:	80 91 a2 00 	lds	r24, 0x00A2
    44d6:	87 60       	ori	r24, 0x07	; 7
    44d8:	e0 ea       	ldi	r30, 0xA0	; 160
    44da:	f0 e0       	ldi	r31, 0x00	; 0
    44dc:	82 83       	std	Z+2, r24	; 0x02
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_INPUT_DISABLE_gc );		
	}
}	
    44de:	df 91       	pop	r29
    44e0:	cf 91       	pop	r28
    44e2:	0f 91       	pop	r16
    44e4:	ef 90       	pop	r14
    44e6:	08 95       	ret
	
		// I don't turn on the interrupt handling for now. The main program will choose what to do.
	}		
	else
	{
		bInterruptEnabled = false;		
    44e8:	10 92 94 22 	sts	0x2294, r1
		
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    44ec:	80 e2       	ldi	r24, 0x20	; 32
    44ee:	96 e0       	ldi	r25, 0x06	; 6
    44f0:	64 e0       	ldi	r22, 0x04	; 4
    44f2:	40 e0       	ldi	r20, 0x00	; 0
    44f4:	20 e0       	ldi	r18, 0x00	; 0
    44f6:	00 e0       	ldi	r16, 0x00	; 0
    44f8:	77 e0       	ldi	r23, 0x07	; 7
    44fa:	e7 2e       	mov	r14, r23
    44fc:	0e 94 0e 20 	call	0x401c	; 0x401c <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_INPUT_DISABLE_gc );		
	}
}	
    4500:	df 91       	pop	r29
    4502:	cf 91       	pop	r28
    4504:	0f 91       	pop	r16
    4506:	ef 90       	pop	r14
    4508:	08 95       	ret
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    450a:	c3 30       	cpi	r28, 0x03	; 3
    450c:	d1 05       	cpc	r29, r1
    450e:	89 f0       	breq	.+34     	; 0x4532 <swUART_SetRxInterruptLevel+0xa6>
    4510:	c4 30       	cpi	r28, 0x04	; 4
    4512:	d1 05       	cpc	r29, r1
    4514:	f1 f6       	brne	.-68     	; 0x44d2 <swUART_SetRxInterruptLevel+0x46>
			break;
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
			break;
			case 4:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
    4516:	80 e2       	ldi	r24, 0x20	; 32
    4518:	96 e0       	ldi	r25, 0x06	; 6
    451a:	63 e0       	ldi	r22, 0x03	; 3
    451c:	44 e0       	ldi	r20, 0x04	; 4
    451e:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
			break;
    4522:	d7 cf       	rjmp	.-82     	; 0x44d2 <swUART_SetRxInterruptLevel+0x46>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
			break;
			case 2:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_LO_gc, (1<<UART_RX_PIN) );		
    4524:	80 e2       	ldi	r24, 0x20	; 32
    4526:	96 e0       	ldi	r25, 0x06	; 6
    4528:	61 e0       	ldi	r22, 0x01	; 1
    452a:	44 e0       	ldi	r20, 0x04	; 4
    452c:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
			break;
    4530:	d0 cf       	rjmp	.-96     	; 0x44d2 <swUART_SetRxInterruptLevel+0x46>
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
    4532:	80 e2       	ldi	r24, 0x20	; 32
    4534:	96 e0       	ldi	r25, 0x06	; 6
    4536:	62 e0       	ldi	r22, 0x02	; 2
    4538:	44 e0       	ldi	r20, 0x04	; 4
    453a:	0e 94 00 20 	call	0x4000	; 0x4000 <PORT_ConfigureInterrupt0>
			break;
    453e:	c9 cf       	rjmp	.-110    	; 0x44d2 <swUART_SetRxInterruptLevel+0x46>

00004540 <swUART_SetInterruptHandler>:
		can be NULL and its as if the interrupt is doing nothing.
 *	Output: none
 *****************************************************************/
void	swUART_SetInterruptHandler ( void (*Handler)( void ) )
{
	swUART_RxHandler = Handler;
    4540:	80 93 92 22 	sts	0x2292, r24
    4544:	90 93 93 22 	sts	0x2293, r25
}
    4548:	08 95       	ret

0000454a <__vector_34>:
 *	Description: ISR for RX interrupt
 *	Input: none
 *	Output: none
 *****************************************************************/
ISR(PORTB_INT0_vect)
{
    454a:	1f 92       	push	r1
    454c:	0f 92       	push	r0
    454e:	0f b6       	in	r0, 0x3f	; 63
    4550:	0f 92       	push	r0
    4552:	11 24       	eor	r1, r1
    4554:	2f 93       	push	r18
    4556:	3f 93       	push	r19
    4558:	4f 93       	push	r20
    455a:	5f 93       	push	r21
    455c:	6f 93       	push	r22
    455e:	7f 93       	push	r23
    4560:	8f 93       	push	r24
    4562:	9f 93       	push	r25
    4564:	af 93       	push	r26
    4566:	bf 93       	push	r27
    4568:	ef 93       	push	r30
    456a:	ff 93       	push	r31
	cli ();
    456c:	f8 94       	cli
	
	if (swUART_RxHandler!=NULL)
    456e:	e0 91 92 22 	lds	r30, 0x2292
    4572:	f0 91 93 22 	lds	r31, 0x2293
    4576:	30 97       	sbiw	r30, 0x00	; 0
    4578:	09 f0       	breq	.+2      	; 0x457c <__vector_34+0x32>
		swUART_RxHandler ( );
    457a:	09 95       	icall
	
	sei ( );
    457c:	78 94       	sei
}
    457e:	ff 91       	pop	r31
    4580:	ef 91       	pop	r30
    4582:	bf 91       	pop	r27
    4584:	af 91       	pop	r26
    4586:	9f 91       	pop	r25
    4588:	8f 91       	pop	r24
    458a:	7f 91       	pop	r23
    458c:	6f 91       	pop	r22
    458e:	5f 91       	pop	r21
    4590:	4f 91       	pop	r20
    4592:	3f 91       	pop	r19
    4594:	2f 91       	pop	r18
    4596:	0f 90       	pop	r0
    4598:	0f be       	out	0x3f, r0	; 63
    459a:	0f 90       	pop	r0
    459c:	1f 90       	pop	r1
    459e:	18 95       	reti

000045a0 <swUART_Delay_Tx>:
 *	Input: none
 *	Output: none
 *****************************************************************/
void swUART_Delay_Tx ( void )
{
	asm volatile (
    45a0:	8f 93       	push	r24

000045a2 <UART_delay>:
    45a2:	8c e8       	ldi	r24, 0x8C	; 140

000045a4 <UART_delay1>:
    45a4:	8a 95       	dec	r24
    45a6:	f1 f7       	brne	.-4      	; 0x45a4 <UART_delay1>
    45a8:	8f 91       	pop	r24
    45aa:	00 00       	nop
    45ac:	08 95       	ret

000045ae <swUART_Delay_Rx>:
	);	
}

void swUART_Delay_Rx ( void )
{
	asm volatile (
    45ae:	8f 93       	push	r24

000045b0 <UART_delay2>:
    45b0:	8c e8       	ldi	r24, 0x8C	; 140

000045b2 <UART_delay3>:
    45b2:	8a 95       	dec	r24
    45b4:	f1 f7       	brne	.-4      	; 0x45b2 <UART_delay3>
    45b6:	8f 91       	pop	r24
    45b8:	00 00       	nop
    45ba:	08 95       	ret

000045bc <TC0_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    45bc:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
    45be:	80 81       	ld	r24, Z
    45c0:	80 7f       	andi	r24, 0xF0	; 240
    45c2:	68 2b       	or	r22, r24
    45c4:	60 83       	st	Z, r22
}
    45c6:	08 95       	ret

000045c8 <TC1_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC1_ConfigClockSource( volatile TC1_t * tc, TC_CLKSEL_t clockSelection )
{
    45c8:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | clockSelection;
    45ca:	80 81       	ld	r24, Z
    45cc:	80 7f       	andi	r24, 0xF0	; 240
    45ce:	68 2b       	or	r22, r24
    45d0:	60 83       	st	Z, r22
}
    45d2:	08 95       	ret

000045d4 <TC0_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    45d4:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
    45d6:	81 81       	ldd	r24, Z+1	; 0x01
    45d8:	88 7f       	andi	r24, 0xF8	; 248
    45da:	68 2b       	or	r22, r24
    45dc:	61 83       	std	Z+1, r22	; 0x01
}
    45de:	08 95       	ret

000045e0 <TC1_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC1_ConfigWGM( volatile TC1_t * tc, TC_WGMODE_t wgm )
{
    45e0:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC1_WGMODE_gm ) | wgm;
    45e2:	81 81       	ldd	r24, Z+1	; 0x01
    45e4:	88 7f       	andi	r24, 0xF8	; 248
    45e6:	68 2b       	or	r22, r24
    45e8:	61 83       	std	Z+1, r22	; 0x01
}
    45ea:	08 95       	ret

000045ec <TC0_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC0_ConfigInputCapture( volatile TC0_t * tc, TC_EVSEL_t eventSource )
{
    45ec:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC0_EVSEL_gm | TC0_EVACT_gm ) ) |
    45ee:	83 81       	ldd	r24, Z+3	; 0x03
    45f0:	80 71       	andi	r24, 0x10	; 16
    45f2:	80 62       	ori	r24, 0x20	; 32
    45f4:	86 2b       	or	r24, r22
    45f6:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    45f8:	08 95       	ret

000045fa <TC1_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC1_ConfigInputCapture( volatile TC1_t * tc, TC_EVSEL_t eventSource )
{
    45fa:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC1_EVSEL_gm | TC1_EVACT_gm ) ) |
    45fc:	83 81       	ldd	r24, Z+3	; 0x03
    45fe:	80 71       	andi	r24, 0x10	; 16
    4600:	80 62       	ori	r24, 0x20	; 32
    4602:	86 2b       	or	r24, r22
    4604:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    4606:	08 95       	ret

00004608 <TC0_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    4608:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    460a:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
    460c:	60 7f       	andi	r22, 0xF0	; 240

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    460e:	68 2b       	or	r22, r24
    4610:	61 83       	std	Z+1, r22	; 0x01
}
    4612:	08 95       	ret

00004614 <TC1_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
    4614:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    4616:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );
    4618:	60 73       	andi	r22, 0x30	; 48

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    461a:	68 2b       	or	r22, r24
    461c:	61 83       	std	Z+1, r22	; 0x01
}
    461e:	08 95       	ret

00004620 <TC0_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    4620:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    4622:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
    4624:	60 7f       	andi	r22, 0xF0	; 240

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    4626:	60 95       	com	r22
    4628:	68 23       	and	r22, r24
    462a:	61 83       	std	Z+1, r22	; 0x01
}
    462c:	08 95       	ret

0000462e <TC1_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
    462e:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    4630:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );
    4632:	60 73       	andi	r22, 0x30	; 48

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    4634:	60 95       	com	r22
    4636:	68 23       	and	r22, r24
    4638:	61 83       	std	Z+1, r22	; 0x01
}
    463a:	08 95       	ret

0000463c <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    463c:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    463e:	86 81       	ldd	r24, Z+6	; 0x06
    4640:	8c 7f       	andi	r24, 0xFC	; 252
    4642:	68 2b       	or	r22, r24
    4644:	66 83       	std	Z+6, r22	; 0x06
}
    4646:	08 95       	ret

00004648 <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
    4648:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    464a:	86 81       	ldd	r24, Z+6	; 0x06
    464c:	8c 7f       	andi	r24, 0xFC	; 252
    464e:	68 2b       	or	r22, r24
    4650:	66 83       	std	Z+6, r22	; 0x06
}
    4652:	08 95       	ret

00004654 <TC0_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC0_SetErrorIntLevel( volatile TC0_t * tc, TC_ERRINTLVL_t intLevel )
{
    4654:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_ERRINTLVL_gm ) | intLevel;
    4656:	86 81       	ldd	r24, Z+6	; 0x06
    4658:	83 7f       	andi	r24, 0xF3	; 243
    465a:	68 2b       	or	r22, r24
    465c:	66 83       	std	Z+6, r22	; 0x06
}
    465e:	08 95       	ret

00004660 <TC1_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC1_SetErrorIntLevel( volatile TC1_t * tc, TC_ERRINTLVL_t intLevel )
{
    4660:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_ERRINTLVL_gm ) | intLevel;
    4662:	86 81       	ldd	r24, Z+6	; 0x06
    4664:	83 7f       	andi	r24, 0xF3	; 243
    4666:	68 2b       	or	r22, r24
    4668:	66 83       	std	Z+6, r22	; 0x06
}
    466a:	08 95       	ret

0000466c <TC0_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCAIntLevel( volatile TC0_t * tc, TC_CCAINTLVL_t intLevel )
{
    466c:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCAINTLVL_gm ) | intLevel;
    466e:	87 81       	ldd	r24, Z+7	; 0x07
    4670:	8c 7f       	andi	r24, 0xFC	; 252
    4672:	68 2b       	or	r22, r24
    4674:	67 83       	std	Z+7, r22	; 0x07
}
    4676:	08 95       	ret

00004678 <TC1_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC1_SetCCAIntLevel( volatile TC1_t * tc, TC_CCAINTLVL_t intLevel )
{
    4678:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCAINTLVL_gm ) | intLevel;
    467a:	87 81       	ldd	r24, Z+7	; 0x07
    467c:	8c 7f       	andi	r24, 0xFC	; 252
    467e:	68 2b       	or	r22, r24
    4680:	67 83       	std	Z+7, r22	; 0x07
}
    4682:	08 95       	ret

00004684 <TC0_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC0_SetCCBIntLevel( volatile TC0_t * tc, TC_CCBINTLVL_t intLevel )
{
    4684:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCBINTLVL_gm ) | intLevel;
    4686:	87 81       	ldd	r24, Z+7	; 0x07
    4688:	83 7f       	andi	r24, 0xF3	; 243
    468a:	68 2b       	or	r22, r24
    468c:	67 83       	std	Z+7, r22	; 0x07
}
    468e:	08 95       	ret

00004690 <TC1_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC1_SetCCBIntLevel( volatile TC1_t * tc, TC_CCBINTLVL_t intLevel )
{
    4690:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCBINTLVL_gm ) | intLevel;
    4692:	87 81       	ldd	r24, Z+7	; 0x07
    4694:	83 7f       	andi	r24, 0xF3	; 243
    4696:	68 2b       	or	r22, r24
    4698:	67 83       	std	Z+7, r22	; 0x07
}
    469a:	08 95       	ret

0000469c <TC0_SetCCCIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCCIntLevel( volatile TC0_t * tc, TC_CCCINTLVL_t intLevel )
{
    469c:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCCINTLVL_gm ) | intLevel;
    469e:	87 81       	ldd	r24, Z+7	; 0x07
    46a0:	8f 7c       	andi	r24, 0xCF	; 207
    46a2:	68 2b       	or	r22, r24
    46a4:	67 83       	std	Z+7, r22	; 0x07
}
    46a6:	08 95       	ret

000046a8 <TC0_SetCCDIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCDIntLevel( volatile TC0_t * tc, TC_CCDINTLVL_t intLevel )
{
    46a8:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCDINTLVL_gm ) | intLevel;
    46aa:	87 81       	ldd	r24, Z+7	; 0x07
    46ac:	8f 73       	andi	r24, 0x3F	; 63
    46ae:	68 2b       	or	r22, r24
    46b0:	67 83       	std	Z+7, r22	; 0x07
}
    46b2:	08 95       	ret

000046b4 <TC0_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 0 module instance.
 */
void TC0_Reset( volatile TC0_t * tc )
{
    46b4:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    46b6:	80 81       	ld	r24, Z
    46b8:	80 7f       	andi	r24, 0xF0	; 240
    46ba:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    46bc:	8c e0       	ldi	r24, 0x0C	; 12
    46be:	81 87       	std	Z+9, r24	; 0x09
}
    46c0:	08 95       	ret

000046c2 <TC1_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 1 module instance.
 */
void TC1_Reset( volatile TC1_t * tc )
{
    46c2:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    46c4:	80 81       	ld	r24, Z
    46c6:	80 7f       	andi	r24, 0xF0	; 240
    46c8:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    46ca:	8c e0       	ldi	r24, 0x0C	; 12
    46cc:	81 87       	std	Z+9, r24	; 0x09
}
    46ce:	08 95       	ret

000046d0 <__umulhisi3>:
    46d0:	53 9f       	mul	r21, r19
    46d2:	c0 01       	movw	r24, r0
    46d4:	42 9f       	mul	r20, r18
    46d6:	b0 01       	movw	r22, r0
    46d8:	52 9f       	mul	r21, r18
    46da:	70 0d       	add	r23, r0
    46dc:	81 1d       	adc	r24, r1
    46de:	11 24       	eor	r1, r1
    46e0:	91 1d       	adc	r25, r1
    46e2:	34 9f       	mul	r19, r20
    46e4:	70 0d       	add	r23, r0
    46e6:	81 1d       	adc	r24, r1
    46e8:	11 24       	eor	r1, r1
    46ea:	91 1d       	adc	r25, r1
    46ec:	08 95       	ret

000046ee <atoi>:
    46ee:	fc 01       	movw	r30, r24
    46f0:	88 27       	eor	r24, r24
    46f2:	99 27       	eor	r25, r25
    46f4:	e8 94       	clt
    46f6:	21 91       	ld	r18, Z+
    46f8:	20 32       	cpi	r18, 0x20	; 32
    46fa:	e9 f3       	breq	.-6      	; 0x46f6 <atoi+0x8>
    46fc:	29 30       	cpi	r18, 0x09	; 9
    46fe:	10 f0       	brcs	.+4      	; 0x4704 <atoi+0x16>
    4700:	2e 30       	cpi	r18, 0x0E	; 14
    4702:	c8 f3       	brcs	.-14     	; 0x46f6 <atoi+0x8>
    4704:	2b 32       	cpi	r18, 0x2B	; 43
    4706:	41 f0       	breq	.+16     	; 0x4718 <atoi+0x2a>
    4708:	2d 32       	cpi	r18, 0x2D	; 45
    470a:	39 f4       	brne	.+14     	; 0x471a <atoi+0x2c>
    470c:	68 94       	set
    470e:	04 c0       	rjmp	.+8      	; 0x4718 <atoi+0x2a>
    4710:	0e 94 27 24 	call	0x484e	; 0x484e <__mulhi_const_10>
    4714:	82 0f       	add	r24, r18
    4716:	91 1d       	adc	r25, r1
    4718:	21 91       	ld	r18, Z+
    471a:	20 53       	subi	r18, 0x30	; 48
    471c:	2a 30       	cpi	r18, 0x0A	; 10
    471e:	c0 f3       	brcs	.-16     	; 0x4710 <atoi+0x22>
    4720:	1e f4       	brtc	.+6      	; 0x4728 <atoi+0x3a>
    4722:	90 95       	com	r25
    4724:	81 95       	neg	r24
    4726:	9f 4f       	sbci	r25, 0xFF	; 255
    4728:	08 95       	ret

0000472a <atol>:
    472a:	1f 93       	push	r17
    472c:	fc 01       	movw	r30, r24
    472e:	99 27       	eor	r25, r25
    4730:	88 27       	eor	r24, r24
    4732:	bc 01       	movw	r22, r24
    4734:	e8 94       	clt
    4736:	11 91       	ld	r17, Z+
    4738:	10 32       	cpi	r17, 0x20	; 32
    473a:	e9 f3       	breq	.-6      	; 0x4736 <atol+0xc>
    473c:	19 30       	cpi	r17, 0x09	; 9
    473e:	10 f0       	brcs	.+4      	; 0x4744 <atol+0x1a>
    4740:	1e 30       	cpi	r17, 0x0E	; 14
    4742:	c8 f3       	brcs	.-14     	; 0x4736 <atol+0xc>
    4744:	1b 32       	cpi	r17, 0x2B	; 43
    4746:	51 f0       	breq	.+20     	; 0x475c <atol+0x32>
    4748:	1d 32       	cpi	r17, 0x2D	; 45
    474a:	49 f4       	brne	.+18     	; 0x475e <atol+0x34>
    474c:	68 94       	set
    474e:	06 c0       	rjmp	.+12     	; 0x475c <atol+0x32>
    4750:	0e 94 12 24 	call	0x4824	; 0x4824 <__mulsi_const_10>
    4754:	61 0f       	add	r22, r17
    4756:	71 1d       	adc	r23, r1
    4758:	81 1d       	adc	r24, r1
    475a:	91 1d       	adc	r25, r1
    475c:	11 91       	ld	r17, Z+
    475e:	10 53       	subi	r17, 0x30	; 48
    4760:	1a 30       	cpi	r17, 0x0A	; 10
    4762:	b0 f3       	brcs	.-20     	; 0x4750 <atol+0x26>
    4764:	3e f4       	brtc	.+14     	; 0x4774 <atol+0x4a>
    4766:	90 95       	com	r25
    4768:	80 95       	com	r24
    476a:	70 95       	com	r23
    476c:	61 95       	neg	r22
    476e:	7f 4f       	sbci	r23, 0xFF	; 255
    4770:	8f 4f       	sbci	r24, 0xFF	; 255
    4772:	9f 4f       	sbci	r25, 0xFF	; 255
    4774:	1f 91       	pop	r17
    4776:	08 95       	ret

00004778 <strtok>:
    4778:	45 e9       	ldi	r20, 0x95	; 149
    477a:	52 e2       	ldi	r21, 0x22	; 34
    477c:	0e 94 eb 23 	call	0x47d6	; 0x47d6 <strtok_r>
    4780:	08 95       	ret

00004782 <strcmp>:
    4782:	fb 01       	movw	r30, r22
    4784:	dc 01       	movw	r26, r24
    4786:	8d 91       	ld	r24, X+
    4788:	01 90       	ld	r0, Z+
    478a:	80 19       	sub	r24, r0
    478c:	01 10       	cpse	r0, r1
    478e:	d9 f3       	breq	.-10     	; 0x4786 <strcmp+0x4>
    4790:	99 0b       	sbc	r25, r25
    4792:	08 95       	ret

00004794 <strcpy>:
    4794:	fb 01       	movw	r30, r22
    4796:	dc 01       	movw	r26, r24
    4798:	01 90       	ld	r0, Z+
    479a:	0d 92       	st	X+, r0
    479c:	00 20       	and	r0, r0
    479e:	e1 f7       	brne	.-8      	; 0x4798 <strcpy+0x4>
    47a0:	08 95       	ret

000047a2 <strstr>:
    47a2:	fb 01       	movw	r30, r22
    47a4:	51 91       	ld	r21, Z+
    47a6:	55 23       	and	r21, r21
    47a8:	a9 f0       	breq	.+42     	; 0x47d4 <strstr+0x32>
    47aa:	bf 01       	movw	r22, r30
    47ac:	dc 01       	movw	r26, r24
    47ae:	4d 91       	ld	r20, X+
    47b0:	45 17       	cp	r20, r21
    47b2:	41 11       	cpse	r20, r1
    47b4:	e1 f7       	brne	.-8      	; 0x47ae <strstr+0xc>
    47b6:	59 f4       	brne	.+22     	; 0x47ce <strstr+0x2c>
    47b8:	cd 01       	movw	r24, r26
    47ba:	01 90       	ld	r0, Z+
    47bc:	00 20       	and	r0, r0
    47be:	49 f0       	breq	.+18     	; 0x47d2 <strstr+0x30>
    47c0:	4d 91       	ld	r20, X+
    47c2:	40 15       	cp	r20, r0
    47c4:	41 11       	cpse	r20, r1
    47c6:	c9 f3       	breq	.-14     	; 0x47ba <strstr+0x18>
    47c8:	fb 01       	movw	r30, r22
    47ca:	41 11       	cpse	r20, r1
    47cc:	ef cf       	rjmp	.-34     	; 0x47ac <strstr+0xa>
    47ce:	81 e0       	ldi	r24, 0x01	; 1
    47d0:	90 e0       	ldi	r25, 0x00	; 0
    47d2:	01 97       	sbiw	r24, 0x01	; 1
    47d4:	08 95       	ret

000047d6 <strtok_r>:
    47d6:	fa 01       	movw	r30, r20
    47d8:	a1 91       	ld	r26, Z+
    47da:	b0 81       	ld	r27, Z
    47dc:	00 97       	sbiw	r24, 0x00	; 0
    47de:	19 f4       	brne	.+6      	; 0x47e6 <strtok_r+0x10>
    47e0:	10 97       	sbiw	r26, 0x00	; 0
    47e2:	e1 f0       	breq	.+56     	; 0x481c <strtok_r+0x46>
    47e4:	cd 01       	movw	r24, r26
    47e6:	dc 01       	movw	r26, r24
    47e8:	cd 01       	movw	r24, r26
    47ea:	0d 90       	ld	r0, X+
    47ec:	00 20       	and	r0, r0
    47ee:	11 f4       	brne	.+4      	; 0x47f4 <strtok_r+0x1e>
    47f0:	c0 01       	movw	r24, r0
    47f2:	13 c0       	rjmp	.+38     	; 0x481a <strtok_r+0x44>
    47f4:	fb 01       	movw	r30, r22
    47f6:	21 91       	ld	r18, Z+
    47f8:	22 23       	and	r18, r18
    47fa:	19 f0       	breq	.+6      	; 0x4802 <strtok_r+0x2c>
    47fc:	20 15       	cp	r18, r0
    47fe:	d9 f7       	brne	.-10     	; 0x47f6 <strtok_r+0x20>
    4800:	f3 cf       	rjmp	.-26     	; 0x47e8 <strtok_r+0x12>
    4802:	fb 01       	movw	r30, r22
    4804:	21 91       	ld	r18, Z+
    4806:	20 15       	cp	r18, r0
    4808:	19 f4       	brne	.+6      	; 0x4810 <strtok_r+0x3a>
    480a:	1e 92       	st	-X, r1
    480c:	11 96       	adiw	r26, 0x01	; 1
    480e:	06 c0       	rjmp	.+12     	; 0x481c <strtok_r+0x46>
    4810:	22 23       	and	r18, r18
    4812:	c1 f7       	brne	.-16     	; 0x4804 <strtok_r+0x2e>
    4814:	0d 90       	ld	r0, X+
    4816:	00 20       	and	r0, r0
    4818:	a1 f7       	brne	.-24     	; 0x4802 <strtok_r+0x2c>
    481a:	d0 01       	movw	r26, r0
    481c:	fa 01       	movw	r30, r20
    481e:	a1 93       	st	Z+, r26
    4820:	b0 83       	st	Z, r27
    4822:	08 95       	ret

00004824 <__mulsi_const_10>:
    4824:	59 2f       	mov	r21, r25
    4826:	48 2f       	mov	r20, r24
    4828:	37 2f       	mov	r19, r23
    482a:	26 2f       	mov	r18, r22
    482c:	66 0f       	add	r22, r22
    482e:	77 1f       	adc	r23, r23
    4830:	88 1f       	adc	r24, r24
    4832:	99 1f       	adc	r25, r25
    4834:	66 0f       	add	r22, r22
    4836:	77 1f       	adc	r23, r23
    4838:	88 1f       	adc	r24, r24
    483a:	99 1f       	adc	r25, r25
    483c:	62 0f       	add	r22, r18
    483e:	73 1f       	adc	r23, r19
    4840:	84 1f       	adc	r24, r20
    4842:	95 1f       	adc	r25, r21
    4844:	66 0f       	add	r22, r22
    4846:	77 1f       	adc	r23, r23
    4848:	88 1f       	adc	r24, r24
    484a:	99 1f       	adc	r25, r25
    484c:	08 95       	ret

0000484e <__mulhi_const_10>:
    484e:	7a e0       	ldi	r23, 0x0A	; 10
    4850:	97 9f       	mul	r25, r23
    4852:	90 2d       	mov	r25, r0
    4854:	87 9f       	mul	r24, r23
    4856:	80 2d       	mov	r24, r0
    4858:	91 0d       	add	r25, r1
    485a:	11 24       	eor	r1, r1
    485c:	08 95       	ret

0000485e <fgetc>:
    485e:	cf 93       	push	r28
    4860:	df 93       	push	r29
    4862:	ec 01       	movw	r28, r24
    4864:	3b 81       	ldd	r19, Y+3	; 0x03
    4866:	30 ff       	sbrs	r19, 0
    4868:	36 c0       	rjmp	.+108    	; 0x48d6 <fgetc+0x78>
    486a:	36 ff       	sbrs	r19, 6
    486c:	09 c0       	rjmp	.+18     	; 0x4880 <fgetc+0x22>
    486e:	3f 7b       	andi	r19, 0xBF	; 191
    4870:	3b 83       	std	Y+3, r19	; 0x03
    4872:	8e 81       	ldd	r24, Y+6	; 0x06
    4874:	9f 81       	ldd	r25, Y+7	; 0x07
    4876:	01 96       	adiw	r24, 0x01	; 1
    4878:	8e 83       	std	Y+6, r24	; 0x06
    487a:	9f 83       	std	Y+7, r25	; 0x07
    487c:	2a 81       	ldd	r18, Y+2	; 0x02
    487e:	29 c0       	rjmp	.+82     	; 0x48d2 <fgetc+0x74>
    4880:	32 ff       	sbrs	r19, 2
    4882:	0f c0       	rjmp	.+30     	; 0x48a2 <fgetc+0x44>
    4884:	e8 81       	ld	r30, Y
    4886:	f9 81       	ldd	r31, Y+1	; 0x01
    4888:	80 81       	ld	r24, Z
    488a:	99 27       	eor	r25, r25
    488c:	87 fd       	sbrc	r24, 7
    488e:	90 95       	com	r25
    4890:	00 97       	sbiw	r24, 0x00	; 0
    4892:	19 f4       	brne	.+6      	; 0x489a <fgetc+0x3c>
    4894:	30 62       	ori	r19, 0x20	; 32
    4896:	3b 83       	std	Y+3, r19	; 0x03
    4898:	1e c0       	rjmp	.+60     	; 0x48d6 <fgetc+0x78>
    489a:	31 96       	adiw	r30, 0x01	; 1
    489c:	e8 83       	st	Y, r30
    489e:	f9 83       	std	Y+1, r31	; 0x01
    48a0:	11 c0       	rjmp	.+34     	; 0x48c4 <fgetc+0x66>
    48a2:	ea 85       	ldd	r30, Y+10	; 0x0a
    48a4:	fb 85       	ldd	r31, Y+11	; 0x0b
    48a6:	ce 01       	movw	r24, r28
    48a8:	09 95       	icall
    48aa:	97 ff       	sbrs	r25, 7
    48ac:	0b c0       	rjmp	.+22     	; 0x48c4 <fgetc+0x66>
    48ae:	2b 81       	ldd	r18, Y+3	; 0x03
    48b0:	3f ef       	ldi	r19, 0xFF	; 255
    48b2:	8f 3f       	cpi	r24, 0xFF	; 255
    48b4:	93 07       	cpc	r25, r19
    48b6:	11 f4       	brne	.+4      	; 0x48bc <fgetc+0x5e>
    48b8:	80 e1       	ldi	r24, 0x10	; 16
    48ba:	01 c0       	rjmp	.+2      	; 0x48be <fgetc+0x60>
    48bc:	80 e2       	ldi	r24, 0x20	; 32
    48be:	82 2b       	or	r24, r18
    48c0:	8b 83       	std	Y+3, r24	; 0x03
    48c2:	09 c0       	rjmp	.+18     	; 0x48d6 <fgetc+0x78>
    48c4:	2e 81       	ldd	r18, Y+6	; 0x06
    48c6:	3f 81       	ldd	r19, Y+7	; 0x07
    48c8:	2f 5f       	subi	r18, 0xFF	; 255
    48ca:	3f 4f       	sbci	r19, 0xFF	; 255
    48cc:	2e 83       	std	Y+6, r18	; 0x06
    48ce:	3f 83       	std	Y+7, r19	; 0x07
    48d0:	28 2f       	mov	r18, r24
    48d2:	30 e0       	ldi	r19, 0x00	; 0
    48d4:	02 c0       	rjmp	.+4      	; 0x48da <fgetc+0x7c>
    48d6:	2f ef       	ldi	r18, 0xFF	; 255
    48d8:	3f ef       	ldi	r19, 0xFF	; 255
    48da:	c9 01       	movw	r24, r18
    48dc:	df 91       	pop	r29
    48de:	cf 91       	pop	r28
    48e0:	08 95       	ret

000048e2 <fputc>:
    48e2:	0f 93       	push	r16
    48e4:	1f 93       	push	r17
    48e6:	cf 93       	push	r28
    48e8:	df 93       	push	r29
    48ea:	8c 01       	movw	r16, r24
    48ec:	eb 01       	movw	r28, r22
    48ee:	8b 81       	ldd	r24, Y+3	; 0x03
    48f0:	81 ff       	sbrs	r24, 1
    48f2:	1b c0       	rjmp	.+54     	; 0x492a <fputc+0x48>
    48f4:	82 ff       	sbrs	r24, 2
    48f6:	0d c0       	rjmp	.+26     	; 0x4912 <fputc+0x30>
    48f8:	2e 81       	ldd	r18, Y+6	; 0x06
    48fa:	3f 81       	ldd	r19, Y+7	; 0x07
    48fc:	8c 81       	ldd	r24, Y+4	; 0x04
    48fe:	9d 81       	ldd	r25, Y+5	; 0x05
    4900:	28 17       	cp	r18, r24
    4902:	39 07       	cpc	r19, r25
    4904:	64 f4       	brge	.+24     	; 0x491e <fputc+0x3c>
    4906:	e8 81       	ld	r30, Y
    4908:	f9 81       	ldd	r31, Y+1	; 0x01
    490a:	01 93       	st	Z+, r16
    490c:	e8 83       	st	Y, r30
    490e:	f9 83       	std	Y+1, r31	; 0x01
    4910:	06 c0       	rjmp	.+12     	; 0x491e <fputc+0x3c>
    4912:	e8 85       	ldd	r30, Y+8	; 0x08
    4914:	f9 85       	ldd	r31, Y+9	; 0x09
    4916:	80 2f       	mov	r24, r16
    4918:	09 95       	icall
    491a:	00 97       	sbiw	r24, 0x00	; 0
    491c:	31 f4       	brne	.+12     	; 0x492a <fputc+0x48>
    491e:	8e 81       	ldd	r24, Y+6	; 0x06
    4920:	9f 81       	ldd	r25, Y+7	; 0x07
    4922:	01 96       	adiw	r24, 0x01	; 1
    4924:	8e 83       	std	Y+6, r24	; 0x06
    4926:	9f 83       	std	Y+7, r25	; 0x07
    4928:	02 c0       	rjmp	.+4      	; 0x492e <fputc+0x4c>
    492a:	0f ef       	ldi	r16, 0xFF	; 255
    492c:	1f ef       	ldi	r17, 0xFF	; 255
    492e:	c8 01       	movw	r24, r16
    4930:	df 91       	pop	r29
    4932:	cf 91       	pop	r28
    4934:	1f 91       	pop	r17
    4936:	0f 91       	pop	r16
    4938:	08 95       	ret

0000493a <gets>:
    493a:	ef 92       	push	r14
    493c:	ff 92       	push	r15
    493e:	0f 93       	push	r16
    4940:	1f 93       	push	r17
    4942:	cf 93       	push	r28
    4944:	df 93       	push	r29
    4946:	ec 01       	movw	r28, r24
    4948:	e0 91 25 23 	lds	r30, 0x2325
    494c:	f0 91 26 23 	lds	r31, 0x2326
    4950:	83 81       	ldd	r24, Z+3	; 0x03
    4952:	80 ff       	sbrs	r24, 0
    4954:	15 c0       	rjmp	.+42     	; 0x4980 <gets+0x46>
    4956:	8e 01       	movw	r16, r28
    4958:	01 c0       	rjmp	.+2      	; 0x495c <gets+0x22>
    495a:	8f 01       	movw	r16, r30
    495c:	80 91 25 23 	lds	r24, 0x2325
    4960:	90 91 26 23 	lds	r25, 0x2326
    4964:	0e 94 2f 24 	call	0x485e	; 0x485e <fgetc>
    4968:	2f ef       	ldi	r18, 0xFF	; 255
    496a:	8f 3f       	cpi	r24, 0xFF	; 255
    496c:	92 07       	cpc	r25, r18
    496e:	41 f0       	breq	.+16     	; 0x4980 <gets+0x46>
    4970:	f8 01       	movw	r30, r16
    4972:	81 93       	st	Z+, r24
    4974:	8a 30       	cpi	r24, 0x0A	; 10
    4976:	91 05       	cpc	r25, r1
    4978:	81 f7       	brne	.-32     	; 0x495a <gets+0x20>
    497a:	f8 01       	movw	r30, r16
    497c:	10 82       	st	Z, r1
    497e:	02 c0       	rjmp	.+4      	; 0x4984 <gets+0x4a>
    4980:	c0 e0       	ldi	r28, 0x00	; 0
    4982:	d0 e0       	ldi	r29, 0x00	; 0
    4984:	7e 01       	movw	r14, r28
    4986:	ce 01       	movw	r24, r28
    4988:	cd b7       	in	r28, 0x3d	; 61
    498a:	de b7       	in	r29, 0x3e	; 62
    498c:	e6 e0       	ldi	r30, 0x06	; 6
    498e:	0c 94 6c 27 	jmp	0x4ed8	; 0x4ed8 <__epilogue_restores__+0x18>

00004992 <printf_P>:
    4992:	a0 e0       	ldi	r26, 0x00	; 0
    4994:	b0 e0       	ldi	r27, 0x00	; 0
    4996:	ef ec       	ldi	r30, 0xCF	; 207
    4998:	f4 e2       	ldi	r31, 0x24	; 36
    499a:	0c 94 57 27 	jmp	0x4eae	; 0x4eae <__prologue_saves__+0x20>
    499e:	fe 01       	movw	r30, r28
    49a0:	35 96       	adiw	r30, 0x05	; 5
    49a2:	61 91       	ld	r22, Z+
    49a4:	71 91       	ld	r23, Z+
    49a6:	80 91 27 23 	lds	r24, 0x2327
    49aa:	90 91 28 23 	lds	r25, 0x2328
    49ae:	dc 01       	movw	r26, r24
    49b0:	13 96       	adiw	r26, 0x03	; 3
    49b2:	2c 91       	ld	r18, X
    49b4:	13 97       	sbiw	r26, 0x03	; 3
    49b6:	28 60       	ori	r18, 0x08	; 8
    49b8:	13 96       	adiw	r26, 0x03	; 3
    49ba:	2c 93       	st	X, r18
    49bc:	af 01       	movw	r20, r30
    49be:	0e 94 ec 24 	call	0x49d8	; 0x49d8 <vfprintf>
    49c2:	e0 91 27 23 	lds	r30, 0x2327
    49c6:	f0 91 28 23 	lds	r31, 0x2328
    49ca:	23 81       	ldd	r18, Z+3	; 0x03
    49cc:	27 7f       	andi	r18, 0xF7	; 247
    49ce:	23 83       	std	Z+3, r18	; 0x03
    49d0:	20 96       	adiw	r28, 0x00	; 0
    49d2:	e2 e0       	ldi	r30, 0x02	; 2
    49d4:	0c 94 70 27 	jmp	0x4ee0	; 0x4ee0 <__epilogue_restores__+0x20>

000049d8 <vfprintf>:
    49d8:	ac e0       	ldi	r26, 0x0C	; 12
    49da:	b0 e0       	ldi	r27, 0x00	; 0
    49dc:	e2 ef       	ldi	r30, 0xF2	; 242
    49de:	f4 e2       	ldi	r31, 0x24	; 36
    49e0:	0c 94 47 27 	jmp	0x4e8e	; 0x4e8e <__prologue_saves__>
    49e4:	6c 01       	movw	r12, r24
    49e6:	1b 01       	movw	r2, r22
    49e8:	8a 01       	movw	r16, r20
    49ea:	fc 01       	movw	r30, r24
    49ec:	16 82       	std	Z+6, r1	; 0x06
    49ee:	17 82       	std	Z+7, r1	; 0x07
    49f0:	83 81       	ldd	r24, Z+3	; 0x03
    49f2:	81 ff       	sbrs	r24, 1
    49f4:	d1 c1       	rjmp	.+930    	; 0x4d98 <vfprintf+0x3c0>
    49f6:	2e 01       	movw	r4, r28
    49f8:	08 94       	sec
    49fa:	41 1c       	adc	r4, r1
    49fc:	51 1c       	adc	r5, r1
    49fe:	f6 01       	movw	r30, r12
    4a00:	93 81       	ldd	r25, Z+3	; 0x03
    4a02:	f1 01       	movw	r30, r2
    4a04:	93 fd       	sbrc	r25, 3
    4a06:	85 91       	lpm	r24, Z+
    4a08:	93 ff       	sbrs	r25, 3
    4a0a:	81 91       	ld	r24, Z+
    4a0c:	1f 01       	movw	r2, r30
    4a0e:	88 23       	and	r24, r24
    4a10:	09 f4       	brne	.+2      	; 0x4a14 <vfprintf+0x3c>
    4a12:	be c1       	rjmp	.+892    	; 0x4d90 <vfprintf+0x3b8>
    4a14:	85 32       	cpi	r24, 0x25	; 37
    4a16:	39 f4       	brne	.+14     	; 0x4a26 <vfprintf+0x4e>
    4a18:	93 fd       	sbrc	r25, 3
    4a1a:	85 91       	lpm	r24, Z+
    4a1c:	93 ff       	sbrs	r25, 3
    4a1e:	81 91       	ld	r24, Z+
    4a20:	1f 01       	movw	r2, r30
    4a22:	85 32       	cpi	r24, 0x25	; 37
    4a24:	29 f4       	brne	.+10     	; 0x4a30 <vfprintf+0x58>
    4a26:	90 e0       	ldi	r25, 0x00	; 0
    4a28:	b6 01       	movw	r22, r12
    4a2a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4a2e:	e7 cf       	rjmp	.-50     	; 0x49fe <vfprintf+0x26>
    4a30:	ee 24       	eor	r14, r14
    4a32:	ff 24       	eor	r15, r15
    4a34:	20 e0       	ldi	r18, 0x00	; 0
    4a36:	20 32       	cpi	r18, 0x20	; 32
    4a38:	b0 f4       	brcc	.+44     	; 0x4a66 <vfprintf+0x8e>
    4a3a:	8b 32       	cpi	r24, 0x2B	; 43
    4a3c:	69 f0       	breq	.+26     	; 0x4a58 <vfprintf+0x80>
    4a3e:	8c 32       	cpi	r24, 0x2C	; 44
    4a40:	28 f4       	brcc	.+10     	; 0x4a4c <vfprintf+0x74>
    4a42:	80 32       	cpi	r24, 0x20	; 32
    4a44:	51 f0       	breq	.+20     	; 0x4a5a <vfprintf+0x82>
    4a46:	83 32       	cpi	r24, 0x23	; 35
    4a48:	71 f4       	brne	.+28     	; 0x4a66 <vfprintf+0x8e>
    4a4a:	0b c0       	rjmp	.+22     	; 0x4a62 <vfprintf+0x8a>
    4a4c:	8d 32       	cpi	r24, 0x2D	; 45
    4a4e:	39 f0       	breq	.+14     	; 0x4a5e <vfprintf+0x86>
    4a50:	80 33       	cpi	r24, 0x30	; 48
    4a52:	49 f4       	brne	.+18     	; 0x4a66 <vfprintf+0x8e>
    4a54:	21 60       	ori	r18, 0x01	; 1
    4a56:	2c c0       	rjmp	.+88     	; 0x4ab0 <vfprintf+0xd8>
    4a58:	22 60       	ori	r18, 0x02	; 2
    4a5a:	24 60       	ori	r18, 0x04	; 4
    4a5c:	29 c0       	rjmp	.+82     	; 0x4ab0 <vfprintf+0xd8>
    4a5e:	28 60       	ori	r18, 0x08	; 8
    4a60:	27 c0       	rjmp	.+78     	; 0x4ab0 <vfprintf+0xd8>
    4a62:	20 61       	ori	r18, 0x10	; 16
    4a64:	25 c0       	rjmp	.+74     	; 0x4ab0 <vfprintf+0xd8>
    4a66:	27 fd       	sbrc	r18, 7
    4a68:	2c c0       	rjmp	.+88     	; 0x4ac2 <vfprintf+0xea>
    4a6a:	38 2f       	mov	r19, r24
    4a6c:	30 53       	subi	r19, 0x30	; 48
    4a6e:	3a 30       	cpi	r19, 0x0A	; 10
    4a70:	98 f4       	brcc	.+38     	; 0x4a98 <vfprintf+0xc0>
    4a72:	26 ff       	sbrs	r18, 6
    4a74:	08 c0       	rjmp	.+16     	; 0x4a86 <vfprintf+0xae>
    4a76:	8e 2d       	mov	r24, r14
    4a78:	88 0f       	add	r24, r24
    4a7a:	e8 2e       	mov	r14, r24
    4a7c:	ee 0c       	add	r14, r14
    4a7e:	ee 0c       	add	r14, r14
    4a80:	e8 0e       	add	r14, r24
    4a82:	e3 0e       	add	r14, r19
    4a84:	15 c0       	rjmp	.+42     	; 0x4ab0 <vfprintf+0xd8>
    4a86:	8f 2d       	mov	r24, r15
    4a88:	88 0f       	add	r24, r24
    4a8a:	f8 2e       	mov	r15, r24
    4a8c:	ff 0c       	add	r15, r15
    4a8e:	ff 0c       	add	r15, r15
    4a90:	f8 0e       	add	r15, r24
    4a92:	f3 0e       	add	r15, r19
    4a94:	20 62       	ori	r18, 0x20	; 32
    4a96:	0c c0       	rjmp	.+24     	; 0x4ab0 <vfprintf+0xd8>
    4a98:	8e 32       	cpi	r24, 0x2E	; 46
    4a9a:	21 f4       	brne	.+8      	; 0x4aa4 <vfprintf+0xcc>
    4a9c:	26 fd       	sbrc	r18, 6
    4a9e:	78 c1       	rjmp	.+752    	; 0x4d90 <vfprintf+0x3b8>
    4aa0:	20 64       	ori	r18, 0x40	; 64
    4aa2:	06 c0       	rjmp	.+12     	; 0x4ab0 <vfprintf+0xd8>
    4aa4:	8c 36       	cpi	r24, 0x6C	; 108
    4aa6:	11 f4       	brne	.+4      	; 0x4aac <vfprintf+0xd4>
    4aa8:	20 68       	ori	r18, 0x80	; 128
    4aaa:	02 c0       	rjmp	.+4      	; 0x4ab0 <vfprintf+0xd8>
    4aac:	88 36       	cpi	r24, 0x68	; 104
    4aae:	49 f4       	brne	.+18     	; 0x4ac2 <vfprintf+0xea>
    4ab0:	f1 01       	movw	r30, r2
    4ab2:	93 fd       	sbrc	r25, 3
    4ab4:	85 91       	lpm	r24, Z+
    4ab6:	93 ff       	sbrs	r25, 3
    4ab8:	81 91       	ld	r24, Z+
    4aba:	1f 01       	movw	r2, r30
    4abc:	88 23       	and	r24, r24
    4abe:	09 f0       	breq	.+2      	; 0x4ac2 <vfprintf+0xea>
    4ac0:	ba cf       	rjmp	.-140    	; 0x4a36 <vfprintf+0x5e>
    4ac2:	98 2f       	mov	r25, r24
    4ac4:	95 54       	subi	r25, 0x45	; 69
    4ac6:	93 30       	cpi	r25, 0x03	; 3
    4ac8:	18 f0       	brcs	.+6      	; 0x4ad0 <vfprintf+0xf8>
    4aca:	90 52       	subi	r25, 0x20	; 32
    4acc:	93 30       	cpi	r25, 0x03	; 3
    4ace:	28 f4       	brcc	.+10     	; 0x4ada <vfprintf+0x102>
    4ad0:	0c 5f       	subi	r16, 0xFC	; 252
    4ad2:	1f 4f       	sbci	r17, 0xFF	; 255
    4ad4:	ff e3       	ldi	r31, 0x3F	; 63
    4ad6:	f9 83       	std	Y+1, r31	; 0x01
    4ad8:	0d c0       	rjmp	.+26     	; 0x4af4 <vfprintf+0x11c>
    4ada:	83 36       	cpi	r24, 0x63	; 99
    4adc:	31 f0       	breq	.+12     	; 0x4aea <vfprintf+0x112>
    4ade:	83 37       	cpi	r24, 0x73	; 115
    4ae0:	71 f0       	breq	.+28     	; 0x4afe <vfprintf+0x126>
    4ae2:	83 35       	cpi	r24, 0x53	; 83
    4ae4:	09 f0       	breq	.+2      	; 0x4ae8 <vfprintf+0x110>
    4ae6:	60 c0       	rjmp	.+192    	; 0x4ba8 <vfprintf+0x1d0>
    4ae8:	22 c0       	rjmp	.+68     	; 0x4b2e <vfprintf+0x156>
    4aea:	f8 01       	movw	r30, r16
    4aec:	80 81       	ld	r24, Z
    4aee:	89 83       	std	Y+1, r24	; 0x01
    4af0:	0e 5f       	subi	r16, 0xFE	; 254
    4af2:	1f 4f       	sbci	r17, 0xFF	; 255
    4af4:	42 01       	movw	r8, r4
    4af6:	71 e0       	ldi	r23, 0x01	; 1
    4af8:	a7 2e       	mov	r10, r23
    4afa:	b1 2c       	mov	r11, r1
    4afc:	16 c0       	rjmp	.+44     	; 0x4b2a <vfprintf+0x152>
    4afe:	62 e0       	ldi	r22, 0x02	; 2
    4b00:	66 2e       	mov	r6, r22
    4b02:	71 2c       	mov	r7, r1
    4b04:	60 0e       	add	r6, r16
    4b06:	71 1e       	adc	r7, r17
    4b08:	f8 01       	movw	r30, r16
    4b0a:	80 80       	ld	r8, Z
    4b0c:	91 80       	ldd	r9, Z+1	; 0x01
    4b0e:	26 ff       	sbrs	r18, 6
    4b10:	03 c0       	rjmp	.+6      	; 0x4b18 <vfprintf+0x140>
    4b12:	6e 2d       	mov	r22, r14
    4b14:	70 e0       	ldi	r23, 0x00	; 0
    4b16:	02 c0       	rjmp	.+4      	; 0x4b1c <vfprintf+0x144>
    4b18:	6f ef       	ldi	r22, 0xFF	; 255
    4b1a:	7f ef       	ldi	r23, 0xFF	; 255
    4b1c:	c4 01       	movw	r24, r8
    4b1e:	2c 87       	std	Y+12, r18	; 0x0c
    4b20:	0e 94 de 26 	call	0x4dbc	; 0x4dbc <strnlen>
    4b24:	5c 01       	movw	r10, r24
    4b26:	83 01       	movw	r16, r6
    4b28:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b2a:	2f 77       	andi	r18, 0x7F	; 127
    4b2c:	17 c0       	rjmp	.+46     	; 0x4b5c <vfprintf+0x184>
    4b2e:	52 e0       	ldi	r21, 0x02	; 2
    4b30:	65 2e       	mov	r6, r21
    4b32:	71 2c       	mov	r7, r1
    4b34:	60 0e       	add	r6, r16
    4b36:	71 1e       	adc	r7, r17
    4b38:	f8 01       	movw	r30, r16
    4b3a:	80 80       	ld	r8, Z
    4b3c:	91 80       	ldd	r9, Z+1	; 0x01
    4b3e:	26 ff       	sbrs	r18, 6
    4b40:	03 c0       	rjmp	.+6      	; 0x4b48 <vfprintf+0x170>
    4b42:	6e 2d       	mov	r22, r14
    4b44:	70 e0       	ldi	r23, 0x00	; 0
    4b46:	02 c0       	rjmp	.+4      	; 0x4b4c <vfprintf+0x174>
    4b48:	6f ef       	ldi	r22, 0xFF	; 255
    4b4a:	7f ef       	ldi	r23, 0xFF	; 255
    4b4c:	c4 01       	movw	r24, r8
    4b4e:	2c 87       	std	Y+12, r18	; 0x0c
    4b50:	0e 94 d3 26 	call	0x4da6	; 0x4da6 <strnlen_P>
    4b54:	5c 01       	movw	r10, r24
    4b56:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b58:	20 68       	ori	r18, 0x80	; 128
    4b5a:	83 01       	movw	r16, r6
    4b5c:	23 fd       	sbrc	r18, 3
    4b5e:	20 c0       	rjmp	.+64     	; 0x4ba0 <vfprintf+0x1c8>
    4b60:	08 c0       	rjmp	.+16     	; 0x4b72 <vfprintf+0x19a>
    4b62:	80 e2       	ldi	r24, 0x20	; 32
    4b64:	90 e0       	ldi	r25, 0x00	; 0
    4b66:	b6 01       	movw	r22, r12
    4b68:	2c 87       	std	Y+12, r18	; 0x0c
    4b6a:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4b6e:	fa 94       	dec	r15
    4b70:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b72:	8f 2d       	mov	r24, r15
    4b74:	90 e0       	ldi	r25, 0x00	; 0
    4b76:	a8 16       	cp	r10, r24
    4b78:	b9 06       	cpc	r11, r25
    4b7a:	98 f3       	brcs	.-26     	; 0x4b62 <vfprintf+0x18a>
    4b7c:	11 c0       	rjmp	.+34     	; 0x4ba0 <vfprintf+0x1c8>
    4b7e:	f4 01       	movw	r30, r8
    4b80:	27 fd       	sbrc	r18, 7
    4b82:	85 91       	lpm	r24, Z+
    4b84:	27 ff       	sbrs	r18, 7
    4b86:	81 91       	ld	r24, Z+
    4b88:	4f 01       	movw	r8, r30
    4b8a:	90 e0       	ldi	r25, 0x00	; 0
    4b8c:	b6 01       	movw	r22, r12
    4b8e:	2c 87       	std	Y+12, r18	; 0x0c
    4b90:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4b94:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b96:	f1 10       	cpse	r15, r1
    4b98:	fa 94       	dec	r15
    4b9a:	08 94       	sec
    4b9c:	a1 08       	sbc	r10, r1
    4b9e:	b1 08       	sbc	r11, r1
    4ba0:	a1 14       	cp	r10, r1
    4ba2:	b1 04       	cpc	r11, r1
    4ba4:	61 f7       	brne	.-40     	; 0x4b7e <vfprintf+0x1a6>
    4ba6:	f1 c0       	rjmp	.+482    	; 0x4d8a <vfprintf+0x3b2>
    4ba8:	84 36       	cpi	r24, 0x64	; 100
    4baa:	11 f0       	breq	.+4      	; 0x4bb0 <vfprintf+0x1d8>
    4bac:	89 36       	cpi	r24, 0x69	; 105
    4bae:	49 f5       	brne	.+82     	; 0x4c02 <vfprintf+0x22a>
    4bb0:	27 ff       	sbrs	r18, 7
    4bb2:	08 c0       	rjmp	.+16     	; 0x4bc4 <vfprintf+0x1ec>
    4bb4:	f8 01       	movw	r30, r16
    4bb6:	60 81       	ld	r22, Z
    4bb8:	71 81       	ldd	r23, Z+1	; 0x01
    4bba:	82 81       	ldd	r24, Z+2	; 0x02
    4bbc:	93 81       	ldd	r25, Z+3	; 0x03
    4bbe:	0c 5f       	subi	r16, 0xFC	; 252
    4bc0:	1f 4f       	sbci	r17, 0xFF	; 255
    4bc2:	09 c0       	rjmp	.+18     	; 0x4bd6 <vfprintf+0x1fe>
    4bc4:	f8 01       	movw	r30, r16
    4bc6:	60 81       	ld	r22, Z
    4bc8:	71 81       	ldd	r23, Z+1	; 0x01
    4bca:	88 27       	eor	r24, r24
    4bcc:	77 fd       	sbrc	r23, 7
    4bce:	80 95       	com	r24
    4bd0:	98 2f       	mov	r25, r24
    4bd2:	0e 5f       	subi	r16, 0xFE	; 254
    4bd4:	1f 4f       	sbci	r17, 0xFF	; 255
    4bd6:	4f e6       	ldi	r20, 0x6F	; 111
    4bd8:	b4 2e       	mov	r11, r20
    4bda:	b2 22       	and	r11, r18
    4bdc:	97 ff       	sbrs	r25, 7
    4bde:	09 c0       	rjmp	.+18     	; 0x4bf2 <vfprintf+0x21a>
    4be0:	90 95       	com	r25
    4be2:	80 95       	com	r24
    4be4:	70 95       	com	r23
    4be6:	61 95       	neg	r22
    4be8:	7f 4f       	sbci	r23, 0xFF	; 255
    4bea:	8f 4f       	sbci	r24, 0xFF	; 255
    4bec:	9f 4f       	sbci	r25, 0xFF	; 255
    4bee:	f0 e8       	ldi	r31, 0x80	; 128
    4bf0:	bf 2a       	or	r11, r31
    4bf2:	a2 01       	movw	r20, r4
    4bf4:	2a e0       	ldi	r18, 0x0A	; 10
    4bf6:	30 e0       	ldi	r19, 0x00	; 0
    4bf8:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__ultoa_invert>
    4bfc:	78 2e       	mov	r7, r24
    4bfe:	74 18       	sub	r7, r4
    4c00:	45 c0       	rjmp	.+138    	; 0x4c8c <vfprintf+0x2b4>
    4c02:	85 37       	cpi	r24, 0x75	; 117
    4c04:	31 f4       	brne	.+12     	; 0x4c12 <vfprintf+0x23a>
    4c06:	3f ee       	ldi	r19, 0xEF	; 239
    4c08:	b3 2e       	mov	r11, r19
    4c0a:	b2 22       	and	r11, r18
    4c0c:	2a e0       	ldi	r18, 0x0A	; 10
    4c0e:	30 e0       	ldi	r19, 0x00	; 0
    4c10:	25 c0       	rjmp	.+74     	; 0x4c5c <vfprintf+0x284>
    4c12:	99 ef       	ldi	r25, 0xF9	; 249
    4c14:	b9 2e       	mov	r11, r25
    4c16:	b2 22       	and	r11, r18
    4c18:	8f 36       	cpi	r24, 0x6F	; 111
    4c1a:	c1 f0       	breq	.+48     	; 0x4c4c <vfprintf+0x274>
    4c1c:	80 37       	cpi	r24, 0x70	; 112
    4c1e:	20 f4       	brcc	.+8      	; 0x4c28 <vfprintf+0x250>
    4c20:	88 35       	cpi	r24, 0x58	; 88
    4c22:	09 f0       	breq	.+2      	; 0x4c26 <vfprintf+0x24e>
    4c24:	b5 c0       	rjmp	.+362    	; 0x4d90 <vfprintf+0x3b8>
    4c26:	0d c0       	rjmp	.+26     	; 0x4c42 <vfprintf+0x26a>
    4c28:	80 37       	cpi	r24, 0x70	; 112
    4c2a:	21 f0       	breq	.+8      	; 0x4c34 <vfprintf+0x25c>
    4c2c:	88 37       	cpi	r24, 0x78	; 120
    4c2e:	09 f0       	breq	.+2      	; 0x4c32 <vfprintf+0x25a>
    4c30:	af c0       	rjmp	.+350    	; 0x4d90 <vfprintf+0x3b8>
    4c32:	02 c0       	rjmp	.+4      	; 0x4c38 <vfprintf+0x260>
    4c34:	20 e1       	ldi	r18, 0x10	; 16
    4c36:	b2 2a       	or	r11, r18
    4c38:	b4 fe       	sbrs	r11, 4
    4c3a:	0b c0       	rjmp	.+22     	; 0x4c52 <vfprintf+0x27a>
    4c3c:	84 e0       	ldi	r24, 0x04	; 4
    4c3e:	b8 2a       	or	r11, r24
    4c40:	08 c0       	rjmp	.+16     	; 0x4c52 <vfprintf+0x27a>
    4c42:	b4 fe       	sbrs	r11, 4
    4c44:	09 c0       	rjmp	.+18     	; 0x4c58 <vfprintf+0x280>
    4c46:	e6 e0       	ldi	r30, 0x06	; 6
    4c48:	be 2a       	or	r11, r30
    4c4a:	06 c0       	rjmp	.+12     	; 0x4c58 <vfprintf+0x280>
    4c4c:	28 e0       	ldi	r18, 0x08	; 8
    4c4e:	30 e0       	ldi	r19, 0x00	; 0
    4c50:	05 c0       	rjmp	.+10     	; 0x4c5c <vfprintf+0x284>
    4c52:	20 e1       	ldi	r18, 0x10	; 16
    4c54:	30 e0       	ldi	r19, 0x00	; 0
    4c56:	02 c0       	rjmp	.+4      	; 0x4c5c <vfprintf+0x284>
    4c58:	20 e1       	ldi	r18, 0x10	; 16
    4c5a:	32 e0       	ldi	r19, 0x02	; 2
    4c5c:	b7 fe       	sbrs	r11, 7
    4c5e:	08 c0       	rjmp	.+16     	; 0x4c70 <vfprintf+0x298>
    4c60:	f8 01       	movw	r30, r16
    4c62:	60 81       	ld	r22, Z
    4c64:	71 81       	ldd	r23, Z+1	; 0x01
    4c66:	82 81       	ldd	r24, Z+2	; 0x02
    4c68:	93 81       	ldd	r25, Z+3	; 0x03
    4c6a:	0c 5f       	subi	r16, 0xFC	; 252
    4c6c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c6e:	07 c0       	rjmp	.+14     	; 0x4c7e <vfprintf+0x2a6>
    4c70:	f8 01       	movw	r30, r16
    4c72:	60 81       	ld	r22, Z
    4c74:	71 81       	ldd	r23, Z+1	; 0x01
    4c76:	80 e0       	ldi	r24, 0x00	; 0
    4c78:	90 e0       	ldi	r25, 0x00	; 0
    4c7a:	0e 5f       	subi	r16, 0xFE	; 254
    4c7c:	1f 4f       	sbci	r17, 0xFF	; 255
    4c7e:	a2 01       	movw	r20, r4
    4c80:	0e 94 e9 26 	call	0x4dd2	; 0x4dd2 <__ultoa_invert>
    4c84:	78 2e       	mov	r7, r24
    4c86:	74 18       	sub	r7, r4
    4c88:	ff e7       	ldi	r31, 0x7F	; 127
    4c8a:	bf 22       	and	r11, r31
    4c8c:	b6 fe       	sbrs	r11, 6
    4c8e:	0b c0       	rjmp	.+22     	; 0x4ca6 <vfprintf+0x2ce>
    4c90:	2e ef       	ldi	r18, 0xFE	; 254
    4c92:	b2 22       	and	r11, r18
    4c94:	7e 14       	cp	r7, r14
    4c96:	38 f4       	brcc	.+14     	; 0x4ca6 <vfprintf+0x2ce>
    4c98:	b4 fe       	sbrs	r11, 4
    4c9a:	07 c0       	rjmp	.+14     	; 0x4caa <vfprintf+0x2d2>
    4c9c:	b2 fc       	sbrc	r11, 2
    4c9e:	05 c0       	rjmp	.+10     	; 0x4caa <vfprintf+0x2d2>
    4ca0:	8f ee       	ldi	r24, 0xEF	; 239
    4ca2:	b8 22       	and	r11, r24
    4ca4:	02 c0       	rjmp	.+4      	; 0x4caa <vfprintf+0x2d2>
    4ca6:	a7 2c       	mov	r10, r7
    4ca8:	01 c0       	rjmp	.+2      	; 0x4cac <vfprintf+0x2d4>
    4caa:	ae 2c       	mov	r10, r14
    4cac:	8b 2d       	mov	r24, r11
    4cae:	90 e0       	ldi	r25, 0x00	; 0
    4cb0:	b4 fe       	sbrs	r11, 4
    4cb2:	0d c0       	rjmp	.+26     	; 0x4cce <vfprintf+0x2f6>
    4cb4:	fe 01       	movw	r30, r28
    4cb6:	e7 0d       	add	r30, r7
    4cb8:	f1 1d       	adc	r31, r1
    4cba:	20 81       	ld	r18, Z
    4cbc:	20 33       	cpi	r18, 0x30	; 48
    4cbe:	19 f4       	brne	.+6      	; 0x4cc6 <vfprintf+0x2ee>
    4cc0:	e9 ee       	ldi	r30, 0xE9	; 233
    4cc2:	be 22       	and	r11, r30
    4cc4:	09 c0       	rjmp	.+18     	; 0x4cd8 <vfprintf+0x300>
    4cc6:	a3 94       	inc	r10
    4cc8:	b2 fe       	sbrs	r11, 2
    4cca:	06 c0       	rjmp	.+12     	; 0x4cd8 <vfprintf+0x300>
    4ccc:	04 c0       	rjmp	.+8      	; 0x4cd6 <vfprintf+0x2fe>
    4cce:	86 78       	andi	r24, 0x86	; 134
    4cd0:	90 70       	andi	r25, 0x00	; 0
    4cd2:	00 97       	sbiw	r24, 0x00	; 0
    4cd4:	09 f0       	breq	.+2      	; 0x4cd8 <vfprintf+0x300>
    4cd6:	a3 94       	inc	r10
    4cd8:	8b 2c       	mov	r8, r11
    4cda:	99 24       	eor	r9, r9
    4cdc:	b3 fc       	sbrc	r11, 3
    4cde:	14 c0       	rjmp	.+40     	; 0x4d08 <vfprintf+0x330>
    4ce0:	b0 fe       	sbrs	r11, 0
    4ce2:	0f c0       	rjmp	.+30     	; 0x4d02 <vfprintf+0x32a>
    4ce4:	af 14       	cp	r10, r15
    4ce6:	28 f4       	brcc	.+10     	; 0x4cf2 <vfprintf+0x31a>
    4ce8:	e7 2c       	mov	r14, r7
    4cea:	ef 0c       	add	r14, r15
    4cec:	ea 18       	sub	r14, r10
    4cee:	af 2c       	mov	r10, r15
    4cf0:	08 c0       	rjmp	.+16     	; 0x4d02 <vfprintf+0x32a>
    4cf2:	e7 2c       	mov	r14, r7
    4cf4:	06 c0       	rjmp	.+12     	; 0x4d02 <vfprintf+0x32a>
    4cf6:	80 e2       	ldi	r24, 0x20	; 32
    4cf8:	90 e0       	ldi	r25, 0x00	; 0
    4cfa:	b6 01       	movw	r22, r12
    4cfc:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4d00:	a3 94       	inc	r10
    4d02:	af 14       	cp	r10, r15
    4d04:	c0 f3       	brcs	.-16     	; 0x4cf6 <vfprintf+0x31e>
    4d06:	04 c0       	rjmp	.+8      	; 0x4d10 <vfprintf+0x338>
    4d08:	af 14       	cp	r10, r15
    4d0a:	10 f4       	brcc	.+4      	; 0x4d10 <vfprintf+0x338>
    4d0c:	fa 18       	sub	r15, r10
    4d0e:	01 c0       	rjmp	.+2      	; 0x4d12 <vfprintf+0x33a>
    4d10:	ff 24       	eor	r15, r15
    4d12:	84 fe       	sbrs	r8, 4
    4d14:	0f c0       	rjmp	.+30     	; 0x4d34 <vfprintf+0x35c>
    4d16:	80 e3       	ldi	r24, 0x30	; 48
    4d18:	90 e0       	ldi	r25, 0x00	; 0
    4d1a:	b6 01       	movw	r22, r12
    4d1c:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4d20:	82 fe       	sbrs	r8, 2
    4d22:	1f c0       	rjmp	.+62     	; 0x4d62 <vfprintf+0x38a>
    4d24:	81 fe       	sbrs	r8, 1
    4d26:	03 c0       	rjmp	.+6      	; 0x4d2e <vfprintf+0x356>
    4d28:	88 e5       	ldi	r24, 0x58	; 88
    4d2a:	90 e0       	ldi	r25, 0x00	; 0
    4d2c:	10 c0       	rjmp	.+32     	; 0x4d4e <vfprintf+0x376>
    4d2e:	88 e7       	ldi	r24, 0x78	; 120
    4d30:	90 e0       	ldi	r25, 0x00	; 0
    4d32:	0d c0       	rjmp	.+26     	; 0x4d4e <vfprintf+0x376>
    4d34:	c4 01       	movw	r24, r8
    4d36:	86 78       	andi	r24, 0x86	; 134
    4d38:	90 70       	andi	r25, 0x00	; 0
    4d3a:	00 97       	sbiw	r24, 0x00	; 0
    4d3c:	91 f0       	breq	.+36     	; 0x4d62 <vfprintf+0x38a>
    4d3e:	81 fc       	sbrc	r8, 1
    4d40:	02 c0       	rjmp	.+4      	; 0x4d46 <vfprintf+0x36e>
    4d42:	80 e2       	ldi	r24, 0x20	; 32
    4d44:	01 c0       	rjmp	.+2      	; 0x4d48 <vfprintf+0x370>
    4d46:	8b e2       	ldi	r24, 0x2B	; 43
    4d48:	b7 fc       	sbrc	r11, 7
    4d4a:	8d e2       	ldi	r24, 0x2D	; 45
    4d4c:	90 e0       	ldi	r25, 0x00	; 0
    4d4e:	b6 01       	movw	r22, r12
    4d50:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4d54:	06 c0       	rjmp	.+12     	; 0x4d62 <vfprintf+0x38a>
    4d56:	80 e3       	ldi	r24, 0x30	; 48
    4d58:	90 e0       	ldi	r25, 0x00	; 0
    4d5a:	b6 01       	movw	r22, r12
    4d5c:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4d60:	ea 94       	dec	r14
    4d62:	7e 14       	cp	r7, r14
    4d64:	c0 f3       	brcs	.-16     	; 0x4d56 <vfprintf+0x37e>
    4d66:	7a 94       	dec	r7
    4d68:	f2 01       	movw	r30, r4
    4d6a:	e7 0d       	add	r30, r7
    4d6c:	f1 1d       	adc	r31, r1
    4d6e:	80 81       	ld	r24, Z
    4d70:	90 e0       	ldi	r25, 0x00	; 0
    4d72:	b6 01       	movw	r22, r12
    4d74:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4d78:	77 20       	and	r7, r7
    4d7a:	a9 f7       	brne	.-22     	; 0x4d66 <vfprintf+0x38e>
    4d7c:	06 c0       	rjmp	.+12     	; 0x4d8a <vfprintf+0x3b2>
    4d7e:	80 e2       	ldi	r24, 0x20	; 32
    4d80:	90 e0       	ldi	r25, 0x00	; 0
    4d82:	b6 01       	movw	r22, r12
    4d84:	0e 94 71 24 	call	0x48e2	; 0x48e2 <fputc>
    4d88:	fa 94       	dec	r15
    4d8a:	ff 20       	and	r15, r15
    4d8c:	c1 f7       	brne	.-16     	; 0x4d7e <vfprintf+0x3a6>
    4d8e:	37 ce       	rjmp	.-914    	; 0x49fe <vfprintf+0x26>
    4d90:	f6 01       	movw	r30, r12
    4d92:	26 81       	ldd	r18, Z+6	; 0x06
    4d94:	37 81       	ldd	r19, Z+7	; 0x07
    4d96:	02 c0       	rjmp	.+4      	; 0x4d9c <vfprintf+0x3c4>
    4d98:	2f ef       	ldi	r18, 0xFF	; 255
    4d9a:	3f ef       	ldi	r19, 0xFF	; 255
    4d9c:	c9 01       	movw	r24, r18
    4d9e:	2c 96       	adiw	r28, 0x0c	; 12
    4da0:	e2 e1       	ldi	r30, 0x12	; 18
    4da2:	0c 94 60 27 	jmp	0x4ec0	; 0x4ec0 <__epilogue_restores__>

00004da6 <strnlen_P>:
    4da6:	fc 01       	movw	r30, r24
    4da8:	05 90       	lpm	r0, Z+
    4daa:	61 50       	subi	r22, 0x01	; 1
    4dac:	70 40       	sbci	r23, 0x00	; 0
    4dae:	01 10       	cpse	r0, r1
    4db0:	d8 f7       	brcc	.-10     	; 0x4da8 <strnlen_P+0x2>
    4db2:	80 95       	com	r24
    4db4:	90 95       	com	r25
    4db6:	8e 0f       	add	r24, r30
    4db8:	9f 1f       	adc	r25, r31
    4dba:	08 95       	ret

00004dbc <strnlen>:
    4dbc:	fc 01       	movw	r30, r24
    4dbe:	61 50       	subi	r22, 0x01	; 1
    4dc0:	70 40       	sbci	r23, 0x00	; 0
    4dc2:	01 90       	ld	r0, Z+
    4dc4:	01 10       	cpse	r0, r1
    4dc6:	d8 f7       	brcc	.-10     	; 0x4dbe <strnlen+0x2>
    4dc8:	80 95       	com	r24
    4dca:	90 95       	com	r25
    4dcc:	8e 0f       	add	r24, r30
    4dce:	9f 1f       	adc	r25, r31
    4dd0:	08 95       	ret

00004dd2 <__ultoa_invert>:
    4dd2:	fa 01       	movw	r30, r20
    4dd4:	aa 27       	eor	r26, r26
    4dd6:	28 30       	cpi	r18, 0x08	; 8
    4dd8:	51 f1       	breq	.+84     	; 0x4e2e <__ultoa_invert+0x5c>
    4dda:	20 31       	cpi	r18, 0x10	; 16
    4ddc:	81 f1       	breq	.+96     	; 0x4e3e <__ultoa_invert+0x6c>
    4dde:	e8 94       	clt
    4de0:	6f 93       	push	r22
    4de2:	6e 7f       	andi	r22, 0xFE	; 254
    4de4:	6e 5f       	subi	r22, 0xFE	; 254
    4de6:	7f 4f       	sbci	r23, 0xFF	; 255
    4de8:	8f 4f       	sbci	r24, 0xFF	; 255
    4dea:	9f 4f       	sbci	r25, 0xFF	; 255
    4dec:	af 4f       	sbci	r26, 0xFF	; 255
    4dee:	b1 e0       	ldi	r27, 0x01	; 1
    4df0:	3e d0       	rcall	.+124    	; 0x4e6e <__ultoa_invert+0x9c>
    4df2:	b4 e0       	ldi	r27, 0x04	; 4
    4df4:	3c d0       	rcall	.+120    	; 0x4e6e <__ultoa_invert+0x9c>
    4df6:	67 0f       	add	r22, r23
    4df8:	78 1f       	adc	r23, r24
    4dfa:	89 1f       	adc	r24, r25
    4dfc:	9a 1f       	adc	r25, r26
    4dfe:	a1 1d       	adc	r26, r1
    4e00:	68 0f       	add	r22, r24
    4e02:	79 1f       	adc	r23, r25
    4e04:	8a 1f       	adc	r24, r26
    4e06:	91 1d       	adc	r25, r1
    4e08:	a1 1d       	adc	r26, r1
    4e0a:	6a 0f       	add	r22, r26
    4e0c:	71 1d       	adc	r23, r1
    4e0e:	81 1d       	adc	r24, r1
    4e10:	91 1d       	adc	r25, r1
    4e12:	a1 1d       	adc	r26, r1
    4e14:	20 d0       	rcall	.+64     	; 0x4e56 <__ultoa_invert+0x84>
    4e16:	09 f4       	brne	.+2      	; 0x4e1a <__ultoa_invert+0x48>
    4e18:	68 94       	set
    4e1a:	3f 91       	pop	r19
    4e1c:	2a e0       	ldi	r18, 0x0A	; 10
    4e1e:	26 9f       	mul	r18, r22
    4e20:	11 24       	eor	r1, r1
    4e22:	30 19       	sub	r19, r0
    4e24:	30 5d       	subi	r19, 0xD0	; 208
    4e26:	31 93       	st	Z+, r19
    4e28:	de f6       	brtc	.-74     	; 0x4de0 <__ultoa_invert+0xe>
    4e2a:	cf 01       	movw	r24, r30
    4e2c:	08 95       	ret
    4e2e:	46 2f       	mov	r20, r22
    4e30:	47 70       	andi	r20, 0x07	; 7
    4e32:	40 5d       	subi	r20, 0xD0	; 208
    4e34:	41 93       	st	Z+, r20
    4e36:	b3 e0       	ldi	r27, 0x03	; 3
    4e38:	0f d0       	rcall	.+30     	; 0x4e58 <__ultoa_invert+0x86>
    4e3a:	c9 f7       	brne	.-14     	; 0x4e2e <__ultoa_invert+0x5c>
    4e3c:	f6 cf       	rjmp	.-20     	; 0x4e2a <__ultoa_invert+0x58>
    4e3e:	46 2f       	mov	r20, r22
    4e40:	4f 70       	andi	r20, 0x0F	; 15
    4e42:	40 5d       	subi	r20, 0xD0	; 208
    4e44:	4a 33       	cpi	r20, 0x3A	; 58
    4e46:	18 f0       	brcs	.+6      	; 0x4e4e <__ultoa_invert+0x7c>
    4e48:	49 5d       	subi	r20, 0xD9	; 217
    4e4a:	31 fd       	sbrc	r19, 1
    4e4c:	40 52       	subi	r20, 0x20	; 32
    4e4e:	41 93       	st	Z+, r20
    4e50:	02 d0       	rcall	.+4      	; 0x4e56 <__ultoa_invert+0x84>
    4e52:	a9 f7       	brne	.-22     	; 0x4e3e <__ultoa_invert+0x6c>
    4e54:	ea cf       	rjmp	.-44     	; 0x4e2a <__ultoa_invert+0x58>
    4e56:	b4 e0       	ldi	r27, 0x04	; 4
    4e58:	a6 95       	lsr	r26
    4e5a:	97 95       	ror	r25
    4e5c:	87 95       	ror	r24
    4e5e:	77 95       	ror	r23
    4e60:	67 95       	ror	r22
    4e62:	ba 95       	dec	r27
    4e64:	c9 f7       	brne	.-14     	; 0x4e58 <__ultoa_invert+0x86>
    4e66:	00 97       	sbiw	r24, 0x00	; 0
    4e68:	61 05       	cpc	r22, r1
    4e6a:	71 05       	cpc	r23, r1
    4e6c:	08 95       	ret
    4e6e:	9b 01       	movw	r18, r22
    4e70:	ac 01       	movw	r20, r24
    4e72:	0a 2e       	mov	r0, r26
    4e74:	06 94       	lsr	r0
    4e76:	57 95       	ror	r21
    4e78:	47 95       	ror	r20
    4e7a:	37 95       	ror	r19
    4e7c:	27 95       	ror	r18
    4e7e:	ba 95       	dec	r27
    4e80:	c9 f7       	brne	.-14     	; 0x4e74 <__ultoa_invert+0xa2>
    4e82:	62 0f       	add	r22, r18
    4e84:	73 1f       	adc	r23, r19
    4e86:	84 1f       	adc	r24, r20
    4e88:	95 1f       	adc	r25, r21
    4e8a:	a0 1d       	adc	r26, r0
    4e8c:	08 95       	ret

00004e8e <__prologue_saves__>:
    4e8e:	2f 92       	push	r2
    4e90:	3f 92       	push	r3
    4e92:	4f 92       	push	r4
    4e94:	5f 92       	push	r5
    4e96:	6f 92       	push	r6
    4e98:	7f 92       	push	r7
    4e9a:	8f 92       	push	r8
    4e9c:	9f 92       	push	r9
    4e9e:	af 92       	push	r10
    4ea0:	bf 92       	push	r11
    4ea2:	cf 92       	push	r12
    4ea4:	df 92       	push	r13
    4ea6:	ef 92       	push	r14
    4ea8:	ff 92       	push	r15
    4eaa:	0f 93       	push	r16
    4eac:	1f 93       	push	r17
    4eae:	cf 93       	push	r28
    4eb0:	df 93       	push	r29
    4eb2:	cd b7       	in	r28, 0x3d	; 61
    4eb4:	de b7       	in	r29, 0x3e	; 62
    4eb6:	ca 1b       	sub	r28, r26
    4eb8:	db 0b       	sbc	r29, r27
    4eba:	cd bf       	out	0x3d, r28	; 61
    4ebc:	de bf       	out	0x3e, r29	; 62
    4ebe:	09 94       	ijmp

00004ec0 <__epilogue_restores__>:
    4ec0:	2a 88       	ldd	r2, Y+18	; 0x12
    4ec2:	39 88       	ldd	r3, Y+17	; 0x11
    4ec4:	48 88       	ldd	r4, Y+16	; 0x10
    4ec6:	5f 84       	ldd	r5, Y+15	; 0x0f
    4ec8:	6e 84       	ldd	r6, Y+14	; 0x0e
    4eca:	7d 84       	ldd	r7, Y+13	; 0x0d
    4ecc:	8c 84       	ldd	r8, Y+12	; 0x0c
    4ece:	9b 84       	ldd	r9, Y+11	; 0x0b
    4ed0:	aa 84       	ldd	r10, Y+10	; 0x0a
    4ed2:	b9 84       	ldd	r11, Y+9	; 0x09
    4ed4:	c8 84       	ldd	r12, Y+8	; 0x08
    4ed6:	df 80       	ldd	r13, Y+7	; 0x07
    4ed8:	ee 80       	ldd	r14, Y+6	; 0x06
    4eda:	fd 80       	ldd	r15, Y+5	; 0x05
    4edc:	0c 81       	ldd	r16, Y+4	; 0x04
    4ede:	1b 81       	ldd	r17, Y+3	; 0x03
    4ee0:	aa 81       	ldd	r26, Y+2	; 0x02
    4ee2:	b9 81       	ldd	r27, Y+1	; 0x01
    4ee4:	ce 0f       	add	r28, r30
    4ee6:	d1 1d       	adc	r29, r1
    4ee8:	cd bf       	out	0x3d, r28	; 61
    4eea:	de bf       	out	0x3e, r29	; 62
    4eec:	ed 01       	movw	r28, r26
    4eee:	08 95       	ret

00004ef0 <_exit>:
    4ef0:	f8 94       	cli

00004ef2 <__stop_program>:
    4ef2:	ff cf       	rjmp	.-2      	; 0x4ef2 <__stop_program>
