
AniBike2V7BT_master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00004f30  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000220  00802000  00004f30  00004fc4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000010b  00802220  00802220  000051e4  2**0
                  ALLOC
  3 .stab         000015a8  00000000  00000000  000051e4  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000004c0  00000000  00000000  0000678c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000280  00000000  00000000  00006c4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000f09  00000000  00000000  00006ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000867f  00000000  00000000  00007dd5  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001f16  00000000  00000000  00010454  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00004dc2  00000000  00000000  0001236a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000009c0  00000000  00000000  0001712c  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    00003140  00000000  00000000  00017aec  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    00003861  00000000  00000000  0001ac2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_pubtypes 00000e73  00000000  00000000  0001e48d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_ranges 000002a8  00000000  00000000  0001f300  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 b7 04 	jmp	0x96e	; 0x96e <__ctors_end>
       4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
       8:	0c 94 05 07 	jmp	0xe0a	; 0xe0a <__vector_2>
       c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      10:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      14:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      18:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      1c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      20:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      24:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      28:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      2c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      30:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      34:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      38:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      3c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      40:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      44:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      48:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      4c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      50:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      54:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      58:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      5c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      60:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      64:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      68:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      6c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      70:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      74:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      78:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      7c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      80:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      84:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      88:	0c 94 c3 22 	jmp	0x4586	; 0x4586 <__vector_34>
      8c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      90:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      94:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      98:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      9c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      a0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      a4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      a8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      ac:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      b0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      b4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      b8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      bc:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      c0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      c4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      c8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      cc:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      d0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      d4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      d8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      dc:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      e0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      e4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      e8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      ec:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      f0:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      f4:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      f8:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
      fc:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     100:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     104:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     108:	0c 94 fc 0c 	jmp	0x19f8	; 0x19f8 <__vector_66>
     10c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     110:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     114:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     118:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     11c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     120:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     124:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     128:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     12c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     130:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     134:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     138:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     13c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     140:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     144:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     148:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     14c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     150:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     154:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     158:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     15c:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     160:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     164:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>
     168:	0c 94 d4 04 	jmp	0x9a8	; 0x9a8 <__bad_interrupt>

0000016c <__c.3583>:
     16c:	64 61 74 61 3a 20 25 73 00                          data: %s.

00000175 <__c.3578>:
     175:	57 00                                               W.

00000177 <__c.3576>:
     177:	41 43 4b 00                                         ACK.

0000017b <__c.3832>:
     17b:	0d 0a 4e 6f 74 20 46 6f 75 6e 64 0d 0a 00           ..Not Found...

00000189 <__c.3827>:
     189:	0d 0a 0d 0a 00                                      .....

0000018e <__c.3822>:
     18e:	25 64 20 00                                         %d .

00000192 <__c.3820>:
     192:	46 72 4c 73 74 3a 00                                FrLst:.

00000199 <__c.3818>:
     199:	4e 6d 3a 25 73 0d 0a 4f 66 66 73 3a 25 64 0d 0a     Nm:%s..Offs:%d..
     1a9:	4e 4f 46 72 3a 25 64 0d 0a 00                       NOFr:%d...

000001b3 <__c.3805>:
     1b3:	0d 0a 00                                            ...

000001b6 <__c.3800>:
     1b6:	25 64 2c 20 00                                      %d, .

000001bb <__c.3798>:
     1bb:	42 6c 6f 63 6b 73 3a 0d 0a 00                       Blocks:...

000001c5 <__c.3796>:
     1c5:	25 64 09 25 73 09 09 25 64 09 09 25 64 09 09 25     %d.%s..%d..%d..%
     1d5:	64 0d 0a 00                                         d...

000001d9 <__c.3794>:
     1d9:	0d 0a 23 09 4e 61 6d 65 09 09 09 42 6c 6f 63 6b     ..#.Name...Block
     1e9:	20 4e 75 6d 09 44 75 72 61 74 69 6f 6e 09 52 65      Num.Duration.Re
     1f9:	73 65 72 76 65 64 0d 0a 00                          served...

00000202 <__c.3763>:
     202:	0d 0a 46 72 61 6d 65 20 23 25 64 20 42 6c 6f 63     ..Frame #%d Bloc
     212:	6b 20 23 25 64 3a 0d 0a 00                          k #%d:...

0000021b <__c.3719>:
     21b:	48 61 6c 6c 20 53 65 6e 73 6f 72 0d 0a 00           Hall Sensor...

00000229 <__c.4115>:
     229:	72 65 63 65 69 76 65 64 20 4e 41 43 4b 0d 0a 00     received NACK...

00000239 <__c.4112>:
     239:	73 6c 61 76 65 20 64 6f 65 73 20 6e 6f 74 20 72     slave does not r
     249:	65 73 70 6f 6e 64 0d 0a 00                          espond...

00000252 <__c.4109>:
     252:	6e 6f 20 73 6c 61 76 65 20 64 65 74 65 63 74 65     no slave detecte
     262:	64 0d 0a 00                                         d...

00000266 <__c.4105>:
     266:	74 72 61 6e 73 61 63 74 69 6f 6e 20 73 75 63 63     transaction succ
     276:	65 73 73 66 75 6c 20 28 41 43 4b 65 64 29 0d 0a     essful (ACKed)..
	...

00000287 <__c.4097>:
     287:	75 73 61 67 65 3a 20 77 72 69 74 65 5f 63 61 6c     usage: write_cal
     297:	20 72 65 64 31 36 20 67 72 65 65 6e 31 36 20 62      red16 green16 b
     2a7:	6c 75 65 31 36 0d 0a 00                             lue16...

000002af <__c.4091>:
     2af:	52 65 64 3a 20 25 75 3b 20 20 47 72 65 65 6e 3a     Red: %u;  Green:
     2bf:	20 25 75 3b 20 20 42 6c 75 65 3a 20 25 75 3b 20      %u;  Blue: %u; 
     2cf:	0d 0a 00                                            ...

000002d2 <__c.4085>:
     2d2:	42 6c 75 65 74 6f 6f 74 68 20 69 6e 66 6f 3a 0d     Bluetooth info:.
     2e2:	0a 20 20 53 74 61 74 75 73 3a 20 25 64 0d 0a 20     .  Status: %d.. 
     2f2:	20 56 65 72 73 69 6f 6e 3a 20 25 73 0d 0a 20 20      Version: %s..  
     302:	4e 61 6d 65 20 63 68 61 6e 67 65 3a 20 25 64 0d     Name change: %d.
     312:	0a 00                                               ..

00000314 <__c.4083>:
     314:	45 78 69 74 69 6e 67 20 41 54 20 6d 6f 64 65 2e     Exiting AT mode.
     324:	2e 2e 20 43 6f 6e 66 69 67 75 72 61 74 69 6f 6e     .. Configuration
     334:	20 63 6f 6d 70 6c 65 74 65 2e 0d 0a 00               complete....

00000341 <__c.4080>:
     341:	41 54 2b 4e 41 4d 45 3d 41 4e 49 42 49 4b 45 5f     AT+NAME=ANIBIKE_
     351:	32 56 37 5f 42 54 0d 0a 00                          2V7_BT...

0000035a <__c.4076>:
     35a:	41 54 2b 56 45 52 53 49 4f 4e 3f 0d 0a 00           AT+VERSION?...

00000368 <__c.4073>:
     368:	41 54 0d 0a 00                                      AT...

0000036d <__c.4071>:
     36d:	45 6e 74 65 72 72 69 6e 67 20 41 54 20 6d 6f 64     Enterring AT mod
     37d:	65 2e 2e 2e 0d 0a 00                                e......

00000384 <__c.4051>:
     384:	25 73 3a 20 25 73 0d 0a 00                          %s: %s...

0000038d <__c.4047>:
     38d:	75 73 61 67 65 3a 20 25 73 20 25 73 0d 0a 00        usage: %s %s...

0000039c <__c.4040>:
     39c:	75 73 61 67 65 3a 20 68 65 6c 70 20 5b 63 6d 64     usage: help [cmd
     3ac:	5d 0d 0a 00                                         ]...

000003b0 <__c.4034>:
     3b0:	4e 75 6d 62 65 72 20 6f 66 20 65 72 72 6f 72 73     Number of errors
     3c0:	3a 20 25 6c 75 0d 0a 00                             : %lu...

000003c8 <__c.4029>:
     3c8:	25 6c 75 20 00                                      %lu .

000003cd <__c.4027>:
     3cd:	52 65 61 64 69 6e 67 20 74 68 65 20 74 65 73 74     Reading the test
     3dd:	69 6e 67 20 73 65 71 75 65 6e 63 65 2e 2e 0d 0a     ing sequence....
	...

000003ee <__c.4022>:
     3ee:	25 6c 75 20 00                                      %lu .

000003f3 <__c.4020>:
     3f3:	57 72 69 74 69 6e 67 20 74 65 73 74 69 6e 67 20     Writing testing 
     403:	73 65 71 75 65 6e 63 65 2e 2e 2e 0d 0a 00           sequence......

00000411 <__c.4018>:
     411:	55 6e 70 72 6f 74 65 63 74 69 6e 67 20 65 6e 74     Unprotecting ent
     421:	69 72 65 20 66 6c 61 73 68 2e 2e 2e 0d 0a 00        ire flash......

00000430 <__c.4016>:
     430:	44 65 6c 65 74 69 6e 67 20 61 6c 6c 20 69 6e 66     Deleting all inf
     440:	6f 72 6d 61 74 69 6f 6e 20 66 72 6f 6d 20 66 6c     ormation from fl
     450:	61 73 68 2e 2e 2e 0d 0a 00                          ash......

00000459 <__c.4000>:
     459:	75 73 61 67 65 3a 20 74 65 73 74 5f 6c 65 64 20     usage: test_led 
     469:	5b 72 6f 77 23 5d 20 5b 52 47 42 5d 20 5b 76 61     [row#] [RGB] [va
     479:	6c 5d 0a 00                                         l]..

0000047d <__c.3994>:
     47d:	46 49 4e 49 53 48 45 44 2e 46 49 4e 49 53 48 45     FINISHED.FINISHE
     48d:	44 2e 46 49 4e 49 53 48 45 44 2e 0d 0a 00           D.FINISHED....

0000049b <__c.3992>:
     49b:	45 4d 50 54 59 2e 45 4d 50 54 59 2e 45 4d 50 54     EMPTY.EMPTY.EMPT
     4ab:	59 2e 0d 0a 00                                      Y....

000004b0 <__c.3972>:
     4b0:	0d 0a 23 37 20 73 65 63 74 6f 72 20 70 72 6f 74     ..#7 sector prot
     4c0:	65 63 74 69 6f 6e 20 72 65 67 69 73 74 65 72 73     ection registers
     4d0:	20 55 4e 4c 4f 43 4b 45 44 20 28 30 29 0d 0a 0d      UNLOCKED (0)...
     4e0:	0a 00                                               ..

000004e2 <__c.3970>:
     4e2:	0d 0a 23 37 20 73 65 63 74 6f 72 20 70 72 6f 74     ..#7 sector prot
     4f2:	65 63 74 69 6f 6e 20 72 65 67 69 73 74 65 72 73     ection registers
     502:	20 4c 4f 43 4b 45 44 20 28 31 29 0d 0a 0d 0a 00      LOCKED (1).....

00000512 <__c.3968>:
     512:	0d 0a 23 35 20 70 72 6f 67 72 61 6d 20 28 65 72     ..#5 program (er
     522:	61 73 65 29 20 77 61 73 20 73 75 63 63 65 73 73     ase) was success
     532:	66 75 6c 6c 20 28 30 29 00                          full (0).

0000053b <__c.3966>:
     53b:	0d 0a 23 35 20 66 61 69 6c 65 64 20 70 72 6f 67     ..#5 failed prog
     54b:	72 61 6d 20 28 65 72 61 73 65 29 20 28 31 29 00     ram (erase) (1).

0000055b <__c.3964>:
     55b:	0d 0a 23 34 20 77 72 69 74 65 20 70 72 6f 74 65     ..#4 write prote
     56b:	63 74 65 64 20 28 30 29 00                          cted (0).

00000574 <__c.3962>:
     574:	0d 0a 23 34 20 4e 4f 54 20 77 72 69 74 65 20 70     ..#4 NOT write p
     584:	72 6f 74 65 63 74 65 64 20 28 31 29 00              rotected (1).

00000591 <__c.3960>:
     591:	0d 0a 23 32 33 20 70 72 6f 74 65 63 74 69 6f 6e     ..#23 protection
     5a1:	20 75 6e 6b 6e 6f 77 6e 20 28 31 30 20 72 65 73      unknown (10 res
     5b1:	65 72 76 65 64 29 00                                erved).

000005b8 <__c.3958>:
     5b8:	0d 0a 23 32 33 20 4e 4f 54 20 77 72 69 74 65 20     ..#23 NOT write 
     5c8:	70 72 6f 74 65 63 74 65 64 20 28 30 30 29 00        protected (00).

000005d7 <__c.3952>:
     5d7:	0d 0a 23 31 20 4e 4f 54 20 77 72 69 74 65 20 65     ..#1 NOT write e
     5e7:	6e 61 62 6c 65 64 20 28 30 29 00                    nabled (0).

000005f2 <__c.3950>:
     5f2:	0d 0a 23 31 20 77 72 69 74 65 20 65 6e 61 62 6c     ..#1 write enabl
     602:	65 64 20 28 31 29 00                                ed (1).

00000609 <__c.3948>:
     609:	0d 0a 23 30 20 72 65 61 64 79 20 28 30 29 00        ..#0 ready (0).

00000618 <__c.3946>:
     618:	0d 0a 23 30 20 4e 4f 54 20 72 65 61 64 79 20 28     ..#0 NOT ready (
     628:	31 29 00                                            1).

0000062b <__c.3939>:
     62b:	4f 4b 0d 0a 00                                      OK...

00000630 <__c.3935>:
     630:	75 73 61 67 65 3a 20 65 72 61 73 65 5f 66 6c 61     usage: erase_fla
     640:	73 68 20 5b 3c 62 6c 6f 63 6b 20 6e 75 6d 62 65     sh [<block numbe
     650:	72 3e 20 6f 72 20 3c 41 4c 4c 3e 5d 0d 0a 00        r> or <ALL>]...

0000065f <__c.3929>:
     65f:	4f 4b 0d 0a 00                                      OK...

00000664 <__c.3924>:
     664:	75 73 61 67 65 3a 20 70 72 6f 74 5f 66 6c 61 73     usage: prot_flas
     674:	68 20 5b 3c 62 6c 6f 63 6b 20 6e 75 6d 62 65 72     h [<block number
     684:	3e 20 6f 72 20 3c 41 4c 4c 3e 5d 0d 0a 00           > or <ALL>]...

00000692 <__c.3918>:
     692:	4f 4b 0d 0a 00                                      OK...

00000697 <__c.3913>:
     697:	75 73 61 67 65 3a 20 75 6e 70 72 6f 74 5f 66 6c     usage: unprot_fl
     6a7:	61 73 68 20 5b 3c 62 6c 6f 63 6b 20 6e 75 6d 62     ash [<block numb
     6b7:	65 72 3e 20 6f 72 20 3c 41 4c 4c 3e 5d 0d 0a 00     er> or <ALL>]...

000006c7 <__c.3907>:
     6c7:	0d 0a 52 65 63 69 65 76 65 64 20 30 78 25 78 0d     ..Recieved 0x%x.
     6d7:	0a 00                                               ..

000006d9 <__c.3905>:
     6d9:	0d 0a 53 65 6e 64 69 6e 67 20 30 78 25 78 00        ..Sending 0x%x.

000006e8 <__c.3901>:
     6e8:	75 73 61 67 65 3a 20 73 70 69 5f 74 72 61 6e 73     usage: spi_trans
     6f8:	20 5b 62 79 74 65 5d 0d 0a 00                        [byte]...

00000702 <__c.3895>:
     702:	4f 4b 0d 0a 00                                      OK...

00000707 <__c.3889>:
     707:	4f 4b 0d 0a 00                                      OK...

0000070c <__c.3879>:
     70c:	75 73 61 67 65 3a 20 72 65 61 64 5f 62 6c 6f 63     usage: read_bloc
     71c:	6b 20 5b 73 74 61 72 74 5f 62 6c 6f 63 6b 5d 0d     k [start_block].
     72c:	0a 00                                               ..

0000072e <__c.3870>:
     72e:	66 61 69 6c 0d 0a 00                                fail...

00000735 <__c.3868>:
     735:	6f 6b 6f 6b 0d 0a 00                                okok...

0000073c <__c.3857>:
     73c:	4f 4b 0d 0a 00                                      OK...

00000741 <__c.3844>:
     741:	75 73 61 67 65 3a 20 77 72 69 74 65 5f 62 6c 6f     usage: write_blo
     751:	63 6b 20 5b 73 74 61 72 74 5f 62 6c 6f 63 6b 5d     ck [start_block]
     761:	20 5b 71 75 61 6e 74 5d 20 5b 6c 65 6e 67 74 68      [quant] [length
     771:	5d 0d 0a 00                                         ]...

00000775 <__c.3838>:
     775:	77 72 69 74 69 6e 67 3a 20 25 6c 75 20 74 6f 20     writing: %lu to 
     785:	25 6c 75 3b 0d 0a 00                                %lu;...

0000078c <__c.3836>:
     78c:	75 73 61 67 65 3a 20 77 72 69 74 65 20 5b 33 32     usage: write [32
     79c:	62 69 74 20 73 74 61 72 74 5f 61 64 64 72 65 73     bit start_addres
     7ac:	73 5d 20 5b 38 62 69 74 20 6c 65 6e 67 74 68 5d     s] [8bit length]
     7bc:	0d 0a 00                                            ...

000007bf <__c.3827>:
     7bf:	41 25 6c 75 3a 20 20 20 30 78 25 78 0d 0a 00        A%lu:   0x%x...

000007ce <__c.3825>:
     7ce:	72 65 61 64 69 6e 67 3a 20 25 6c 75 20 74 6f 20     reading: %lu to 
     7de:	25 6c 75 3b 0d 0a 00                                %lu;...

000007e5 <__c.3820>:
     7e5:	75 73 61 67 65 3a 20 72 65 61 64 20 5b 73 74 61     usage: read [sta
     7f5:	72 74 5f 61 64 64 72 65 73 73 5d 20 5b 6c 65 6e     rt_address] [len
     805:	67 74 68 5d 0d 0a 00                                gth]...

0000080c <__c.3814>:
     80c:	43 4f 4c 4f 52 5f 44 45 50 54 48 3a 25 30 33 64     COLOR_DEPTH:%03d
     81c:	3b 46 49 4c 45 23 42 4c 4b 53 3a 25 30 32 64 3b     ;FILE#BLKS:%02d;
     82c:	46 4e 5f 4c 45 4e 3a 25 30 33 64 3b 4d 41 58 5f     FN_LEN:%03d;MAX_
     83c:	46 52 41 4d 45 53 3a 25 30 33 64 3b 65 6f 6c 0d     FRAMES:%03d;eol.
     84c:	0a 00                                               ..

0000084e <__c.3808>:
     84e:	4d 61 6e 49 44 20 3d 20 30 78 25 78 3b 20 44 65     ManID = 0x%x; De
     85e:	76 49 44 31 20 3d 20 30 78 25 78 3b 20 44 65 76     vID1 = 0x%x; Dev
     86e:	49 44 32 20 3d 20 30 78 25 78 3b 20 45 78 44 61     ID2 = 0x%x; ExDa
     87e:	74 61 20 3d 20 30 78 25 78 65 6f 6c 0d 0a 00        ta = 0x%xeol...

0000088d <__c.3806>:
     88d:	0d 0a 46 6c 61 73 68 49 6e 66 6f 3a 0d 0a 00        ..FlashInfo:...

0000089c <__c.3804>:
     89c:	41 4e 49 42 49 4b 45 20 56 45 52 53 49 4f 4e 3a     ANIBIKE VERSION:
     8ac:	25 30 33 64 2e 25 64 3b 4d 45 4d 5f 53 49 5a 45     %03d.%d;MEM_SIZE
     8bc:	3a 25 30 35 64 20 4d 42 49 54 53 3b 43 4c 4f 43     :%05d MBITS;CLOC
     8cc:	4b 3a 25 30 33 64 20 4d 48 5a 3b 23 4c 45 44 53     K:%03d MHZ;#LEDS
     8dc:	3a 25 30 33 64 3b 52 47 42 3a 25 64 3b 4d 45 4d     :%03d;RGB:%d;MEM
     8ec:	42 4c 4b 3a 25 30 32 64 20 4b 42 0d 0a 00           BLK:%02d KB...

000008fa <__c.3793>:
     8fa:	25 73 3a 20 43 6f 6d 6d 61 6e 64 20 6e 6f 74 20     %s: Command not 
     90a:	72 65 63 6f 67 6e 69 7a 65 64 2e 0d 0a 00           recognized....

00000918 <__c.3778>:
     918:	4f 4b 0d 0a 00                                      OK...

0000091d <__c.3772>:
     91d:	4f 4b 0d 0a 00                                      OK...

00000922 <__c.3766>:
     922:	4f 4b 0d 0a 00                                      OK...

00000927 <__c.3760>:
     927:	4f 4b 0d 0a 00                                      OK...

0000092c <__c.3754>:
     92c:	41 4e 49 42 49 4b 45 5f 32 56 37 42 54 20 3e 3e     ANIBIKE_2V7BT >>
     93c:	20 00                                                .

0000093e <__c.3752>:
     93e:	0d 0a 00                                            ...

00000941 <__c.3739>:
     941:	47 6f 6f 64 62 79 65 2e 2e 2e 0d 0a 00              Goodbye......

0000094e <__c.3737>:
     94e:	0d 0a 00                                            ...

00000951 <__c.3733>:
     951:	41 4e 49 42 49 4b 45 20 49 4e 43 2e 20 56 45 52     ANIBIKE INC. VER
     961:	2e 20 32 2e 37 20 42 54 2e 0d 0a 00 00              . 2.7 BT.....

0000096e <__ctors_end>:
     96e:	11 24       	eor	r1, r1
     970:	1f be       	out	0x3f, r1	; 63
     972:	cf ef       	ldi	r28, 0xFF	; 255
     974:	df e2       	ldi	r29, 0x2F	; 47
     976:	de bf       	out	0x3e, r29	; 62
     978:	cd bf       	out	0x3d, r28	; 61

0000097a <__do_copy_data>:
     97a:	12 e2       	ldi	r17, 0x22	; 34
     97c:	a0 e0       	ldi	r26, 0x00	; 0
     97e:	b0 e2       	ldi	r27, 0x20	; 32
     980:	e0 e3       	ldi	r30, 0x30	; 48
     982:	ff e4       	ldi	r31, 0x4F	; 79
     984:	02 c0       	rjmp	.+4      	; 0x98a <__do_copy_data+0x10>
     986:	05 90       	lpm	r0, Z+
     988:	0d 92       	st	X+, r0
     98a:	a0 32       	cpi	r26, 0x20	; 32
     98c:	b1 07       	cpc	r27, r17
     98e:	d9 f7       	brne	.-10     	; 0x986 <__do_copy_data+0xc>

00000990 <__do_clear_bss>:
     990:	13 e2       	ldi	r17, 0x23	; 35
     992:	a0 e2       	ldi	r26, 0x20	; 32
     994:	b2 e2       	ldi	r27, 0x22	; 34
     996:	01 c0       	rjmp	.+2      	; 0x99a <.do_clear_bss_start>

00000998 <.do_clear_bss_loop>:
     998:	1d 92       	st	X+, r1

0000099a <.do_clear_bss_start>:
     99a:	ab 32       	cpi	r26, 0x2B	; 43
     99c:	b1 07       	cpc	r27, r17
     99e:	e1 f7       	brne	.-8      	; 0x998 <.do_clear_bss_loop>
     9a0:	0e 94 ac 0e 	call	0x1d58	; 0x1d58 <main>
     9a4:	0c 94 96 27 	jmp	0x4f2c	; 0x4f2c <_exit>

000009a8 <__bad_interrupt>:
     9a8:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000009ac <SetClockFreq>:
 * Setting the internal RC clock frequency (2-32 MHz)
 * with 2 MHz resolution.
 *****************************************************************/
void SetClockFreq ( uint8_t freq )
{
	if ( freq == 32 )
     9ac:	80 32       	cpi	r24, 0x20	; 32
     9ae:	79 f1       	breq	.+94     	; 0xa0e <SetClockFreq+0x62>
		CLKSYS_Disable( OSC_PLLEN_bm );
		CLKSYS_Disable( OSC_RC2MEN_bm );
	}
	else
	{
		CLKSYS_Enable( OSC_RC2MEN_bm );
     9b0:	90 91 50 00 	lds	r25, 0x0050
     9b4:	91 60       	ori	r25, 0x01	; 1
     9b6:	90 93 50 00 	sts	0x0050, r25
		do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );	// Internal 2MHz RC Oscillator Ready bit mask polling	
     9ba:	90 91 51 00 	lds	r25, 0x0051
     9be:	90 ff       	sbrs	r25, 0
     9c0:	fc cf       	rjmp	.-8      	; 0x9ba <SetClockFreq+0xe>
		
		if ( freq == 2 )
     9c2:	82 30       	cpi	r24, 0x02	; 2
     9c4:	d1 f0       	breq	.+52     	; 0x9fa <SetClockFreq+0x4e>
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
			CLKSYS_Disable( OSC_PLLEN_bm );
		}
		else
		{
			CLKSYS_PLL_Config( OSC_PLLSRC_RC2M_gc, (freq>>2) );
     9c6:	68 2f       	mov	r22, r24
     9c8:	66 95       	lsr	r22
     9ca:	66 95       	lsr	r22
     9cc:	80 e0       	ldi	r24, 0x00	; 0
     9ce:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <CLKSYS_PLL_Config>
			CLKSYS_Enable( OSC_PLLEN_bm );
     9d2:	80 91 50 00 	lds	r24, 0x0050
     9d6:	80 61       	ori	r24, 0x10	; 16
     9d8:	80 93 50 00 	sts	0x0050, r24
			CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     9dc:	80 e0       	ldi	r24, 0x00	; 0
     9de:	60 e0       	ldi	r22, 0x00	; 0
     9e0:	0e 94 04 1b 	call	0x3608	; 0x3608 <CLKSYS_Prescalers_Config>
			do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
     9e4:	80 91 51 00 	lds	r24, 0x0051
     9e8:	84 ff       	sbrs	r24, 4
     9ea:	fc cf       	rjmp	.-8      	; 0x9e4 <SetClockFreq+0x38>
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
     9ec:	84 e0       	ldi	r24, 0x04	; 4
     9ee:	0e 94 1c 1b 	call	0x3638	; 0x3638 <CLKSYS_Main_ClockSource_Select>
			
		}
		
		CLKSYS_Disable( OSC_RC32MEN_bm );					// Disable 32MHz RC Oscillator Enable bit mask		
     9f2:	82 e0       	ldi	r24, 0x02	; 2
     9f4:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <CLKSYS_Disable>
     9f8:	08 95       	ret
		CLKSYS_Enable( OSC_RC2MEN_bm );
		do {} while ( CLKSYS_IsReady( OSC_RC2MRDY_bm ) == 0 );	// Internal 2MHz RC Oscillator Ready bit mask polling	
		
		if ( freq == 2 )
		{
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC2M_gc );
     9fa:	80 e0       	ldi	r24, 0x00	; 0
     9fc:	0e 94 1c 1b 	call	0x3638	; 0x3638 <CLKSYS_Main_ClockSource_Select>
			CLKSYS_Disable( OSC_PLLEN_bm );
     a00:	80 e1       	ldi	r24, 0x10	; 16
     a02:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <CLKSYS_Disable>
			do {} while ( CLKSYS_IsReady( OSC_PLLRDY_bm ) == 0 );
			CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_PLL_gc );
			
		}
		
		CLKSYS_Disable( OSC_RC32MEN_bm );					// Disable 32MHz RC Oscillator Enable bit mask		
     a06:	82 e0       	ldi	r24, 0x02	; 2
     a08:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <CLKSYS_Disable>
     a0c:	08 95       	ret
	{
		/*  Enable internal 32 MHz ring oscillator and wait until it's
		 *  stable. Divide clock by two with the prescaler C and set the
		 *  32 MHz ring oscillator as the main clock source. 
		 */
		CLKSYS_Enable( OSC_RC32MEN_bm );
     a0e:	80 91 50 00 	lds	r24, 0x0050
     a12:	82 60       	ori	r24, 0x02	; 2
     a14:	80 93 50 00 	sts	0x0050, r24
		CLKSYS_Prescalers_Config( CLK_PSADIV_1_gc, CLK_PSBCDIV_1_1_gc );
     a18:	80 e0       	ldi	r24, 0x00	; 0
     a1a:	60 e0       	ldi	r22, 0x00	; 0
     a1c:	0e 94 04 1b 	call	0x3608	; 0x3608 <CLKSYS_Prescalers_Config>
		do {} while ( CLKSYS_IsReady( OSC_RC32MRDY_bm ) == 0 );
     a20:	80 91 51 00 	lds	r24, 0x0051
     a24:	81 ff       	sbrs	r24, 1
     a26:	fc cf       	rjmp	.-8      	; 0xa20 <SetClockFreq+0x74>
		CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_RC32M_gc );
     a28:	81 e0       	ldi	r24, 0x01	; 1
     a2a:	0e 94 1c 1b 	call	0x3638	; 0x3638 <CLKSYS_Main_ClockSource_Select>
		
		CLKSYS_Disable( OSC_PLLEN_bm );
     a2e:	80 e1       	ldi	r24, 0x10	; 16
     a30:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <CLKSYS_Disable>
		CLKSYS_Disable( OSC_RC2MEN_bm );
     a34:	81 e0       	ldi	r24, 0x01	; 1
     a36:	0e 94 fa 1a 	call	0x35f4	; 0x35f4 <CLKSYS_Disable>
     a3a:	08 95       	ret

00000a3c <anibike_dl_initialize>:
volatile uint8_t	rxBuffer[128];
volatile uint8_t	rxLength = 0;

//__________________________________________________________________________________________________
void anibike_dl_initialize		( ANIBIKE_DL_TYPE_EN enNodeType )
{
     a3c:	8f 92       	push	r8
     a3e:	af 92       	push	r10
     a40:	cf 92       	push	r12
     a42:	ef 92       	push	r14
     a44:	0f 93       	push	r16
	
	if (enNodeType == ANIBIKE_DL_MASTER)
     a46:	88 23       	and	r24, r24
     a48:	61 f1       	breq	.+88     	; 0xaa2 <anibike_dl_initialize+0x66>

	}
	else
	{
		// map PORT C to virtual port 1
		PORT_MapVirtualPort1( PORTCFG_VP1MAP_PORTC_gc );
     a4a:	80 e2       	ldi	r24, 0x20	; 32
     a4c:	0e 94 4e 20 	call	0x409c	; 0x409c <PORT_MapVirtualPort1>
		
		// set clk out and data in
		DATALINK_PORT.DIRCLR = DATALINK_DATA_PIN;
     a50:	e0 e4       	ldi	r30, 0x40	; 64
     a52:	f6 e0       	ldi	r31, 0x06	; 6
     a54:	80 e2       	ldi	r24, 0x20	; 32
     a56:	82 83       	std	Z+2, r24	; 0x02
		DATALINK_PORT.DIRSET = DATALINK_CLK_PIN;
     a58:	80 e8       	ldi	r24, 0x80	; 128
     a5a:	81 83       	std	Z+1, r24	; 0x01
		
		// drive clk to high
		DATALINK_PORT.OUTSET = DATALINK_CLK_PIN;
     a5c:	85 83       	std	Z+5, r24	; 0x05
		
		// Set pull-down and wired-or so that there will be no problems
		// Setup interrupt for the data pin
		PORT_ConfigurePins( &DATALINK_PORT,
     a5e:	80 e4       	ldi	r24, 0x40	; 64
     a60:	96 e0       	ldi	r25, 0x06	; 6
     a62:	60 e8       	ldi	r22, 0x80	; 128
     a64:	40 e0       	ldi	r20, 0x00	; 0
     a66:	20 e0       	ldi	r18, 0x00	; 0
     a68:	00 e3       	ldi	r16, 0x30	; 48
     a6a:	ee 24       	eor	r14, r14
     a6c:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
							
		PORT_ConfigurePins( &DATALINK_PORT,
     a70:	80 e4       	ldi	r24, 0x40	; 64
     a72:	96 e0       	ldi	r25, 0x06	; 6
     a74:	60 e2       	ldi	r22, 0x20	; 32
     a76:	40 e0       	ldi	r20, 0x00	; 0
     a78:	20 e0       	ldi	r18, 0x00	; 0
     a7a:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
		
		PORT_ConfigureInterrupt0( &DATALINK_PORT, PORT_INT0LVL_HI_gc, DATALINK_DATA_PIN );		
     a7e:	80 e4       	ldi	r24, 0x40	; 64
     a80:	96 e0       	ldi	r25, 0x06	; 6
     a82:	63 e0       	ldi	r22, 0x03	; 3
     a84:	40 e2       	ldi	r20, 0x20	; 32
     a86:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
     a8a:	80 91 a2 00 	lds	r24, 0x00A2
     a8e:	87 60       	ori	r24, 0x07	; 7
     a90:	e0 ea       	ldi	r30, 0xA0	; 160
     a92:	f0 e0       	ldi	r31, 0x00	; 0
     a94:	82 83       	std	Z+2, r24	; 0x02
	}
}
     a96:	0f 91       	pop	r16
     a98:	ef 90       	pop	r14
     a9a:	cf 90       	pop	r12
     a9c:	af 90       	pop	r10
     a9e:	8f 90       	pop	r8
     aa0:	08 95       	ret
{
	
	if (enNodeType == ANIBIKE_DL_MASTER)
	{				
		// Set pull-down and wired-or so that there will be no problems
		PORT_ConfigurePins( &DATALINK_PORT,
     aa2:	80 e4       	ldi	r24, 0x40	; 64
     aa4:	96 e0       	ldi	r25, 0x06	; 6
     aa6:	60 e8       	ldi	r22, 0x80	; 128
     aa8:	40 e0       	ldi	r20, 0x00	; 0
     aaa:	20 e0       	ldi	r18, 0x00	; 0
     aac:	00 e3       	ldi	r16, 0x30	; 48
     aae:	53 e0       	ldi	r21, 0x03	; 3
     ab0:	e5 2e       	mov	r14, r21
     ab2:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_LEVEL_gc );
							
		PORT_ConfigurePins( &DATALINK_PORT,
     ab6:	80 e4       	ldi	r24, 0x40	; 64
     ab8:	96 e0       	ldi	r25, 0x06	; 6
     aba:	60 e2       	ldi	r22, 0x20	; 32
     abc:	40 e0       	ldi	r20, 0x00	; 0
     abe:	20 e0       	ldi	r18, 0x00	; 0
     ac0:	37 e0       	ldi	r19, 0x07	; 7
     ac2:	e3 2e       	mov	r14, r19
     ac4:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_INPUT_DISABLE_gc );
		
		/* Initialize SPI master on port DATAFLASH_PORT. */
		SPI_MasterInit(&spiMasterC,
     ac8:	87 e9       	ldi	r24, 0x97	; 151
     aca:	92 e2       	ldi	r25, 0x22	; 34
     acc:	60 ec       	ldi	r22, 0xC0	; 192
     ace:	78 e0       	ldi	r23, 0x08	; 8
     ad0:	40 e4       	ldi	r20, 0x40	; 64
     ad2:	56 e0       	ldi	r21, 0x06	; 6
     ad4:	20 e0       	ldi	r18, 0x00	; 0
     ad6:	04 e0       	ldi	r16, 0x04	; 4
     ad8:	ee 24       	eor	r14, r14
     ada:	cc 24       	eor	r12, r12
     adc:	aa 24       	eor	r10, r10
     ade:	88 24       	eor	r8, r8
     ae0:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SPI_MasterInit>
	               SPI_INTLVL_OFF_gc,
	               false,
	               SPI_PRESCALER_DIV4_gc,0);
				   
		// Disable the spi interface for now
		SPI_MasterEnable (&spiMasterC, 0);
     ae4:	87 e9       	ldi	r24, 0x97	; 151
     ae6:	92 e2       	ldi	r25, 0x22	; 34
     ae8:	60 e0       	ldi	r22, 0x00	; 0
     aea:	0e 94 a3 20 	call	0x4146	; 0x4146 <SPI_MasterEnable>
		
		// Set directions - data out, clk in
		DATALINK_PORT.DIRSET = DATALINK_DATA_PIN;
     aee:	e0 e4       	ldi	r30, 0x40	; 64
     af0:	f6 e0       	ldi	r31, 0x06	; 6
     af2:	80 e2       	ldi	r24, 0x20	; 32
     af4:	81 83       	std	Z+1, r24	; 0x01
		DATALINK_PORT.DIRCLR = DATALINK_CLK_PIN;
     af6:	90 e8       	ldi	r25, 0x80	; 128
     af8:	92 83       	std	Z+2, r25	; 0x02
		
		// drive data to high
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;		
     afa:	85 83       	std	Z+5, r24	; 0x05
							PORT_ISC_BOTHEDGES_gc );
		
		PORT_ConfigureInterrupt0( &DATALINK_PORT, PORT_INT0LVL_HI_gc, DATALINK_DATA_PIN );		
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
	}
}
     afc:	0f 91       	pop	r16
     afe:	ef 90       	pop	r14
     b00:	cf 90       	pop	r12
     b02:	af 90       	pop	r10
     b04:	8f 90       	pop	r8
     b06:	08 95       	ret

00000b08 <anibike_dl_send_data>:


//__________________________________________________________________________________________________
uint8_t anibike_dl_send_data		( uint8_t *aData, uint8_t iLength )
{
     b08:	ef 92       	push	r14
     b0a:	0f 93       	push	r16
     b0c:	1f 93       	push	r17
     b0e:	cf 93       	push	r28
     b10:	df 93       	push	r29
     b12:	ec 01       	movw	r28, r24
     b14:	16 2f       	mov	r17, r22
	uint8_t d;
	uint8_t timeout = ANIBIKE_DL_RX_TIMEOUT;


	// check if there is someone in the other side
	if ((DATALINK_CLK_PIN&(DATALINK_PORT.IN))==0)
     b16:	80 91 48 06 	lds	r24, 0x0648
     b1a:	87 fd       	sbrc	r24, 7
     b1c:	07 c0       	rjmp	.+14     	; 0xb2c <anibike_dl_send_data+0x24>
	{
		return 1;	// no-one found
     b1e:	81 e0       	ldi	r24, 0x01	; 1
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
	}
	
	return 0;
}
     b20:	df 91       	pop	r29
     b22:	cf 91       	pop	r28
     b24:	1f 91       	pop	r17
     b26:	0f 91       	pop	r16
     b28:	ef 90       	pop	r14
     b2a:	08 95       	ret
	{
		return 1;	// no-one found
	}

	// start transaction by clearing data pin
	DATALINK_PORT.OUTCLR = DATALINK_DATA_PIN;		
     b2c:	80 e2       	ldi	r24, 0x20	; 32
     b2e:	e0 e4       	ldi	r30, 0x40	; 64
     b30:	f6 e0       	ldi	r31, 0x06	; 6
     b32:	86 83       	std	Z+6, r24	; 0x06
     b34:	8f e7       	ldi	r24, 0x7F	; 127
     b36:	03 c0       	rjmp	.+6      	; 0xb3e <anibike_dl_send_data+0x36>
     b38:	81 50       	subi	r24, 0x01	; 1
	
	// wait for the clk to be low as well
	while (--timeout && (DATALINK_PORT.IN&DATALINK_CLK_PIN))	
     b3a:	09 f4       	brne	.+2      	; 0xb3e <anibike_dl_send_data+0x36>
     b3c:	65 c0       	rjmp	.+202    	; 0xc08 <anibike_dl_send_data+0x100>
     b3e:	e0 e4       	ldi	r30, 0x40	; 64
     b40:	f6 e0       	ldi	r31, 0x06	; 6
     b42:	90 91 48 06 	lds	r25, 0x0648
     b46:	97 fd       	sbrc	r25, 7
     b48:	f7 cf       	rjmp	.-18     	; 0xb38 <anibike_dl_send_data+0x30>
	}
	
	// here we know that there is someone on SLAVE and it responds

	// Set both lines as totem-pole and activate SPI
	DATALINK_PORT.DIRSET = DATALINK_DATA_PIN|DATALINK_CLK_PIN;
     b4a:	80 ea       	ldi	r24, 0xA0	; 160
     b4c:	81 83       	std	Z+1, r24	; 0x01
	PORT_ConfigurePins( &DATALINK_PORT,
     b4e:	80 e4       	ldi	r24, 0x40	; 64
     b50:	96 e0       	ldi	r25, 0x06	; 6
     b52:	60 ea       	ldi	r22, 0xA0	; 160
     b54:	40 e0       	ldi	r20, 0x00	; 0
     b56:	20 e0       	ldi	r18, 0x00	; 0
     b58:	00 e0       	ldi	r16, 0x00	; 0
     b5a:	77 e0       	ldi	r23, 0x07	; 7
     b5c:	e7 2e       	mov	r14, r23
     b5e:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
						DATALINK_CLK_PIN|DATALINK_DATA_PIN,
						false,
						false,
						PORT_OPC_TOTEM_gc,
						PORT_ISC_INPUT_DISABLE_gc );
	SPI_MasterEnable (&spiMasterC, 1);
     b62:	87 e9       	ldi	r24, 0x97	; 151
     b64:	92 e2       	ldi	r25, 0x22	; 34
     b66:	61 e0       	ldi	r22, 0x01	; 1
     b68:	0e 94 a3 20 	call	0x4146	; 0x4146 <SPI_MasterEnable>
	
	// the length is not part of the checksum
	anibike_dl_send_byte (spiMasterC, iLength); 
     b6c:	87 e9       	ldi	r24, 0x97	; 151
     b6e:	92 e2       	ldi	r25, 0x22	; 34
     b70:	61 2f       	mov	r22, r17
     b72:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     b76:	e0 91 97 22 	lds	r30, 0x2297
     b7a:	f0 91 98 22 	lds	r31, 0x2298

//__________________________________________________________________________________________________
uint8_t anibike_dl_send_data		( uint8_t *aData, uint8_t iLength )
{
	uint8_t i = iLength;
	uint8_t chs = 0;
     b7e:	60 e0       	ldi	r22, 0x00	; 0
	anibike_dl_send_byte (spiMasterC, iLength); 
	
	// transfer iLength bytes
	do 
	{
		d = *aData++;
     b80:	99 91       	ld	r25, Y+
		
		spiMasterC.module->DATA = d;
     b82:	93 83       	std	Z+3, r25	; 0x03
		/* Wait for transmission complete. */
		while(!(spiMasterC.module->STATUS & SPI_IF_bm)) {}
     b84:	82 81       	ldd	r24, Z+2	; 0x02
     b86:	87 ff       	sbrs	r24, 7
     b88:	fd cf       	rjmp	.-6      	; 0xb84 <anibike_dl_send_data+0x7c>
			
		chs += d;
     b8a:	69 0f       	add	r22, r25
	} while (--i);
     b8c:	11 50       	subi	r17, 0x01	; 1
     b8e:	c1 f7       	brne	.-16     	; 0xb80 <anibike_dl_send_data+0x78>
	
	// transfer checksum
	anibike_dl_send_byte (spiMasterC, chs);
     b90:	87 e9       	ldi	r24, 0x97	; 151
     b92:	92 e2       	ldi	r25, 0x22	; 34
     b94:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	
	// disable spi and set both lines as usual - pulled low wired-or
	SPI_MasterEnable (&spiMasterC, 0);
     b98:	87 e9       	ldi	r24, 0x97	; 151
     b9a:	92 e2       	ldi	r25, 0x22	; 34
     b9c:	60 e0       	ldi	r22, 0x00	; 0
     b9e:	0e 94 a3 20 	call	0x4146	; 0x4146 <SPI_MasterEnable>
	PORT_ConfigurePins( &DATALINK_PORT,
     ba2:	80 e4       	ldi	r24, 0x40	; 64
     ba4:	96 e0       	ldi	r25, 0x06	; 6
     ba6:	60 e8       	ldi	r22, 0x80	; 128
     ba8:	40 e0       	ldi	r20, 0x00	; 0
     baa:	20 e0       	ldi	r18, 0x00	; 0
     bac:	00 e3       	ldi	r16, 0x30	; 48
     bae:	f3 e0       	ldi	r31, 0x03	; 3
     bb0:	ef 2e       	mov	r14, r31
     bb2:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
						false,
						false,
						PORT_OPC_WIREDORPULL_gc,
						PORT_ISC_LEVEL_gc );
							
	PORT_ConfigurePins( &DATALINK_PORT,
     bb6:	80 e4       	ldi	r24, 0x40	; 64
     bb8:	96 e0       	ldi	r25, 0x06	; 6
     bba:	60 e2       	ldi	r22, 0x20	; 32
     bbc:	40 e0       	ldi	r20, 0x00	; 0
     bbe:	20 e0       	ldi	r18, 0x00	; 0
     bc0:	e7 e0       	ldi	r30, 0x07	; 7
     bc2:	ee 2e       	mov	r14, r30
     bc4:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
						DATALINK_DATA_PIN,
						false,
						false,
						PORT_OPC_WIREDORPULL_gc,
						PORT_ISC_INPUT_DISABLE_gc );	
	SPI_MasterEnable (&spiMasterC, 0);
     bc8:	87 e9       	ldi	r24, 0x97	; 151
     bca:	92 e2       	ldi	r25, 0x22	; 34
     bcc:	60 e0       	ldi	r22, 0x00	; 0
     bce:	0e 94 a3 20 	call	0x4146	; 0x4146 <SPI_MasterEnable>
	DATALINK_PORT.DIRSET = DATALINK_DATA_PIN;
     bd2:	e0 e4       	ldi	r30, 0x40	; 64
     bd4:	f6 e0       	ldi	r31, 0x06	; 6
     bd6:	80 e2       	ldi	r24, 0x20	; 32
     bd8:	81 83       	std	Z+1, r24	; 0x01
	DATALINK_PORT.DIRCLR = DATALINK_CLK_PIN;
     bda:	90 e8       	ldi	r25, 0x80	; 128
     bdc:	92 83       	std	Z+2, r25	; 0x02
	
	// set data as low (waiting for ACK)
	DATALINK_PORT.OUTCLR = DATALINK_DATA_PIN;
     bde:	86 83       	std	Z+6, r24	; 0x06
     be0:	8f e7       	ldi	r24, 0x7F	; 127
     be2:	02 c0       	rjmp	.+4      	; 0xbe8 <anibike_dl_send_data+0xe0>
     be4:	81 50       	subi	r24, 0x01	; 1
	
	// wait for ACK
	timeout = ANIBIKE_DL_RX_TIMEOUT;
	// wait for the clk to be high as well (ACK)
	while (--timeout && !(DATALINK_PORT.IN&DATALINK_CLK_PIN))	
     be6:	a1 f0       	breq	.+40     	; 0xc10 <anibike_dl_send_data+0x108>
     be8:	e0 e4       	ldi	r30, 0x40	; 64
     bea:	f6 e0       	ldi	r31, 0x06	; 6
     bec:	90 91 48 06 	lds	r25, 0x0648
     bf0:	97 ff       	sbrs	r25, 7
     bf2:	f8 cf       	rjmp	.-16     	; 0xbe4 <anibike_dl_send_data+0xdc>
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
		return 3;	// no ACK
	}
	
	// if there was a response
	if (DATALINK_PORT.IN&DATALINK_CLK_PIN)
     bf4:	80 91 48 06 	lds	r24, 0x0648
     bf8:	87 fd       	sbrc	r24, 7
     bfa:	02 c0       	rjmp	.+4      	; 0xc00 <anibike_dl_send_data+0xf8>
	{
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
	}
	
	return 0;
     bfc:	80 e0       	ldi	r24, 0x00	; 0
     bfe:	90 cf       	rjmp	.-224    	; 0xb20 <anibike_dl_send_data+0x18>
	
	// if there was a response
	if (DATALINK_PORT.IN&DATALINK_CLK_PIN)
	{
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
     c00:	80 e2       	ldi	r24, 0x20	; 32
     c02:	85 83       	std	Z+5, r24	; 0x05
	}
	
	return 0;
     c04:	80 e0       	ldi	r24, 0x00	; 0
     c06:	8c cf       	rjmp	.-232    	; 0xb20 <anibike_dl_send_data+0x18>
	}
	if (!timeout)
	{
		// the other side doesn't respond
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
     c08:	80 e2       	ldi	r24, 0x20	; 32
     c0a:	85 83       	std	Z+5, r24	; 0x05
		return 2;	// no response
     c0c:	82 e0       	ldi	r24, 0x02	; 2
     c0e:	88 cf       	rjmp	.-240    	; 0xb20 <anibike_dl_send_data+0x18>
	}
	if (!timeout)
	{
		// the other side didn't send ACK (clock high)
		// end transaction by setting data pin
		DATALINK_PORT.OUTSET = DATALINK_DATA_PIN;
     c10:	80 e2       	ldi	r24, 0x20	; 32
     c12:	85 83       	std	Z+5, r24	; 0x05
		return 3;	// no ACK
     c14:	83 e0       	ldi	r24, 0x03	; 3
     c16:	84 cf       	rjmp	.-248    	; 0xb20 <anibike_dl_send_data+0x18>

00000c18 <anibike_dl_receive_byte>:
}

//__________________________________________________________________________________________________
uint8_t anibike_dl_receive_byte ( void )
{
	asm volatile (
     c18:	3f 93       	push	r19
     c1a:	3f b7       	in	r19, 0x3f	; 63
     c1c:	3f 93       	push	r19
     c1e:	88 27       	eor	r24, r24
     c20:	3f ef       	ldi	r19, 0xFF	; 255
     c22:	88 94       	clc

00000c24 <waitclk0299>:
     c24:	3a 95       	dec	r19
     c26:	b7 9b       	sbis	0x16, 7	; 22
     c28:	e9 f7       	brne	.-6      	; 0xc24 <waitclk0299>
     c2a:	b5 99       	sbic	0x16, 5	; 22
     c2c:	08 94       	sec
     c2e:	88 1f       	adc	r24, r24
     c30:	38 e0       	ldi	r19, 0x08	; 8

00000c32 <waitclk1299>:
     c32:	3a 95       	dec	r19
     c34:	b7 9b       	sbis	0x16, 7	; 22
     c36:	e9 f7       	brne	.-6      	; 0xc32 <waitclk1299>
     c38:	b5 99       	sbic	0x16, 5	; 22
     c3a:	08 94       	sec
     c3c:	88 1f       	adc	r24, r24
     c3e:	38 e0       	ldi	r19, 0x08	; 8

00000c40 <waitclk2299>:
     c40:	3a 95       	dec	r19
     c42:	b7 9b       	sbis	0x16, 7	; 22
     c44:	e9 f7       	brne	.-6      	; 0xc40 <waitclk2299>
     c46:	b5 99       	sbic	0x16, 5	; 22
     c48:	08 94       	sec
     c4a:	88 1f       	adc	r24, r24
     c4c:	38 e0       	ldi	r19, 0x08	; 8

00000c4e <waitclk3299>:
     c4e:	3a 95       	dec	r19
     c50:	b7 9b       	sbis	0x16, 7	; 22
     c52:	e9 f7       	brne	.-6      	; 0xc4e <waitclk3299>
     c54:	b5 99       	sbic	0x16, 5	; 22
     c56:	08 94       	sec
     c58:	88 1f       	adc	r24, r24
     c5a:	38 e0       	ldi	r19, 0x08	; 8

00000c5c <waitclk4299>:
     c5c:	3a 95       	dec	r19
     c5e:	b7 9b       	sbis	0x16, 7	; 22
     c60:	e9 f7       	brne	.-6      	; 0xc5c <waitclk4299>
     c62:	b5 99       	sbic	0x16, 5	; 22
     c64:	08 94       	sec
     c66:	88 1f       	adc	r24, r24
     c68:	38 e0       	ldi	r19, 0x08	; 8

00000c6a <waitclk5299>:
     c6a:	3a 95       	dec	r19
     c6c:	b7 9b       	sbis	0x16, 7	; 22
     c6e:	e9 f7       	brne	.-6      	; 0xc6a <waitclk5299>
     c70:	b5 99       	sbic	0x16, 5	; 22
     c72:	08 94       	sec
     c74:	88 1f       	adc	r24, r24
     c76:	38 e0       	ldi	r19, 0x08	; 8

00000c78 <waitclk6299>:
     c78:	3a 95       	dec	r19
     c7a:	b7 9b       	sbis	0x16, 7	; 22
     c7c:	e9 f7       	brne	.-6      	; 0xc78 <waitclk6299>
     c7e:	b5 99       	sbic	0x16, 5	; 22
     c80:	08 94       	sec
     c82:	88 1f       	adc	r24, r24
     c84:	38 e0       	ldi	r19, 0x08	; 8

00000c86 <waitclk7299>:
     c86:	3a 95       	dec	r19
     c88:	b7 9b       	sbis	0x16, 7	; 22
     c8a:	e9 f7       	brne	.-6      	; 0xc86 <waitclk7299>
     c8c:	b5 99       	sbic	0x16, 5	; 22
     c8e:	08 94       	sec
     c90:	88 1f       	adc	r24, r24
     c92:	3f 91       	pop	r19
     c94:	3f bf       	out	0x3f, r19	; 63
     c96:	3f 91       	pop	r19
     c98:	08 95       	ret

00000c9a <anibike_dl_receive_data>:
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
{
     c9a:	df 92       	push	r13
     c9c:	ef 92       	push	r14
     c9e:	ff 92       	push	r15
     ca0:	0f 93       	push	r16
     ca2:	1f 93       	push	r17
     ca4:	cf 93       	push	r28
     ca6:	df 93       	push	r29
	uint8_t *b = rxBuffer;
	uint8_t chs = 0, chs_here = 0;
	uint8_t timeout = ANIBIKE_DL_RX_TIMEOUT;
		
	// set direction of the clk pin as input. hopefully will be pulled-low
	DATALINK_PORT.OUTCLR = DATALINK_CLK_PIN;
     ca8:	c0 e4       	ldi	r28, 0x40	; 64
     caa:	d6 e0       	ldi	r29, 0x06	; 6
     cac:	a0 e8       	ldi	r26, 0x80	; 128
     cae:	fa 2e       	mov	r15, r26
     cb0:	fe 82       	std	Y+6, r15	; 0x06
	DATALINK_PORT.DIRCLR = DATALINK_CLK_PIN;
     cb2:	fa 82       	std	Y+2, r15	; 0x02
	
	PORT_ConfigurePins( &DATALINK_PORT,
     cb4:	80 e4       	ldi	r24, 0x40	; 64
     cb6:	96 e0       	ldi	r25, 0x06	; 6
     cb8:	60 e8       	ldi	r22, 0x80	; 128
     cba:	40 e0       	ldi	r20, 0x00	; 0
     cbc:	20 e0       	ldi	r18, 0x00	; 0
     cbe:	00 e0       	ldi	r16, 0x00	; 0
     cc0:	ee 24       	eor	r14, r14
     cc2:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_BOTHEDGES_gc );
							
	PORT_ConfigurePins( &DATALINK_PORT,
     cc6:	80 e4       	ldi	r24, 0x40	; 64
     cc8:	96 e0       	ldi	r25, 0x06	; 6
     cca:	60 e2       	ldi	r22, 0x20	; 32
     ccc:	40 e0       	ldi	r20, 0x00	; 0
     cce:	20 e0       	ldi	r18, 0x00	; 0
     cd0:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							PORT_ISC_BOTHEDGES_gc );
		
	// convert both lines to input totem pole - maybe its not needed
	
	// start waiting for data length
	cnt = len = anibike_dl_receive_byte ( );
     cd4:	0e 94 0c 06 	call	0xc18	; 0xc18 <anibike_dl_receive_byte>
//	printf_P( PSTR("length: %d"), rxLength);

	cnt = len &= 0x7f;
     cd8:	18 2f       	mov	r17, r24
     cda:	1f 77       	andi	r17, 0x7F	; 127
		len=128;
		cnt=128;
	}*/
	
	// read out the data
	while (cnt--)
     cdc:	09 f4       	brne	.+2      	; 0xce0 <anibike_dl_receive_data+0x46>
     cde:	83 c0       	rjmp	.+262    	; 0xde6 <anibike_dl_receive_data+0x14c>
     ce0:	f1 2e       	mov	r15, r17
     ce2:	fa 94       	dec	r15
     ce4:	c0 e0       	ldi	r28, 0x00	; 0
     ce6:	d0 e0       	ldi	r29, 0x00	; 0
		*b++ = anibike_dl_receive_byte ( );
     ce8:	0e 94 0c 06 	call	0xc18	; 0xc18 <anibike_dl_receive_byte>
					:: "I" (DATALINK_DATA_PINN), "I" (DATALINK_PORT_IN), "I" (DATALINK_CLK_PINN)
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
     cec:	fe 01       	movw	r30, r28
     cee:	e2 56       	subi	r30, 0x62	; 98
     cf0:	fd 4d       	sbci	r31, 0xDD	; 221
		cnt=128;
	}*/
	
	// read out the data
	while (cnt--)
		*b++ = anibike_dl_receive_byte ( );
     cf2:	80 83       	st	Z, r24
     cf4:	21 96       	adiw	r28, 0x01	; 1
		len=128;
		cnt=128;
	}*/
	
	// read out the data
	while (cnt--)
     cf6:	1c 17       	cp	r17, r28
     cf8:	b9 f7       	brne	.-18     	; 0xce8 <anibike_dl_receive_data+0x4e>
		*b++ = anibike_dl_receive_byte ( );
	
	// read out checksum
	chs = anibike_dl_receive_byte ( );
     cfa:	0e 94 0c 06 	call	0xc18	; 0xc18 <anibike_dl_receive_byte>
     cfe:	d8 2e       	mov	r13, r24
	
	//printf_P( PSTR("length: %d; data: %s; chs: %d"), len, rxBuffer, chs);

	PORT_ConfigurePins( &DATALINK_PORT,
     d00:	80 e4       	ldi	r24, 0x40	; 64
     d02:	96 e0       	ldi	r25, 0x06	; 6
     d04:	60 e8       	ldi	r22, 0x80	; 128
     d06:	40 e0       	ldi	r20, 0x00	; 0
     d08:	20 e0       	ldi	r18, 0x00	; 0
     d0a:	00 e3       	ldi	r16, 0x30	; 48
     d0c:	ee 24       	eor	r14, r14
     d0e:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
	
	// reset the pin directions
	DATALINK_PORT.OUTCLR = DATALINK_CLK_PIN;
     d12:	e0 e4       	ldi	r30, 0x40	; 64
     d14:	f6 e0       	ldi	r31, 0x06	; 6
     d16:	80 e8       	ldi	r24, 0x80	; 128
     d18:	86 83       	std	Z+6, r24	; 0x06
	DATALINK_PORT.DIRSET = DATALINK_CLK_PIN;
     d1a:	81 83       	std	Z+1, r24	; 0x01
							

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
     d1c:	10 93 20 22 	sts	0x2220, r17
					:: "I" (DATALINK_DATA_PINN), "I" (DATALINK_PORT_IN), "I" (DATALINK_CLK_PINN)
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
     d20:	2f 2d       	mov	r18, r15
     d22:	30 e0       	ldi	r19, 0x00	; 0
     d24:	2f 5f       	subi	r18, 0xFF	; 255
     d26:	3f 4f       	sbci	r19, 0xFF	; 255
     d28:	80 e0       	ldi	r24, 0x00	; 0
     d2a:	90 e0       	ldi	r25, 0x00	; 0
{
	uint8_t len, cnt;
	uint8_t *b = rxBuffer;
	uint8_t chs = 0, chs_here = 0;
     d2c:	40 e0       	ldi	r20, 0x00	; 0
					:: "I" (DATALINK_DATA_PINN), "I" (DATALINK_PORT_IN), "I" (DATALINK_CLK_PINN)
	);				
}

//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
     d2e:	fc 01       	movw	r30, r24
     d30:	e2 56       	subi	r30, 0x62	; 98
     d32:	fd 4d       	sbci	r31, 0xDD	; 221

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
	while (cnt--)
		chs_here += *b++;
     d34:	50 81       	ld	r21, Z
     d36:	45 0f       	add	r20, r21
     d38:	01 96       	adiw	r24, 0x01	; 1
							

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
	while (cnt--)
     d3a:	82 17       	cp	r24, r18
     d3c:	93 07       	cpc	r25, r19
     d3e:	b9 f7       	brne	.-18     	; 0xd2e <anibike_dl_receive_data+0x94>
		chs_here += *b++;
		
	//printf_P( PSTR(" chs_here: %d"), chs_here);

	// if ACK then set CLK high and return
	if ( chs_here == chs )
     d40:	4d 15       	cp	r20, r13
     d42:	09 f4       	brne	.+2      	; 0xd46 <anibike_dl_receive_data+0xac>
     d44:	40 c0       	rjmp	.+128    	; 0xdc6 <anibike_dl_receive_data+0x12c>
		printf_P( PSTR("ACK"));
		return 0;	
	}

	// wait for the data to be high (after ACK/NACK)
	while (!(DATALINK_PORT.IN&DATALINK_DATA_PIN))	
     d46:	80 91 48 06 	lds	r24, 0x0648
     d4a:	85 fd       	sbrc	r24, 5
     d4c:	0f c0       	rjmp	.+30     	; 0xd6c <anibike_dl_receive_data+0xd2>
     d4e:	c5 e7       	ldi	r28, 0x75	; 117
     d50:	d1 e0       	ldi	r29, 0x01	; 1
	{
		printf_P( PSTR("W"));
     d52:	00 d0       	rcall	.+0      	; 0xd54 <anibike_dl_receive_data+0xba>
     d54:	ed b7       	in	r30, 0x3d	; 61
     d56:	fe b7       	in	r31, 0x3e	; 62
     d58:	c1 83       	std	Z+1, r28	; 0x01
     d5a:	d2 83       	std	Z+2, r29	; 0x02
     d5c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		printf_P( PSTR("ACK"));
		return 0;	
	}

	// wait for the data to be high (after ACK/NACK)
	while (!(DATALINK_PORT.IN&DATALINK_DATA_PIN))	
     d60:	80 91 48 06 	lds	r24, 0x0648
     d64:	0f 90       	pop	r0
     d66:	0f 90       	pop	r0
     d68:	85 ff       	sbrs	r24, 5
     d6a:	f3 cf       	rjmp	.-26     	; 0xd52 <anibike_dl_receive_data+0xb8>
		printf_P( PSTR("W"));
		// wait and do nothing
	}

	// set clock high
	DATALINK_PORT.OUTSET = DATALINK_CLK_PIN;	
     d6c:	80 e8       	ldi	r24, 0x80	; 128
     d6e:	e0 e4       	ldi	r30, 0x40	; 64
     d70:	f6 e0       	ldi	r31, 0x06	; 6
     d72:	85 83       	std	Z+5, r24	; 0x05
		
	PORT_ConfigurePins( &DATALINK_PORT,
     d74:	80 e4       	ldi	r24, 0x40	; 64
     d76:	96 e0       	ldi	r25, 0x06	; 6
     d78:	60 e2       	ldi	r22, 0x20	; 32
     d7a:	40 e0       	ldi	r20, 0x00	; 0
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	00 e3       	ldi	r16, 0x30	; 48
     d80:	ee 24       	eor	r14, r14
     d82:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
						
	rxBuffer[rxLength]='\0';	
     d86:	e0 91 20 22 	lds	r30, 0x2220
     d8a:	f0 e0       	ldi	r31, 0x00	; 0
     d8c:	e2 56       	subi	r30, 0x62	; 98
     d8e:	fd 4d       	sbci	r31, 0xDD	; 221
     d90:	10 82       	st	Z, r1
	printf_P( PSTR("data: %s"), rxBuffer);
     d92:	00 d0       	rcall	.+0      	; 0xd94 <anibike_dl_receive_data+0xfa>
     d94:	00 d0       	rcall	.+0      	; 0xd96 <anibike_dl_receive_data+0xfc>
     d96:	8c e6       	ldi	r24, 0x6C	; 108
     d98:	91 e0       	ldi	r25, 0x01	; 1
     d9a:	ed b7       	in	r30, 0x3d	; 61
     d9c:	fe b7       	in	r31, 0x3e	; 62
     d9e:	81 83       	std	Z+1, r24	; 0x01
     da0:	92 83       	std	Z+2, r25	; 0x02
     da2:	8e e9       	ldi	r24, 0x9E	; 158
     da4:	92 e2       	ldi	r25, 0x22	; 34
     da6:	83 83       	std	Z+3, r24	; 0x03
     da8:	94 83       	std	Z+4, r25	; 0x04
     daa:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
     dae:	0f 90       	pop	r0
     db0:	0f 90       	pop	r0
     db2:	0f 90       	pop	r0
     db4:	0f 90       	pop	r0
}
     db6:	df 91       	pop	r29
     db8:	cf 91       	pop	r28
     dba:	1f 91       	pop	r17
     dbc:	0f 91       	pop	r16
     dbe:	ff 90       	pop	r15
     dc0:	ef 90       	pop	r14
     dc2:	df 90       	pop	r13
     dc4:	08 95       	ret
	//printf_P( PSTR(" chs_here: %d"), chs_here);

	// if ACK then set CLK high and return
	if ( chs_here == chs )
	{
		DATALINK_PORT.OUTSET = DATALINK_CLK_PIN;
     dc6:	80 e8       	ldi	r24, 0x80	; 128
     dc8:	e0 e4       	ldi	r30, 0x40	; 64
     dca:	f6 e0       	ldi	r31, 0x06	; 6
     dcc:	85 83       	std	Z+5, r24	; 0x05
		printf_P( PSTR("ACK"));
     dce:	00 d0       	rcall	.+0      	; 0xdd0 <anibike_dl_receive_data+0x136>
     dd0:	87 e7       	ldi	r24, 0x77	; 119
     dd2:	91 e0       	ldi	r25, 0x01	; 1
     dd4:	ed b7       	in	r30, 0x3d	; 61
     dd6:	fe b7       	in	r31, 0x3e	; 62
     dd8:	81 83       	std	Z+1, r24	; 0x01
     dda:	92 83       	std	Z+2, r25	; 0x02
     ddc:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return 0;	
     de0:	0f 90       	pop	r0
     de2:	0f 90       	pop	r0
     de4:	e8 cf       	rjmp	.-48     	; 0xdb6 <anibike_dl_receive_data+0x11c>
	// read out the data
	while (cnt--)
		*b++ = anibike_dl_receive_byte ( );
	
	// read out checksum
	chs = anibike_dl_receive_byte ( );
     de6:	0e 94 0c 06 	call	0xc18	; 0xc18 <anibike_dl_receive_byte>
     dea:	d8 2e       	mov	r13, r24
	
	//printf_P( PSTR("length: %d; data: %s; chs: %d"), len, rxBuffer, chs);

	PORT_ConfigurePins( &DATALINK_PORT,
     dec:	80 e4       	ldi	r24, 0x40	; 64
     dee:	96 e0       	ldi	r25, 0x06	; 6
     df0:	60 e8       	ldi	r22, 0x80	; 128
     df2:	40 e0       	ldi	r20, 0x00	; 0
     df4:	20 e0       	ldi	r18, 0x00	; 0
     df6:	00 e3       	ldi	r16, 0x30	; 48
     df8:	ee 24       	eor	r14, r14
     dfa:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							PORT_OPC_WIREDORPULL_gc,
							PORT_ISC_BOTHEDGES_gc );
	
	// reset the pin directions
	DATALINK_PORT.OUTCLR = DATALINK_CLK_PIN;
     dfe:	fe 82       	std	Y+6, r15	; 0x06
	DATALINK_PORT.DIRSET = DATALINK_CLK_PIN;
     e00:	f9 82       	std	Y+1, r15	; 0x01
							

	// calculate checksum
	b = rxBuffer;
	rxLength = cnt = len;
     e02:	10 92 20 22 	sts	0x2220, r1
//__________________________________________________________________________________________________
void anibike_dl_receive_data	( void )
{
	uint8_t len, cnt;
	uint8_t *b = rxBuffer;
	uint8_t chs = 0, chs_here = 0;
     e06:	40 e0       	ldi	r20, 0x00	; 0
     e08:	9b cf       	rjmp	.-202    	; 0xd40 <anibike_dl_receive_data+0xa6>

00000e0a <__vector_2>:
	printf_P( PSTR("data: %s"), rxBuffer);
}

//__________________________________________________________________________________________________
ISR(PORTC_INT0_vect,  ISR_BLOCK)
{
     e0a:	1f 92       	push	r1
     e0c:	0f 92       	push	r0
     e0e:	0f b6       	in	r0, 0x3f	; 63
     e10:	0f 92       	push	r0
     e12:	11 24       	eor	r1, r1
     e14:	2f 93       	push	r18
     e16:	3f 93       	push	r19
     e18:	4f 93       	push	r20
     e1a:	5f 93       	push	r21
     e1c:	6f 93       	push	r22
     e1e:	7f 93       	push	r23
     e20:	8f 93       	push	r24
     e22:	9f 93       	push	r25
     e24:	af 93       	push	r26
     e26:	bf 93       	push	r27
     e28:	ef 93       	push	r30
     e2a:	ff 93       	push	r31
	// Data was cleared
	if ( (DATALINK_PORT.IN&DATALINK_DATA_PIN)!=0 )
     e2c:	80 91 48 06 	lds	r24, 0x0648
     e30:	85 fd       	sbrc	r24, 5
     e32:	06 c0       	rjmp	.+12     	; 0xe40 <__vector_2+0x36>
		return;

	cli ();
     e34:	f8 94       	cli
	rxLength = 0;
     e36:	10 92 20 22 	sts	0x2220, r1
	anibike_dl_receive_data ( );
     e3a:	0e 94 4d 06 	call	0xc9a	; 0xc9a <anibike_dl_receive_data>
	sei ( );
     e3e:	78 94       	sei
}
     e40:	ff 91       	pop	r31
     e42:	ef 91       	pop	r30
     e44:	bf 91       	pop	r27
     e46:	af 91       	pop	r26
     e48:	9f 91       	pop	r25
     e4a:	8f 91       	pop	r24
     e4c:	7f 91       	pop	r23
     e4e:	6f 91       	pop	r22
     e50:	5f 91       	pop	r21
     e52:	4f 91       	pop	r20
     e54:	3f 91       	pop	r19
     e56:	2f 91       	pop	r18
     e58:	0f 90       	pop	r0
     e5a:	0f be       	out	0x3f, r0	; 63
     e5c:	0f 90       	pop	r0
     e5e:	1f 90       	pop	r1
     e60:	18 95       	reti

00000e62 <transfer_word>:


//__________________________________________________________________________________________________
// Transfer two bytes to and from spi recipient
uint16_t transfer_word ( uint16_t w )
{
     e62:	ef 92       	push	r14
     e64:	ff 92       	push	r15
     e66:	0f 93       	push	r16
     e68:	1f 93       	push	r17
     e6a:	cf 93       	push	r28
     e6c:	df 93       	push	r29
     e6e:	ec 01       	movw	r28, r24
	uint8_t msb = 0;
	uint8_t lsb = 0;
	uint16_t ret_val = 0;

	if (w==0)
     e70:	00 97       	sbiw	r24, 0x00	; 0
     e72:	d9 f0       	breq	.+54     	; 0xeaa <transfer_word+0x48>
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
	}
	else
	{
		lsb = (uint8_t)(w & 0xff);
     e74:	7c 01       	movw	r14, r24
     e76:	18 2f       	mov	r17, r24
		msb = (uint8_t)(w >> 8);
     e78:	0f 2d       	mov	r16, r15
		//spi_transfer ( msb );
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
     e7a:	8e e1       	ldi	r24, 0x1E	; 30
     e7c:	93 e2       	ldi	r25, 0x23	; 35
     e7e:	6c 2f       	mov	r22, r28
     e80:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
		SPI_MasterTransceiveByte(&spiMasterD, msb);
     e84:	8e e1       	ldi	r24, 0x1E	; 30
     e86:	93 e2       	ldi	r25, 0x23	; 35
     e88:	6f 2d       	mov	r22, r15
     e8a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	}

	ret_val = (uint16_t)(lsb) | ((uint16_t)(msb<<8));
     e8e:	50 2f       	mov	r21, r16
     e90:	40 e0       	ldi	r20, 0x00	; 0
     e92:	21 2f       	mov	r18, r17
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	24 2b       	or	r18, r20
     e98:	35 2b       	or	r19, r21

	return ret_val;
}
     e9a:	c9 01       	movw	r24, r18
     e9c:	df 91       	pop	r29
     e9e:	cf 91       	pop	r28
     ea0:	1f 91       	pop	r17
     ea2:	0f 91       	pop	r16
     ea4:	ff 90       	pop	r15
     ea6:	ef 90       	pop	r14
     ea8:	08 95       	ret
	uint8_t lsb = 0;
	uint16_t ret_val = 0;

	if (w==0)
	{
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     eaa:	8e e1       	ldi	r24, 0x1E	; 30
     eac:	93 e2       	ldi	r25, 0x23	; 35
     eae:	60 e0       	ldi	r22, 0x00	; 0
     eb0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     eb4:	18 2f       	mov	r17, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     eb6:	8e e1       	ldi	r24, 0x1E	; 30
     eb8:	93 e2       	ldi	r25, 0x23	; 35
     eba:	60 e0       	ldi	r22, 0x00	; 0
     ebc:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     ec0:	08 2f       	mov	r16, r24
     ec2:	e5 cf       	rjmp	.-54     	; 0xe8e <transfer_word+0x2c>

00000ec4 <FS_ReadEntry>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
{
     ec4:	8f 92       	push	r8
     ec6:	9f 92       	push	r9
     ec8:	af 92       	push	r10
     eca:	bf 92       	push	r11
     ecc:	cf 92       	push	r12
     ece:	df 92       	push	r13
     ed0:	ef 92       	push	r14
     ed2:	ff 92       	push	r15
     ed4:	0f 93       	push	r16
     ed6:	1f 93       	push	r17
     ed8:	cf 93       	push	r28
     eda:	df 93       	push	r29
     edc:	4c 01       	movw	r8, r24
     ede:	7b 01       	movw	r14, r22
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
     ee0:	fc 01       	movw	r30, r24
     ee2:	a0 80       	ld	r10, Z
     ee4:	b1 80       	ldd	r11, Z+1	; 0x01
     ee6:	c2 80       	ldd	r12, Z+2	; 0x02
     ee8:	d3 80       	ldd	r13, Z+3	; 0x03
	uint16_t iNumFrames16 = 0;
	uint8_t iNumFrames = 0;
	uint8_t itr = 0;

	CS_UP;
     eea:	c0 e6       	ldi	r28, 0x60	; 96
     eec:	d6 e0       	ldi	r29, 0x06	; 6
     eee:	00 e1       	ldi	r16, 0x10	; 16
     ef0:	0d 83       	std	Y+5, r16	; 0x05
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
     ef2:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
     ef4:	8e e1       	ldi	r24, 0x1E	; 30
     ef6:	93 e2       	ldi	r25, 0x23	; 35
     ef8:	63 e0       	ldi	r22, 0x03	; 3
     efa:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	uint8_t itr = 0;

	CS_UP;
	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
     efe:	96 01       	movw	r18, r12
     f00:	44 27       	eor	r20, r20
     f02:	55 27       	eor	r21, r21
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
     f04:	8e e1       	ldi	r24, 0x1E	; 30
     f06:	93 e2       	ldi	r25, 0x23	; 35
     f08:	62 2f       	mov	r22, r18
     f0a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
     f0e:	55 27       	eor	r21, r21
     f10:	4d 2d       	mov	r20, r13
     f12:	3c 2d       	mov	r19, r12
     f14:	2b 2d       	mov	r18, r11
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
     f16:	8e e1       	ldi	r24, 0x1E	; 30
     f18:	93 e2       	ldi	r25, 0x23	; 35
     f1a:	62 2f       	mov	r22, r18
     f1c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
     f20:	8e e1       	ldi	r24, 0x1E	; 30
     f22:	93 e2       	ldi	r25, 0x23	; 35
     f24:	6a 2d       	mov	r22, r10
     f26:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	uint8_t lsb = 0;
	uint16_t ret_val = 0;

	if (w==0)
	{
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f2a:	8e e1       	ldi	r24, 0x1E	; 30
     f2c:	93 e2       	ldi	r25, 0x23	; 35
     f2e:	60 e0       	ldi	r22, 0x00	; 0
     f30:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     f34:	a8 2e       	mov	r10, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f36:	8e e1       	ldi	r24, 0x1E	; 30
     f38:	93 e2       	ldi	r25, 0x23	; 35
     f3a:	60 e0       	ldi	r22, 0x00	; 0
     f3c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = (uint16_t)(lsb) | ((uint16_t)(msb<<8));
     f40:	38 2f       	mov	r19, r24
     f42:	20 e0       	ldi	r18, 0x00	; 0
     f44:	8a 2d       	mov	r24, r10
     f46:	90 e0       	ldi	r25, 0x00	; 0
     f48:	82 2b       	or	r24, r18
     f4a:	93 2b       	or	r25, r19
	iNumFrames16 = transfer_word ( 0 );
	iNumFrames = (uint8_t)(iNumFrames16&0xff);

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
     f4c:	81 32       	cpi	r24, 0x21	; 33
     f4e:	08 f0       	brcs	.+2      	; 0xf52 <FS_ReadEntry+0x8e>
     f50:	9a c0       	rjmp	.+308    	; 0x1086 <FS_ReadEntry+0x1c2>
		// return fail
		CS_UP;
		return 0;
	}

	pEntry->iNumFrames = iNumFrames;
     f52:	f7 01       	movw	r30, r14
     f54:	80 83       	st	Z, r24
     f56:	11 82       	std	Z+1, r1	; 0x01

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0);
     f58:	8e e1       	ldi	r24, 0x1E	; 30
     f5a:	93 e2       	ldi	r25, 0x23	; 35
     f5c:	60 e0       	ldi	r22, 0x00	; 0
     f5e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     f62:	f7 01       	movw	r30, r14
     f64:	82 83       	std	Z+2, r24	; 0x02
     f66:	8e e1       	ldi	r24, 0x1E	; 30
     f68:	93 e2       	ldi	r25, 0x23	; 35
     f6a:	60 e0       	ldi	r22, 0x00	; 0
     f6c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     f70:	f7 01       	movw	r30, r14
     f72:	83 83       	std	Z+3, r24	; 0x03
     f74:	8e e1       	ldi	r24, 0x1E	; 30
     f76:	93 e2       	ldi	r25, 0x23	; 35
     f78:	60 e0       	ldi	r22, 0x00	; 0
     f7a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     f7e:	f7 01       	movw	r30, r14
     f80:	84 83       	std	Z+4, r24	; 0x04
     f82:	8e e1       	ldi	r24, 0x1E	; 30
     f84:	93 e2       	ldi	r25, 0x23	; 35
     f86:	60 e0       	ldi	r22, 0x00	; 0
     f88:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     f8c:	f7 01       	movw	r30, r14
     f8e:	85 83       	std	Z+5, r24	; 0x05
     f90:	8e e1       	ldi	r24, 0x1E	; 30
     f92:	93 e2       	ldi	r25, 0x23	; 35
     f94:	60 e0       	ldi	r22, 0x00	; 0
     f96:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     f9a:	f7 01       	movw	r30, r14
     f9c:	86 83       	std	Z+6, r24	; 0x06
     f9e:	8e e1       	ldi	r24, 0x1E	; 30
     fa0:	93 e2       	ldi	r25, 0x23	; 35
     fa2:	60 e0       	ldi	r22, 0x00	; 0
     fa4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     fa8:	f7 01       	movw	r30, r14
     faa:	87 83       	std	Z+7, r24	; 0x07
     fac:	8e e1       	ldi	r24, 0x1E	; 30
     fae:	93 e2       	ldi	r25, 0x23	; 35
     fb0:	60 e0       	ldi	r22, 0x00	; 0
     fb2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     fb6:	f7 01       	movw	r30, r14
     fb8:	80 87       	std	Z+8, r24	; 0x08
     fba:	8e e1       	ldi	r24, 0x1E	; 30
     fbc:	93 e2       	ldi	r25, 0x23	; 35
     fbe:	60 e0       	ldi	r22, 0x00	; 0
     fc0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     fc4:	f7 01       	movw	r30, r14
     fc6:	81 87       	std	Z+9, r24	; 0x09
     fc8:	8e e1       	ldi	r24, 0x1E	; 30
     fca:	93 e2       	ldi	r25, 0x23	; 35
     fcc:	60 e0       	ldi	r22, 0x00	; 0
     fce:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     fd2:	f7 01       	movw	r30, r14
     fd4:	82 87       	std	Z+10, r24	; 0x0a
     fd6:	8e e1       	ldi	r24, 0x1E	; 30
     fd8:	93 e2       	ldi	r25, 0x23	; 35
     fda:	60 e0       	ldi	r22, 0x00	; 0
     fdc:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     fe0:	f7 01       	movw	r30, r14
     fe2:	83 87       	std	Z+11, r24	; 0x0b
     fe4:	8e e1       	ldi	r24, 0x1E	; 30
     fe6:	93 e2       	ldi	r25, 0x23	; 35
     fe8:	60 e0       	ldi	r22, 0x00	; 0
     fea:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     fee:	f7 01       	movw	r30, r14
     ff0:	84 87       	std	Z+12, r24	; 0x0c
     ff2:	8e e1       	ldi	r24, 0x1E	; 30
     ff4:	93 e2       	ldi	r25, 0x23	; 35
     ff6:	60 e0       	ldi	r22, 0x00	; 0
     ff8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
     ffc:	f7 01       	movw	r30, r14
     ffe:	85 87       	std	Z+13, r24	; 0x0d

	// Read the block addresses
	uint8_t *blockArray = (uint8_t*)(pEntry->iBlockList);
    1000:	e7 01       	movw	r28, r14
    1002:	2e 96       	adiw	r28, 0x0e	; 14
}

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
    1004:	87 01       	movw	r16, r14
    1006:	02 5b       	subi	r16, 0xB2	; 178
    1008:	1f 4f       	sbci	r17, 0xFF	; 255

	// Read the block addresses
	uint8_t *blockArray = (uint8_t*)(pEntry->iBlockList);
	for (itr = 0; itr<FS_FILE_MAX_FRAMES; itr ++)
	{
		*blockArray++ = SPI_MasterTransceiveByte(&spiMasterD, 0);
    100a:	8e e1       	ldi	r24, 0x1E	; 30
    100c:	93 e2       	ldi	r25, 0x23	; 35
    100e:	60 e0       	ldi	r22, 0x00	; 0
    1010:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1014:	88 83       	st	Y, r24
		*blockArray++ = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1016:	8e e1       	ldi	r24, 0x1E	; 30
    1018:	93 e2       	ldi	r25, 0x23	; 35
    101a:	60 e0       	ldi	r22, 0x00	; 0
    101c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1020:	89 83       	std	Y+1, r24	; 0x01
}

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
    1022:	22 96       	adiw	r28, 0x02	; 2
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0);

	// Read the block addresses
	uint8_t *blockArray = (uint8_t*)(pEntry->iBlockList);
	for (itr = 0; itr<FS_FILE_MAX_FRAMES; itr ++)
    1024:	c0 17       	cp	r28, r16
    1026:	d1 07       	cpc	r29, r17
    1028:	81 f7       	brne	.-32     	; 0x100a <FS_ReadEntry+0x146>
		*blockArray++ = SPI_MasterTransceiveByte(&spiMasterD, 0);
		*blockArray++ = SPI_MasterTransceiveByte(&spiMasterD, 0);
	}
	
	// Read other information
	pEntry->Reserved1 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    102a:	8e e1       	ldi	r24, 0x1E	; 30
    102c:	93 e2       	ldi	r25, 0x23	; 35
    102e:	60 e0       	ldi	r22, 0x00	; 0
    1030:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1034:	88 83       	st	Y, r24
	pEntry->Reserved2 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1036:	8e e1       	ldi	r24, 0x1E	; 30
    1038:	93 e2       	ldi	r25, 0x23	; 35
    103a:	60 e0       	ldi	r22, 0x00	; 0
    103c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1040:	f7 01       	movw	r30, r14
    1042:	e1 5b       	subi	r30, 0xB1	; 177
    1044:	ff 4f       	sbci	r31, 0xFF	; 255
    1046:	80 83       	st	Z, r24

	CS_UP;
    1048:	80 e1       	ldi	r24, 0x10	; 16
    104a:	e0 e6       	ldi	r30, 0x60	; 96
    104c:	f6 e0       	ldi	r31, 0x06	; 6
    104e:	85 83       	std	Z+5, r24	; 0x05

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;
    1050:	f4 01       	movw	r30, r8
    1052:	80 81       	ld	r24, Z
    1054:	91 81       	ldd	r25, Z+1	; 0x01
    1056:	a2 81       	ldd	r26, Z+2	; 0x02
    1058:	b3 81       	ldd	r27, Z+3	; 0x03
    105a:	80 5b       	subi	r24, 0xB0	; 176
    105c:	9f 4f       	sbci	r25, 0xFF	; 255
    105e:	af 4f       	sbci	r26, 0xFF	; 255
    1060:	bf 4f       	sbci	r27, 0xFF	; 255
    1062:	80 83       	st	Z, r24
    1064:	91 83       	std	Z+1, r25	; 0x01
    1066:	a2 83       	std	Z+2, r26	; 0x02
    1068:	b3 83       	std	Z+3, r27	; 0x03

	return 1;	// Success
    106a:	81 e0       	ldi	r24, 0x01	; 1
}
    106c:	df 91       	pop	r29
    106e:	cf 91       	pop	r28
    1070:	1f 91       	pop	r17
    1072:	0f 91       	pop	r16
    1074:	ff 90       	pop	r15
    1076:	ef 90       	pop	r14
    1078:	df 90       	pop	r13
    107a:	cf 90       	pop	r12
    107c:	bf 90       	pop	r11
    107e:	af 90       	pop	r10
    1080:	9f 90       	pop	r9
    1082:	8f 90       	pop	r8
    1084:	08 95       	ret
	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
	{
		// return fail
		CS_UP;
    1086:	0d 83       	std	Y+5, r16	; 0x05
		return 0;
    1088:	80 e0       	ldi	r24, 0x00	; 0
    108a:	f0 cf       	rjmp	.-32     	; 0x106c <FS_ReadEntry+0x1a8>

0000108c <FS_ReadNextEntry>:
}

//__________________________________________________________________________________________________
// Reads the next file entry and updates the global variables
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
    108c:	cf 93       	push	r28
    108e:	df 93       	push	r29
    1090:	ec 01       	movw	r28, r24
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
    1092:	80 e0       	ldi	r24, 0x00	; 0
    1094:	90 e2       	ldi	r25, 0x20	; 32
    1096:	be 01       	movw	r22, r28
    1098:	0e 94 62 07 	call	0xec4	; 0xec4 <FS_ReadEntry>
    109c:	88 23       	and	r24, r24
    109e:	21 f0       	breq	.+8      	; 0x10a8 <FS_ReadNextEntry+0x1c>
		else
		{
			bFS_Empty = 0;
		}
	}
	return 1;		// Success
    10a0:	81 e0       	ldi	r24, 0x01	; 1
}
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
	{
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;
    10a8:	80 e0       	ldi	r24, 0x00	; 0
    10aa:	90 e9       	ldi	r25, 0x90	; 144
    10ac:	af e3       	ldi	r26, 0x3F	; 63
    10ae:	b0 e0       	ldi	r27, 0x00	; 0
    10b0:	80 93 00 20 	sts	0x2000, r24
    10b4:	90 93 01 20 	sts	0x2001, r25
    10b8:	a0 93 02 20 	sts	0x2002, r26
    10bc:	b0 93 03 20 	sts	0x2003, r27

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
    10c0:	80 e0       	ldi	r24, 0x00	; 0
    10c2:	90 e2       	ldi	r25, 0x20	; 32
    10c4:	be 01       	movw	r22, r28
    10c6:	0e 94 62 07 	call	0xec4	; 0xec4 <FS_ReadEntry>
    10ca:	88 23       	and	r24, r24
    10cc:	31 f0       	breq	.+12     	; 0x10da <FS_ReadNextEntry+0x4e>
			bFS_Empty = 1;
			return 0;	// Fail
		}
		else
		{
			bFS_Empty = 0;
    10ce:	10 92 23 22 	sts	0x2223, r1
		}
	}
	return 1;		// Success
    10d2:	81 e0       	ldi	r24, 0x01	; 1
}
    10d4:	df 91       	pop	r29
    10d6:	cf 91       	pop	r28
    10d8:	08 95       	ret
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
		{
			bFS_Empty = 1;
    10da:	81 e0       	ldi	r24, 0x01	; 1
    10dc:	80 93 23 22 	sts	0x2223, r24
			return 0;	// Fail
    10e0:	80 e0       	ldi	r24, 0x00	; 0
		{
			bFS_Empty = 0;
		}
	}
	return 1;		// Success
}
    10e2:	df 91       	pop	r29
    10e4:	cf 91       	pop	r28
    10e6:	08 95       	ret

000010e8 <FS_ReadFrame>:

//__________________________________________________________________________________________________
// Read Out Frame Information
void FS_ReadFrame (uint16_t iBlock)
{
    10e8:	ef 92       	push	r14
    10ea:	ff 92       	push	r15
    10ec:	0f 93       	push	r16
    10ee:	1f 93       	push	r17
    10f0:	cf 93       	push	r28
    10f2:	df 93       	push	r29
    10f4:	9c 01       	movw	r18, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    10f6:	e0 e6       	ldi	r30, 0x60	; 96
    10f8:	f6 e0       	ldi	r31, 0x06	; 6
    10fa:	a0 e1       	ldi	r26, 0x10	; 16
    10fc:	a5 83       	std	Z+5, r26	; 0x05

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);
    10fe:	40 e0       	ldi	r20, 0x00	; 0
    1100:	50 e3       	ldi	r21, 0x30	; 48
    1102:	0e 94 86 23 	call	0x470c	; 0x470c <__umulhisi3>
    1106:	7b 01       	movw	r14, r22
    1108:	8c 01       	movw	r16, r24
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
    110a:	a6 83       	std	Z+6, r26	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
    110c:	8e e1       	ldi	r24, 0x1E	; 30
    110e:	93 e2       	ldi	r25, 0x23	; 35
    1110:	63 e0       	ldi	r22, 0x03	; 3
    1112:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
    1116:	98 01       	movw	r18, r16
    1118:	44 27       	eor	r20, r20
    111a:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
    111c:	8e e1       	ldi	r24, 0x1E	; 30
    111e:	93 e2       	ldi	r25, 0x23	; 35
    1120:	62 2f       	mov	r22, r18
    1122:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1126:	ef 2c       	mov	r14, r15
    1128:	f0 2e       	mov	r15, r16
    112a:	01 2f       	mov	r16, r17
    112c:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
    112e:	8e e1       	ldi	r24, 0x1E	; 30
    1130:	93 e2       	ldi	r25, 0x23	; 35
    1132:	6e 2d       	mov	r22, r14
    1134:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
    1138:	8e e1       	ldi	r24, 0x1E	; 30
    113a:	93 e2       	ldi	r25, 0x23	; 35
    113c:	60 e0       	ldi	r22, 0x00	; 0
    113e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1142:	c0 e8       	ldi	r28, 0x80	; 128
    1144:	d5 e2       	ldi	r29, 0x25	; 37

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
    1146:	8e e1       	ldi	r24, 0x1E	; 30
    1148:	93 e2       	ldi	r25, 0x23	; 35
    114a:	60 e0       	ldi	r22, 0x00	; 0
    114c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1150:	60 91 27 23 	lds	r22, 0x2327
    1154:	70 91 28 23 	lds	r23, 0x2328
    1158:	90 e0       	ldi	r25, 0x00	; 0
    115a:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    115e:	21 97       	sbiw	r28, 0x01	; 1
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
    1160:	91 f7       	brne	.-28     	; 0x1146 <FS_ReadFrame+0x5e>
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
	}

	CS_UP;
    1162:	80 e1       	ldi	r24, 0x10	; 16
    1164:	e0 e6       	ldi	r30, 0x60	; 96
    1166:	f6 e0       	ldi	r31, 0x06	; 6
    1168:	85 83       	std	Z+5, r24	; 0x05
}
    116a:	df 91       	pop	r29
    116c:	cf 91       	pop	r28
    116e:	1f 91       	pop	r17
    1170:	0f 91       	pop	r16
    1172:	ff 90       	pop	r15
    1174:	ef 90       	pop	r14
    1176:	08 95       	ret

00001178 <FS_ReadEntry_FileMatch>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - Only if filename matches
// Returns success (1) or fail (0) of no match (2)
uint8_t FS_ReadEntry_FileMatch ( uint32_t *pAddress, FileEntry_ST* pEntry, char* FileName )
{
    1178:	4f 92       	push	r4
    117a:	5f 92       	push	r5
    117c:	6f 92       	push	r6
    117e:	7f 92       	push	r7
    1180:	9f 92       	push	r9
    1182:	af 92       	push	r10
    1184:	bf 92       	push	r11
    1186:	cf 92       	push	r12
    1188:	df 92       	push	r13
    118a:	ef 92       	push	r14
    118c:	ff 92       	push	r15
    118e:	0f 93       	push	r16
    1190:	1f 93       	push	r17
    1192:	cf 93       	push	r28
    1194:	df 93       	push	r29
    1196:	3c 01       	movw	r6, r24
    1198:	7b 01       	movw	r14, r22
    119a:	2a 01       	movw	r4, r20
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
    119c:	fc 01       	movw	r30, r24
    119e:	a0 80       	ld	r10, Z
    11a0:	b1 80       	ldd	r11, Z+1	; 0x01
    11a2:	c2 80       	ldd	r12, Z+2	; 0x02
    11a4:	d3 80       	ldd	r13, Z+3	; 0x03
	uint16_t iNumFrames16 = 0;
	uint8_t iNumFrames = 0;
	uint8_t itr = 0;

	CS_UP;
    11a6:	00 e6       	ldi	r16, 0x60	; 96
    11a8:	16 e0       	ldi	r17, 0x06	; 6
    11aa:	60 e1       	ldi	r22, 0x10	; 16
    11ac:	96 2e       	mov	r9, r22
    11ae:	f8 01       	movw	r30, r16
    11b0:	95 82       	std	Z+5, r9	; 0x05
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
    11b2:	96 82       	std	Z+6, r9	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
    11b4:	8e e1       	ldi	r24, 0x1E	; 30
    11b6:	93 e2       	ldi	r25, 0x23	; 35
    11b8:	63 e0       	ldi	r22, 0x03	; 3
    11ba:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;

	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
    11be:	96 01       	movw	r18, r12
    11c0:	44 27       	eor	r20, r20
    11c2:	55 27       	eor	r21, r21
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
    11c4:	8e e1       	ldi	r24, 0x1E	; 30
    11c6:	93 e2       	ldi	r25, 0x23	; 35
    11c8:	62 2f       	mov	r22, r18
    11ca:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;

	// ======================================================================
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
    11ce:	55 27       	eor	r21, r21
    11d0:	4d 2d       	mov	r20, r13
    11d2:	3c 2d       	mov	r19, r12
    11d4:	2b 2d       	mov	r18, r11
	adrByte3 = Address&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
    11d6:	8e e1       	ldi	r24, 0x1E	; 30
    11d8:	93 e2       	ldi	r25, 0x23	; 35
    11da:	62 2f       	mov	r22, r18
    11dc:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
    11e0:	8e e1       	ldi	r24, 0x1E	; 30
    11e2:	93 e2       	ldi	r25, 0x23	; 35
    11e4:	6a 2d       	mov	r22, r10
    11e6:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	uint8_t lsb = 0;
	uint16_t ret_val = 0;

	if (w==0)
	{
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    11ea:	8e e1       	ldi	r24, 0x1E	; 30
    11ec:	93 e2       	ldi	r25, 0x23	; 35
    11ee:	60 e0       	ldi	r22, 0x00	; 0
    11f0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    11f4:	a8 2e       	mov	r10, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    11f6:	8e e1       	ldi	r24, 0x1E	; 30
    11f8:	93 e2       	ldi	r25, 0x23	; 35
    11fa:	60 e0       	ldi	r22, 0x00	; 0
    11fc:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = (uint16_t)(lsb) | ((uint16_t)(msb<<8));
    1200:	38 2f       	mov	r19, r24
    1202:	20 e0       	ldi	r18, 0x00	; 0
    1204:	8a 2d       	mov	r24, r10
    1206:	90 e0       	ldi	r25, 0x00	; 0
    1208:	82 2b       	or	r24, r18
    120a:	93 2b       	or	r25, r19
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	// Read the number of frames
	iNumFrames16 = transfer_word ( 0 );
	iNumFrames = (uint8_t)(iNumFrames16 & 0xff);
    120c:	a8 2e       	mov	r10, r24

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
    120e:	81 32       	cpi	r24, 0x21	; 33
    1210:	08 f0       	brcs	.+2      	; 0x1214 <FS_ReadEntry_FileMatch+0x9c>
    1212:	c1 c0       	rjmp	.+386    	; 0x1396 <FS_ReadEntry_FileMatch+0x21e>
		// return fail
		CS_UP;
		return 0;
	}

	pEntry->iNumFrames = iNumFrames;
    1214:	f7 01       	movw	r30, r14
    1216:	80 83       	st	Z, r24
    1218:	11 82       	std	Z+1, r1	; 0x01

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = SPI_MasterTransceiveByte(&spiMasterD, 0); 
    121a:	8e e1       	ldi	r24, 0x1E	; 30
    121c:	93 e2       	ldi	r25, 0x23	; 35
    121e:	60 e0       	ldi	r22, 0x00	; 0
    1220:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1224:	f7 01       	movw	r30, r14
    1226:	82 83       	std	Z+2, r24	; 0x02
    1228:	8e e1       	ldi	r24, 0x1E	; 30
    122a:	93 e2       	ldi	r25, 0x23	; 35
    122c:	60 e0       	ldi	r22, 0x00	; 0
    122e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1232:	f7 01       	movw	r30, r14
    1234:	83 83       	std	Z+3, r24	; 0x03
    1236:	8e e1       	ldi	r24, 0x1E	; 30
    1238:	93 e2       	ldi	r25, 0x23	; 35
    123a:	60 e0       	ldi	r22, 0x00	; 0
    123c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1240:	f7 01       	movw	r30, r14
    1242:	84 83       	std	Z+4, r24	; 0x04
    1244:	8e e1       	ldi	r24, 0x1E	; 30
    1246:	93 e2       	ldi	r25, 0x23	; 35
    1248:	60 e0       	ldi	r22, 0x00	; 0
    124a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    124e:	f7 01       	movw	r30, r14
    1250:	85 83       	std	Z+5, r24	; 0x05
    1252:	8e e1       	ldi	r24, 0x1E	; 30
    1254:	93 e2       	ldi	r25, 0x23	; 35
    1256:	60 e0       	ldi	r22, 0x00	; 0
    1258:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    125c:	f7 01       	movw	r30, r14
    125e:	86 83       	std	Z+6, r24	; 0x06
    1260:	8e e1       	ldi	r24, 0x1E	; 30
    1262:	93 e2       	ldi	r25, 0x23	; 35
    1264:	60 e0       	ldi	r22, 0x00	; 0
    1266:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    126a:	f7 01       	movw	r30, r14
    126c:	87 83       	std	Z+7, r24	; 0x07
    126e:	8e e1       	ldi	r24, 0x1E	; 30
    1270:	93 e2       	ldi	r25, 0x23	; 35
    1272:	60 e0       	ldi	r22, 0x00	; 0
    1274:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1278:	f7 01       	movw	r30, r14
    127a:	80 87       	std	Z+8, r24	; 0x08
    127c:	8e e1       	ldi	r24, 0x1E	; 30
    127e:	93 e2       	ldi	r25, 0x23	; 35
    1280:	60 e0       	ldi	r22, 0x00	; 0
    1282:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1286:	f7 01       	movw	r30, r14
    1288:	81 87       	std	Z+9, r24	; 0x09
    128a:	8e e1       	ldi	r24, 0x1E	; 30
    128c:	93 e2       	ldi	r25, 0x23	; 35
    128e:	60 e0       	ldi	r22, 0x00	; 0
    1290:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1294:	f7 01       	movw	r30, r14
    1296:	82 87       	std	Z+10, r24	; 0x0a
    1298:	8e e1       	ldi	r24, 0x1E	; 30
    129a:	93 e2       	ldi	r25, 0x23	; 35
    129c:	60 e0       	ldi	r22, 0x00	; 0
    129e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    12a2:	f7 01       	movw	r30, r14
    12a4:	83 87       	std	Z+11, r24	; 0x0b
    12a6:	8e e1       	ldi	r24, 0x1E	; 30
    12a8:	93 e2       	ldi	r25, 0x23	; 35
    12aa:	60 e0       	ldi	r22, 0x00	; 0
    12ac:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    12b0:	f7 01       	movw	r30, r14
    12b2:	84 87       	std	Z+12, r24	; 0x0c
    12b4:	8e e1       	ldi	r24, 0x1E	; 30
    12b6:	93 e2       	ldi	r25, 0x23	; 35
    12b8:	60 e0       	ldi	r22, 0x00	; 0
    12ba:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    12be:	f7 01       	movw	r30, r14
    12c0:	85 87       	std	Z+13, r24	; 0x0d

	if ( strcmp(pEntry->sFileName, FileName) != 0 )		// No match
    12c2:	c7 01       	movw	r24, r14
    12c4:	02 96       	adiw	r24, 0x02	; 2
    12c6:	b2 01       	movw	r22, r4
    12c8:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    12cc:	00 97       	sbiw	r24, 0x00	; 0
    12ce:	01 f1       	breq	.+64     	; 0x1310 <FS_ReadEntry_FileMatch+0x198>
	{
		CS_UP;
    12d0:	f8 01       	movw	r30, r16
    12d2:	95 82       	std	Z+5, r9	; 0x05
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
    12d4:	f3 01       	movw	r30, r6
    12d6:	80 81       	ld	r24, Z
    12d8:	91 81       	ldd	r25, Z+1	; 0x01
    12da:	a2 81       	ldd	r26, Z+2	; 0x02
    12dc:	b3 81       	ldd	r27, Z+3	; 0x03
    12de:	80 5b       	subi	r24, 0xB0	; 176
    12e0:	9f 4f       	sbci	r25, 0xFF	; 255
    12e2:	af 4f       	sbci	r26, 0xFF	; 255
    12e4:	bf 4f       	sbci	r27, 0xFF	; 255
    12e6:	80 83       	st	Z, r24
    12e8:	91 83       	std	Z+1, r25	; 0x01
    12ea:	a2 83       	std	Z+2, r26	; 0x02
    12ec:	b3 83       	std	Z+3, r27	; 0x03
		return 2;
    12ee:	82 e0       	ldi	r24, 0x02	; 2

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;

	return 1;	// Success
}
    12f0:	df 91       	pop	r29
    12f2:	cf 91       	pop	r28
    12f4:	1f 91       	pop	r17
    12f6:	0f 91       	pop	r16
    12f8:	ff 90       	pop	r15
    12fa:	ef 90       	pop	r14
    12fc:	df 90       	pop	r13
    12fe:	cf 90       	pop	r12
    1300:	bf 90       	pop	r11
    1302:	af 90       	pop	r10
    1304:	9f 90       	pop	r9
    1306:	7f 90       	pop	r7
    1308:	6f 90       	pop	r6
    130a:	5f 90       	pop	r5
    130c:	4f 90       	pop	r4
    130e:	08 95       	ret
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1310:	aa 20       	and	r10, r10
    1312:	e1 f0       	breq	.+56     	; 0x134c <FS_ReadEntry_FileMatch+0x1d4>


//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - Only if filename matches
// Returns success (1) or fail (0) of no match (2)
uint8_t FS_ReadEntry_FileMatch ( uint32_t *pAddress, FileEntry_ST* pEntry, char* FileName )
    1314:	87 01       	movw	r16, r14
    1316:	02 5f       	subi	r16, 0xF2	; 242
    1318:	1f 4f       	sbci	r17, 0xFF	; 255
    131a:	99 24       	eor	r9, r9
	uint8_t lsb = 0;
	uint16_t ret_val = 0;

	if (w==0)
	{
		lsb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    131c:	8e e1       	ldi	r24, 0x1E	; 30
    131e:	93 e2       	ldi	r25, 0x23	; 35
    1320:	60 e0       	ldi	r22, 0x00	; 0
    1322:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1326:	48 2e       	mov	r4, r24
		msb = SPI_MasterTransceiveByte(&spiMasterD, 0);
    1328:	8e e1       	ldi	r24, 0x1E	; 30
    132a:	93 e2       	ldi	r25, 0x23	; 35
    132c:	60 e0       	ldi	r22, 0x00	; 0
    132e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
		//spi_transfer ( lsb );
		SPI_MasterTransceiveByte(&spiMasterD, lsb);
		SPI_MasterTransceiveByte(&spiMasterD, msb);
	}

	ret_val = (uint16_t)(lsb) | ((uint16_t)(msb<<8));
    1332:	80 e0       	ldi	r24, 0x00	; 0
    1334:	ec 01       	movw	r28, r24
    1336:	84 2d       	mov	r24, r4
    1338:	90 e0       	ldi	r25, 0x00	; 0
    133a:	8c 2b       	or	r24, r28
    133c:	9d 2b       	or	r25, r29
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
    133e:	f8 01       	movw	r30, r16
    1340:	81 93       	st	Z+, r24
    1342:	91 93       	st	Z+, r25
    1344:	8f 01       	movw	r16, r30
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1346:	93 94       	inc	r9
    1348:	9a 14       	cp	r9, r10
    134a:	40 f3       	brcs	.-48     	; 0x131c <FS_ReadEntry_FileMatch+0x1a4>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->Reserved1 = SPI_MasterTransceiveByte(&spiMasterD, 0); 
    134c:	8e e1       	ldi	r24, 0x1E	; 30
    134e:	93 e2       	ldi	r25, 0x23	; 35
    1350:	60 e0       	ldi	r22, 0x00	; 0
    1352:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1356:	f7 01       	movw	r30, r14
    1358:	e2 5b       	subi	r30, 0xB2	; 178
    135a:	ff 4f       	sbci	r31, 0xFF	; 255
    135c:	80 83       	st	Z, r24
	pEntry->Reserved2 = SPI_MasterTransceiveByte(&spiMasterD, 0); 
    135e:	8e e1       	ldi	r24, 0x1E	; 30
    1360:	93 e2       	ldi	r25, 0x23	; 35
    1362:	60 e0       	ldi	r22, 0x00	; 0
    1364:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    1368:	f7 01       	movw	r30, r14
    136a:	e1 5b       	subi	r30, 0xB1	; 177
    136c:	ff 4f       	sbci	r31, 0xFF	; 255
    136e:	80 83       	st	Z, r24

	CS_UP;
    1370:	80 e1       	ldi	r24, 0x10	; 16
    1372:	e0 e6       	ldi	r30, 0x60	; 96
    1374:	f6 e0       	ldi	r31, 0x06	; 6
    1376:	85 83       	std	Z+5, r24	; 0x05

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;
    1378:	f3 01       	movw	r30, r6
    137a:	80 81       	ld	r24, Z
    137c:	91 81       	ldd	r25, Z+1	; 0x01
    137e:	a2 81       	ldd	r26, Z+2	; 0x02
    1380:	b3 81       	ldd	r27, Z+3	; 0x03
    1382:	80 5b       	subi	r24, 0xB0	; 176
    1384:	9f 4f       	sbci	r25, 0xFF	; 255
    1386:	af 4f       	sbci	r26, 0xFF	; 255
    1388:	bf 4f       	sbci	r27, 0xFF	; 255
    138a:	80 83       	st	Z, r24
    138c:	91 83       	std	Z+1, r25	; 0x01
    138e:	a2 83       	std	Z+2, r26	; 0x02
    1390:	b3 83       	std	Z+3, r27	; 0x03

	return 1;	// Success
    1392:	81 e0       	ldi	r24, 0x01	; 1
    1394:	ad cf       	rjmp	.-166    	; 0x12f0 <FS_ReadEntry_FileMatch+0x178>
	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
	{
		// return fail
		CS_UP;
    1396:	f8 01       	movw	r30, r16
    1398:	95 82       	std	Z+5, r9	; 0x05
		return 0;
    139a:	80 e0       	ldi	r24, 0x00	; 0
    139c:	a9 cf       	rjmp	.-174    	; 0x12f0 <FS_ReadEntry_FileMatch+0x178>

0000139e <FS_ReadFileContents>:
}

//__________________________________________________________________________________________________
// Reads out the contents of a file. Finds the file by its name
uint8_t FS_ReadFileContents( char* FileName )
{
    139e:	4f 92       	push	r4
    13a0:	5f 92       	push	r5
    13a2:	7f 92       	push	r7
    13a4:	8f 92       	push	r8
    13a6:	9f 92       	push	r9
    13a8:	af 92       	push	r10
    13aa:	bf 92       	push	r11
    13ac:	cf 92       	push	r12
    13ae:	df 92       	push	r13
    13b0:	ef 92       	push	r14
    13b2:	ff 92       	push	r15
    13b4:	0f 93       	push	r16
    13b6:	1f 93       	push	r17
    13b8:	df 93       	push	r29
    13ba:	cf 93       	push	r28
    13bc:	cd b7       	in	r28, 0x3d	; 61
    13be:	de b7       	in	r29, 0x3e	; 62
    13c0:	c4 55       	subi	r28, 0x54	; 84
    13c2:	d0 40       	sbci	r29, 0x00	; 0
    13c4:	cd bf       	out	0x3d, r28	; 61
    13c6:	de bf       	out	0x3e, r29	; 62
    13c8:	2c 01       	movw	r4, r24
//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    13ca:	80 e0       	ldi	r24, 0x00	; 0
    13cc:	90 e9       	ldi	r25, 0x90	; 144
    13ce:	af e3       	ldi	r26, 0x3F	; 63
    13d0:	b0 e0       	ldi	r27, 0x00	; 0
    13d2:	89 83       	std	Y+1, r24	; 0x01
    13d4:	9a 83       	std	Y+2, r25	; 0x02
    13d6:	ab 83       	std	Y+3, r26	; 0x03
    13d8:	bc 83       	std	Y+4, r27	; 0x04
{
	FileEntry_ST			sFileEntry;
	uint16_t				itr = 0;

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
    13da:	25 e0       	ldi	r18, 0x05	; 5
    13dc:	a2 2e       	mov	r10, r18
    13de:	b1 2c       	mov	r11, r1
    13e0:	ac 0e       	add	r10, r28
    13e2:	bd 1e       	adc	r11, r29
	uint32_t 				Address = ENTRY_TABLE_ADDR;
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    13e4:	4e 01       	movw	r8, r28
    13e6:	08 94       	sec
    13e8:	81 1c       	adc	r8, r1
    13ea:	91 1c       	adc	r9, r1
    13ec:	c4 01       	movw	r24, r8
    13ee:	b5 01       	movw	r22, r10
    13f0:	a2 01       	movw	r20, r4
    13f2:	0e 94 bc 08 	call	0x1178	; 0x1178 <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    13f6:	88 23       	and	r24, r24
    13f8:	09 f4       	brne	.+2      	; 0x13fc <FS_ReadFileContents+0x5e>
    13fa:	02 c1       	rjmp	.+516    	; 0x1600 <FS_ReadFileContents+0x262>
    13fc:	00 e0       	ldi	r16, 0x00	; 0
    13fe:	9e e8       	ldi	r25, 0x8E	; 142
    1400:	c9 2e       	mov	r12, r25
    1402:	91 e0       	ldi	r25, 0x01	; 1
    1404:	d9 2e       	mov	r13, r25
    1406:	08 c0       	rjmp	.+16     	; 0x1418 <FS_ReadFileContents+0x7a>

			printf_P ( PSTR("\r\n\r\n") );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1408:	c4 01       	movw	r24, r8
    140a:	b5 01       	movw	r22, r10
    140c:	a2 01       	movw	r20, r4
    140e:	0e 94 bc 08 	call	0x1178	; 0x1178 <FS_ReadEntry_FileMatch>
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1412:	88 23       	and	r24, r24
    1414:	09 f4       	brne	.+2      	; 0x1418 <FS_ReadFileContents+0x7a>
    1416:	63 c0       	rjmp	.+198    	; 0x14de <FS_ReadFileContents+0x140>
	{
		if ( iSucc == 1 )	// Success
    1418:	81 30       	cpi	r24, 0x01	; 1
    141a:	b1 f7       	brne	.-20     	; 0x1408 <FS_ReadFileContents+0x6a>
		{
			printf_P(PSTR("Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n"),
    141c:	8d b7       	in	r24, 0x3d	; 61
    141e:	9e b7       	in	r25, 0x3e	; 62
    1420:	08 97       	sbiw	r24, 0x08	; 8
    1422:	8d bf       	out	0x3d, r24	; 61
    1424:	9e bf       	out	0x3e, r25	; 62
    1426:	ed b7       	in	r30, 0x3d	; 61
    1428:	fe b7       	in	r31, 0x3e	; 62
    142a:	31 96       	adiw	r30, 0x01	; 1
    142c:	89 e9       	ldi	r24, 0x99	; 153
    142e:	91 e0       	ldi	r25, 0x01	; 1
    1430:	ad b7       	in	r26, 0x3d	; 61
    1432:	be b7       	in	r27, 0x3e	; 62
    1434:	11 96       	adiw	r26, 0x01	; 1
    1436:	8d 93       	st	X+, r24
    1438:	9c 93       	st	X, r25
    143a:	12 97       	sbiw	r26, 0x02	; 2
    143c:	a7 e0       	ldi	r26, 0x07	; 7
    143e:	b0 e0       	ldi	r27, 0x00	; 0
    1440:	ac 0f       	add	r26, r28
    1442:	bd 1f       	adc	r27, r29
    1444:	a2 83       	std	Z+2, r26	; 0x02
    1446:	b3 83       	std	Z+3, r27	; 0x03
    1448:	64 96       	adiw	r28, 0x14	; 20
    144a:	8f ad       	ldd	r24, Y+63	; 0x3f
    144c:	64 97       	sbiw	r28, 0x14	; 20
    144e:	84 83       	std	Z+4, r24	; 0x04
    1450:	15 82       	std	Z+5, r1	; 0x05
    1452:	8d 81       	ldd	r24, Y+5	; 0x05
    1454:	9e 81       	ldd	r25, Y+6	; 0x06
    1456:	86 83       	std	Z+6, r24	; 0x06
    1458:	97 83       	std	Z+7, r25	; 0x07
    145a:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );
    145e:	ed b7       	in	r30, 0x3d	; 61
    1460:	fe b7       	in	r31, 0x3e	; 62
    1462:	36 96       	adiw	r30, 0x06	; 6
    1464:	ed bf       	out	0x3d, r30	; 61
    1466:	fe bf       	out	0x3e, r31	; 62
    1468:	82 e9       	ldi	r24, 0x92	; 146
    146a:	91 e0       	ldi	r25, 0x01	; 1
    146c:	81 83       	std	Z+1, r24	; 0x01
    146e:	92 83       	std	Z+2, r25	; 0x02
    1470:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    1474:	0f 90       	pop	r0
    1476:	0f 90       	pop	r0
    1478:	8d 81       	ldd	r24, Y+5	; 0x05
    147a:	9e 81       	ldd	r25, Y+6	; 0x06
    147c:	00 97       	sbiw	r24, 0x00	; 0
    147e:	01 f1       	breq	.+64     	; 0x14c0 <FS_ReadFileContents+0x122>
    1480:	03 e1       	ldi	r16, 0x13	; 19
    1482:	e0 2e       	mov	r14, r16
    1484:	f1 2c       	mov	r15, r1
    1486:	ec 0e       	add	r14, r28
    1488:	fd 1e       	adc	r15, r29
    148a:	00 e0       	ldi	r16, 0x00	; 0
    148c:	10 e0       	ldi	r17, 0x00	; 0
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
    148e:	d7 01       	movw	r26, r14
    1490:	8d 91       	ld	r24, X+
    1492:	9d 91       	ld	r25, X+
    1494:	7d 01       	movw	r14, r26
    1496:	00 d0       	rcall	.+0      	; 0x1498 <FS_ReadFileContents+0xfa>
    1498:	00 d0       	rcall	.+0      	; 0x149a <FS_ReadFileContents+0xfc>
    149a:	ed b7       	in	r30, 0x3d	; 61
    149c:	fe b7       	in	r31, 0x3e	; 62
    149e:	c1 82       	std	Z+1, r12	; 0x01
    14a0:	d2 82       	std	Z+2, r13	; 0x02
    14a2:	83 83       	std	Z+3, r24	; 0x03
    14a4:	94 83       	std	Z+4, r25	; 0x04
    14a6:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    14aa:	0f 5f       	subi	r16, 0xFF	; 255
    14ac:	1f 4f       	sbci	r17, 0xFF	; 255
    14ae:	0f 90       	pop	r0
    14b0:	0f 90       	pop	r0
    14b2:	0f 90       	pop	r0
    14b4:	0f 90       	pop	r0
    14b6:	8d 81       	ldd	r24, Y+5	; 0x05
    14b8:	9e 81       	ldd	r25, Y+6	; 0x06
    14ba:	08 17       	cp	r16, r24
    14bc:	19 07       	cpc	r17, r25
    14be:	38 f3       	brcs	.-50     	; 0x148e <FS_ReadFileContents+0xf0>
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
			}

			printf_P ( PSTR("\r\n\r\n") );
    14c0:	00 d0       	rcall	.+0      	; 0x14c2 <FS_ReadFileContents+0x124>
    14c2:	e9 e8       	ldi	r30, 0x89	; 137
    14c4:	f1 e0       	ldi	r31, 0x01	; 1
    14c6:	ad b7       	in	r26, 0x3d	; 61
    14c8:	be b7       	in	r27, 0x3e	; 62
    14ca:	11 96       	adiw	r26, 0x01	; 1
    14cc:	ed 93       	st	X+, r30
    14ce:	fc 93       	st	X, r31
    14d0:	12 97       	sbiw	r26, 0x02	; 2
    14d2:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
			bFound = 1;
    14da:	01 e0       	ldi	r16, 0x01	; 1
    14dc:	95 cf       	rjmp	.-214    	; 0x1408 <FS_ReadFileContents+0x6a>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    14de:	00 23       	and	r16, r16
    14e0:	09 f4       	brne	.+2      	; 0x14e4 <FS_ReadFileContents+0x146>
    14e2:	8e c0       	rjmp	.+284    	; 0x1600 <FS_ReadFileContents+0x262>

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    14e4:	8d 81       	ldd	r24, Y+5	; 0x05
    14e6:	9e 81       	ldd	r25, Y+6	; 0x06
    14e8:	00 97       	sbiw	r24, 0x00	; 0
    14ea:	09 f4       	brne	.+2      	; 0x14ee <FS_ReadFileContents+0x150>
    14ec:	74 c0       	rjmp	.+232    	; 0x15d6 <FS_ReadFileContents+0x238>
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
    14ee:	13 e1       	ldi	r17, 0x13	; 19
    14f0:	a1 2e       	mov	r10, r17
    14f2:	b1 2c       	mov	r11, r1
    14f4:	ac 0e       	add	r10, r28
    14f6:	bd 1e       	adc	r11, r29

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    14f8:	cc 24       	eor	r12, r12
    14fa:	dd 24       	eor	r13, r13
    14fc:	b2 e0       	ldi	r27, 0x02	; 2
    14fe:	4b 2e       	mov	r4, r27
    1500:	b2 e0       	ldi	r27, 0x02	; 2
    1502:	5b 2e       	mov	r5, r27
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    1504:	a0 e6       	ldi	r26, 0x60	; 96
    1506:	8a 2e       	mov	r8, r26
    1508:	a6 e0       	ldi	r26, 0x06	; 6
    150a:	9a 2e       	mov	r9, r26
    150c:	f0 e1       	ldi	r31, 0x10	; 16
    150e:	7f 2e       	mov	r7, r31
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
		{
			printf_P( PSTR("\r\nFrame #%d Block #%d:\r\n"), itr, sFileEntry.iBlockList[itr]);
    1510:	00 d0       	rcall	.+0      	; 0x1512 <FS_ReadFileContents+0x174>
    1512:	00 d0       	rcall	.+0      	; 0x1514 <FS_ReadFileContents+0x176>
    1514:	00 d0       	rcall	.+0      	; 0x1516 <FS_ReadFileContents+0x178>
    1516:	ed b7       	in	r30, 0x3d	; 61
    1518:	fe b7       	in	r31, 0x3e	; 62
    151a:	31 96       	adiw	r30, 0x01	; 1
    151c:	ad b7       	in	r26, 0x3d	; 61
    151e:	be b7       	in	r27, 0x3e	; 62
    1520:	11 96       	adiw	r26, 0x01	; 1
    1522:	4d 92       	st	X+, r4
    1524:	5c 92       	st	X, r5
    1526:	12 97       	sbiw	r26, 0x02	; 2
    1528:	c2 82       	std	Z+2, r12	; 0x02
    152a:	d3 82       	std	Z+3, r13	; 0x03
    152c:	d5 01       	movw	r26, r10
    152e:	8d 91       	ld	r24, X+
    1530:	9c 91       	ld	r25, X
    1532:	84 83       	std	Z+4, r24	; 0x04
    1534:	95 83       	std	Z+5, r25	; 0x05
    1536:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>

			FS_ReadFrame (sFileEntry.iBlockList[itr]);
    153a:	f5 01       	movw	r30, r10
    153c:	21 91       	ld	r18, Z+
    153e:	31 91       	ld	r19, Z+
    1540:	5f 01       	movw	r10, r30
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    1542:	d4 01       	movw	r26, r8
    1544:	15 96       	adiw	r26, 0x05	; 5
    1546:	7c 92       	st	X, r7
    1548:	15 97       	sbiw	r26, 0x05	; 5

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);
    154a:	40 e0       	ldi	r20, 0x00	; 0
    154c:	50 e3       	ldi	r21, 0x30	; 48
    154e:	0e 94 86 23 	call	0x470c	; 0x470c <__umulhisi3>
    1552:	7b 01       	movw	r14, r22
    1554:	8c 01       	movw	r16, r24
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
    1556:	16 96       	adiw	r26, 0x06	; 6
    1558:	7c 92       	st	X, r7
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
    155a:	ed b7       	in	r30, 0x3d	; 61
    155c:	fe b7       	in	r31, 0x3e	; 62
    155e:	36 96       	adiw	r30, 0x06	; 6
    1560:	ed bf       	out	0x3d, r30	; 61
    1562:	fe bf       	out	0x3e, r31	; 62
    1564:	8e e1       	ldi	r24, 0x1E	; 30
    1566:	93 e2       	ldi	r25, 0x23	; 35
    1568:	63 e0       	ldi	r22, 0x03	; 3
    156a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
    156e:	98 01       	movw	r18, r16
    1570:	44 27       	eor	r20, r20
    1572:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
    1574:	8e e1       	ldi	r24, 0x1E	; 30
    1576:	93 e2       	ldi	r25, 0x23	; 35
    1578:	62 2f       	mov	r22, r18
    157a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);

	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    157e:	ef 2c       	mov	r14, r15
    1580:	f0 2e       	mov	r15, r16
    1582:	01 2f       	mov	r16, r17
    1584:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
    1586:	8e e1       	ldi	r24, 0x1E	; 30
    1588:	93 e2       	ldi	r25, 0x23	; 35
    158a:	6e 2d       	mov	r22, r14
    158c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB
    1590:	8e e1       	ldi	r24, 0x1E	; 30
    1592:	93 e2       	ldi	r25, 0x23	; 35
    1594:	60 e0       	ldi	r22, 0x00	; 0
    1596:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    159a:	00 e8       	ldi	r16, 0x80	; 128
    159c:	15 e2       	ldi	r17, 0x25	; 37

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
    159e:	8e e1       	ldi	r24, 0x1E	; 30
    15a0:	93 e2       	ldi	r25, 0x23	; 35
    15a2:	60 e0       	ldi	r22, 0x00	; 0
    15a4:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    15a8:	60 91 27 23 	lds	r22, 0x2327
    15ac:	70 91 28 23 	lds	r23, 0x2328
    15b0:	90 e0       	ldi	r25, 0x00	; 0
    15b2:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    15b6:	01 50       	subi	r16, 0x01	; 1
    15b8:	10 40       	sbci	r17, 0x00	; 0
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);      			// Read command
	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);					// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);					// starting from MSB

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
    15ba:	89 f7       	brne	.-30     	; 0x159e <FS_ReadFileContents+0x200>
	{
		putchar( SPI_MasterTransceiveByte(&spiMasterD, 0) );	// Send next char
	}

	CS_UP;
    15bc:	d4 01       	movw	r26, r8
    15be:	15 96       	adiw	r26, 0x05	; 5
    15c0:	7c 92       	st	X, r7
    15c2:	15 97       	sbiw	r26, 0x05	; 5

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    15c4:	08 94       	sec
    15c6:	c1 1c       	adc	r12, r1
    15c8:	d1 1c       	adc	r13, r1
    15ca:	8d 81       	ldd	r24, Y+5	; 0x05
    15cc:	9e 81       	ldd	r25, Y+6	; 0x06
    15ce:	c8 16       	cp	r12, r24
    15d0:	d9 06       	cpc	r13, r25
    15d2:	08 f4       	brcc	.+2      	; 0x15d6 <FS_ReadFileContents+0x238>
    15d4:	9d cf       	rjmp	.-198    	; 0x1510 <FS_ReadFileContents+0x172>
	{

	}

	return 1;		// Success
}
    15d6:	81 e0       	ldi	r24, 0x01	; 1
    15d8:	cc 5a       	subi	r28, 0xAC	; 172
    15da:	df 4f       	sbci	r29, 0xFF	; 255
    15dc:	cd bf       	out	0x3d, r28	; 61
    15de:	de bf       	out	0x3e, r29	; 62
    15e0:	cf 91       	pop	r28
    15e2:	df 91       	pop	r29
    15e4:	1f 91       	pop	r17
    15e6:	0f 91       	pop	r16
    15e8:	ff 90       	pop	r15
    15ea:	ef 90       	pop	r14
    15ec:	df 90       	pop	r13
    15ee:	cf 90       	pop	r12
    15f0:	bf 90       	pop	r11
    15f2:	af 90       	pop	r10
    15f4:	9f 90       	pop	r9
    15f6:	8f 90       	pop	r8
    15f8:	7f 90       	pop	r7
    15fa:	5f 90       	pop	r5
    15fc:	4f 90       	pop	r4
    15fe:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
    1600:	00 d0       	rcall	.+0      	; 0x1602 <FS_ReadFileContents+0x264>
    1602:	8b e7       	ldi	r24, 0x7B	; 123
    1604:	91 e0       	ldi	r25, 0x01	; 1
    1606:	ad b7       	in	r26, 0x3d	; 61
    1608:	be b7       	in	r27, 0x3e	; 62
    160a:	11 96       	adiw	r26, 0x01	; 1
    160c:	8d 93       	st	X+, r24
    160e:	9c 93       	st	X, r25
    1610:	12 97       	sbiw	r26, 0x02	; 2
    1612:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1616:	0f 90       	pop	r0
    1618:	0f 90       	pop	r0
    161a:	dd cf       	rjmp	.-70     	; 0x15d6 <FS_ReadFileContents+0x238>

0000161c <FS_ShowFileInformation>:


//__________________________________________________________________________________________________
// File System - Show on uart the file system contents
void FS_ShowFileInformation ( void )
{
    161c:	2f 92       	push	r2
    161e:	3f 92       	push	r3
    1620:	4f 92       	push	r4
    1622:	5f 92       	push	r5
    1624:	7f 92       	push	r7
    1626:	8f 92       	push	r8
    1628:	9f 92       	push	r9
    162a:	af 92       	push	r10
    162c:	bf 92       	push	r11
    162e:	cf 92       	push	r12
    1630:	df 92       	push	r13
    1632:	ef 92       	push	r14
    1634:	ff 92       	push	r15
    1636:	0f 93       	push	r16
    1638:	1f 93       	push	r17
    163a:	df 93       	push	r29
    163c:	cf 93       	push	r28
    163e:	cd b7       	in	r28, 0x3d	; 61
    1640:	de b7       	in	r29, 0x3e	; 62
    1642:	c4 55       	subi	r28, 0x54	; 84
    1644:	d0 40       	sbci	r29, 0x00	; 0
    1646:	cd bf       	out	0x3d, r28	; 61
    1648:	de bf       	out	0x3e, r29	; 62
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    164a:	e1 2c       	mov	r14, r1
    164c:	f0 e9       	ldi	r31, 0x90	; 144
    164e:	ff 2e       	mov	r15, r31
    1650:	ff e3       	ldi	r31, 0x3F	; 63
    1652:	0f 2f       	mov	r16, r31
    1654:	11 2d       	mov	r17, r1
    1656:	e9 82       	std	Y+1, r14	; 0x01
    1658:	fa 82       	std	Y+2, r15	; 0x02
    165a:	0b 83       	std	Y+3, r16	; 0x03
    165c:	1c 83       	std	Y+4, r17	; 0x04
	FileEntry_ST			sFileEntry;
	uint16_t				iCount = 0;
	uint8_t					blockNum = 0;

	printf_P ( PSTR("\r\n#	Name			Block Num	Duration	Reserved\r\n"));
    165e:	00 d0       	rcall	.+0      	; 0x1660 <FS_ShowFileInformation+0x44>
    1660:	89 ed       	ldi	r24, 0xD9	; 217
    1662:	91 e0       	ldi	r25, 0x01	; 1
    1664:	ad b7       	in	r26, 0x3d	; 61
    1666:	be b7       	in	r27, 0x3e	; 62
    1668:	11 96       	adiw	r26, 0x01	; 1
    166a:	8d 93       	st	X+, r24
    166c:	9c 93       	st	X, r25
    166e:	12 97       	sbiw	r26, 0x02	; 2
    1670:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>

	Address = ENTRY_TABLE_ADDR;
    1674:	e9 82       	std	Y+1, r14	; 0x01
    1676:	fa 82       	std	Y+2, r15	; 0x02
    1678:	0b 83       	std	Y+3, r16	; 0x03
    167a:	1c 83       	std	Y+4, r17	; 0x04

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    167c:	0f 90       	pop	r0
    167e:	0f 90       	pop	r0
// File System - Show on uart the file system contents
void FS_ShowFileInformation ( void )
{
	uint32_t 				Address = ENTRY_TABLE_ADDR;
	FileEntry_ST			sFileEntry;
	uint16_t				iCount = 0;
    1680:	cc 24       	eor	r12, r12
    1682:	dd 24       	eor	r13, r13
    1684:	8e 01       	movw	r16, r28
    1686:	0f 5f       	subi	r16, 0xFF	; 255
    1688:	1f 4f       	sbci	r17, 0xFF	; 255
    168a:	e5 e0       	ldi	r30, 0x05	; 5
    168c:	ae 2e       	mov	r10, r30
    168e:	b1 2c       	mov	r11, r1
    1690:	ac 0e       	add	r10, r28
    1692:	bd 1e       	adc	r11, r29
	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
	{
		iCount ++;
		printf_P(PSTR("%d	%s		%d		%d		%d\r\n"), 	iCount,
    1694:	75 ec       	ldi	r23, 0xC5	; 197
    1696:	87 2e       	mov	r8, r23
    1698:	71 e0       	ldi	r23, 0x01	; 1
    169a:	97 2e       	mov	r9, r23
    169c:	67 e0       	ldi	r22, 0x07	; 7
    169e:	46 2e       	mov	r4, r22
    16a0:	51 2c       	mov	r5, r1
    16a2:	4c 0e       	add	r4, r28
    16a4:	5d 1e       	adc	r5, r29
															sFileEntry.sFileName,
															sFileEntry.iBlockList[0],
															sFileEntry.Reserved1,
    16a6:	53 e5       	ldi	r21, 0x53	; 83
    16a8:	25 2e       	mov	r2, r21
    16aa:	31 2c       	mov	r3, r1
    16ac:	2c 0e       	add	r2, r28
    16ae:	3d 1e       	adc	r3, r29
    16b0:	46 eb       	ldi	r20, 0xB6	; 182
    16b2:	e4 2e       	mov	r14, r20
    16b4:	41 e0       	ldi	r20, 0x01	; 1
    16b6:	f4 2e       	mov	r15, r20

	printf_P ( PSTR("\r\n#	Name			Block Num	Duration	Reserved\r\n"));

	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    16b8:	c8 01       	movw	r24, r16
    16ba:	b5 01       	movw	r22, r10
    16bc:	0e 94 62 07 	call	0xec4	; 0xec4 <FS_ReadEntry>
    16c0:	88 23       	and	r24, r24
    16c2:	09 f4       	brne	.+2      	; 0x16c6 <FS_ShowFileInformation+0xaa>
    16c4:	7b c0       	rjmp	.+246    	; 0x17bc <FS_ShowFileInformation+0x1a0>
	{
		iCount ++;
    16c6:	08 94       	sec
    16c8:	c1 1c       	adc	r12, r1
    16ca:	d1 1c       	adc	r13, r1
		printf_P(PSTR("%d	%s		%d		%d		%d\r\n"), 	iCount,
    16cc:	ed b7       	in	r30, 0x3d	; 61
    16ce:	fe b7       	in	r31, 0x3e	; 62
    16d0:	3c 97       	sbiw	r30, 0x0c	; 12
    16d2:	ed bf       	out	0x3d, r30	; 61
    16d4:	fe bf       	out	0x3e, r31	; 62
    16d6:	31 96       	adiw	r30, 0x01	; 1
    16d8:	ad b7       	in	r26, 0x3d	; 61
    16da:	be b7       	in	r27, 0x3e	; 62
    16dc:	11 96       	adiw	r26, 0x01	; 1
    16de:	8d 92       	st	X+, r8
    16e0:	9c 92       	st	X, r9
    16e2:	12 97       	sbiw	r26, 0x02	; 2
    16e4:	c2 82       	std	Z+2, r12	; 0x02
    16e6:	d3 82       	std	Z+3, r13	; 0x03
    16e8:	44 82       	std	Z+4, r4	; 0x04
    16ea:	55 82       	std	Z+5, r5	; 0x05
    16ec:	8b 89       	ldd	r24, Y+19	; 0x13
    16ee:	9c 89       	ldd	r25, Y+20	; 0x14
    16f0:	86 83       	std	Z+6, r24	; 0x06
    16f2:	97 83       	std	Z+7, r25	; 0x07
    16f4:	d1 01       	movw	r26, r2
    16f6:	8c 91       	ld	r24, X
    16f8:	80 87       	std	Z+8, r24	; 0x08
    16fa:	11 86       	std	Z+9, r1	; 0x09
    16fc:	65 96       	adiw	r28, 0x15	; 21
    16fe:	8f ad       	ldd	r24, Y+63	; 0x3f
    1700:	65 97       	sbiw	r28, 0x15	; 21
    1702:	82 87       	std	Z+10, r24	; 0x0a
    1704:	13 86       	std	Z+11, r1	; 0x0b
    1706:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
															sFileEntry.iBlockList[0],
															sFileEntry.Reserved1,
															sFileEntry.Reserved2 );


		if (sFileEntry.iNumFrames>1)
    170a:	ed b7       	in	r30, 0x3d	; 61
    170c:	fe b7       	in	r31, 0x3e	; 62
    170e:	3c 96       	adiw	r30, 0x0c	; 12
    1710:	ed bf       	out	0x3d, r30	; 61
    1712:	fe bf       	out	0x3e, r31	; 62
    1714:	8d 81       	ldd	r24, Y+5	; 0x05
    1716:	9e 81       	ldd	r25, Y+6	; 0x06
    1718:	82 30       	cpi	r24, 0x02	; 2
    171a:	91 05       	cpc	r25, r1
    171c:	08 f4       	brcc	.+2      	; 0x1720 <FS_ShowFileInformation+0x104>
    171e:	43 c0       	rjmp	.+134    	; 0x17a6 <FS_ShowFileInformation+0x18a>
		{		
			printf_P ( PSTR("Blocks:\r\n"));
    1720:	00 d0       	rcall	.+0      	; 0x1722 <FS_ShowFileInformation+0x106>
    1722:	eb eb       	ldi	r30, 0xBB	; 187
    1724:	f1 e0       	ldi	r31, 0x01	; 1
    1726:	ad b7       	in	r26, 0x3d	; 61
    1728:	be b7       	in	r27, 0x3e	; 62
    172a:	11 96       	adiw	r26, 0x01	; 1
    172c:	ed 93       	st	X+, r30
    172e:	fc 93       	st	X, r31
    1730:	12 97       	sbiw	r26, 0x02	; 2
    1732:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
			for (blockNum = 0; blockNum < sFileEntry.iNumFrames; blockNum++ )
    1736:	0f 90       	pop	r0
    1738:	0f 90       	pop	r0
    173a:	8d 81       	ldd	r24, Y+5	; 0x05
    173c:	9e 81       	ldd	r25, Y+6	; 0x06
    173e:	00 97       	sbiw	r24, 0x00	; 0
    1740:	29 f1       	breq	.+74     	; 0x178c <FS_ShowFileInformation+0x170>
    1742:	77 24       	eor	r7, r7
    1744:	80 e0       	ldi	r24, 0x00	; 0
    1746:	90 e0       	ldi	r25, 0x00	; 0
			{
				printf_P( PSTR("%d, "), sFileEntry.iBlockList[blockNum] );
    1748:	00 d0       	rcall	.+0      	; 0x174a <FS_ShowFileInformation+0x12e>
    174a:	00 d0       	rcall	.+0      	; 0x174c <FS_ShowFileInformation+0x130>
    174c:	ad b7       	in	r26, 0x3d	; 61
    174e:	be b7       	in	r27, 0x3e	; 62
    1750:	11 96       	adiw	r26, 0x01	; 1
    1752:	ed 92       	st	X+, r14
    1754:	fc 92       	st	X, r15
    1756:	12 97       	sbiw	r26, 0x02	; 2
    1758:	07 96       	adiw	r24, 0x07	; 7
    175a:	88 0f       	add	r24, r24
    175c:	99 1f       	adc	r25, r25
    175e:	80 0f       	add	r24, r16
    1760:	91 1f       	adc	r25, r17
    1762:	fc 01       	movw	r30, r24
    1764:	84 81       	ldd	r24, Z+4	; 0x04
    1766:	95 81       	ldd	r25, Z+5	; 0x05
    1768:	13 96       	adiw	r26, 0x03	; 3
    176a:	8d 93       	st	X+, r24
    176c:	9c 93       	st	X, r25
    176e:	14 97       	sbiw	r26, 0x04	; 4
    1770:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>


		if (sFileEntry.iNumFrames>1)
		{		
			printf_P ( PSTR("Blocks:\r\n"));
			for (blockNum = 0; blockNum < sFileEntry.iNumFrames; blockNum++ )
    1774:	73 94       	inc	r7
    1776:	87 2d       	mov	r24, r7
    1778:	90 e0       	ldi	r25, 0x00	; 0
    177a:	0f 90       	pop	r0
    177c:	0f 90       	pop	r0
    177e:	0f 90       	pop	r0
    1780:	0f 90       	pop	r0
    1782:	2d 81       	ldd	r18, Y+5	; 0x05
    1784:	3e 81       	ldd	r19, Y+6	; 0x06
    1786:	82 17       	cp	r24, r18
    1788:	93 07       	cpc	r25, r19
    178a:	f0 f2       	brcs	.-68     	; 0x1748 <FS_ShowFileInformation+0x12c>
			{
				printf_P( PSTR("%d, "), sFileEntry.iBlockList[blockNum] );
			}
			printf_P ( PSTR("\r\n"));
    178c:	00 d0       	rcall	.+0      	; 0x178e <FS_ShowFileInformation+0x172>
    178e:	e3 eb       	ldi	r30, 0xB3	; 179
    1790:	f1 e0       	ldi	r31, 0x01	; 1
    1792:	ad b7       	in	r26, 0x3d	; 61
    1794:	be b7       	in	r27, 0x3e	; 62
    1796:	11 96       	adiw	r26, 0x01	; 1
    1798:	ed 93       	st	X+, r30
    179a:	fc 93       	st	X, r31
    179c:	12 97       	sbiw	r26, 0x02	; 2
    179e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    17a2:	0f 90       	pop	r0
    17a4:	0f 90       	pop	r0
		}

		iNumOfFiles = iCount;
    17a6:	c0 92 04 20 	sts	0x2004, r12
    17aa:	d0 92 05 20 	sts	0x2005, r13

	printf_P ( PSTR("\r\n#	Name			Block Num	Duration	Reserved\r\n"));

	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    17ae:	c8 01       	movw	r24, r16
    17b0:	b5 01       	movw	r22, r10
    17b2:	0e 94 62 07 	call	0xec4	; 0xec4 <FS_ReadEntry>
    17b6:	88 23       	and	r24, r24
    17b8:	09 f0       	breq	.+2      	; 0x17bc <FS_ShowFileInformation+0x1a0>
    17ba:	85 cf       	rjmp	.-246    	; 0x16c6 <FS_ShowFileInformation+0xaa>
		}

		iNumOfFiles = iCount;
	}

	if (iCount)
    17bc:	c1 14       	cp	r12, r1
    17be:	d1 04       	cpc	r13, r1
    17c0:	c9 f4       	brne	.+50     	; 0x17f4 <FS_ShowFileInformation+0x1d8>
		bFS_Empty = 0;
	else
		bFS_Empty = 1;
    17c2:	81 e0       	ldi	r24, 0x01	; 1
    17c4:	80 93 23 22 	sts	0x2223, r24
}
    17c8:	cc 5a       	subi	r28, 0xAC	; 172
    17ca:	df 4f       	sbci	r29, 0xFF	; 255
    17cc:	cd bf       	out	0x3d, r28	; 61
    17ce:	de bf       	out	0x3e, r29	; 62
    17d0:	cf 91       	pop	r28
    17d2:	df 91       	pop	r29
    17d4:	1f 91       	pop	r17
    17d6:	0f 91       	pop	r16
    17d8:	ff 90       	pop	r15
    17da:	ef 90       	pop	r14
    17dc:	df 90       	pop	r13
    17de:	cf 90       	pop	r12
    17e0:	bf 90       	pop	r11
    17e2:	af 90       	pop	r10
    17e4:	9f 90       	pop	r9
    17e6:	8f 90       	pop	r8
    17e8:	7f 90       	pop	r7
    17ea:	5f 90       	pop	r5
    17ec:	4f 90       	pop	r4
    17ee:	3f 90       	pop	r3
    17f0:	2f 90       	pop	r2
    17f2:	08 95       	ret

		iNumOfFiles = iCount;
	}

	if (iCount)
		bFS_Empty = 0;
    17f4:	10 92 23 22 	sts	0x2223, r1
    17f8:	e7 cf       	rjmp	.-50     	; 0x17c8 <FS_ShowFileInformation+0x1ac>

000017fa <FS_SearchFile>:

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
    17fa:	2f 92       	push	r2
    17fc:	3f 92       	push	r3
    17fe:	4f 92       	push	r4
    1800:	5f 92       	push	r5
    1802:	6f 92       	push	r6
    1804:	7f 92       	push	r7
    1806:	8f 92       	push	r8
    1808:	9f 92       	push	r9
    180a:	af 92       	push	r10
    180c:	bf 92       	push	r11
    180e:	cf 92       	push	r12
    1810:	df 92       	push	r13
    1812:	ef 92       	push	r14
    1814:	ff 92       	push	r15
    1816:	0f 93       	push	r16
    1818:	1f 93       	push	r17
    181a:	df 93       	push	r29
    181c:	cf 93       	push	r28
    181e:	cd b7       	in	r28, 0x3d	; 61
    1820:	de b7       	in	r29, 0x3e	; 62
    1822:	28 97       	sbiw	r28, 0x08	; 8
    1824:	cd bf       	out	0x3d, r28	; 61
    1826:	de bf       	out	0x3e, r29	; 62
    1828:	3c 01       	movw	r6, r24
    182a:	6b 01       	movw	r12, r22
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    182c:	80 e0       	ldi	r24, 0x00	; 0
    182e:	90 e9       	ldi	r25, 0x90	; 144
    1830:	af e3       	ldi	r26, 0x3F	; 63
    1832:	b0 e0       	ldi	r27, 0x00	; 0
    1834:	89 83       	std	Y+1, r24	; 0x01
    1836:	9a 83       	std	Y+2, r25	; 0x02
    1838:	ab 83       	std	Y+3, r26	; 0x03
    183a:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    183c:	4e 01       	movw	r8, r28
    183e:	08 94       	sec
    1840:	81 1c       	adc	r8, r1
    1842:	91 1c       	adc	r9, r1
    1844:	c4 01       	movw	r24, r8
    1846:	a3 01       	movw	r20, r6
    1848:	0e 94 bc 08 	call	0x1178	; 0x1178 <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    184c:	88 23       	and	r24, r24
    184e:	09 f4       	brne	.+2      	; 0x1852 <FS_SearchFile+0x58>
    1850:	a0 c0       	rjmp	.+320    	; 0x1992 <FS_SearchFile+0x198>
    1852:	00 e0       	ldi	r16, 0x00	; 0
	{
		if ( iSucc == 1 )	// Success
		{
			printf_P(PSTR("Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n"),
    1854:	19 e9       	ldi	r17, 0x99	; 153
    1856:	41 2e       	mov	r4, r17
    1858:	11 e0       	ldi	r17, 0x01	; 1
    185a:	51 2e       	mov	r5, r17
    185c:	b2 e0       	ldi	r27, 0x02	; 2
    185e:	2b 2e       	mov	r2, r27
    1860:	31 2c       	mov	r3, r1
    1862:	2c 0c       	add	r2, r12
    1864:	3d 1c       	adc	r3, r13
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
    1866:	96 01       	movw	r18, r12
    1868:	22 5b       	subi	r18, 0xB2	; 178
    186a:	3f 4f       	sbci	r19, 0xFF	; 255
    186c:	2d 83       	std	Y+5, r18	; 0x05
    186e:	3e 83       	std	Y+6, r19	; 0x06
}

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
    1870:	d6 01       	movw	r26, r12
    1872:	1e 96       	adiw	r26, 0x0e	; 14
    1874:	af 83       	std	Y+7, r26	; 0x07
    1876:	b8 87       	std	Y+8, r27	; 0x08
    1878:	ae e8       	ldi	r26, 0x8E	; 142
    187a:	aa 2e       	mov	r10, r26
    187c:	a1 e0       	ldi	r26, 0x01	; 1
    187e:	ba 2e       	mov	r11, r26
    1880:	08 c0       	rjmp	.+16     	; 0x1892 <FS_SearchFile+0x98>

			printf_P ( PSTR("\r\n\r\n") );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1882:	c4 01       	movw	r24, r8
    1884:	b6 01       	movw	r22, r12
    1886:	a3 01       	movw	r20, r6
    1888:	0e 94 bc 08 	call	0x1178	; 0x1178 <FS_ReadEntry_FileMatch>
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    188c:	88 23       	and	r24, r24
    188e:	09 f4       	brne	.+2      	; 0x1892 <FS_SearchFile+0x98>
    1890:	67 c0       	rjmp	.+206    	; 0x1960 <FS_SearchFile+0x166>
	{
		if ( iSucc == 1 )	// Success
    1892:	81 30       	cpi	r24, 0x01	; 1
    1894:	b1 f7       	brne	.-20     	; 0x1882 <FS_SearchFile+0x88>
		{
			printf_P(PSTR("Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n"),
    1896:	ed b7       	in	r30, 0x3d	; 61
    1898:	fe b7       	in	r31, 0x3e	; 62
    189a:	38 97       	sbiw	r30, 0x08	; 8
    189c:	ed bf       	out	0x3d, r30	; 61
    189e:	fe bf       	out	0x3e, r31	; 62
    18a0:	31 96       	adiw	r30, 0x01	; 1
    18a2:	ad b7       	in	r26, 0x3d	; 61
    18a4:	be b7       	in	r27, 0x3e	; 62
    18a6:	11 96       	adiw	r26, 0x01	; 1
    18a8:	4d 92       	st	X+, r4
    18aa:	5c 92       	st	X, r5
    18ac:	12 97       	sbiw	r26, 0x02	; 2
    18ae:	22 82       	std	Z+2, r2	; 0x02
    18b0:	33 82       	std	Z+3, r3	; 0x03
    18b2:	ad 81       	ldd	r26, Y+5	; 0x05
    18b4:	be 81       	ldd	r27, Y+6	; 0x06
    18b6:	8c 91       	ld	r24, X
    18b8:	84 83       	std	Z+4, r24	; 0x04
    18ba:	15 82       	std	Z+5, r1	; 0x05
    18bc:	d6 01       	movw	r26, r12
    18be:	8d 91       	ld	r24, X+
    18c0:	9c 91       	ld	r25, X
    18c2:	86 83       	std	Z+6, r24	; 0x06
    18c4:	97 83       	std	Z+7, r25	; 0x07
    18c6:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );
    18ca:	ed b7       	in	r30, 0x3d	; 61
    18cc:	fe b7       	in	r31, 0x3e	; 62
    18ce:	36 96       	adiw	r30, 0x06	; 6
    18d0:	ed bf       	out	0x3d, r30	; 61
    18d2:	fe bf       	out	0x3e, r31	; 62
    18d4:	22 e9       	ldi	r18, 0x92	; 146
    18d6:	31 e0       	ldi	r19, 0x01	; 1
    18d8:	21 83       	std	Z+1, r18	; 0x01
    18da:	32 83       	std	Z+2, r19	; 0x02
    18dc:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    18e0:	0f 90       	pop	r0
    18e2:	0f 90       	pop	r0
    18e4:	d6 01       	movw	r26, r12
    18e6:	8d 91       	ld	r24, X+
    18e8:	9c 91       	ld	r25, X
    18ea:	11 97       	sbiw	r26, 0x01	; 1
    18ec:	00 97       	sbiw	r24, 0x00	; 0
    18ee:	11 f1       	breq	.+68     	; 0x1934 <FS_SearchFile+0x13a>
}

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
    18f0:	ef 80       	ldd	r14, Y+7	; 0x07
    18f2:	f8 84       	ldd	r15, Y+8	; 0x08
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    18f4:	00 e0       	ldi	r16, 0x00	; 0
    18f6:	10 e0       	ldi	r17, 0x00	; 0
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
    18f8:	f7 01       	movw	r30, r14
    18fa:	81 91       	ld	r24, Z+
    18fc:	91 91       	ld	r25, Z+
    18fe:	7f 01       	movw	r14, r30
    1900:	00 d0       	rcall	.+0      	; 0x1902 <FS_SearchFile+0x108>
    1902:	00 d0       	rcall	.+0      	; 0x1904 <FS_SearchFile+0x10a>
    1904:	ad b7       	in	r26, 0x3d	; 61
    1906:	be b7       	in	r27, 0x3e	; 62
    1908:	11 96       	adiw	r26, 0x01	; 1
    190a:	ad 92       	st	X+, r10
    190c:	bc 92       	st	X, r11
    190e:	12 97       	sbiw	r26, 0x02	; 2
    1910:	13 96       	adiw	r26, 0x03	; 3
    1912:	8d 93       	st	X+, r24
    1914:	9c 93       	st	X, r25
    1916:	14 97       	sbiw	r26, 0x04	; 4
    1918:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
																sFileEntry->sFileName,
																sFileEntry->Reserved1,
																sFileEntry->iNumFrames );
			printf_P ( PSTR("FrLst:") );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    191c:	0f 5f       	subi	r16, 0xFF	; 255
    191e:	1f 4f       	sbci	r17, 0xFF	; 255
    1920:	0f 90       	pop	r0
    1922:	0f 90       	pop	r0
    1924:	0f 90       	pop	r0
    1926:	0f 90       	pop	r0
    1928:	f6 01       	movw	r30, r12
    192a:	80 81       	ld	r24, Z
    192c:	91 81       	ldd	r25, Z+1	; 0x01
    192e:	08 17       	cp	r16, r24
    1930:	19 07       	cpc	r17, r25
    1932:	10 f3       	brcs	.-60     	; 0x18f8 <FS_SearchFile+0xfe>
			{
				printf_P(PSTR("%d "), sFileEntry->iBlockList[itr] );
			}

			printf_P ( PSTR("\r\n\r\n") );
    1934:	00 d0       	rcall	.+0      	; 0x1936 <FS_SearchFile+0x13c>
    1936:	e9 e8       	ldi	r30, 0x89	; 137
    1938:	f1 e0       	ldi	r31, 0x01	; 1
    193a:	ad b7       	in	r26, 0x3d	; 61
    193c:	be b7       	in	r27, 0x3e	; 62
    193e:	11 96       	adiw	r26, 0x01	; 1
    1940:	ed 93       	st	X+, r30
    1942:	fc 93       	st	X, r31
    1944:	12 97       	sbiw	r26, 0x02	; 2
    1946:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    194a:	0f 90       	pop	r0
    194c:	0f 90       	pop	r0
			bFound = 1;
    194e:	01 e0       	ldi	r16, 0x01	; 1
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1950:	c4 01       	movw	r24, r8
    1952:	b6 01       	movw	r22, r12
    1954:	a3 01       	movw	r20, r6
    1956:	0e 94 bc 08 	call	0x1178	; 0x1178 <FS_ReadEntry_FileMatch>
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    195a:	88 23       	and	r24, r24
    195c:	09 f0       	breq	.+2      	; 0x1960 <FS_SearchFile+0x166>
    195e:	99 cf       	rjmp	.-206    	; 0x1892 <FS_SearchFile+0x98>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    1960:	00 23       	and	r16, r16
    1962:	b9 f0       	breq	.+46     	; 0x1992 <FS_SearchFile+0x198>
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
		return 0;	// Fail
	}

	return 1; 		// Success
    1964:	81 e0       	ldi	r24, 0x01	; 1

}
    1966:	28 96       	adiw	r28, 0x08	; 8
    1968:	cd bf       	out	0x3d, r28	; 61
    196a:	de bf       	out	0x3e, r29	; 62
    196c:	cf 91       	pop	r28
    196e:	df 91       	pop	r29
    1970:	1f 91       	pop	r17
    1972:	0f 91       	pop	r16
    1974:	ff 90       	pop	r15
    1976:	ef 90       	pop	r14
    1978:	df 90       	pop	r13
    197a:	cf 90       	pop	r12
    197c:	bf 90       	pop	r11
    197e:	af 90       	pop	r10
    1980:	9f 90       	pop	r9
    1982:	8f 90       	pop	r8
    1984:	7f 90       	pop	r7
    1986:	6f 90       	pop	r6
    1988:	5f 90       	pop	r5
    198a:	4f 90       	pop	r4
    198c:	3f 90       	pop	r3
    198e:	2f 90       	pop	r2
    1990:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		printf_P ( PSTR("\r\nNot Found\r\n") );
    1992:	00 d0       	rcall	.+0      	; 0x1994 <FS_SearchFile+0x19a>
    1994:	8b e7       	ldi	r24, 0x7B	; 123
    1996:	91 e0       	ldi	r25, 0x01	; 1
    1998:	ad b7       	in	r26, 0x3d	; 61
    199a:	be b7       	in	r27, 0x3e	; 62
    199c:	11 96       	adiw	r26, 0x01	; 1
    199e:	8d 93       	st	X+, r24
    19a0:	9c 93       	st	X, r25
    19a2:	12 97       	sbiw	r26, 0x02	; 2
    19a4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return 0;	// Fail
    19a8:	0f 90       	pop	r0
    19aa:	0f 90       	pop	r0
    19ac:	80 e0       	ldi	r24, 0x00	; 0
    19ae:	db cf       	rjmp	.-74     	; 0x1966 <FS_SearchFile+0x16c>

000019b0 <FS_StopReadingFrame>:

//__________________________________________________________________________________________________
// File System - Stop reading from memory
void FS_StopReadingFrame ( void )
{
	CS_UP;
    19b0:	80 e1       	ldi	r24, 0x10	; 16
    19b2:	e0 e6       	ldi	r30, 0x60	; 96
    19b4:	f6 e0       	ldi	r31, 0x06	; 6
    19b6:	85 83       	std	Z+5, r24	; 0x05
}
    19b8:	08 95       	ret

000019ba <FS_WriteNewEntryTable>:
//__________________________________________________________________________________________________
// File System - Get new entry table
void FS_WriteNewEntryTable ( void )
{

}
    19ba:	08 95       	ret

000019bc <initialize_hall_sensor>:
#include "AniBike2V7BT_Internal.h"

void (*hall_handler)( void ) = NULL;

void initialize_hall_sensor ( void )
{
    19bc:	ef 92       	push	r14
    19be:	0f 93       	push	r16
	// Set pin2 to be input
	HALL_SENSOR_PORT.DIRCLR = HALL_SENSOR_PIN;
    19c0:	84 e0       	ldi	r24, 0x04	; 4
    19c2:	e0 e0       	ldi	r30, 0x00	; 0
    19c4:	f6 e0       	ldi	r31, 0x06	; 6
    19c6:	82 83       	std	Z+2, r24	; 0x02
	
	// Setup asynchronous interrupt
	PORT_ConfigurePins( &HALL_SENSOR_PORT,
    19c8:	80 e0       	ldi	r24, 0x00	; 0
    19ca:	96 e0       	ldi	r25, 0x06	; 6
    19cc:	64 e0       	ldi	r22, 0x04	; 4
    19ce:	40 e0       	ldi	r20, 0x00	; 0
    19d0:	20 e0       	ldi	r18, 0x00	; 0
    19d2:	08 e1       	ldi	r16, 0x18	; 24
    19d4:	ee 24       	eor	r14, r14
    19d6:	e3 94       	inc	r14
    19d8:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
						false,
						false,
						PORT_OPC_PULLUP_gc,
						PORT_ISC_RISING_gc );
						
	PORT_ConfigureInterrupt0( &HALL_SENSOR_PORT, PORT_INT0LVL_MED_gc, HALL_SENSOR_PIN );		
    19dc:	80 e0       	ldi	r24, 0x00	; 0
    19de:	96 e0       	ldi	r25, 0x06	; 6
    19e0:	62 e0       	ldi	r22, 0x02	; 2
    19e2:	44 e0       	ldi	r20, 0x04	; 4
    19e4:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
}
    19e8:	0f 91       	pop	r16
    19ea:	ef 90       	pop	r14
    19ec:	08 95       	ret

000019ee <set_hall_interrupt_handler>:

void	set_hall_interrupt_handler ( void (*Handler)( void ) )
{
	hall_handler = Handler;
    19ee:	80 93 24 22 	sts	0x2224, r24
    19f2:	90 93 25 22 	sts	0x2225, r25
}
    19f6:	08 95       	ret

000019f8 <__vector_66>:

ISR(PORTA_INT0_vect)
{	
    19f8:	1f 92       	push	r1
    19fa:	0f 92       	push	r0
    19fc:	0f b6       	in	r0, 0x3f	; 63
    19fe:	0f 92       	push	r0
    1a00:	11 24       	eor	r1, r1
    1a02:	2f 93       	push	r18
    1a04:	3f 93       	push	r19
    1a06:	4f 93       	push	r20
    1a08:	5f 93       	push	r21
    1a0a:	6f 93       	push	r22
    1a0c:	7f 93       	push	r23
    1a0e:	8f 93       	push	r24
    1a10:	9f 93       	push	r25
    1a12:	af 93       	push	r26
    1a14:	bf 93       	push	r27
    1a16:	ef 93       	push	r30
    1a18:	ff 93       	push	r31
	if (hall_handler!=NULL)
    1a1a:	e0 91 24 22 	lds	r30, 0x2224
    1a1e:	f0 91 25 22 	lds	r31, 0x2225
    1a22:	30 97       	sbiw	r30, 0x00	; 0
    1a24:	09 f0       	breq	.+2      	; 0x1a28 <__vector_66+0x30>
		hall_handler ( );
    1a26:	09 95       	icall
}
    1a28:	ff 91       	pop	r31
    1a2a:	ef 91       	pop	r30
    1a2c:	bf 91       	pop	r27
    1a2e:	af 91       	pop	r26
    1a30:	9f 91       	pop	r25
    1a32:	8f 91       	pop	r24
    1a34:	7f 91       	pop	r23
    1a36:	6f 91       	pop	r22
    1a38:	5f 91       	pop	r21
    1a3a:	4f 91       	pop	r20
    1a3c:	3f 91       	pop	r19
    1a3e:	2f 91       	pop	r18
    1a40:	0f 90       	pop	r0
    1a42:	0f be       	out	0x3f, r0	; 63
    1a44:	0f 90       	pop	r0
    1a46:	1f 90       	pop	r1
    1a48:	18 95       	reti

00001a4a <initialize_lighting_system>:
volatile uint16_t	g_iGreenCalibrationPeriod = 255;
volatile uint16_t	g_iBlueCalibrationPeriod = 255;


void initialize_lighting_system ( void )
{
    1a4a:	cf 92       	push	r12
    1a4c:	df 92       	push	r13
    1a4e:	ef 92       	push	r14
    1a50:	ff 92       	push	r15
    1a52:	0f 93       	push	r16
    1a54:	1f 93       	push	r17
    1a56:	cf 93       	push	r28
    1a58:	df 93       	push	r29
	// Row MUX control init
	MUX_CONTROL_PORT.DIRSET = MUX_CONTROL_PINS;
    1a5a:	80 ef       	ldi	r24, 0xF0	; 240
    1a5c:	e0 e0       	ldi	r30, 0x00	; 0
    1a5e:	f6 e0       	ldi	r31, 0x06	; 6
    1a60:	81 83       	std	Z+1, r24	; 0x01
	MUX_DISABLE;
    1a62:	e5 e0       	ldi	r30, 0x05	; 5
    1a64:	f6 e0       	ldi	r31, 0x06	; 6
    1a66:	80 e8       	ldi	r24, 0x80	; 128
    1a68:	80 83       	st	Z, r24
	MUX_SET_ROW(0);
    1a6a:	80 e7       	ldi	r24, 0x70	; 112
    1a6c:	80 93 06 06 	sts	0x0606, r24
    1a70:	10 82       	st	Z, r1
	
	// Column ports init
	GREEN_PORT.DIRSET = LED_COLUMN_PINS;
    1a72:	8f e0       	ldi	r24, 0x0F	; 15
    1a74:	e0 e4       	ldi	r30, 0x40	; 64
    1a76:	f6 e0       	ldi	r31, 0x06	; 6
    1a78:	81 83       	std	Z+1, r24	; 0x01
	RED_PORT.DIRSET = LED_COLUMN_PINS;
    1a7a:	e0 e6       	ldi	r30, 0x60	; 96
    1a7c:	f6 e0       	ldi	r31, 0x06	; 6
    1a7e:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PORT.DIRSET = LED_COLUMN_PINS;
    1a80:	e0 e8       	ldi	r30, 0x80	; 128
    1a82:	f6 e0       	ldi	r31, 0x06	; 6
    1a84:	81 83       	std	Z+1, r24	; 0x01
	
	PORT_ConfigurePins( &RED_PORT,  LED_COLUMN_PINS, 1, 1, PORT_OPC_WIREDANDPULL_gc, PORT_ISC_INPUT_DISABLE_gc );
    1a86:	80 e6       	ldi	r24, 0x60	; 96
    1a88:	96 e0       	ldi	r25, 0x06	; 6
    1a8a:	6f e0       	ldi	r22, 0x0F	; 15
    1a8c:	41 e0       	ldi	r20, 0x01	; 1
    1a8e:	21 e0       	ldi	r18, 0x01	; 1
    1a90:	08 e3       	ldi	r16, 0x38	; 56
    1a92:	37 e0       	ldi	r19, 0x07	; 7
    1a94:	e3 2e       	mov	r14, r19
    1a96:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
	PORT_ConfigurePins( &GREEN_PORT,  LED_COLUMN_PINS, 1, 1, PORT_OPC_WIREDANDPULL_gc, PORT_ISC_INPUT_DISABLE_gc );
    1a9a:	80 e4       	ldi	r24, 0x40	; 64
    1a9c:	96 e0       	ldi	r25, 0x06	; 6
    1a9e:	6f e0       	ldi	r22, 0x0F	; 15
    1aa0:	41 e0       	ldi	r20, 0x01	; 1
    1aa2:	21 e0       	ldi	r18, 0x01	; 1
    1aa4:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
	PORT_ConfigurePins( &BLUE_PORT,  LED_COLUMN_PINS, 1, 1, PORT_OPC_WIREDANDPULL_gc, PORT_ISC_INPUT_DISABLE_gc );
    1aa8:	80 e8       	ldi	r24, 0x80	; 128
    1aaa:	96 e0       	ldi	r25, 0x06	; 6
    1aac:	6f e0       	ldi	r22, 0x0F	; 15
    1aae:	41 e0       	ldi	r20, 0x01	; 1
    1ab0:	21 e0       	ldi	r18, 0x01	; 1
    1ab2:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
	
	GREEN_PWM_CTRL.CTRLB |= TC0_CCAEN_bm;
    1ab6:	c0 e0       	ldi	r28, 0x00	; 0
    1ab8:	d8 e0       	ldi	r29, 0x08	; 8
    1aba:	89 81       	ldd	r24, Y+1	; 0x01
    1abc:	80 61       	ori	r24, 0x10	; 16
    1abe:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC0_CCBEN_bm;
    1ac0:	89 81       	ldd	r24, Y+1	; 0x01
    1ac2:	80 62       	ori	r24, 0x20	; 32
    1ac4:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC0_CCCEN_bm;
    1ac6:	89 81       	ldd	r24, Y+1	; 0x01
    1ac8:	80 64       	ori	r24, 0x40	; 64
    1aca:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC0_CCDEN_bm;
    1acc:	89 81       	ldd	r24, Y+1	; 0x01
    1ace:	80 68       	ori	r24, 0x80	; 128
    1ad0:	89 83       	std	Y+1, r24	; 0x01
	GREEN_PWM_CTRL.CTRLB |= TC_WGMODE_SS_gc;
    1ad2:	89 81       	ldd	r24, Y+1	; 0x01
    1ad4:	83 60       	ori	r24, 0x03	; 3
    1ad6:	89 83       	std	Y+1, r24	; 0x01
	
	RED_PWM_CTRL.CTRLB |= TC0_CCAEN_bm;
    1ad8:	00 e0       	ldi	r16, 0x00	; 0
    1ada:	19 e0       	ldi	r17, 0x09	; 9
    1adc:	f8 01       	movw	r30, r16
    1ade:	81 81       	ldd	r24, Z+1	; 0x01
    1ae0:	80 61       	ori	r24, 0x10	; 16
    1ae2:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC0_CCBEN_bm;
    1ae4:	81 81       	ldd	r24, Z+1	; 0x01
    1ae6:	80 62       	ori	r24, 0x20	; 32
    1ae8:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC0_CCCEN_bm;
    1aea:	81 81       	ldd	r24, Z+1	; 0x01
    1aec:	80 64       	ori	r24, 0x40	; 64
    1aee:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC0_CCDEN_bm;
    1af0:	81 81       	ldd	r24, Z+1	; 0x01
    1af2:	80 68       	ori	r24, 0x80	; 128
    1af4:	81 83       	std	Z+1, r24	; 0x01
	RED_PWM_CTRL.CTRLB |= TC_WGMODE_SS_gc;
    1af6:	81 81       	ldd	r24, Z+1	; 0x01
    1af8:	83 60       	ori	r24, 0x03	; 3
    1afa:	81 83       	std	Z+1, r24	; 0x01
	
	BLUE_PWM_CTRL.CTRLB |= TC0_CCAEN_bm;
    1afc:	e1 2c       	mov	r14, r1
    1afe:	8a e0       	ldi	r24, 0x0A	; 10
    1b00:	f8 2e       	mov	r15, r24
    1b02:	f7 01       	movw	r30, r14
    1b04:	81 81       	ldd	r24, Z+1	; 0x01
    1b06:	80 61       	ori	r24, 0x10	; 16
    1b08:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC0_CCBEN_bm;
    1b0a:	81 81       	ldd	r24, Z+1	; 0x01
    1b0c:	80 62       	ori	r24, 0x20	; 32
    1b0e:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC0_CCCEN_bm;
    1b10:	81 81       	ldd	r24, Z+1	; 0x01
    1b12:	80 64       	ori	r24, 0x40	; 64
    1b14:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC0_CCDEN_bm;
    1b16:	81 81       	ldd	r24, Z+1	; 0x01
    1b18:	80 68       	ori	r24, 0x80	; 128
    1b1a:	81 83       	std	Z+1, r24	; 0x01
	BLUE_PWM_CTRL.CTRLB |= TC_WGMODE_SS_gc;
    1b1c:	81 81       	ldd	r24, Z+1	; 0x01
    1b1e:	83 60       	ori	r24, 0x03	; 3
    1b20:	81 83       	std	Z+1, r24	; 0x01
	
	TC0_ConfigClockSource(&RED_PWM_CTRL, TC_CLKSEL_DIV1_gc);
    1b22:	80 e0       	ldi	r24, 0x00	; 0
    1b24:	99 e0       	ldi	r25, 0x09	; 9
    1b26:	61 e0       	ldi	r22, 0x01	; 1
    1b28:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <TC0_ConfigClockSource>
	TC0_ConfigClockSource(&GREEN_PWM_CTRL, TC_CLKSEL_DIV1_gc);
    1b2c:	80 e0       	ldi	r24, 0x00	; 0
    1b2e:	98 e0       	ldi	r25, 0x08	; 8
    1b30:	61 e0       	ldi	r22, 0x01	; 1
    1b32:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <TC0_ConfigClockSource>
	TC0_ConfigClockSource(&BLUE_PWM_CTRL, TC_CLKSEL_DIV1_gc);
    1b36:	80 e0       	ldi	r24, 0x00	; 0
    1b38:	9a e0       	ldi	r25, 0x0A	; 10
    1b3a:	61 e0       	ldi	r22, 0x01	; 1
    1b3c:	0e 94 fc 22 	call	0x45f8	; 0x45f8 <TC0_ConfigClockSource>
	BLUE_PWM_CTRL.CNT = 0;
}

void read_period_calibrations ( uint16_t *r, uint16_t *g, uint16_t *b )
{
	*r = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2);
    1b40:	80 e0       	ldi	r24, 0x00	; 0
    1b42:	60 e0       	ldi	r22, 0x00	; 0
    1b44:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1b48:	90 e0       	ldi	r25, 0x00	; 0
    1b4a:	80 93 06 20 	sts	0x2006, r24
    1b4e:	90 93 07 20 	sts	0x2007, r25
	*r |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2+1))<<8;
    1b52:	c0 90 06 20 	lds	r12, 0x2006
    1b56:	d0 90 07 20 	lds	r13, 0x2007
    1b5a:	80 e0       	ldi	r24, 0x00	; 0
    1b5c:	61 e0       	ldi	r22, 0x01	; 1
    1b5e:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1b62:	38 2f       	mov	r19, r24
    1b64:	20 e0       	ldi	r18, 0x00	; 0
    1b66:	c2 2a       	or	r12, r18
    1b68:	d3 2a       	or	r13, r19
    1b6a:	c0 92 06 20 	sts	0x2006, r12
    1b6e:	d0 92 07 20 	sts	0x2007, r13
	
	*g = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2);
    1b72:	80 e0       	ldi	r24, 0x00	; 0
    1b74:	62 e0       	ldi	r22, 0x02	; 2
    1b76:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1b7a:	90 e0       	ldi	r25, 0x00	; 0
    1b7c:	80 93 08 20 	sts	0x2008, r24
    1b80:	90 93 09 20 	sts	0x2009, r25
	*g |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2+1))<<8;
    1b84:	c0 90 08 20 	lds	r12, 0x2008
    1b88:	d0 90 09 20 	lds	r13, 0x2009
    1b8c:	80 e0       	ldi	r24, 0x00	; 0
    1b8e:	63 e0       	ldi	r22, 0x03	; 3
    1b90:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1b94:	38 2f       	mov	r19, r24
    1b96:	20 e0       	ldi	r18, 0x00	; 0
    1b98:	c2 2a       	or	r12, r18
    1b9a:	d3 2a       	or	r13, r19
    1b9c:	c0 92 08 20 	sts	0x2008, r12
    1ba0:	d0 92 09 20 	sts	0x2009, r13
	
	*b = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2);
    1ba4:	80 e0       	ldi	r24, 0x00	; 0
    1ba6:	64 e0       	ldi	r22, 0x04	; 4
    1ba8:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1bac:	90 e0       	ldi	r25, 0x00	; 0
    1bae:	80 93 0a 20 	sts	0x200A, r24
    1bb2:	90 93 0b 20 	sts	0x200B, r25
	*b |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2+1))<<8;
    1bb6:	c0 90 0a 20 	lds	r12, 0x200A
    1bba:	d0 90 0b 20 	lds	r13, 0x200B
    1bbe:	80 e0       	ldi	r24, 0x00	; 0
    1bc0:	65 e0       	ldi	r22, 0x05	; 5
    1bc2:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1bc6:	38 2f       	mov	r19, r24
    1bc8:	20 e0       	ldi	r18, 0x00	; 0
    1bca:	c2 2a       	or	r12, r18
    1bcc:	d3 2a       	or	r13, r19
    1bce:	c0 92 0a 20 	sts	0x200A, r12
    1bd2:	d0 92 0b 20 	sts	0x200B, r13
	TC0_ConfigClockSource(&GREEN_PWM_CTRL, TC_CLKSEL_DIV1_gc);
	TC0_ConfigClockSource(&BLUE_PWM_CTRL, TC_CLKSEL_DIV1_gc);
	
	read_period_calibrations ( &g_iRedCalibrationPeriod, &g_iGreenCalibrationPeriod, &g_iBlueCalibrationPeriod );
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g_iGreenCalibrationPeriod);
    1bd6:	80 91 08 20 	lds	r24, 0x2008
    1bda:	90 91 09 20 	lds	r25, 0x2009
    1bde:	8e a3       	std	Y+38, r24	; 0x26
    1be0:	9f a3       	std	Y+39, r25	; 0x27
	TC_SetPeriod(&RED_PWM_CTRL, g_iRedCalibrationPeriod);
    1be2:	80 91 06 20 	lds	r24, 0x2006
    1be6:	90 91 07 20 	lds	r25, 0x2007
    1bea:	f8 01       	movw	r30, r16
    1bec:	86 a3       	std	Z+38, r24	; 0x26
    1bee:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetPeriod(&BLUE_PWM_CTRL, g_iBlueCalibrationPeriod);
    1bf0:	80 91 0a 20 	lds	r24, 0x200A
    1bf4:	90 91 0b 20 	lds	r25, 0x200B
    1bf8:	f7 01       	movw	r30, r14
    1bfa:	86 a3       	std	Z+38, r24	; 0x26
    1bfc:	97 a3       	std	Z+39, r25	; 0x27
	
	RED_PWM_CTRL.CNT = 0;
    1bfe:	f8 01       	movw	r30, r16
    1c00:	10 a2       	std	Z+32, r1	; 0x20
    1c02:	11 a2       	std	Z+33, r1	; 0x21
	GREEN_PWM_CTRL.CNT = 0;
    1c04:	18 a2       	std	Y+32, r1	; 0x20
    1c06:	19 a2       	std	Y+33, r1	; 0x21
	BLUE_PWM_CTRL.CNT = 0;
    1c08:	f7 01       	movw	r30, r14
    1c0a:	10 a2       	std	Z+32, r1	; 0x20
    1c0c:	11 a2       	std	Z+33, r1	; 0x21
}
    1c0e:	df 91       	pop	r29
    1c10:	cf 91       	pop	r28
    1c12:	1f 91       	pop	r17
    1c14:	0f 91       	pop	r16
    1c16:	ff 90       	pop	r15
    1c18:	ef 90       	pop	r14
    1c1a:	df 90       	pop	r13
    1c1c:	cf 90       	pop	r12
    1c1e:	08 95       	ret

00001c20 <read_period_calibrations>:

void read_period_calibrations ( uint16_t *r, uint16_t *g, uint16_t *b )
{
    1c20:	cf 92       	push	r12
    1c22:	df 92       	push	r13
    1c24:	ef 92       	push	r14
    1c26:	ff 92       	push	r15
    1c28:	0f 93       	push	r16
    1c2a:	1f 93       	push	r17
    1c2c:	cf 93       	push	r28
    1c2e:	df 93       	push	r29
    1c30:	7c 01       	movw	r14, r24
    1c32:	6b 01       	movw	r12, r22
    1c34:	ea 01       	movw	r28, r20
	*r = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2);
    1c36:	80 e0       	ldi	r24, 0x00	; 0
    1c38:	60 e0       	ldi	r22, 0x00	; 0
    1c3a:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1c3e:	08 2f       	mov	r16, r24
    1c40:	10 e0       	ldi	r17, 0x00	; 0
    1c42:	f7 01       	movw	r30, r14
    1c44:	00 83       	st	Z, r16
    1c46:	11 83       	std	Z+1, r17	; 0x01
	*r |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2+1))<<8;
    1c48:	80 e0       	ldi	r24, 0x00	; 0
    1c4a:	61 e0       	ldi	r22, 0x01	; 1
    1c4c:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1c50:	38 2f       	mov	r19, r24
    1c52:	20 e0       	ldi	r18, 0x00	; 0
    1c54:	02 2b       	or	r16, r18
    1c56:	13 2b       	or	r17, r19
    1c58:	f7 01       	movw	r30, r14
    1c5a:	00 83       	st	Z, r16
    1c5c:	11 83       	std	Z+1, r17	; 0x01
	
	*g = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2);
    1c5e:	80 e0       	ldi	r24, 0x00	; 0
    1c60:	62 e0       	ldi	r22, 0x02	; 2
    1c62:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1c66:	08 2f       	mov	r16, r24
    1c68:	10 e0       	ldi	r17, 0x00	; 0
    1c6a:	f6 01       	movw	r30, r12
    1c6c:	00 83       	st	Z, r16
    1c6e:	11 83       	std	Z+1, r17	; 0x01
	*g |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2+1))<<8;
    1c70:	80 e0       	ldi	r24, 0x00	; 0
    1c72:	63 e0       	ldi	r22, 0x03	; 3
    1c74:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1c78:	38 2f       	mov	r19, r24
    1c7a:	20 e0       	ldi	r18, 0x00	; 0
    1c7c:	02 2b       	or	r16, r18
    1c7e:	13 2b       	or	r17, r19
    1c80:	f6 01       	movw	r30, r12
    1c82:	00 83       	st	Z, r16
    1c84:	11 83       	std	Z+1, r17	; 0x01
	
	*b = EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2);
    1c86:	80 e0       	ldi	r24, 0x00	; 0
    1c88:	64 e0       	ldi	r22, 0x04	; 4
    1c8a:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1c8e:	08 2f       	mov	r16, r24
    1c90:	10 e0       	ldi	r17, 0x00	; 0
    1c92:	08 83       	st	Y, r16
    1c94:	19 83       	std	Y+1, r17	; 0x01
	*b |= (EEPROM_ReadByte	(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2+1))<<8;
    1c96:	80 e0       	ldi	r24, 0x00	; 0
    1c98:	65 e0       	ldi	r22, 0x05	; 5
    1c9a:	0e 94 1e 1f 	call	0x3e3c	; 0x3e3c <EEPROM_ReadByte>
    1c9e:	38 2f       	mov	r19, r24
    1ca0:	20 e0       	ldi	r18, 0x00	; 0
    1ca2:	02 2b       	or	r16, r18
    1ca4:	13 2b       	or	r17, r19
    1ca6:	08 83       	st	Y, r16
    1ca8:	19 83       	std	Y+1, r17	; 0x01
}
    1caa:	df 91       	pop	r29
    1cac:	cf 91       	pop	r28
    1cae:	1f 91       	pop	r17
    1cb0:	0f 91       	pop	r16
    1cb2:	ff 90       	pop	r15
    1cb4:	ef 90       	pop	r14
    1cb6:	df 90       	pop	r13
    1cb8:	cf 90       	pop	r12
    1cba:	08 95       	ret

00001cbc <write_period_calibrations>:

void write_period_calibrations ( uint16_t r, uint16_t g, uint16_t b )
{
    1cbc:	cf 92       	push	r12
    1cbe:	df 92       	push	r13
    1cc0:	ef 92       	push	r14
    1cc2:	ff 92       	push	r15
    1cc4:	0f 93       	push	r16
    1cc6:	1f 93       	push	r17
    1cc8:	cf 93       	push	r28
    1cca:	df 93       	push	r29
    1ccc:	7c 01       	movw	r14, r24
    1cce:	8b 01       	movw	r16, r22
    1cd0:	ea 01       	movw	r28, r20
	EEPROM_ErasePage( EEPROM_LED_CONFIG_PAGE );
    1cd2:	80 e0       	ldi	r24, 0x00	; 0
    1cd4:	0e 94 bb 1f 	call	0x3f76	; 0x3f76 <EEPROM_ErasePage>
	
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2, r&0xFF);
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	60 e0       	ldi	r22, 0x00	; 0
    1cdc:	4e 2d       	mov	r20, r14
    1cde:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <EEPROM_WriteByte>
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_R_CONFIG_WORD*2+1, (r>>8)&0xFF);
    1ce2:	80 e0       	ldi	r24, 0x00	; 0
    1ce4:	61 e0       	ldi	r22, 0x01	; 1
    1ce6:	4f 2d       	mov	r20, r15
    1ce8:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <EEPROM_WriteByte>
	
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2, g&0xFF);
    1cec:	80 e0       	ldi	r24, 0x00	; 0
    1cee:	62 e0       	ldi	r22, 0x02	; 2
    1cf0:	40 2f       	mov	r20, r16
    1cf2:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <EEPROM_WriteByte>
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_G_CONFIG_WORD*2+1, (g>>8)&0xFF);
    1cf6:	80 e0       	ldi	r24, 0x00	; 0
    1cf8:	63 e0       	ldi	r22, 0x03	; 3
    1cfa:	41 2f       	mov	r20, r17
    1cfc:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <EEPROM_WriteByte>
	
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2, b&0xFF);
    1d00:	80 e0       	ldi	r24, 0x00	; 0
    1d02:	64 e0       	ldi	r22, 0x04	; 4
    1d04:	6e 01       	movw	r12, r28
    1d06:	4c 2f       	mov	r20, r28
    1d08:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <EEPROM_WriteByte>
	EEPROM_WriteByte(EEPROM_LED_CONFIG_PAGE, EEPROM_B_CONFIG_WORD*2+1, (b>>8)&0xFF);
    1d0c:	80 e0       	ldi	r24, 0x00	; 0
    1d0e:	65 e0       	ldi	r22, 0x05	; 5
    1d10:	4d 2d       	mov	r20, r13
    1d12:	0e 94 da 1e 	call	0x3db4	; 0x3db4 <EEPROM_WriteByte>
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g);
    1d16:	e0 e0       	ldi	r30, 0x00	; 0
    1d18:	f8 e0       	ldi	r31, 0x08	; 8
    1d1a:	06 a3       	std	Z+38, r16	; 0x26
    1d1c:	17 a3       	std	Z+39, r17	; 0x27
	TC_SetPeriod(&RED_PWM_CTRL, r);
    1d1e:	e0 e0       	ldi	r30, 0x00	; 0
    1d20:	f9 e0       	ldi	r31, 0x09	; 9
    1d22:	e6 a2       	std	Z+38, r14	; 0x26
    1d24:	f7 a2       	std	Z+39, r15	; 0x27
	TC_SetPeriod(&BLUE_PWM_CTRL, b);
    1d26:	e0 e0       	ldi	r30, 0x00	; 0
    1d28:	fa e0       	ldi	r31, 0x0A	; 10
    1d2a:	c6 a3       	std	Z+38, r28	; 0x26
    1d2c:	d7 a3       	std	Z+39, r29	; 0x27
    1d2e:	df 91       	pop	r29
    1d30:	cf 91       	pop	r28
    1d32:	1f 91       	pop	r17
    1d34:	0f 91       	pop	r16
    1d36:	ff 90       	pop	r15
    1d38:	ef 90       	pop	r14
    1d3a:	df 90       	pop	r13
    1d3c:	cf 90       	pop	r12
    1d3e:	08 95       	ret

00001d40 <hall_sensor_handler>:

#include "AniBike2V7BT_Internal.h"

void hall_sensor_handler ( void )
{
	printf_P ( PSTR("Hall Sensor\r\n"));
    1d40:	00 d0       	rcall	.+0      	; 0x1d42 <hall_sensor_handler+0x2>
    1d42:	8b e1       	ldi	r24, 0x1B	; 27
    1d44:	92 e0       	ldi	r25, 0x02	; 2
    1d46:	ed b7       	in	r30, 0x3d	; 61
    1d48:	fe b7       	in	r31, 0x3e	; 62
    1d4a:	81 83       	std	Z+1, r24	; 0x01
    1d4c:	92 83       	std	Z+2, r25	; 0x02
    1d4e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1d52:	0f 90       	pop	r0
    1d54:	0f 90       	pop	r0
}
    1d56:	08 95       	ret

00001d58 <main>:
/*****************************************************************
 *			M A I N    F U N C T I O N 
 *****************************************************************/
int main(void)
{
	SetClockFreq ( 16 );
    1d58:	80 e1       	ldi	r24, 0x10	; 16
    1d5a:	0e 94 d6 04 	call	0x9ac	; 0x9ac <SetClockFreq>
	
	initialize_hall_sensor(  );
    1d5e:	0e 94 de 0c 	call	0x19bc	; 0x19bc <initialize_hall_sensor>
	initialize_lighting_system(  );	
    1d62:	0e 94 25 0d 	call	0x1a4a	; 0x1a4a <initialize_lighting_system>
	dataflash_spi_init (  );
    1d66:	0e 94 90 1b 	call	0x3720	; 0x3720 <dataflash_spi_init>
	
	swUART_ConfigureDevice ( 0 );
    1d6a:	80 e0       	ldi	r24, 0x00	; 0
    1d6c:	90 e0       	ldi	r25, 0x00	; 0
    1d6e:	0e 94 fa 21 	call	0x43f4	; 0x43f4 <swUART_ConfigureDevice>
	swUART_SetRxInterruptLevel ( 3 );
    1d72:	83 e0       	ldi	r24, 0x03	; 3
    1d74:	90 e0       	ldi	r25, 0x00	; 0
    1d76:	0e 94 64 22 	call	0x44c8	; 0x44c8 <swUART_SetRxInterruptLevel>
	swUART_SetInterruptHandler ( rx_handler );
    1d7a:	81 e9       	ldi	r24, 0x91	; 145
    1d7c:	98 e1       	ldi	r25, 0x18	; 24
    1d7e:	0e 94 be 22 	call	0x457c	; 0x457c <swUART_SetInterruptHandler>
	set_hall_interrupt_handler( hall_sensor_handler );
    1d82:	80 ea       	ldi	r24, 0xA0	; 160
    1d84:	9e e0       	ldi	r25, 0x0E	; 14
    1d86:	0e 94 f7 0c 	call	0x19ee	; 0x19ee <set_hall_interrupt_handler>
	
	anibike_dl_initialize ( ANIBIKE_DL_MASTER );	
    1d8a:	80 e0       	ldi	r24, 0x00	; 0
    1d8c:	0e 94 1e 05 	call	0xa3c	; 0xa3c <anibike_dl_initialize>
	
	sei ( );
    1d90:	78 94       	sei
    1d92:	ff cf       	rjmp	.-2      	; 0x1d92 <main+0x3a>

00001d94 <tm_cmd_software_reset>:
	Resets the microcontroller   
*/
/**************************************************************************/
void tm_cmd_software_reset	(U8 argc, char **argv)
{
	CPU_CCP=CCP_IOREG_gc;
    1d94:	88 ed       	ldi	r24, 0xD8	; 216
    1d96:	84 bf       	out	0x34, r24	; 52
	RST.CTRL=RST_SWRST_bm;
    1d98:	81 e0       	ldi	r24, 0x01	; 1
    1d9a:	e8 e7       	ldi	r30, 0x78	; 120
    1d9c:	f0 e0       	ldi	r31, 0x00	; 0
    1d9e:	81 83       	std	Z+1, r24	; 0x01
}
    1da0:	08 95       	ret

00001da2 <tm_cmd_write_dl>:
/*!
	Send data to Secondary ANIBIKE Board and get the response  
*/
/**************************************************************************/
void tm_cmd_write_dl		(U8 argc, char **argv)
{
    1da2:	fb 01       	movw	r30, r22
	uint8_t result = anibike_dl_send_data ((uint8_t*)((void*)(argv[1])), strlen(argv[1]));	
    1da4:	82 81       	ldd	r24, Z+2	; 0x02
    1da6:	93 81       	ldd	r25, Z+3	; 0x03
    1da8:	fc 01       	movw	r30, r24
    1daa:	df 01       	movw	r26, r30
    1dac:	0d 90       	ld	r0, X+
    1dae:	00 20       	and	r0, r0
    1db0:	e9 f7       	brne	.-6      	; 0x1dac <tm_cmd_write_dl+0xa>
    1db2:	bd 01       	movw	r22, r26
    1db4:	61 50       	subi	r22, 0x01	; 1
    1db6:	70 40       	sbci	r23, 0x00	; 0
    1db8:	6e 1b       	sub	r22, r30
    1dba:	7f 0b       	sbc	r23, r31
    1dbc:	0e 94 84 05 	call	0xb08	; 0xb08 <anibike_dl_send_data>
	
	switch (result)
    1dc0:	81 30       	cpi	r24, 0x01	; 1
    1dc2:	09 f1       	breq	.+66     	; 0x1e06 <tm_cmd_write_dl+0x64>
    1dc4:	81 30       	cpi	r24, 0x01	; 1
    1dc6:	28 f0       	brcs	.+10     	; 0x1dd2 <tm_cmd_write_dl+0x30>
    1dc8:	82 30       	cpi	r24, 0x02	; 2
    1dca:	59 f1       	breq	.+86     	; 0x1e22 <tm_cmd_write_dl+0x80>
    1dcc:	83 30       	cpi	r24, 0x03	; 3
    1dce:	69 f0       	breq	.+26     	; 0x1dea <tm_cmd_write_dl+0x48>
    1dd0:	08 95       	ret
	{
		case 0: printf_P( PSTR("transaction successful (ACKed)\r\n")); break;
    1dd2:	00 d0       	rcall	.+0      	; 0x1dd4 <tm_cmd_write_dl+0x32>
    1dd4:	86 e6       	ldi	r24, 0x66	; 102
    1dd6:	92 e0       	ldi	r25, 0x02	; 2
    1dd8:	ed b7       	in	r30, 0x3d	; 61
    1dda:	fe b7       	in	r31, 0x3e	; 62
    1ddc:	81 83       	std	Z+1, r24	; 0x01
    1dde:	92 83       	std	Z+2, r25	; 0x02
    1de0:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1de4:	0f 90       	pop	r0
    1de6:	0f 90       	pop	r0
    1de8:	08 95       	ret
		case 1: printf_P( PSTR("no slave detected\r\n")); break;
		case 2: printf_P( PSTR("slave does not respond\r\n")); break;
		case 3: printf_P( PSTR("received NACK\r\n")); break;
    1dea:	00 d0       	rcall	.+0      	; 0x1dec <tm_cmd_write_dl+0x4a>
    1dec:	89 e2       	ldi	r24, 0x29	; 41
    1dee:	92 e0       	ldi	r25, 0x02	; 2
    1df0:	ad b7       	in	r26, 0x3d	; 61
    1df2:	be b7       	in	r27, 0x3e	; 62
    1df4:	11 96       	adiw	r26, 0x01	; 1
    1df6:	8d 93       	st	X+, r24
    1df8:	9c 93       	st	X, r25
    1dfa:	12 97       	sbiw	r26, 0x02	; 2
    1dfc:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1e00:	0f 90       	pop	r0
    1e02:	0f 90       	pop	r0
    1e04:	08 95       	ret
	uint8_t result = anibike_dl_send_data ((uint8_t*)((void*)(argv[1])), strlen(argv[1]));	
	
	switch (result)
	{
		case 0: printf_P( PSTR("transaction successful (ACKed)\r\n")); break;
		case 1: printf_P( PSTR("no slave detected\r\n")); break;
    1e06:	00 d0       	rcall	.+0      	; 0x1e08 <tm_cmd_write_dl+0x66>
    1e08:	82 e5       	ldi	r24, 0x52	; 82
    1e0a:	92 e0       	ldi	r25, 0x02	; 2
    1e0c:	ad b7       	in	r26, 0x3d	; 61
    1e0e:	be b7       	in	r27, 0x3e	; 62
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	8d 93       	st	X+, r24
    1e14:	9c 93       	st	X, r25
    1e16:	12 97       	sbiw	r26, 0x02	; 2
    1e18:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1e1c:	0f 90       	pop	r0
    1e1e:	0f 90       	pop	r0
    1e20:	08 95       	ret
		case 2: printf_P( PSTR("slave does not respond\r\n")); break;
    1e22:	00 d0       	rcall	.+0      	; 0x1e24 <tm_cmd_write_dl+0x82>
    1e24:	89 e3       	ldi	r24, 0x39	; 57
    1e26:	92 e0       	ldi	r25, 0x02	; 2
    1e28:	ed b7       	in	r30, 0x3d	; 61
    1e2a:	fe b7       	in	r31, 0x3e	; 62
    1e2c:	81 83       	std	Z+1, r24	; 0x01
    1e2e:	92 83       	std	Z+2, r25	; 0x02
    1e30:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1e34:	0f 90       	pop	r0
    1e36:	0f 90       	pop	r0
    1e38:	08 95       	ret

00001e3a <tm_cmd_cs_high>:
	Pull up CS pin   
*/
/**************************************************************************/
void tm_cmd_cs_high			(U8 argc, char **argv)
{
	CS_UP;
    1e3a:	80 e1       	ldi	r24, 0x10	; 16
    1e3c:	e0 e6       	ldi	r30, 0x60	; 96
    1e3e:	f6 e0       	ldi	r31, 0x06	; 6
    1e40:	85 83       	std	Z+5, r24	; 0x05
	printf_P (PSTR("OK\r\n"));
    1e42:	00 d0       	rcall	.+0      	; 0x1e44 <tm_cmd_cs_high+0xa>
    1e44:	82 e0       	ldi	r24, 0x02	; 2
    1e46:	97 e0       	ldi	r25, 0x07	; 7
    1e48:	ed b7       	in	r30, 0x3d	; 61
    1e4a:	fe b7       	in	r31, 0x3e	; 62
    1e4c:	81 83       	std	Z+1, r24	; 0x01
    1e4e:	92 83       	std	Z+2, r25	; 0x02
    1e50:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1e54:	0f 90       	pop	r0
    1e56:	0f 90       	pop	r0
}
    1e58:	08 95       	ret

00001e5a <tm_cmd_cs_low>:
	Pull down CS pin   
*/
/**************************************************************************/
void tm_cmd_cs_low			(U8 argc, char **argv)
{
	CS_DOWN;
    1e5a:	80 e1       	ldi	r24, 0x10	; 16
    1e5c:	e0 e6       	ldi	r30, 0x60	; 96
    1e5e:	f6 e0       	ldi	r31, 0x06	; 6
    1e60:	86 83       	std	Z+6, r24	; 0x06
	printf_P (PSTR("OK\r\n"));
    1e62:	00 d0       	rcall	.+0      	; 0x1e64 <tm_cmd_cs_low+0xa>
    1e64:	87 e0       	ldi	r24, 0x07	; 7
    1e66:	97 e0       	ldi	r25, 0x07	; 7
    1e68:	ed b7       	in	r30, 0x3d	; 61
    1e6a:	fe b7       	in	r31, 0x3e	; 62
    1e6c:	81 83       	std	Z+1, r24	; 0x01
    1e6e:	92 83       	std	Z+2, r25	; 0x02
    1e70:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1e74:	0f 90       	pop	r0
    1e76:	0f 90       	pop	r0
}
    1e78:	08 95       	ret

00001e7a <tm_cmd_repa>:
	Print-out the soft parameters of the system   
*/
/**************************************************************************/
void tm_cmd_repa			(U8 argc, char **argv)
{
	printf_P ( PSTR("COLOR_DEPTH:%03d;"
    1e7a:	8d b7       	in	r24, 0x3d	; 61
    1e7c:	9e b7       	in	r25, 0x3e	; 62
    1e7e:	0a 97       	sbiw	r24, 0x0a	; 10
    1e80:	8d bf       	out	0x3d, r24	; 61
    1e82:	9e bf       	out	0x3e, r25	; 62
    1e84:	ed b7       	in	r30, 0x3d	; 61
    1e86:	fe b7       	in	r31, 0x3e	; 62
    1e88:	31 96       	adiw	r30, 0x01	; 1
    1e8a:	8c e0       	ldi	r24, 0x0C	; 12
    1e8c:	98 e0       	ldi	r25, 0x08	; 8
    1e8e:	ad b7       	in	r26, 0x3d	; 61
    1e90:	be b7       	in	r27, 0x3e	; 62
    1e92:	11 96       	adiw	r26, 0x01	; 1
    1e94:	8d 93       	st	X+, r24
    1e96:	9c 93       	st	X, r25
    1e98:	12 97       	sbiw	r26, 0x02	; 2
    1e9a:	84 e0       	ldi	r24, 0x04	; 4
    1e9c:	90 e0       	ldi	r25, 0x00	; 0
    1e9e:	82 83       	std	Z+2, r24	; 0x02
    1ea0:	93 83       	std	Z+3, r25	; 0x03
    1ea2:	83 e0       	ldi	r24, 0x03	; 3
    1ea4:	90 e0       	ldi	r25, 0x00	; 0
    1ea6:	84 83       	std	Z+4, r24	; 0x04
    1ea8:	95 83       	std	Z+5, r25	; 0x05
    1eaa:	8c e0       	ldi	r24, 0x0C	; 12
    1eac:	90 e0       	ldi	r25, 0x00	; 0
    1eae:	86 83       	std	Z+6, r24	; 0x06
    1eb0:	97 83       	std	Z+7, r25	; 0x07
    1eb2:	80 e2       	ldi	r24, 0x20	; 32
    1eb4:	90 e0       	ldi	r25, 0x00	; 0
    1eb6:	80 87       	std	Z+8, r24	; 0x08
    1eb8:	91 87       	std	Z+9, r25	; 0x09
    1eba:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1ebe:	8d b7       	in	r24, 0x3d	; 61
    1ec0:	9e b7       	in	r25, 0x3e	; 62
    1ec2:	0a 96       	adiw	r24, 0x0a	; 10
    1ec4:	8d bf       	out	0x3d, r24	; 61
    1ec6:	9e bf       	out	0x3e, r25	; 62
					"MAX_FRAMES:%03d;eol\r\n"), 
				ANIBIKE_COLOR_DEPTH,
				FS_FRAME_BLOCKS,
				FS_FILENAME_LENGTH,
				FS_FILE_MAX_FRAMES);
}
    1ec8:	08 95       	ret

00001eca <tm_cmd_echo_on>:
	echo is on
*/
/**************************************************************************/
void tm_cmd_echo_on(U8 argc, char **argv)
{
	g_EchoOnOff = 1;
    1eca:	81 e0       	ldi	r24, 0x01	; 1
    1ecc:	80 93 30 20 	sts	0x2030, r24
	printf_P (PSTR("OK\r\n"));
    1ed0:	00 d0       	rcall	.+0      	; 0x1ed2 <tm_cmd_echo_on+0x8>
    1ed2:	88 e1       	ldi	r24, 0x18	; 24
    1ed4:	99 e0       	ldi	r25, 0x09	; 9
    1ed6:	ed b7       	in	r30, 0x3d	; 61
    1ed8:	fe b7       	in	r31, 0x3e	; 62
    1eda:	81 83       	std	Z+1, r24	; 0x01
    1edc:	92 83       	std	Z+2, r25	; 0x02
    1ede:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1ee2:	0f 90       	pop	r0
    1ee4:	0f 90       	pop	r0
}
    1ee6:	08 95       	ret

00001ee8 <tm_cmd_start_all>:
	Exited the transfer mode so start up all the other stuff
*/
/**************************************************************************/
void tm_cmd_start_all(U8 argc, char **argv)
{
	g_isOperating = 1;
    1ee8:	81 e0       	ldi	r24, 0x01	; 1
    1eea:	80 93 2b 22 	sts	0x222B, r24

//	TIMSK1 = (1<<OCIE1A);	// Compare Interrupt
//	TIMSK2 = (1<<OCIE2A); 	// Compare interrupt
//	SET_ROW(0);

	CS_UP;
    1eee:	80 e1       	ldi	r24, 0x10	; 16
    1ef0:	e0 e6       	ldi	r30, 0x60	; 96
    1ef2:	f6 e0       	ldi	r31, 0x06	; 6
    1ef4:	85 83       	std	Z+5, r24	; 0x05
//	g_iCurrentFrameCycle = 0;

	
	printf_P (PSTR("OK\r\n"));
    1ef6:	00 d0       	rcall	.+0      	; 0x1ef8 <tm_cmd_start_all+0x10>
    1ef8:	8d e1       	ldi	r24, 0x1D	; 29
    1efa:	99 e0       	ldi	r25, 0x09	; 9
    1efc:	ed b7       	in	r30, 0x3d	; 61
    1efe:	fe b7       	in	r31, 0x3e	; 62
    1f00:	81 83       	std	Z+1, r24	; 0x01
    1f02:	92 83       	std	Z+2, r25	; 0x02
    1f04:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1f08:	0f 90       	pop	r0
    1f0a:	0f 90       	pop	r0
}
    1f0c:	08 95       	ret

00001f0e <tm_cmd_stop_all>:
	Entered the transfer mode so stop all the other stuff
*/
/**************************************************************************/
void tm_cmd_stop_all(U8 argc, char **argv)
{
	g_isOperating = 0;
    1f0e:	10 92 2b 22 	sts	0x222B, r1
//	TIMSK1 = 0;	// Compare Interrupt
//	TIMSK2 = 0; // Compare interrupt

//	ROW_PORT = 0x00;

	CS_UP;
    1f12:	80 e1       	ldi	r24, 0x10	; 16
    1f14:	e0 e6       	ldi	r30, 0x60	; 96
    1f16:	f6 e0       	ldi	r31, 0x06	; 6
    1f18:	85 83       	std	Z+5, r24	; 0x05

	printf_P (PSTR("OK\r\n"));
    1f1a:	00 d0       	rcall	.+0      	; 0x1f1c <tm_cmd_stop_all+0xe>
    1f1c:	82 e2       	ldi	r24, 0x22	; 34
    1f1e:	99 e0       	ldi	r25, 0x09	; 9
    1f20:	ed b7       	in	r30, 0x3d	; 61
    1f22:	fe b7       	in	r31, 0x3e	; 62
    1f24:	81 83       	std	Z+1, r24	; 0x01
    1f26:	92 83       	std	Z+2, r25	; 0x02
    1f28:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1f2c:	0f 90       	pop	r0
    1f2e:	0f 90       	pop	r0
}
    1f30:	08 95       	ret

00001f32 <tm_cmd_echo_off>:
	echo is off    
*/
/**************************************************************************/
void tm_cmd_echo_off(U8 argc, char **argv)
{
	g_EchoOnOff = 0;
    1f32:	10 92 30 20 	sts	0x2030, r1
	printf_P (PSTR("OK\r\n"));
    1f36:	00 d0       	rcall	.+0      	; 0x1f38 <tm_cmd_echo_off+0x6>
    1f38:	87 e2       	ldi	r24, 0x27	; 39
    1f3a:	99 e0       	ldi	r25, 0x09	; 9
    1f3c:	ed b7       	in	r30, 0x3d	; 61
    1f3e:	fe b7       	in	r31, 0x3e	; 62
    1f40:	81 83       	std	Z+1, r24	; 0x01
    1f42:	92 83       	std	Z+2, r25	; 0x02
    1f44:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    1f48:	0f 90       	pop	r0
    1f4a:	0f 90       	pop	r0
}
    1f4c:	08 95       	ret

00001f4e <tm_cmd_write_led_cal>:
/*!
	Store the calibration values for the LEDs (max counter number)  
*/
/**************************************************************************/
void tm_cmd_write_led_cal (U8 argc, char **argv)
{
    1f4e:	af 92       	push	r10
    1f50:	bf 92       	push	r11
    1f52:	cf 92       	push	r12
    1f54:	df 92       	push	r13
    1f56:	ef 92       	push	r14
    1f58:	ff 92       	push	r15
    1f5a:	0f 93       	push	r16
    1f5c:	1f 93       	push	r17
    1f5e:	cf 93       	push	r28
    1f60:	df 93       	push	r29
    1f62:	eb 01       	movw	r28, r22
	if (argc != 4)
    1f64:	84 30       	cpi	r24, 0x04	; 4
    1f66:	b1 f0       	breq	.+44     	; 0x1f94 <tm_cmd_write_led_cal+0x46>
	{
		printf_P( PSTR("usage: write_cal red16 green16 blue16\r\n"));
    1f68:	00 d0       	rcall	.+0      	; 0x1f6a <tm_cmd_write_led_cal+0x1c>
    1f6a:	87 e8       	ldi	r24, 0x87	; 135
    1f6c:	92 e0       	ldi	r25, 0x02	; 2
    1f6e:	ed b7       	in	r30, 0x3d	; 61
    1f70:	fe b7       	in	r31, 0x3e	; 62
    1f72:	81 83       	std	Z+1, r24	; 0x01
    1f74:	92 83       	std	Z+2, r25	; 0x02
    1f76:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    1f7a:	0f 90       	pop	r0
    1f7c:	0f 90       	pop	r0
	write_period_calibrations ( g_iRedCalibrationPeriod, g_iGreenCalibrationPeriod, g_iBlueCalibrationPeriod );
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g_iGreenCalibrationPeriod);
	TC_SetPeriod(&RED_PWM_CTRL, g_iRedCalibrationPeriod);
	TC_SetPeriod(&BLUE_PWM_CTRL, g_iBlueCalibrationPeriod);
}
    1f7e:	df 91       	pop	r29
    1f80:	cf 91       	pop	r28
    1f82:	1f 91       	pop	r17
    1f84:	0f 91       	pop	r16
    1f86:	ff 90       	pop	r15
    1f88:	ef 90       	pop	r14
    1f8a:	df 90       	pop	r13
    1f8c:	cf 90       	pop	r12
    1f8e:	bf 90       	pop	r11
    1f90:	af 90       	pop	r10
    1f92:	08 95       	ret
	if (argc != 4)
	{
		printf_P( PSTR("usage: write_cal red16 green16 blue16\r\n"));
		return;	
	}
	g_iRedCalibrationPeriod = atol(argv[1]);
    1f94:	8a 81       	ldd	r24, Y+2	; 0x02
    1f96:	9b 81       	ldd	r25, Y+3	; 0x03
    1f98:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    1f9c:	7b 01       	movw	r14, r22
    1f9e:	8c 01       	movw	r16, r24
    1fa0:	60 93 06 20 	sts	0x2006, r22
    1fa4:	70 93 07 20 	sts	0x2007, r23
	g_iGreenCalibrationPeriod = atol(argv[2]);
    1fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    1faa:	9d 81       	ldd	r25, Y+5	; 0x05
    1fac:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    1fb0:	5b 01       	movw	r10, r22
    1fb2:	6c 01       	movw	r12, r24
    1fb4:	60 93 08 20 	sts	0x2008, r22
    1fb8:	70 93 09 20 	sts	0x2009, r23
	g_iBlueCalibrationPeriod = atol(argv[3]);
    1fbc:	8e 81       	ldd	r24, Y+6	; 0x06
    1fbe:	9f 81       	ldd	r25, Y+7	; 0x07
    1fc0:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    1fc4:	9b 01       	movw	r18, r22
    1fc6:	ac 01       	movw	r20, r24
    1fc8:	60 93 0a 20 	sts	0x200A, r22
    1fcc:	70 93 0b 20 	sts	0x200B, r23
	
	write_period_calibrations ( g_iRedCalibrationPeriod, g_iGreenCalibrationPeriod, g_iBlueCalibrationPeriod );
    1fd0:	c7 01       	movw	r24, r14
    1fd2:	b5 01       	movw	r22, r10
    1fd4:	a9 01       	movw	r20, r18
    1fd6:	0e 94 5e 0e 	call	0x1cbc	; 0x1cbc <write_period_calibrations>
	
	TC_SetPeriod(&GREEN_PWM_CTRL, g_iGreenCalibrationPeriod);
    1fda:	80 91 08 20 	lds	r24, 0x2008
    1fde:	90 91 09 20 	lds	r25, 0x2009
    1fe2:	e0 e0       	ldi	r30, 0x00	; 0
    1fe4:	f8 e0       	ldi	r31, 0x08	; 8
    1fe6:	86 a3       	std	Z+38, r24	; 0x26
    1fe8:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetPeriod(&RED_PWM_CTRL, g_iRedCalibrationPeriod);
    1fea:	80 91 06 20 	lds	r24, 0x2006
    1fee:	90 91 07 20 	lds	r25, 0x2007
    1ff2:	e0 e0       	ldi	r30, 0x00	; 0
    1ff4:	f9 e0       	ldi	r31, 0x09	; 9
    1ff6:	86 a3       	std	Z+38, r24	; 0x26
    1ff8:	97 a3       	std	Z+39, r25	; 0x27
	TC_SetPeriod(&BLUE_PWM_CTRL, g_iBlueCalibrationPeriod);
    1ffa:	80 91 0a 20 	lds	r24, 0x200A
    1ffe:	90 91 0b 20 	lds	r25, 0x200B
    2002:	e0 e0       	ldi	r30, 0x00	; 0
    2004:	fa e0       	ldi	r31, 0x0A	; 10
    2006:	86 a3       	std	Z+38, r24	; 0x26
    2008:	97 a3       	std	Z+39, r25	; 0x27
    200a:	b9 cf       	rjmp	.-142    	; 0x1f7e <tm_cmd_write_led_cal+0x30>

0000200c <tm_cmd_read_led_cal>:
	Read the calibration values for the LEDs (max counter number)  
*/
/**************************************************************************/
void tm_cmd_read_led_cal	(U8 argc, char **argv)
{
	read_period_calibrations ( &g_iRedCalibrationPeriod, &g_iGreenCalibrationPeriod, &g_iBlueCalibrationPeriod );
    200c:	86 e0       	ldi	r24, 0x06	; 6
    200e:	90 e2       	ldi	r25, 0x20	; 32
    2010:	68 e0       	ldi	r22, 0x08	; 8
    2012:	70 e2       	ldi	r23, 0x20	; 32
    2014:	4a e0       	ldi	r20, 0x0A	; 10
    2016:	50 e2       	ldi	r21, 0x20	; 32
    2018:	0e 94 10 0e 	call	0x1c20	; 0x1c20 <read_period_calibrations>
	
	printf_P (PSTR("Red: %u;  Green: %u;  Blue: %u; \r\n"), g_iRedCalibrationPeriod,
    201c:	8d b7       	in	r24, 0x3d	; 61
    201e:	9e b7       	in	r25, 0x3e	; 62
    2020:	08 97       	sbiw	r24, 0x08	; 8
    2022:	8d bf       	out	0x3d, r24	; 61
    2024:	9e bf       	out	0x3e, r25	; 62
    2026:	ed b7       	in	r30, 0x3d	; 61
    2028:	fe b7       	in	r31, 0x3e	; 62
    202a:	31 96       	adiw	r30, 0x01	; 1
    202c:	8f ea       	ldi	r24, 0xAF	; 175
    202e:	92 e0       	ldi	r25, 0x02	; 2
    2030:	ad b7       	in	r26, 0x3d	; 61
    2032:	be b7       	in	r27, 0x3e	; 62
    2034:	11 96       	adiw	r26, 0x01	; 1
    2036:	8d 93       	st	X+, r24
    2038:	9c 93       	st	X, r25
    203a:	12 97       	sbiw	r26, 0x02	; 2
    203c:	80 91 06 20 	lds	r24, 0x2006
    2040:	90 91 07 20 	lds	r25, 0x2007
    2044:	82 83       	std	Z+2, r24	; 0x02
    2046:	93 83       	std	Z+3, r25	; 0x03
    2048:	80 91 08 20 	lds	r24, 0x2008
    204c:	90 91 09 20 	lds	r25, 0x2009
    2050:	84 83       	std	Z+4, r24	; 0x04
    2052:	95 83       	std	Z+5, r25	; 0x05
    2054:	80 91 0a 20 	lds	r24, 0x200A
    2058:	90 91 0b 20 	lds	r25, 0x200B
    205c:	86 83       	std	Z+6, r24	; 0x06
    205e:	97 83       	std	Z+7, r25	; 0x07
    2060:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2064:	8d b7       	in	r24, 0x3d	; 61
    2066:	9e b7       	in	r25, 0x3e	; 62
    2068:	08 96       	adiw	r24, 0x08	; 8
    206a:	8d bf       	out	0x3d, r24	; 61
    206c:	9e bf       	out	0x3e, r25	; 62
															g_iGreenCalibrationPeriod,
															g_iBlueCalibrationPeriod);
}
    206e:	08 95       	ret

00002070 <tm_cmd_configure_bt>:
/*!
	Configure the BT module for ANIBIKE  
*/
/**************************************************************************/
void tm_cmd_configure_bt (U8 argc, char **argv)
{
    2070:	cf 92       	push	r12
    2072:	df 92       	push	r13
    2074:	ef 92       	push	r14
    2076:	ff 92       	push	r15
    2078:	0f 93       	push	r16
    207a:	1f 93       	push	r17
    207c:	df 93       	push	r29
    207e:	cf 93       	push	r28
    2080:	cd b7       	in	r28, 0x3d	; 61
    2082:	de b7       	in	r29, 0x3e	; 62
    2084:	e0 97       	sbiw	r28, 0x30	; 48
    2086:	cd bf       	out	0x3d, r28	; 61
    2088:	de bf       	out	0x3e, r29	; 62
	uint8_t iTestCommandPass = 0;
	uint8_t iNameChanged = 0;
	uint8_t iUARTChanged = 0;
	char sVersion[16] = {0};
    208a:	7e 01       	movw	r14, r28
    208c:	08 94       	sec
    208e:	e1 1c       	adc	r14, r1
    2090:	f1 1c       	adc	r15, r1
    2092:	80 e1       	ldi	r24, 0x10	; 16
    2094:	d7 01       	movw	r26, r14
    2096:	1d 92       	st	X+, r1
    2098:	8a 95       	dec	r24
    209a:	e9 f7       	brne	.-6      	; 0x2096 <tm_cmd_configure_bt+0x26>
	char sTemp[32] = {0};
    209c:	8e 01       	movw	r16, r28
    209e:	0f 5e       	subi	r16, 0xEF	; 239
    20a0:	1f 4f       	sbci	r17, 0xFF	; 255
    20a2:	80 e2       	ldi	r24, 0x20	; 32
    20a4:	f8 01       	movw	r30, r16
    20a6:	11 92       	st	Z+, r1
    20a8:	8a 95       	dec	r24
    20aa:	e9 f7       	brne	.-6      	; 0x20a6 <tm_cmd_configure_bt+0x36>
	char *cTok = NULL;
	
	printf_P( PSTR("Enterring AT mode...\r\n"));
    20ac:	00 d0       	rcall	.+0      	; 0x20ae <tm_cmd_configure_bt+0x3e>
    20ae:	8d e6       	ldi	r24, 0x6D	; 109
    20b0:	93 e0       	ldi	r25, 0x03	; 3
    20b2:	ad b7       	in	r26, 0x3d	; 61
    20b4:	be b7       	in	r27, 0x3e	; 62
    20b6:	11 96       	adiw	r26, 0x01	; 1
    20b8:	8d 93       	st	X+, r24
    20ba:	9c 93       	st	X, r25
    20bc:	12 97       	sbiw	r26, 0x02	; 2
    20be:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	PORTA.DIRSET = PIN3_bm;
    20c2:	e0 e0       	ldi	r30, 0x00	; 0
    20c4:	f6 e0       	ldi	r31, 0x06	; 6
    20c6:	88 e0       	ldi	r24, 0x08	; 8
    20c8:	81 83       	std	Z+1, r24	; 0x01
	PORTA.OUTSET = PIN3_bm;
    20ca:	85 83       	std	Z+5, r24	; 0x05
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
    20cc:	8f e3       	ldi	r24, 0x3F	; 63
    20ce:	9d e0       	ldi	r25, 0x0D	; 13
    20d0:	a3 e0       	ldi	r26, 0x03	; 3
    20d2:	81 50       	subi	r24, 0x01	; 1
    20d4:	90 40       	sbci	r25, 0x00	; 0
    20d6:	a0 40       	sbci	r26, 0x00	; 0
    20d8:	e1 f7       	brne	.-8      	; 0x20d2 <tm_cmd_configure_bt+0x62>
    20da:	00 c0       	rjmp	.+0      	; 0x20dc <tm_cmd_configure_bt+0x6c>
    20dc:	00 00       	nop
	
	_delay_ms(1000);
	
	printf_P( PSTR("AT\r\n"));
    20de:	88 e6       	ldi	r24, 0x68	; 104
    20e0:	93 e0       	ldi	r25, 0x03	; 3
    20e2:	ad b7       	in	r26, 0x3d	; 61
    20e4:	be b7       	in	r27, 0x3e	; 62
    20e6:	11 96       	adiw	r26, 0x01	; 1
    20e8:	8d 93       	st	X+, r24
    20ea:	9c 93       	st	X, r25
    20ec:	12 97       	sbiw	r26, 0x02	; 2
    20ee:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	if ( gets(sTemp) )
    20f2:	0f 90       	pop	r0
    20f4:	0f 90       	pop	r0
    20f6:	c8 01       	movw	r24, r16
    20f8:	0e 94 bb 24 	call	0x4976	; 0x4976 <gets>
    20fc:	00 97       	sbiw	r24, 0x00	; 0
    20fe:	09 f4       	brne	.+2      	; 0x2102 <tm_cmd_configure_bt+0x92>
    2100:	7a c0       	rjmp	.+244    	; 0x21f6 <tm_cmd_configure_bt+0x186>
	{
		if ( strstr(sTemp, "OK") )
    2102:	c8 01       	movw	r24, r16
    2104:	6c e0       	ldi	r22, 0x0C	; 12
    2106:	70 e2       	ldi	r23, 0x20	; 32
    2108:	0e 94 ef 23 	call	0x47de	; 0x47de <strstr>
    210c:	21 e0       	ldi	r18, 0x01	; 1
    210e:	c2 2e       	mov	r12, r18
    2110:	d1 2c       	mov	r13, r1
    2112:	00 97       	sbiw	r24, 0x00	; 0
    2114:	09 f4       	brne	.+2      	; 0x2118 <tm_cmd_configure_bt+0xa8>
    2116:	6f c0       	rjmp	.+222    	; 0x21f6 <tm_cmd_configure_bt+0x186>
			iTestCommandPass = 1;
	}
	
	printf_P( PSTR("AT+VERSION?\r\n"));
    2118:	00 d0       	rcall	.+0      	; 0x211a <tm_cmd_configure_bt+0xaa>
    211a:	8a e5       	ldi	r24, 0x5A	; 90
    211c:	93 e0       	ldi	r25, 0x03	; 3
    211e:	ed b7       	in	r30, 0x3d	; 61
    2120:	fe b7       	in	r31, 0x3e	; 62
    2122:	81 83       	std	Z+1, r24	; 0x01
    2124:	92 83       	std	Z+2, r25	; 0x02
    2126:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	if ( gets(sTemp) )
    212a:	0f 90       	pop	r0
    212c:	0f 90       	pop	r0
    212e:	c8 01       	movw	r24, r16
    2130:	0e 94 bb 24 	call	0x4976	; 0x4976 <gets>
    2134:	00 97       	sbiw	r24, 0x00	; 0
    2136:	79 f0       	breq	.+30     	; 0x2156 <tm_cmd_configure_bt+0xe6>
	{
		cTok = strtok ( sTemp, ":\n" );
    2138:	c8 01       	movw	r24, r16
    213a:	6f e0       	ldi	r22, 0x0F	; 15
    213c:	70 e2       	ldi	r23, 0x20	; 32
    213e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
		cTok = strtok ( NULL, ":\n" );
    2142:	80 e0       	ldi	r24, 0x00	; 0
    2144:	90 e0       	ldi	r25, 0x00	; 0
    2146:	6f e0       	ldi	r22, 0x0F	; 15
    2148:	70 e2       	ldi	r23, 0x20	; 32
    214a:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    214e:	bc 01       	movw	r22, r24
		strcpy (sVersion, cTok);
    2150:	c7 01       	movw	r24, r14
    2152:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <strcpy>
	}
	
	printf_P( PSTR("AT+NAME=ANIBIKE_2V7_BT\r\n"));
    2156:	00 d0       	rcall	.+0      	; 0x2158 <tm_cmd_configure_bt+0xe8>
    2158:	81 e4       	ldi	r24, 0x41	; 65
    215a:	93 e0       	ldi	r25, 0x03	; 3
    215c:	ad b7       	in	r26, 0x3d	; 61
    215e:	be b7       	in	r27, 0x3e	; 62
    2160:	11 96       	adiw	r26, 0x01	; 1
    2162:	8d 93       	st	X+, r24
    2164:	9c 93       	st	X, r25
    2166:	12 97       	sbiw	r26, 0x02	; 2
    2168:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	if ( gets(sTemp) )
    216c:	0f 90       	pop	r0
    216e:	0f 90       	pop	r0
    2170:	c8 01       	movw	r24, r16
    2172:	0e 94 bb 24 	call	0x4976	; 0x4976 <gets>
    2176:	00 97       	sbiw	r24, 0x00	; 0
    2178:	09 f4       	brne	.+2      	; 0x217c <tm_cmd_configure_bt+0x10c>
    217a:	40 c0       	rjmp	.+128    	; 0x21fc <tm_cmd_configure_bt+0x18c>
	{
		if ( strstr(sTemp, "OK") )
    217c:	c8 01       	movw	r24, r16
    217e:	6c e0       	ldi	r22, 0x0C	; 12
    2180:	70 e2       	ldi	r23, 0x20	; 32
    2182:	0e 94 ef 23 	call	0x47de	; 0x47de <strstr>
    2186:	01 e0       	ldi	r16, 0x01	; 1
    2188:	10 e0       	ldi	r17, 0x00	; 0
    218a:	00 97       	sbiw	r24, 0x00	; 0
    218c:	b9 f1       	breq	.+110    	; 0x21fc <tm_cmd_configure_bt+0x18c>
	{
		if ( strstr(sTemp, "OK") )
			iUARTChanged = 1;
	}	*/
	
	PORTA.OUTCLR = PIN3_bm;	
    218e:	88 e0       	ldi	r24, 0x08	; 8
    2190:	e0 e0       	ldi	r30, 0x00	; 0
    2192:	f6 e0       	ldi	r31, 0x06	; 6
    2194:	86 83       	std	Z+6, r24	; 0x06
	printf_P( PSTR("Exiting AT mode... Configuration complete.\r\n"));
    2196:	00 d0       	rcall	.+0      	; 0x2198 <tm_cmd_configure_bt+0x128>
    2198:	84 e1       	ldi	r24, 0x14	; 20
    219a:	93 e0       	ldi	r25, 0x03	; 3
    219c:	ed b7       	in	r30, 0x3d	; 61
    219e:	fe b7       	in	r31, 0x3e	; 62
    21a0:	81 83       	std	Z+1, r24	; 0x01
    21a2:	92 83       	std	Z+2, r25	; 0x02
    21a4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	printf_P( PSTR("Bluetooth info:\r\n  Status: %d\r\n  Version: %s\r\n  Name change: %d\r\n"), iTestCommandPass, sVersion, iNameChanged);
    21a8:	00 d0       	rcall	.+0      	; 0x21aa <tm_cmd_configure_bt+0x13a>
    21aa:	00 d0       	rcall	.+0      	; 0x21ac <tm_cmd_configure_bt+0x13c>
    21ac:	00 d0       	rcall	.+0      	; 0x21ae <tm_cmd_configure_bt+0x13e>
    21ae:	ed b7       	in	r30, 0x3d	; 61
    21b0:	fe b7       	in	r31, 0x3e	; 62
    21b2:	31 96       	adiw	r30, 0x01	; 1
    21b4:	82 ed       	ldi	r24, 0xD2	; 210
    21b6:	92 e0       	ldi	r25, 0x02	; 2
    21b8:	ad b7       	in	r26, 0x3d	; 61
    21ba:	be b7       	in	r27, 0x3e	; 62
    21bc:	11 96       	adiw	r26, 0x01	; 1
    21be:	8d 93       	st	X+, r24
    21c0:	9c 93       	st	X, r25
    21c2:	12 97       	sbiw	r26, 0x02	; 2
    21c4:	c2 82       	std	Z+2, r12	; 0x02
    21c6:	d3 82       	std	Z+3, r13	; 0x03
    21c8:	e4 82       	std	Z+4, r14	; 0x04
    21ca:	f5 82       	std	Z+5, r15	; 0x05
    21cc:	06 83       	std	Z+6, r16	; 0x06
    21ce:	17 83       	std	Z+7, r17	; 0x07
    21d0:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    21d4:	ed b7       	in	r30, 0x3d	; 61
    21d6:	fe b7       	in	r31, 0x3e	; 62
    21d8:	38 96       	adiw	r30, 0x08	; 8
    21da:	ed bf       	out	0x3d, r30	; 61
    21dc:	fe bf       	out	0x3e, r31	; 62
}
    21de:	e0 96       	adiw	r28, 0x30	; 48
    21e0:	cd bf       	out	0x3d, r28	; 61
    21e2:	de bf       	out	0x3e, r29	; 62
    21e4:	cf 91       	pop	r28
    21e6:	df 91       	pop	r29
    21e8:	1f 91       	pop	r17
    21ea:	0f 91       	pop	r16
    21ec:	ff 90       	pop	r15
    21ee:	ef 90       	pop	r14
    21f0:	df 90       	pop	r13
    21f2:	cf 90       	pop	r12
    21f4:	08 95       	ret
	PORTA.OUTSET = PIN3_bm;
	
	_delay_ms(1000);
	
	printf_P( PSTR("AT\r\n"));
	if ( gets(sTemp) )
    21f6:	cc 24       	eor	r12, r12
    21f8:	dd 24       	eor	r13, r13
    21fa:	8e cf       	rjmp	.-228    	; 0x2118 <tm_cmd_configure_bt+0xa8>
		cTok = strtok ( NULL, ":\n" );
		strcpy (sVersion, cTok);
	}
	
	printf_P( PSTR("AT+NAME=ANIBIKE_2V7_BT\r\n"));
	if ( gets(sTemp) )
    21fc:	00 e0       	ldi	r16, 0x00	; 0
    21fe:	10 e0       	ldi	r17, 0x00	; 0
    2200:	c6 cf       	rjmp	.-116    	; 0x218e <tm_cmd_configure_bt+0x11e>

00002202 <tm_cmd_help>:
/*!
	This function shows the help menu to the user
*/
/**************************************************************************/
void tm_cmd_help			(U8 argc, char **argv)
{
    2202:	df 92       	push	r13
    2204:	ef 92       	push	r14
    2206:	ff 92       	push	r15
    2208:	0f 93       	push	r16
    220a:	1f 93       	push	r17
    220c:	cf 93       	push	r28
    220e:	df 93       	push	r29
	if (argc > 2)
    2210:	83 30       	cpi	r24, 0x03	; 3
    2212:	08 f0       	brcs	.+2      	; 0x2216 <tm_cmd_help+0x14>
    2214:	a7 c0       	rjmp	.+334    	; 0x2364 <tm_cmd_help+0x162>
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    2216:	82 30       	cpi	r24, 0x02	; 2
    2218:	09 f4       	brne	.+2      	; 0x221c <tm_cmd_help+0x1a>
    221a:	4d c0       	rjmp	.+154    	; 0x22b6 <tm_cmd_help+0xb4>
		}	
	}
	else
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
    221c:	42 e1       	ldi	r20, 0x12	; 18
    221e:	50 e2       	ldi	r21, 0x20	; 32
    2220:	80 e0       	ldi	r24, 0x00	; 0
    2222:	90 e0       	ldi	r25, 0x00	; 0
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    2224:	00 e0       	ldi	r16, 0x00	; 0
    2226:	20 e0       	ldi	r18, 0x00	; 0
    2228:	30 e0       	ldi	r19, 0x00	; 0
    222a:	74 e8       	ldi	r23, 0x84	; 132
    222c:	e7 2e       	mov	r14, r23
    222e:	73 e0       	ldi	r23, 0x03	; 3
    2230:	f7 2e       	mov	r15, r23
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
		{ 
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
    2232:	f9 01       	movw	r30, r18
    2234:	e8 0f       	add	r30, r24
    2236:	f9 1f       	adc	r31, r25
    2238:	ee 0f       	add	r30, r30
    223a:	ff 1f       	adc	r31, r31
    223c:	ec 59       	subi	r30, 0x9C	; 156
    223e:	fe 4d       	sbci	r31, 0xDE	; 222
    2240:	04 80       	ldd	r0, Z+4	; 0x04
    2242:	f5 81       	ldd	r31, Z+5	; 0x05
    2244:	e0 2d       	mov	r30, r0
	else
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
		{ 
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
    2246:	80 81       	ld	r24, Z
    2248:	88 23       	and	r24, r24
    224a:	11 f4       	brne	.+4      	; 0x2250 <tm_cmd_help+0x4e>
    224c:	e7 e1       	ldi	r30, 0x17	; 23
    224e:	f0 e2       	ldi	r31, 0x20	; 32
    2250:	00 d0       	rcall	.+0      	; 0x2252 <tm_cmd_help+0x50>
    2252:	00 d0       	rcall	.+0      	; 0x2254 <tm_cmd_help+0x52>
    2254:	00 d0       	rcall	.+0      	; 0x2256 <tm_cmd_help+0x54>
    2256:	ad b7       	in	r26, 0x3d	; 61
    2258:	be b7       	in	r27, 0x3e	; 62
    225a:	11 96       	adiw	r26, 0x01	; 1
    225c:	cd b7       	in	r28, 0x3d	; 61
    225e:	de b7       	in	r29, 0x3e	; 62
    2260:	e9 82       	std	Y+1, r14	; 0x01
    2262:	fa 82       	std	Y+2, r15	; 0x02
    2264:	12 96       	adiw	r26, 0x02	; 2
    2266:	4d 93       	st	X+, r20
    2268:	5c 93       	st	X, r21
    226a:	13 97       	sbiw	r26, 0x03	; 3
    226c:	14 96       	adiw	r26, 0x04	; 4
    226e:	ed 93       	st	X+, r30
    2270:	fc 93       	st	X, r31
    2272:	15 97       	sbiw	r26, 0x05	; 5
    2274:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
    2278:	0f 5f       	subi	r16, 0xFF	; 255
		}	
	}
	else
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL ) 
    227a:	80 2f       	mov	r24, r16
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	9c 01       	movw	r18, r24
    2280:	22 0f       	add	r18, r18
    2282:	33 1f       	adc	r19, r19
    2284:	f9 01       	movw	r30, r18
    2286:	e8 0f       	add	r30, r24
    2288:	f9 1f       	adc	r31, r25
    228a:	ee 0f       	add	r30, r30
    228c:	ff 1f       	adc	r31, r31
    228e:	ec 59       	subi	r30, 0x9C	; 156
    2290:	fe 4d       	sbci	r31, 0xDE	; 222
    2292:	40 81       	ld	r20, Z
    2294:	51 81       	ldd	r21, Z+1	; 0x01
    2296:	ed b7       	in	r30, 0x3d	; 61
    2298:	fe b7       	in	r31, 0x3e	; 62
    229a:	36 96       	adiw	r30, 0x06	; 6
    229c:	ed bf       	out	0x3d, r30	; 61
    229e:	fe bf       	out	0x3e, r31	; 62
    22a0:	41 15       	cp	r20, r1
    22a2:	51 05       	cpc	r21, r1
    22a4:	31 f6       	brne	.-116    	; 0x2232 <tm_cmd_help+0x30>
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
		}
	}
}
    22a6:	df 91       	pop	r29
    22a8:	cf 91       	pop	r28
    22aa:	1f 91       	pop	r17
    22ac:	0f 91       	pop	r16
    22ae:	ff 90       	pop	r15
    22b0:	ef 90       	pop	r14
    22b2:	df 90       	pop	r13
    22b4:	08 95       	ret
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    22b6:	fb 01       	movw	r30, r22
    22b8:	e2 80       	ldd	r14, Z+2	; 0x02
    22ba:	f3 80       	ldd	r15, Z+3	; 0x03
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
    22bc:	02 e1       	ldi	r16, 0x12	; 18
    22be:	10 e2       	ldi	r17, 0x20	; 32
    22c0:	c0 e0       	ldi	r28, 0x00	; 0
    22c2:	d0 e0       	ldi	r29, 0x00	; 0
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
		return;	
	}
	else if (argc == 2)
    22c4:	dd 24       	eor	r13, r13
    22c6:	11 c0       	rjmp	.+34     	; 0x22ea <tm_cmd_help+0xe8>
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
			{ i++; }
    22c8:	d3 94       	inc	r13
		return;	
	}
	else if (argc == 2)
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
    22ca:	cd 2d       	mov	r28, r13
    22cc:	d0 e0       	ldi	r29, 0x00	; 0
    22ce:	fe 01       	movw	r30, r28
    22d0:	ee 0f       	add	r30, r30
    22d2:	ff 1f       	adc	r31, r31
    22d4:	ec 0f       	add	r30, r28
    22d6:	fd 1f       	adc	r31, r29
    22d8:	ee 0f       	add	r30, r30
    22da:	ff 1f       	adc	r31, r31
    22dc:	ec 59       	subi	r30, 0x9C	; 156
    22de:	fe 4d       	sbci	r31, 0xDE	; 222
    22e0:	00 81       	ld	r16, Z
    22e2:	11 81       	ldd	r17, Z+1	; 0x01
    22e4:	01 15       	cp	r16, r1
    22e6:	11 05       	cpc	r17, r1
    22e8:	f1 f2       	breq	.-68     	; 0x22a6 <tm_cmd_help+0xa4>
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
    22ea:	c8 01       	movw	r24, r16
    22ec:	b7 01       	movw	r22, r14
    22ee:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
		return;	
	}
	else if (argc == 2)
	{
		U8 i = 0;
		while (	cmd_tbl[i].cmd != NULL && 
    22f2:	00 97       	sbiw	r24, 0x00	; 0
    22f4:	49 f7       	brne	.-46     	; 0x22c8 <tm_cmd_help+0xc6>
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
			{ i++; }
		
		if ( cmd_tbl[i].cmd != NULL )
    22f6:	01 15       	cp	r16, r1
    22f8:	11 05       	cpc	r17, r1
    22fa:	a9 f2       	breq	.-86     	; 0x22a6 <tm_cmd_help+0xa4>
		{
			printf_P( PSTR("usage: %s %s\r\n"), cmd_tbl[i].cmd, 
					((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));	
    22fc:	fe 01       	movw	r30, r28
    22fe:	ee 0f       	add	r30, r30
    2300:	ff 1f       	adc	r31, r31
    2302:	ec 0f       	add	r30, r28
    2304:	fd 1f       	adc	r31, r29
    2306:	ee 0f       	add	r30, r30
    2308:	ff 1f       	adc	r31, r31
    230a:	ec 59       	subi	r30, 0x9C	; 156
    230c:	fe 4d       	sbci	r31, 0xDE	; 222
    230e:	04 80       	ldd	r0, Z+4	; 0x04
    2310:	f5 81       	ldd	r31, Z+5	; 0x05
    2312:	e0 2d       	mov	r30, r0
				strcmp(cmd_tbl[i].cmd, argv[1]) != 0 ) 
			{ i++; }
		
		if ( cmd_tbl[i].cmd != NULL )
		{
			printf_P( PSTR("usage: %s %s\r\n"), cmd_tbl[i].cmd, 
    2314:	80 81       	ld	r24, Z
    2316:	88 23       	and	r24, r24
    2318:	11 f4       	brne	.+4      	; 0x231e <tm_cmd_help+0x11c>
    231a:	e7 e1       	ldi	r30, 0x17	; 23
    231c:	f0 e2       	ldi	r31, 0x20	; 32
    231e:	00 d0       	rcall	.+0      	; 0x2320 <tm_cmd_help+0x11e>
    2320:	00 d0       	rcall	.+0      	; 0x2322 <tm_cmd_help+0x120>
    2322:	00 d0       	rcall	.+0      	; 0x2324 <tm_cmd_help+0x122>
    2324:	ad b7       	in	r26, 0x3d	; 61
    2326:	be b7       	in	r27, 0x3e	; 62
    2328:	11 96       	adiw	r26, 0x01	; 1
    232a:	8d e8       	ldi	r24, 0x8D	; 141
    232c:	93 e0       	ldi	r25, 0x03	; 3
    232e:	cd b7       	in	r28, 0x3d	; 61
    2330:	de b7       	in	r29, 0x3e	; 62
    2332:	89 83       	std	Y+1, r24	; 0x01
    2334:	9a 83       	std	Y+2, r25	; 0x02
    2336:	12 96       	adiw	r26, 0x02	; 2
    2338:	0d 93       	st	X+, r16
    233a:	1c 93       	st	X, r17
    233c:	13 97       	sbiw	r26, 0x03	; 3
    233e:	14 96       	adiw	r26, 0x04	; 4
    2340:	ed 93       	st	X+, r30
    2342:	fc 93       	st	X, r31
    2344:	15 97       	sbiw	r26, 0x05	; 5
    2346:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    234a:	ed b7       	in	r30, 0x3d	; 61
    234c:	fe b7       	in	r31, 0x3e	; 62
    234e:	36 96       	adiw	r30, 0x06	; 6
    2350:	ed bf       	out	0x3d, r30	; 61
    2352:	fe bf       	out	0x3e, r31	; 62
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
		}
	}
}
    2354:	df 91       	pop	r29
    2356:	cf 91       	pop	r28
    2358:	1f 91       	pop	r17
    235a:	0f 91       	pop	r16
    235c:	ff 90       	pop	r15
    235e:	ef 90       	pop	r14
    2360:	df 90       	pop	r13
    2362:	08 95       	ret
/**************************************************************************/
void tm_cmd_help			(U8 argc, char **argv)
{
	if (argc > 2)
	{
		printf_P( PSTR("usage: help [cmd]\r\n"));
    2364:	00 d0       	rcall	.+0      	; 0x2366 <tm_cmd_help+0x164>
    2366:	8c e9       	ldi	r24, 0x9C	; 156
    2368:	93 e0       	ldi	r25, 0x03	; 3
    236a:	cd b7       	in	r28, 0x3d	; 61
    236c:	de b7       	in	r29, 0x3e	; 62
    236e:	89 83       	std	Y+1, r24	; 0x01
    2370:	9a 83       	std	Y+2, r25	; 0x02
    2372:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    2376:	0f 90       	pop	r0
    2378:	0f 90       	pop	r0
			printf_P( PSTR("%s: %s\r\n"), cmd_tbl[i].cmd, 
				((strlen(cmd_tbl[i].usage)==0)?"no parameters":cmd_tbl[i].usage));
			i++; 
		}
	}
}
    237a:	df 91       	pop	r29
    237c:	cf 91       	pop	r28
    237e:	1f 91       	pop	r17
    2380:	0f 91       	pop	r16
    2382:	ff 90       	pop	r15
    2384:	ef 90       	pop	r14
    2386:	df 90       	pop	r13
    2388:	08 95       	ret

0000238a <tm_cmd_test_memory>:
/*!
	Test the flash memory integrity (chip and communication)   
*/
/**************************************************************************/
void tm_cmd_test_memory		(U8 argc, char **argv)
{
    238a:	6f 92       	push	r6
    238c:	7f 92       	push	r7
    238e:	8f 92       	push	r8
    2390:	9f 92       	push	r9
    2392:	af 92       	push	r10
    2394:	bf 92       	push	r11
    2396:	cf 92       	push	r12
    2398:	df 92       	push	r13
    239a:	ef 92       	push	r14
    239c:	ff 92       	push	r15
    239e:	0f 93       	push	r16
    23a0:	1f 93       	push	r17
    23a2:	df 93       	push	r29
    23a4:	cf 93       	push	r28
    23a6:	0f 92       	push	r0
    23a8:	cd b7       	in	r28, 0x3d	; 61
    23aa:	de b7       	in	r29, 0x3e	; 62
	uint32_t ErrCounter = 0;
	uint32_t pos = 0;	
	uint8_t retVal = 0, Val = 0;

	// Erase memory
	printf_P ( PSTR("Deleting all information from flash...\r\n") );
    23ac:	00 d0       	rcall	.+0      	; 0x23ae <tm_cmd_test_memory+0x24>
    23ae:	80 e3       	ldi	r24, 0x30	; 48
    23b0:	94 e0       	ldi	r25, 0x04	; 4
    23b2:	ad b7       	in	r26, 0x3d	; 61
    23b4:	be b7       	in	r27, 0x3e	; 62
    23b6:	11 96       	adiw	r26, 0x01	; 1
    23b8:	8d 93       	st	X+, r24
    23ba:	9c 93       	st	X, r25
    23bc:	12 97       	sbiw	r26, 0x02	; 2
    23be:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	
	dataflash_erase_all ( );
    23c2:	0f 90       	pop	r0
    23c4:	0f 90       	pop	r0
    23c6:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <dataflash_erase_all>

	printf_P ( PSTR("Unprotecting entire flash...\r\n") );
    23ca:	00 d0       	rcall	.+0      	; 0x23cc <tm_cmd_test_memory+0x42>
    23cc:	81 e1       	ldi	r24, 0x11	; 17
    23ce:	94 e0       	ldi	r25, 0x04	; 4
    23d0:	ed b7       	in	r30, 0x3d	; 61
    23d2:	fe b7       	in	r31, 0x3e	; 62
    23d4:	81 83       	std	Z+1, r24	; 0x01
    23d6:	92 83       	std	Z+2, r25	; 0x02
    23d8:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>

	dataflash_unprotect_all ( );
    23dc:	0f 90       	pop	r0
    23de:	0f 90       	pop	r0
    23e0:	0e 94 86 1c 	call	0x390c	; 0x390c <dataflash_unprotect_all>
    23e4:	8f ef       	ldi	r24, 0xFF	; 255
    23e6:	94 e3       	ldi	r25, 0x34	; 52
    23e8:	ac e0       	ldi	r26, 0x0C	; 12
    23ea:	81 50       	subi	r24, 0x01	; 1
    23ec:	90 40       	sbci	r25, 0x00	; 0
    23ee:	a0 40       	sbci	r26, 0x00	; 0
    23f0:	e1 f7       	brne	.-8      	; 0x23ea <tm_cmd_test_memory+0x60>
    23f2:	00 c0       	rjmp	.+0      	; 0x23f4 <tm_cmd_test_memory+0x6a>
    23f4:	00 00       	nop

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	printf_P ( PSTR("Writing testing sequence...\r\n") );
    23f6:	00 d0       	rcall	.+0      	; 0x23f8 <tm_cmd_test_memory+0x6e>
    23f8:	83 ef       	ldi	r24, 0xF3	; 243
    23fa:	93 e0       	ldi	r25, 0x03	; 3
    23fc:	ad b7       	in	r26, 0x3d	; 61
    23fe:	be b7       	in	r27, 0x3e	; 62
    2400:	11 96       	adiw	r26, 0x01	; 1
    2402:	8d 93       	st	X+, r24
    2404:	9c 93       	st	X, r25
    2406:	12 97       	sbiw	r26, 0x02	; 2
    2408:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    240c:	0f 90       	pop	r0
    240e:	0f 90       	pop	r0
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    2410:	ee 24       	eor	r14, r14
    2412:	ff 24       	eor	r15, r15
    2414:	87 01       	movw	r16, r14
	{
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
			printf_P ( PSTR("%lu "), pos);
    2416:	9e ee       	ldi	r25, 0xEE	; 238
    2418:	a9 2e       	mov	r10, r25
    241a:	93 e0       	ldi	r25, 0x03	; 3
    241c:	b9 2e       	mov	r11, r25
    241e:	12 c0       	rjmp	.+36     	; 0x2444 <tm_cmd_test_memory+0xba>

		dataflash_write	( pos, Val );
    2420:	c8 01       	movw	r24, r16
    2422:	b7 01       	movw	r22, r14
    2424:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <dataflash_write>
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	printf_P ( PSTR("Writing testing sequence...\r\n") );
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    2428:	08 94       	sec
    242a:	e1 1c       	adc	r14, r1
    242c:	f1 1c       	adc	r15, r1
    242e:	01 1d       	adc	r16, r1
    2430:	11 1d       	adc	r17, r1
    2432:	f0 e0       	ldi	r31, 0x00	; 0
    2434:	ef 16       	cp	r14, r31
    2436:	f0 e0       	ldi	r31, 0x00	; 0
    2438:	ff 06       	cpc	r15, r31
    243a:	f0 e4       	ldi	r31, 0x40	; 64
    243c:	0f 07       	cpc	r16, r31
    243e:	f0 e0       	ldi	r31, 0x00	; 0
    2440:	1f 07       	cpc	r17, r31
    2442:	19 f1       	breq	.+70     	; 0x248a <tm_cmd_test_memory+0x100>

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	printf_P ( PSTR("Writing testing sequence...\r\n") );
    2444:	4e 2d       	mov	r20, r14
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
	{
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
    2446:	d8 01       	movw	r26, r16
    2448:	c7 01       	movw	r24, r14
    244a:	9f 70       	andi	r25, 0x0F	; 15
    244c:	a0 70       	andi	r26, 0x00	; 0
    244e:	b0 70       	andi	r27, 0x00	; 0
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	a1 05       	cpc	r26, r1
    2454:	b1 05       	cpc	r27, r1
    2456:	21 f7       	brne	.-56     	; 0x2420 <tm_cmd_test_memory+0x96>
			printf_P ( PSTR("%lu "), pos);
    2458:	00 d0       	rcall	.+0      	; 0x245a <tm_cmd_test_memory+0xd0>
    245a:	00 d0       	rcall	.+0      	; 0x245c <tm_cmd_test_memory+0xd2>
    245c:	00 d0       	rcall	.+0      	; 0x245e <tm_cmd_test_memory+0xd4>
    245e:	ed b7       	in	r30, 0x3d	; 61
    2460:	fe b7       	in	r31, 0x3e	; 62
    2462:	a1 82       	std	Z+1, r10	; 0x01
    2464:	b2 82       	std	Z+2, r11	; 0x02
    2466:	ad b7       	in	r26, 0x3d	; 61
    2468:	be b7       	in	r27, 0x3e	; 62
    246a:	13 96       	adiw	r26, 0x03	; 3
    246c:	ed 92       	st	X+, r14
    246e:	fd 92       	st	X+, r15
    2470:	0d 93       	st	X+, r16
    2472:	1c 93       	st	X, r17
    2474:	16 97       	sbiw	r26, 0x06	; 6
    2476:	e9 82       	std	Y+1, r14	; 0x01
    2478:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    247c:	ed b7       	in	r30, 0x3d	; 61
    247e:	fe b7       	in	r31, 0x3e	; 62
    2480:	36 96       	adiw	r30, 0x06	; 6
    2482:	ed bf       	out	0x3d, r30	; 61
    2484:	fe bf       	out	0x3e, r31	; 62
    2486:	49 81       	ldd	r20, Y+1	; 0x01
    2488:	cb cf       	rjmp	.-106    	; 0x2420 <tm_cmd_test_memory+0x96>
    248a:	8f e7       	ldi	r24, 0x7F	; 127
    248c:	94 e8       	ldi	r25, 0x84	; 132
    248e:	ae e1       	ldi	r26, 0x1E	; 30
    2490:	81 50       	subi	r24, 0x01	; 1
    2492:	90 40       	sbci	r25, 0x00	; 0
    2494:	a0 40       	sbci	r26, 0x00	; 0
    2496:	e1 f7       	brne	.-8      	; 0x2490 <tm_cmd_test_memory+0x106>
    2498:	00 c0       	rjmp	.+0      	; 0x249a <tm_cmd_test_memory+0x110>
    249a:	00 00       	nop
	}

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10000);
#endif
	printf_P ( PSTR("Reading the testing sequence..\r\n") );
    249c:	00 d0       	rcall	.+0      	; 0x249e <tm_cmd_test_memory+0x114>
    249e:	8d ec       	ldi	r24, 0xCD	; 205
    24a0:	93 e0       	ldi	r25, 0x03	; 3
    24a2:	ad b7       	in	r26, 0x3d	; 61
    24a4:	be b7       	in	r27, 0x3e	; 62
    24a6:	11 96       	adiw	r26, 0x01	; 1
    24a8:	8d 93       	st	X+, r24
    24aa:	9c 93       	st	X, r25
    24ac:	12 97       	sbiw	r26, 0x02	; 2
    24ae:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    24b2:	0f 90       	pop	r0
    24b4:	0f 90       	pop	r0

	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    24b6:	ee 24       	eor	r14, r14
    24b8:	ff 24       	eor	r15, r15
    24ba:	87 01       	movw	r16, r14
	Test the flash memory integrity (chip and communication)   
*/
/**************************************************************************/
void tm_cmd_test_memory		(U8 argc, char **argv)
{
	uint32_t ErrCounter = 0;
    24bc:	aa 24       	eor	r10, r10
    24be:	bb 24       	eor	r11, r11
    24c0:	65 01       	movw	r12, r10
	{
		retVal = dataflash_read	( pos );
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
			printf_P ( PSTR("%lu "), pos);
    24c2:	88 ec       	ldi	r24, 0xC8	; 200
    24c4:	68 2e       	mov	r6, r24
    24c6:	83 e0       	ldi	r24, 0x03	; 3
    24c8:	78 2e       	mov	r7, r24
    24ca:	15 c0       	rjmp	.+42     	; 0x24f6 <tm_cmd_test_memory+0x16c>
		
		if (retVal!=Val)
    24cc:	89 14       	cp	r8, r9
    24ce:	29 f0       	breq	.+10     	; 0x24da <tm_cmd_test_memory+0x150>
			ErrCounter ++;
    24d0:	08 94       	sec
    24d2:	a1 1c       	adc	r10, r1
    24d4:	b1 1c       	adc	r11, r1
    24d6:	c1 1c       	adc	r12, r1
    24d8:	d1 1c       	adc	r13, r1
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10000);
#endif
	printf_P ( PSTR("Reading the testing sequence..\r\n") );

	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    24da:	08 94       	sec
    24dc:	e1 1c       	adc	r14, r1
    24de:	f1 1c       	adc	r15, r1
    24e0:	01 1d       	adc	r16, r1
    24e2:	11 1d       	adc	r17, r1
    24e4:	f0 e0       	ldi	r31, 0x00	; 0
    24e6:	ef 16       	cp	r14, r31
    24e8:	f0 e0       	ldi	r31, 0x00	; 0
    24ea:	ff 06       	cpc	r15, r31
    24ec:	f0 e4       	ldi	r31, 0x40	; 64
    24ee:	0f 07       	cpc	r16, r31
    24f0:	f0 e0       	ldi	r31, 0x00	; 0
    24f2:	1f 07       	cpc	r17, r31
    24f4:	39 f1       	breq	.+78     	; 0x2544 <tm_cmd_test_memory+0x1ba>
	{
		retVal = dataflash_read	( pos );
    24f6:	c8 01       	movw	r24, r16
    24f8:	b7 01       	movw	r22, r14
    24fa:	0e 94 4a 1c 	call	0x3894	; 0x3894 <dataflash_read>
    24fe:	98 2e       	mov	r9, r24
    2500:	8e 2c       	mov	r8, r14
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
    2502:	a8 01       	movw	r20, r16
    2504:	97 01       	movw	r18, r14
    2506:	3f 70       	andi	r19, 0x0F	; 15
    2508:	40 70       	andi	r20, 0x00	; 0
    250a:	50 70       	andi	r21, 0x00	; 0
    250c:	21 15       	cp	r18, r1
    250e:	31 05       	cpc	r19, r1
    2510:	41 05       	cpc	r20, r1
    2512:	51 05       	cpc	r21, r1
    2514:	d9 f6       	brne	.-74     	; 0x24cc <tm_cmd_test_memory+0x142>
			printf_P ( PSTR("%lu "), pos);
    2516:	00 d0       	rcall	.+0      	; 0x2518 <tm_cmd_test_memory+0x18e>
    2518:	00 d0       	rcall	.+0      	; 0x251a <tm_cmd_test_memory+0x190>
    251a:	00 d0       	rcall	.+0      	; 0x251c <tm_cmd_test_memory+0x192>
    251c:	ed b7       	in	r30, 0x3d	; 61
    251e:	fe b7       	in	r31, 0x3e	; 62
    2520:	61 82       	std	Z+1, r6	; 0x01
    2522:	72 82       	std	Z+2, r7	; 0x02
    2524:	ad b7       	in	r26, 0x3d	; 61
    2526:	be b7       	in	r27, 0x3e	; 62
    2528:	13 96       	adiw	r26, 0x03	; 3
    252a:	ed 92       	st	X+, r14
    252c:	fd 92       	st	X+, r15
    252e:	0d 93       	st	X+, r16
    2530:	1c 93       	st	X, r17
    2532:	16 97       	sbiw	r26, 0x06	; 6
    2534:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2538:	ed b7       	in	r30, 0x3d	; 61
    253a:	fe b7       	in	r31, 0x3e	; 62
    253c:	36 96       	adiw	r30, 0x06	; 6
    253e:	ed bf       	out	0x3d, r30	; 61
    2540:	fe bf       	out	0x3e, r31	; 62
    2542:	c4 cf       	rjmp	.-120    	; 0x24cc <tm_cmd_test_memory+0x142>
		
		if (retVal!=Val)
			ErrCounter ++;
	}

	printf_P(PSTR("Number of errors: %lu\r\n"), ErrCounter);
    2544:	00 d0       	rcall	.+0      	; 0x2546 <tm_cmd_test_memory+0x1bc>
    2546:	00 d0       	rcall	.+0      	; 0x2548 <tm_cmd_test_memory+0x1be>
    2548:	00 d0       	rcall	.+0      	; 0x254a <tm_cmd_test_memory+0x1c0>
    254a:	80 eb       	ldi	r24, 0xB0	; 176
    254c:	93 e0       	ldi	r25, 0x03	; 3
    254e:	ad b7       	in	r26, 0x3d	; 61
    2550:	be b7       	in	r27, 0x3e	; 62
    2552:	11 96       	adiw	r26, 0x01	; 1
    2554:	8d 93       	st	X+, r24
    2556:	9c 93       	st	X, r25
    2558:	12 97       	sbiw	r26, 0x02	; 2
    255a:	ed b7       	in	r30, 0x3d	; 61
    255c:	fe b7       	in	r31, 0x3e	; 62
    255e:	a3 82       	std	Z+3, r10	; 0x03
    2560:	b4 82       	std	Z+4, r11	; 0x04
    2562:	c5 82       	std	Z+5, r12	; 0x05
    2564:	d6 82       	std	Z+6, r13	; 0x06
    2566:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    256a:	8d b7       	in	r24, 0x3d	; 61
    256c:	9e b7       	in	r25, 0x3e	; 62
    256e:	06 96       	adiw	r24, 0x06	; 6
    2570:	8d bf       	out	0x3d, r24	; 61
    2572:	9e bf       	out	0x3e, r25	; 62
}
    2574:	0f 90       	pop	r0
    2576:	cf 91       	pop	r28
    2578:	df 91       	pop	r29
    257a:	1f 91       	pop	r17
    257c:	0f 91       	pop	r16
    257e:	ff 90       	pop	r15
    2580:	ef 90       	pop	r14
    2582:	df 90       	pop	r13
    2584:	cf 90       	pop	r12
    2586:	bf 90       	pop	r11
    2588:	af 90       	pop	r10
    258a:	9f 90       	pop	r9
    258c:	8f 90       	pop	r8
    258e:	7f 90       	pop	r7
    2590:	6f 90       	pop	r6
    2592:	08 95       	ret

00002594 <tm_cmd_read>:
/*!
	read out data from the flash chip   
*/
/**************************************************************************/
void tm_cmd_read			(U8 argc, char **argv)
{
    2594:	2f 92       	push	r2
    2596:	3f 92       	push	r3
    2598:	4f 92       	push	r4
    259a:	5f 92       	push	r5
    259c:	6f 92       	push	r6
    259e:	7f 92       	push	r7
    25a0:	8f 92       	push	r8
    25a2:	9f 92       	push	r9
    25a4:	af 92       	push	r10
    25a6:	bf 92       	push	r11
    25a8:	cf 92       	push	r12
    25aa:	df 92       	push	r13
    25ac:	ef 92       	push	r14
    25ae:	ff 92       	push	r15
    25b0:	0f 93       	push	r16
    25b2:	1f 93       	push	r17
    25b4:	cf 93       	push	r28
    25b6:	df 93       	push	r29
    25b8:	eb 01       	movw	r28, r22
	if ( argc != 3 )
    25ba:	83 30       	cpi	r24, 0x03	; 3
    25bc:	01 f1       	breq	.+64     	; 0x25fe <tm_cmd_read+0x6a>
	{
		printf_P( PSTR("usage: read [start_address] [length]\r\n"));
    25be:	00 d0       	rcall	.+0      	; 0x25c0 <tm_cmd_read+0x2c>
    25c0:	85 ee       	ldi	r24, 0xE5	; 229
    25c2:	97 e0       	ldi	r25, 0x07	; 7
    25c4:	ad b7       	in	r26, 0x3d	; 61
    25c6:	be b7       	in	r27, 0x3e	; 62
    25c8:	11 96       	adiw	r26, 0x01	; 1
    25ca:	8d 93       	st	X+, r24
    25cc:	9c 93       	st	X, r25
    25ce:	12 97       	sbiw	r26, 0x02	; 2
    25d0:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    25d4:	0f 90       	pop	r0
    25d6:	0f 90       	pop	r0

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
			printf_P( PSTR("A%lu:   0x%x\r\n"), (iStart+iIterator), 
									dataflash_read (iStart+iIterator) );
	}
}
    25d8:	df 91       	pop	r29
    25da:	cf 91       	pop	r28
    25dc:	1f 91       	pop	r17
    25de:	0f 91       	pop	r16
    25e0:	ff 90       	pop	r15
    25e2:	ef 90       	pop	r14
    25e4:	df 90       	pop	r13
    25e6:	cf 90       	pop	r12
    25e8:	bf 90       	pop	r11
    25ea:	af 90       	pop	r10
    25ec:	9f 90       	pop	r9
    25ee:	8f 90       	pop	r8
    25f0:	7f 90       	pop	r7
    25f2:	6f 90       	pop	r6
    25f4:	5f 90       	pop	r5
    25f6:	4f 90       	pop	r4
    25f8:	3f 90       	pop	r3
    25fa:	2f 90       	pop	r2
    25fc:	08 95       	ret
		return;	
	}
	else
	{
		uint32_t iIterator;
		uint32_t iStart = atol (argv[1]);
    25fe:	8a 81       	ldd	r24, Y+2	; 0x02
    2600:	9b 81       	ldd	r25, Y+3	; 0x03
    2602:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2606:	3b 01       	movw	r6, r22
    2608:	4c 01       	movw	r8, r24
		uint32_t iLength = atol (argv[2]);
    260a:	8c 81       	ldd	r24, Y+4	; 0x04
    260c:	9d 81       	ldd	r25, Y+5	; 0x05
    260e:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2612:	1b 01       	movw	r2, r22
    2614:	2c 01       	movw	r4, r24

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);
    2616:	ed b7       	in	r30, 0x3d	; 61
    2618:	fe b7       	in	r31, 0x3e	; 62
    261a:	3a 97       	sbiw	r30, 0x0a	; 10
    261c:	ed bf       	out	0x3d, r30	; 61
    261e:	fe bf       	out	0x3e, r31	; 62
    2620:	31 96       	adiw	r30, 0x01	; 1
    2622:	8e ec       	ldi	r24, 0xCE	; 206
    2624:	97 e0       	ldi	r25, 0x07	; 7
    2626:	ad b7       	in	r26, 0x3d	; 61
    2628:	be b7       	in	r27, 0x3e	; 62
    262a:	11 96       	adiw	r26, 0x01	; 1
    262c:	8d 93       	st	X+, r24
    262e:	9c 93       	st	X, r25
    2630:	12 97       	sbiw	r26, 0x02	; 2
    2632:	62 82       	std	Z+2, r6	; 0x02
    2634:	73 82       	std	Z+3, r7	; 0x03
    2636:	84 82       	std	Z+4, r8	; 0x04
    2638:	95 82       	std	Z+5, r9	; 0x05
    263a:	d2 01       	movw	r26, r4
    263c:	c1 01       	movw	r24, r2
    263e:	86 0d       	add	r24, r6
    2640:	97 1d       	adc	r25, r7
    2642:	a8 1d       	adc	r26, r8
    2644:	b9 1d       	adc	r27, r9
    2646:	86 83       	std	Z+6, r24	; 0x06
    2648:	97 83       	std	Z+7, r25	; 0x07
    264a:	a0 87       	std	Z+8, r26	; 0x08
    264c:	b1 87       	std	Z+9, r27	; 0x09
    264e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2652:	ed b7       	in	r30, 0x3d	; 61
    2654:	fe b7       	in	r31, 0x3e	; 62
    2656:	3a 96       	adiw	r30, 0x0a	; 10
    2658:	ed bf       	out	0x3d, r30	; 61
    265a:	fe bf       	out	0x3e, r31	; 62

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    265c:	ee 24       	eor	r14, r14
    265e:	ff 24       	eor	r15, r15
    2660:	87 01       	movw	r16, r14
    2662:	cf eb       	ldi	r28, 0xBF	; 191
    2664:	d7 e0       	ldi	r29, 0x07	; 7
	{
		uint32_t iIterator;
		uint32_t iStart = atol (argv[1]);
		uint32_t iLength = atol (argv[2]);

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);
    2666:	64 01       	movw	r12, r8
    2668:	53 01       	movw	r10, r6
    266a:	ae 0c       	add	r10, r14
    266c:	bf 1c       	adc	r11, r15
    266e:	c0 1e       	adc	r12, r16
    2670:	d1 1e       	adc	r13, r17

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
			printf_P( PSTR("A%lu:   0x%x\r\n"), (iStart+iIterator), 
									dataflash_read (iStart+iIterator) );
    2672:	c6 01       	movw	r24, r12
    2674:	b5 01       	movw	r22, r10
    2676:	0e 94 4a 1c 	call	0x3894	; 0x3894 <dataflash_read>
		uint32_t iLength = atol (argv[2]);

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
			printf_P( PSTR("A%lu:   0x%x\r\n"), (iStart+iIterator), 
    267a:	2d b7       	in	r18, 0x3d	; 61
    267c:	3e b7       	in	r19, 0x3e	; 62
    267e:	28 50       	subi	r18, 0x08	; 8
    2680:	30 40       	sbci	r19, 0x00	; 0
    2682:	2d bf       	out	0x3d, r18	; 61
    2684:	3e bf       	out	0x3e, r19	; 62
    2686:	ed b7       	in	r30, 0x3d	; 61
    2688:	fe b7       	in	r31, 0x3e	; 62
    268a:	31 96       	adiw	r30, 0x01	; 1
    268c:	ad b7       	in	r26, 0x3d	; 61
    268e:	be b7       	in	r27, 0x3e	; 62
    2690:	11 96       	adiw	r26, 0x01	; 1
    2692:	cd 93       	st	X+, r28
    2694:	dc 93       	st	X, r29
    2696:	12 97       	sbiw	r26, 0x02	; 2
    2698:	a2 82       	std	Z+2, r10	; 0x02
    269a:	b3 82       	std	Z+3, r11	; 0x03
    269c:	c4 82       	std	Z+4, r12	; 0x04
    269e:	d5 82       	std	Z+5, r13	; 0x05
    26a0:	86 83       	std	Z+6, r24	; 0x06
    26a2:	17 82       	std	Z+7, r1	; 0x07
    26a4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		uint32_t iStart = atol (argv[1]);
		uint32_t iLength = atol (argv[2]);

		printf_P (PSTR("reading: %lu to %lu;\r\n"), iStart, iStart+iLength);

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    26a8:	08 94       	sec
    26aa:	e1 1c       	adc	r14, r1
    26ac:	f1 1c       	adc	r15, r1
    26ae:	01 1d       	adc	r16, r1
    26b0:	11 1d       	adc	r17, r1
    26b2:	ed b7       	in	r30, 0x3d	; 61
    26b4:	fe b7       	in	r31, 0x3e	; 62
    26b6:	38 96       	adiw	r30, 0x08	; 8
    26b8:	ed bf       	out	0x3d, r30	; 61
    26ba:	fe bf       	out	0x3e, r31	; 62
    26bc:	2e 14       	cp	r2, r14
    26be:	3f 04       	cpc	r3, r15
    26c0:	40 06       	cpc	r4, r16
    26c2:	51 06       	cpc	r5, r17
    26c4:	80 f6       	brcc	.-96     	; 0x2666 <tm_cmd_read+0xd2>
    26c6:	88 cf       	rjmp	.-240    	; 0x25d8 <tm_cmd_read+0x44>

000026c8 <tm_cmd_test_led>:
/*!
	Test some LEDs with brightness values   
*/
/**************************************************************************/
void tm_cmd_test_led		(U8 argc, char **argv)
{
    26c8:	df 92       	push	r13
    26ca:	ef 92       	push	r14
    26cc:	ff 92       	push	r15
    26ce:	0f 93       	push	r16
    26d0:	1f 93       	push	r17
    26d2:	cf 93       	push	r28
    26d4:	df 93       	push	r29
    26d6:	eb 01       	movw	r28, r22
	if ( argc < 2 )
    26d8:	82 30       	cpi	r24, 0x02	; 2
    26da:	08 f4       	brcc	.+2      	; 0x26de <tm_cmd_test_led+0x16>
    26dc:	72 c0       	rjmp	.+228    	; 0x27c2 <tm_cmd_test_led+0xfa>
	else
	{
		uint8_t i;
		uint16_t val = 0;
		
		MUX_ENABLE;
    26de:	80 e8       	ldi	r24, 0x80	; 128
    26e0:	80 93 06 06 	sts	0x0606, r24
		
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
    26e4:	80 e7       	ldi	r24, 0x70	; 112
    26e6:	80 93 06 06 	sts	0x0606, r24
    26ea:	8a 81       	ldd	r24, Y+2	; 0x02
    26ec:	9b 81       	ldd	r25, Y+3	; 0x03
    26ee:	0e 94 95 23 	call	0x472a	; 0x472a <atoi>
    26f2:	82 95       	swap	r24
    26f4:	80 7f       	andi	r24, 0xF0	; 240
    26f6:	80 93 05 06 	sts	0x0605, r24
		
		val = atol (argv[3]);
    26fa:	8e 81       	ldd	r24, Y+6	; 0x06
    26fc:	9f 81       	ldd	r25, Y+7	; 0x07
    26fe:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2702:	24 e0       	ldi	r18, 0x04	; 4
    2704:	e2 2e       	mov	r14, r18
    2706:	f1 2c       	mov	r15, r1
    2708:	ec 0e       	add	r14, r28
    270a:	fd 1e       	adc	r15, r29
			
		for (i = 0; i<strlen(argv[2]); i++)
    270c:	dd 24       	eor	r13, r13
    270e:	f7 01       	movw	r30, r14
    2710:	80 81       	ld	r24, Z
    2712:	91 81       	ldd	r25, Z+1	; 0x01
		{
			if (argv[2][i]=='R')
			{
				RED_PWM_CTRL.CCABUF = val;        
    2714:	40 e0       	ldi	r20, 0x00	; 0
    2716:	59 e0       	ldi	r21, 0x09	; 9
				RED_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='G')
			{
				GREEN_PWM_CTRL.CCABUF = val;        
    2718:	c0 e0       	ldi	r28, 0x00	; 0
    271a:	d8 e0       	ldi	r29, 0x08	; 8
				GREEN_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='B')
			{
				BLUE_PWM_CTRL.CCABUF = val;        
    271c:	00 e0       	ldi	r16, 0x00	; 0
    271e:	1a e0       	ldi	r17, 0x0A	; 10
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
		
		val = atol (argv[3]);
			
		for (i = 0; i<strlen(argv[2]); i++)
    2720:	2d 2d       	mov	r18, r13
    2722:	30 e0       	ldi	r19, 0x00	; 0
    2724:	fc 01       	movw	r30, r24
    2726:	01 90       	ld	r0, Z+
    2728:	00 20       	and	r0, r0
    272a:	e9 f7       	brne	.-6      	; 0x2726 <tm_cmd_test_led+0x5e>
    272c:	31 97       	sbiw	r30, 0x01	; 1
    272e:	e8 1b       	sub	r30, r24
    2730:	f9 0b       	sbc	r31, r25
    2732:	2e 17       	cp	r18, r30
    2734:	3f 07       	cpc	r19, r31
    2736:	08 f0       	brcs	.+2      	; 0x273a <tm_cmd_test_led+0x72>
    2738:	51 c0       	rjmp	.+162    	; 0x27dc <tm_cmd_test_led+0x114>
		{
			if (argv[2][i]=='R')
    273a:	fc 01       	movw	r30, r24
    273c:	e2 0f       	add	r30, r18
    273e:	f3 1f       	adc	r31, r19
    2740:	e0 81       	ld	r30, Z
    2742:	e2 35       	cpi	r30, 0x52	; 82
    2744:	29 f1       	breq	.+74     	; 0x2790 <tm_cmd_test_led+0xc8>
				RED_PWM_CTRL.CCBBUF = val;
				RED_PWM_CTRL.CCCBUF = val;
				RED_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='G')
    2746:	e7 34       	cpi	r30, 0x47	; 71
    2748:	99 f0       	breq	.+38     	; 0x2770 <tm_cmd_test_led+0xa8>
				GREEN_PWM_CTRL.CCBBUF = val;
				GREEN_PWM_CTRL.CCCBUF = val;
				GREEN_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='B')
    274a:	e2 34       	cpi	r30, 0x42	; 66
    274c:	11 f0       	breq	.+4      	; 0x2752 <tm_cmd_test_led+0x8a>
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
		
		val = atol (argv[3]);
			
		for (i = 0; i<strlen(argv[2]); i++)
    274e:	d3 94       	inc	r13
    2750:	e7 cf       	rjmp	.-50     	; 0x2720 <tm_cmd_test_led+0x58>
				GREEN_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='B')
			{
				BLUE_PWM_CTRL.CCABUF = val;        
    2752:	f8 01       	movw	r30, r16
    2754:	60 af       	std	Z+56, r22	; 0x38
    2756:	71 af       	std	Z+57, r23	; 0x39
				BLUE_PWM_CTRL.CCBBUF = val;
    2758:	62 af       	std	Z+58, r22	; 0x3a
    275a:	73 af       	std	Z+59, r23	; 0x3b
				BLUE_PWM_CTRL.CCCBUF = val;
    275c:	64 af       	std	Z+60, r22	; 0x3c
    275e:	75 af       	std	Z+61, r23	; 0x3d
				BLUE_PWM_CTRL.CCDBUF = val;
    2760:	66 af       	std	Z+62, r22	; 0x3e
    2762:	77 af       	std	Z+63, r23	; 0x3f
    2764:	d7 01       	movw	r26, r14
    2766:	8d 91       	ld	r24, X+
    2768:	9c 91       	ld	r25, X
    276a:	11 97       	sbiw	r26, 0x01	; 1
		// Set the row num
		MUX_SET_ROW (atoi(argv[1]));
		
		val = atol (argv[3]);
			
		for (i = 0; i<strlen(argv[2]); i++)
    276c:	d3 94       	inc	r13
    276e:	d8 cf       	rjmp	.-80     	; 0x2720 <tm_cmd_test_led+0x58>
				RED_PWM_CTRL.CCDBUF = val;
			}

			if (argv[2][i]=='G')
			{
				GREEN_PWM_CTRL.CCABUF = val;        
    2770:	68 af       	std	Y+56, r22	; 0x38
    2772:	79 af       	std	Y+57, r23	; 0x39
				GREEN_PWM_CTRL.CCBBUF = val;
    2774:	6a af       	std	Y+58, r22	; 0x3a
    2776:	7b af       	std	Y+59, r23	; 0x3b
				GREEN_PWM_CTRL.CCCBUF = val;
    2778:	6c af       	std	Y+60, r22	; 0x3c
    277a:	7d af       	std	Y+61, r23	; 0x3d
				GREEN_PWM_CTRL.CCDBUF = val;
    277c:	6e af       	std	Y+62, r22	; 0x3e
    277e:	7f af       	std	Y+63, r23	; 0x3f
    2780:	d7 01       	movw	r26, r14
    2782:	8d 91       	ld	r24, X+
    2784:	9c 91       	ld	r25, X
    2786:	28 0f       	add	r18, r24
    2788:	39 1f       	adc	r19, r25
    278a:	d9 01       	movw	r26, r18
    278c:	ec 91       	ld	r30, X
    278e:	dd cf       	rjmp	.-70     	; 0x274a <tm_cmd_test_led+0x82>
			
		for (i = 0; i<strlen(argv[2]); i++)
		{
			if (argv[2][i]=='R')
			{
				RED_PWM_CTRL.CCABUF = val;        
    2790:	da 01       	movw	r26, r20
    2792:	d8 96       	adiw	r26, 0x38	; 56
    2794:	6d 93       	st	X+, r22
    2796:	7c 93       	st	X, r23
    2798:	d9 97       	sbiw	r26, 0x39	; 57
				RED_PWM_CTRL.CCBBUF = val;
    279a:	da 96       	adiw	r26, 0x3a	; 58
    279c:	6d 93       	st	X+, r22
    279e:	7c 93       	st	X, r23
    27a0:	db 97       	sbiw	r26, 0x3b	; 59
				RED_PWM_CTRL.CCCBUF = val;
    27a2:	dc 96       	adiw	r26, 0x3c	; 60
    27a4:	6d 93       	st	X+, r22
    27a6:	7c 93       	st	X, r23
    27a8:	dd 97       	sbiw	r26, 0x3d	; 61
				RED_PWM_CTRL.CCDBUF = val;
    27aa:	de 96       	adiw	r26, 0x3e	; 62
    27ac:	6d 93       	st	X+, r22
    27ae:	7c 93       	st	X, r23
    27b0:	df 97       	sbiw	r26, 0x3f	; 63
    27b2:	f7 01       	movw	r30, r14
    27b4:	80 81       	ld	r24, Z
    27b6:	91 81       	ldd	r25, Z+1	; 0x01
    27b8:	fc 01       	movw	r30, r24
    27ba:	e2 0f       	add	r30, r18
    27bc:	f3 1f       	adc	r31, r19
    27be:	e0 81       	ld	r30, Z
    27c0:	c2 cf       	rjmp	.-124    	; 0x2746 <tm_cmd_test_led+0x7e>
/**************************************************************************/
void tm_cmd_test_led		(U8 argc, char **argv)
{
	if ( argc < 2 )
	{
		printf_P(PSTR("usage: test_led [row#] [RGB] [val]\n"));
    27c2:	00 d0       	rcall	.+0      	; 0x27c4 <tm_cmd_test_led+0xfc>
    27c4:	89 e5       	ldi	r24, 0x59	; 89
    27c6:	94 e0       	ldi	r25, 0x04	; 4
    27c8:	ad b7       	in	r26, 0x3d	; 61
    27ca:	be b7       	in	r27, 0x3e	; 62
    27cc:	11 96       	adiw	r26, 0x01	; 1
    27ce:	8d 93       	st	X+, r24
    27d0:	9c 93       	st	X, r25
    27d2:	12 97       	sbiw	r26, 0x02	; 2
    27d4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    27d8:	0f 90       	pop	r0
    27da:	0f 90       	pop	r0
				BLUE_PWM_CTRL.CCCBUF = val;
				BLUE_PWM_CTRL.CCDBUF = val;
			}
		}
	} 
}
    27dc:	df 91       	pop	r29
    27de:	cf 91       	pop	r28
    27e0:	1f 91       	pop	r17
    27e2:	0f 91       	pop	r16
    27e4:	ff 90       	pop	r15
    27e6:	ef 90       	pop	r14
    27e8:	df 90       	pop	r13
    27ea:	08 95       	ret

000027ec <tm_cmd_write>:
/*!
	write stuff to the flash   
*/
/**************************************************************************/
void tm_cmd_write			(U8 argc, char **argv)
{
    27ec:	1f 93       	push	r17
    27ee:	cf 93       	push	r28
    27f0:	df 93       	push	r29
    27f2:	eb 01       	movw	r28, r22
	if ( argc != 3 )
    27f4:	83 30       	cpi	r24, 0x03	; 3
    27f6:	09 f0       	breq	.+2      	; 0x27fa <tm_cmd_write+0xe>
    27f8:	51 c0       	rjmp	.+162    	; 0x289c <tm_cmd_write+0xb0>
		printf_P (PSTR("usage: write [32bit start_address] [8bit length]\r\n"));
		return;	
	}
	else
	{
		g_dataStartAddress = atol(argv[1]);
    27fa:	8a 81       	ldd	r24, Y+2	; 0x02
    27fc:	9b 81       	ldd	r25, Y+3	; 0x03
    27fe:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2802:	9b 01       	movw	r18, r22
    2804:	ac 01       	movw	r20, r24
    2806:	20 93 27 22 	sts	0x2227, r18
    280a:	30 93 28 22 	sts	0x2228, r19
    280e:	40 93 29 22 	sts	0x2229, r20
    2812:	50 93 2a 22 	sts	0x222A, r21
		g_leftDataToGet = atoi(argv[2]);
    2816:	8c 81       	ldd	r24, Y+4	; 0x04
    2818:	9d 81       	ldd	r25, Y+5	; 0x05
    281a:	0e 94 95 23 	call	0x472a	; 0x472a <atoi>
    281e:	80 93 26 22 	sts	0x2226, r24

		if ( g_leftDataToGet > 15 ) g_leftDataToGet = 15;	// Don't allow more then 15 bytes
    2822:	80 91 26 22 	lds	r24, 0x2226
    2826:	80 31       	cpi	r24, 0x10	; 16
    2828:	a8 f5       	brcc	.+106    	; 0x2894 <tm_cmd_write+0xa8>

		printf_P (PSTR("writing: %lu to %lu;\r\n"), g_dataStartAddress, 
    282a:	20 91 27 22 	lds	r18, 0x2227
    282e:	30 91 28 22 	lds	r19, 0x2228
    2832:	40 91 29 22 	lds	r20, 0x2229
    2836:	50 91 2a 22 	lds	r21, 0x222A
    283a:	10 91 26 22 	lds	r17, 0x2226
    283e:	80 91 27 22 	lds	r24, 0x2227
    2842:	90 91 28 22 	lds	r25, 0x2228
    2846:	a0 91 29 22 	lds	r26, 0x2229
    284a:	b0 91 2a 22 	lds	r27, 0x222A
    284e:	ed b7       	in	r30, 0x3d	; 61
    2850:	fe b7       	in	r31, 0x3e	; 62
    2852:	3a 97       	sbiw	r30, 0x0a	; 10
    2854:	ed bf       	out	0x3d, r30	; 61
    2856:	fe bf       	out	0x3e, r31	; 62
    2858:	31 96       	adiw	r30, 0x01	; 1
    285a:	65 e7       	ldi	r22, 0x75	; 117
    285c:	77 e0       	ldi	r23, 0x07	; 7
    285e:	cd b7       	in	r28, 0x3d	; 61
    2860:	de b7       	in	r29, 0x3e	; 62
    2862:	69 83       	std	Y+1, r22	; 0x01
    2864:	7a 83       	std	Y+2, r23	; 0x02
    2866:	22 83       	std	Z+2, r18	; 0x02
    2868:	33 83       	std	Z+3, r19	; 0x03
    286a:	44 83       	std	Z+4, r20	; 0x04
    286c:	55 83       	std	Z+5, r21	; 0x05
    286e:	81 0f       	add	r24, r17
    2870:	91 1d       	adc	r25, r1
    2872:	a1 1d       	adc	r26, r1
    2874:	b1 1d       	adc	r27, r1
    2876:	86 83       	std	Z+6, r24	; 0x06
    2878:	97 83       	std	Z+7, r25	; 0x07
    287a:	a0 87       	std	Z+8, r26	; 0x08
    287c:	b1 87       	std	Z+9, r27	; 0x09
    287e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2882:	ed b7       	in	r30, 0x3d	; 61
    2884:	fe b7       	in	r31, 0x3e	; 62
    2886:	3a 96       	adiw	r30, 0x0a	; 10
    2888:	ed bf       	out	0x3d, r30	; 61
    288a:	fe bf       	out	0x3e, r31	; 62
											g_dataStartAddress+g_leftDataToGet);

//		for (iIterator=0; iIterator<=iLength; iIterator ++ )
//			dataflash_write ( iStart+iIterator, swUART_ReadChar( ) );
	}
}
    288c:	df 91       	pop	r29
    288e:	cf 91       	pop	r28
    2890:	1f 91       	pop	r17
    2892:	08 95       	ret
	else
	{
		g_dataStartAddress = atol(argv[1]);
		g_leftDataToGet = atoi(argv[2]);

		if ( g_leftDataToGet > 15 ) g_leftDataToGet = 15;	// Don't allow more then 15 bytes
    2894:	8f e0       	ldi	r24, 0x0F	; 15
    2896:	80 93 26 22 	sts	0x2226, r24
    289a:	c7 cf       	rjmp	.-114    	; 0x282a <tm_cmd_write+0x3e>
/**************************************************************************/
void tm_cmd_write			(U8 argc, char **argv)
{
	if ( argc != 3 )
	{
		printf_P (PSTR("usage: write [32bit start_address] [8bit length]\r\n"));
    289c:	00 d0       	rcall	.+0      	; 0x289e <tm_cmd_write+0xb2>
    289e:	8c e8       	ldi	r24, 0x8C	; 140
    28a0:	97 e0       	ldi	r25, 0x07	; 7
    28a2:	cd b7       	in	r28, 0x3d	; 61
    28a4:	de b7       	in	r29, 0x3e	; 62
    28a6:	89 83       	std	Y+1, r24	; 0x01
    28a8:	9a 83       	std	Y+2, r25	; 0x02
    28aa:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    28ae:	0f 90       	pop	r0
    28b0:	0f 90       	pop	r0
											g_dataStartAddress+g_leftDataToGet);

//		for (iIterator=0; iIterator<=iLength; iIterator ++ )
//			dataflash_write ( iStart+iIterator, swUART_ReadChar( ) );
	}
}
    28b2:	df 91       	pop	r29
    28b4:	cf 91       	pop	r28
    28b6:	1f 91       	pop	r17
    28b8:	08 95       	ret

000028ba <tm_cmd_read_block>:
/*!
	read the whole block from the flash   
*/
/**************************************************************************/
void tm_cmd_read_block		(U8 argc, char **argv)
{
    28ba:	ef 92       	push	r14
    28bc:	ff 92       	push	r15
    28be:	0f 93       	push	r16
    28c0:	1f 93       	push	r17
	if ( argc != 2 )
    28c2:	82 30       	cpi	r24, 0x02	; 2
    28c4:	09 f0       	breq	.+2      	; 0x28c8 <tm_cmd_read_block+0xe>
    28c6:	3f c0       	rjmp	.+126    	; 0x2946 <tm_cmd_read_block+0x8c>
	}
	else
	{
		uint32_t iIterator = 0;
		
		g_dataStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
    28c8:	fb 01       	movw	r30, r22
    28ca:	82 81       	ldd	r24, Z+2	; 0x02
    28cc:	93 81       	ldd	r25, Z+3	; 0x03
    28ce:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    28d2:	3c e0       	ldi	r19, 0x0C	; 12
    28d4:	66 0f       	add	r22, r22
    28d6:	77 1f       	adc	r23, r23
    28d8:	88 1f       	adc	r24, r24
    28da:	99 1f       	adc	r25, r25
    28dc:	3a 95       	dec	r19
    28de:	d1 f7       	brne	.-12     	; 0x28d4 <tm_cmd_read_block+0x1a>
    28e0:	60 93 27 22 	sts	0x2227, r22
    28e4:	70 93 28 22 	sts	0x2228, r23
    28e8:	80 93 29 22 	sts	0x2229, r24
    28ec:	90 93 2a 22 	sts	0x222A, r25
	
		for (iIterator=0; iIterator<=FLASH_BLOCK4_SIZE; iIterator ++ )
    28f0:	ee 24       	eor	r14, r14
    28f2:	ff 24       	eor	r15, r15
    28f4:	87 01       	movw	r16, r14
			putchar(dataflash_read ( g_dataStartAddress+iIterator ));
    28f6:	60 91 27 22 	lds	r22, 0x2227
    28fa:	70 91 28 22 	lds	r23, 0x2228
    28fe:	80 91 29 22 	lds	r24, 0x2229
    2902:	90 91 2a 22 	lds	r25, 0x222A
    2906:	6e 0d       	add	r22, r14
    2908:	7f 1d       	adc	r23, r15
    290a:	80 1f       	adc	r24, r16
    290c:	91 1f       	adc	r25, r17
    290e:	0e 94 4a 1c 	call	0x3894	; 0x3894 <dataflash_read>
    2912:	60 91 27 23 	lds	r22, 0x2327
    2916:	70 91 28 23 	lds	r23, 0x2328
    291a:	90 e0       	ldi	r25, 0x00	; 0
    291c:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
	{
		uint32_t iIterator = 0;
		
		g_dataStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
	
		for (iIterator=0; iIterator<=FLASH_BLOCK4_SIZE; iIterator ++ )
    2920:	08 94       	sec
    2922:	e1 1c       	adc	r14, r1
    2924:	f1 1c       	adc	r15, r1
    2926:	01 1d       	adc	r16, r1
    2928:	11 1d       	adc	r17, r1
    292a:	f1 e0       	ldi	r31, 0x01	; 1
    292c:	ef 16       	cp	r14, r31
    292e:	f0 e1       	ldi	r31, 0x10	; 16
    2930:	ff 06       	cpc	r15, r31
    2932:	f0 e0       	ldi	r31, 0x00	; 0
    2934:	0f 07       	cpc	r16, r31
    2936:	f0 e0       	ldi	r31, 0x00	; 0
    2938:	1f 07       	cpc	r17, r31
    293a:	e9 f6       	brne	.-70     	; 0x28f6 <tm_cmd_read_block+0x3c>
			putchar(dataflash_read ( g_dataStartAddress+iIterator ));
	}
}
    293c:	1f 91       	pop	r17
    293e:	0f 91       	pop	r16
    2940:	ff 90       	pop	r15
    2942:	ef 90       	pop	r14
    2944:	08 95       	ret
/**************************************************************************/
void tm_cmd_read_block		(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: read_block [start_block]\r\n"));
    2946:	00 d0       	rcall	.+0      	; 0x2948 <tm_cmd_read_block+0x8e>
    2948:	8c e0       	ldi	r24, 0x0C	; 12
    294a:	97 e0       	ldi	r25, 0x07	; 7
    294c:	ed b7       	in	r30, 0x3d	; 61
    294e:	fe b7       	in	r31, 0x3e	; 62
    2950:	81 83       	std	Z+1, r24	; 0x01
    2952:	92 83       	std	Z+2, r25	; 0x02
    2954:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    2958:	0f 90       	pop	r0
    295a:	0f 90       	pop	r0
		g_dataStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
	
		for (iIterator=0; iIterator<=FLASH_BLOCK4_SIZE; iIterator ++ )
			putchar(dataflash_read ( g_dataStartAddress+iIterator ));
	}
}
    295c:	1f 91       	pop	r17
    295e:	0f 91       	pop	r16
    2960:	ff 90       	pop	r15
    2962:	ef 90       	pop	r14
    2964:	08 95       	ret

00002966 <tm_cmd_get_fs>:
/*!
	Send out the whole files-system boot table
*/
/**************************************************************************/
void tm_cmd_get_fs			(U8 argc, char **argv)
{
    2966:	af 92       	push	r10
    2968:	bf 92       	push	r11
    296a:	cf 92       	push	r12
    296c:	df 92       	push	r13
    296e:	ef 92       	push	r14
    2970:	ff 92       	push	r15
    2972:	0f 93       	push	r16
    2974:	1f 93       	push	r17
    2976:	df 93       	push	r29
    2978:	cf 93       	push	r28
    297a:	cd b7       	in	r28, 0x3d	; 61
    297c:	de b7       	in	r29, 0x3e	; 62
    297e:	c4 55       	subi	r28, 0x54	; 84
    2980:	d0 40       	sbci	r29, 0x00	; 0
    2982:	cd bf       	out	0x3d, r28	; 61
    2984:	de bf       	out	0x3e, r29	; 62
	FileEntry_ST sCurEntry;
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
    2986:	80 e0       	ldi	r24, 0x00	; 0
    2988:	90 e9       	ldi	r25, 0x90	; 144
    298a:	af e3       	ldi	r26, 0x3F	; 63
    298c:	b0 e0       	ldi	r27, 0x00	; 0
    298e:	89 83       	std	Y+1, r24	; 0x01
    2990:	9a 83       	std	Y+2, r25	; 0x02
    2992:	ab 83       	std	Y+3, r26	; 0x03
    2994:	bc 83       	std	Y+4, r27	; 0x04
	uint8_t	itr = 0;
    2996:	00 e0       	ldi	r16, 0x00	; 0
    2998:	55 e0       	ldi	r21, 0x05	; 5
    299a:	c5 2e       	mov	r12, r21
    299c:	d1 2c       	mov	r13, r1
    299e:	cc 0e       	add	r12, r28
    29a0:	dd 1e       	adc	r13, r29
    29a2:	5e 01       	movw	r10, r28
    29a4:	08 94       	sec
    29a6:	a1 1c       	adc	r10, r1
    29a8:	b1 1c       	adc	r11, r1
/**************************************************************************/
/*!
	Send out the whole files-system boot table
*/
/**************************************************************************/
void tm_cmd_get_fs			(U8 argc, char **argv)
    29aa:	45 e5       	ldi	r20, 0x55	; 85
    29ac:	e4 2e       	mov	r14, r20
    29ae:	f1 2c       	mov	r15, r1
    29b0:	ec 0e       	add	r14, r28
    29b2:	fd 1e       	adc	r15, r29
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    29b4:	c5 01       	movw	r24, r10
    29b6:	b6 01       	movw	r22, r12
    29b8:	0e 94 62 07 	call	0xec4	; 0xec4 <FS_ReadEntry>
    29bc:	88 23       	and	r24, r24
    29be:	a9 f0       	breq	.+42     	; 0x29ea <tm_cmd_get_fs+0x84>
	{
		cEntry = (char*)(&sCurEntry);
    29c0:	86 01       	movw	r16, r12
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			putchar( cEntry[itr] );		
    29c2:	60 91 27 23 	lds	r22, 0x2327
    29c6:	70 91 28 23 	lds	r23, 0x2328
    29ca:	f8 01       	movw	r30, r16
    29cc:	81 91       	ld	r24, Z+
    29ce:	8f 01       	movw	r16, r30
    29d0:	90 e0       	ldi	r25, 0x00	; 0
    29d2:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
	{
		cEntry = (char*)(&sCurEntry);
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
    29d6:	0e 15       	cp	r16, r14
    29d8:	1f 05       	cpc	r17, r15
    29da:	99 f7       	brne	.-26     	; 0x29c2 <tm_cmd_get_fs+0x5c>
    29dc:	00 e5       	ldi	r16, 0x50	; 80
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    29de:	c5 01       	movw	r24, r10
    29e0:	b6 01       	movw	r22, r12
    29e2:	0e 94 62 07 	call	0xec4	; 0xec4 <FS_ReadEntry>
    29e6:	88 23       	and	r24, r24
    29e8:	59 f7       	brne	.-42     	; 0x29c0 <tm_cmd_get_fs+0x5a>
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			putchar( cEntry[itr] );		
	}

	if ( itr == 0 )		// nothing was read then FS empty
    29ea:	00 23       	and	r16, r16
    29ec:	d1 f0       	breq	.+52     	; 0x2a22 <tm_cmd_get_fs+0xbc>
		printf_P(PSTR("EMPTY.EMPTY.EMPTY.\r\n") );
		return ;
	}
	else
	{
		printf_P(PSTR("FINISHED.FINISHED.FINISHED.\r\n") );
    29ee:	00 d0       	rcall	.+0      	; 0x29f0 <tm_cmd_get_fs+0x8a>
    29f0:	8d e7       	ldi	r24, 0x7D	; 125
    29f2:	94 e0       	ldi	r25, 0x04	; 4
    29f4:	ed b7       	in	r30, 0x3d	; 61
    29f6:	fe b7       	in	r31, 0x3e	; 62
    29f8:	81 83       	std	Z+1, r24	; 0x01
    29fa:	92 83       	std	Z+2, r25	; 0x02
    29fc:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2a00:	0f 90       	pop	r0
    2a02:	0f 90       	pop	r0
	}
}
    2a04:	cc 5a       	subi	r28, 0xAC	; 172
    2a06:	df 4f       	sbci	r29, 0xFF	; 255
    2a08:	cd bf       	out	0x3d, r28	; 61
    2a0a:	de bf       	out	0x3e, r29	; 62
    2a0c:	cf 91       	pop	r28
    2a0e:	df 91       	pop	r29
    2a10:	1f 91       	pop	r17
    2a12:	0f 91       	pop	r16
    2a14:	ff 90       	pop	r15
    2a16:	ef 90       	pop	r14
    2a18:	df 90       	pop	r13
    2a1a:	cf 90       	pop	r12
    2a1c:	bf 90       	pop	r11
    2a1e:	af 90       	pop	r10
    2a20:	08 95       	ret
			putchar( cEntry[itr] );		
	}

	if ( itr == 0 )		// nothing was read then FS empty
	{
		printf_P(PSTR("EMPTY.EMPTY.EMPTY.\r\n") );
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <tm_cmd_get_fs+0xbe>
    2a24:	8b e9       	ldi	r24, 0x9B	; 155
    2a26:	94 e0       	ldi	r25, 0x04	; 4
    2a28:	ed b7       	in	r30, 0x3d	; 61
    2a2a:	fe b7       	in	r31, 0x3e	; 62
    2a2c:	81 83       	std	Z+1, r24	; 0x01
    2a2e:	92 83       	std	Z+2, r25	; 0x02
    2a30:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return ;
    2a34:	0f 90       	pop	r0
    2a36:	0f 90       	pop	r0
    2a38:	e5 cf       	rjmp	.-54     	; 0x2a04 <tm_cmd_get_fs+0x9e>

00002a3a <tm_cmd_dir>:
	Show file list in the shell   
*/
/**************************************************************************/
void tm_cmd_dir				(U8 argc, char **argv)
{
	FS_ShowFileInformation ( );
    2a3a:	0e 94 0e 0b 	call	0x161c	; 0x161c <FS_ShowFileInformation>
}
    2a3e:	08 95       	ret

00002a40 <tm_cmd_flash_status>:
/*!
	Retrieve the flash statuses and print out on the shell   
*/
/**************************************************************************/
void tm_cmd_flash_status	(U8 argc, char **argv)
{
    2a40:	1f 93       	push	r17
    2a42:	cf 93       	push	r28
    2a44:	df 93       	push	r29
	uint8_t stat_flash = dataflash_read_status ( );
    2a46:	0e 94 bf 1e 	call	0x3d7e	; 0x3d7e <dataflash_read_status>
    2a4a:	18 2f       	mov	r17, r24

	if (stat_flash&FLASH_READY)
    2a4c:	c8 2f       	mov	r28, r24
    2a4e:	d0 e0       	ldi	r29, 0x00	; 0
    2a50:	ce 01       	movw	r24, r28
    2a52:	80 ff       	sbrs	r24, 0
    2a54:	55 c0       	rjmp	.+170    	; 0x2b00 <tm_cmd_flash_status+0xc0>
		printf_P( PSTR("\r\n#0 NOT ready (1)") );
    2a56:	00 d0       	rcall	.+0      	; 0x2a58 <tm_cmd_flash_status+0x18>
    2a58:	88 e1       	ldi	r24, 0x18	; 24
    2a5a:	96 e0       	ldi	r25, 0x06	; 6
    2a5c:	ed b7       	in	r30, 0x3d	; 61
    2a5e:	fe b7       	in	r31, 0x3e	; 62
    2a60:	81 83       	std	Z+1, r24	; 0x01
    2a62:	92 83       	std	Z+2, r25	; 0x02
    2a64:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2a68:	0f 90       	pop	r0
    2a6a:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#0 ready (0)") );

	if (stat_flash&FLASH_WE)
    2a6c:	c1 ff       	sbrs	r28, 1
    2a6e:	55 c0       	rjmp	.+170    	; 0x2b1a <tm_cmd_flash_status+0xda>
		printf_P( PSTR("\r\n#1 write enabled (1)") );
    2a70:	00 d0       	rcall	.+0      	; 0x2a72 <tm_cmd_flash_status+0x32>
    2a72:	82 ef       	ldi	r24, 0xF2	; 242
    2a74:	95 e0       	ldi	r25, 0x05	; 5
    2a76:	ed b7       	in	r30, 0x3d	; 61
    2a78:	fe b7       	in	r31, 0x3e	; 62
    2a7a:	81 83       	std	Z+1, r24	; 0x01
    2a7c:	92 83       	std	Z+2, r25	; 0x02
    2a7e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2a82:	0f 90       	pop	r0
    2a84:	0f 90       	pop	r0

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		printf_P( PSTR("\r\n#23 write protected (11)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		printf_P( PSTR("\r\n#23 partly write protected (01)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    2a86:	9e 01       	movw	r18, r28
    2a88:	2c 70       	andi	r18, 0x0C	; 12
    2a8a:	30 70       	andi	r19, 0x00	; 0
    2a8c:	21 15       	cp	r18, r1
    2a8e:	31 05       	cpc	r19, r1
    2a90:	09 f0       	breq	.+2      	; 0x2a94 <tm_cmd_flash_status+0x54>
    2a92:	55 c0       	rjmp	.+170    	; 0x2b3e <tm_cmd_flash_status+0xfe>
		printf_P( PSTR("\r\n#23 NOT write protected (00)") );
    2a94:	00 d0       	rcall	.+0      	; 0x2a96 <tm_cmd_flash_status+0x56>
    2a96:	88 eb       	ldi	r24, 0xB8	; 184
    2a98:	95 e0       	ldi	r25, 0x05	; 5
    2a9a:	ed b7       	in	r30, 0x3d	; 61
    2a9c:	fe b7       	in	r31, 0x3e	; 62
    2a9e:	81 83       	std	Z+1, r24	; 0x01
    2aa0:	92 83       	std	Z+2, r25	; 0x02
    2aa2:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2aa6:	0f 90       	pop	r0
    2aa8:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#23 protection unknown (10 reserved)") );

	if (stat_flash&FLASH_WP_PIN)
    2aaa:	c4 ff       	sbrs	r28, 4
    2aac:	55 c0       	rjmp	.+170    	; 0x2b58 <tm_cmd_flash_status+0x118>
		printf_P( PSTR("\r\n#4 NOT write protected (1)") );
    2aae:	00 d0       	rcall	.+0      	; 0x2ab0 <tm_cmd_flash_status+0x70>
    2ab0:	24 e7       	ldi	r18, 0x74	; 116
    2ab2:	35 e0       	ldi	r19, 0x05	; 5
    2ab4:	ed b7       	in	r30, 0x3d	; 61
    2ab6:	fe b7       	in	r31, 0x3e	; 62
    2ab8:	21 83       	std	Z+1, r18	; 0x01
    2aba:	32 83       	std	Z+2, r19	; 0x02
    2abc:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2ac0:	0f 90       	pop	r0
    2ac2:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#4 write protected (0)") );

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    2ac4:	c5 ff       	sbrs	r28, 5
    2ac6:	55 c0       	rjmp	.+170    	; 0x2b72 <tm_cmd_flash_status+0x132>
		printf_P( PSTR("\r\n#5 failed program (erase) (1)") );
    2ac8:	00 d0       	rcall	.+0      	; 0x2aca <tm_cmd_flash_status+0x8a>
    2aca:	2b e3       	ldi	r18, 0x3B	; 59
    2acc:	35 e0       	ldi	r19, 0x05	; 5
    2ace:	ed b7       	in	r30, 0x3d	; 61
    2ad0:	fe b7       	in	r31, 0x3e	; 62
    2ad2:	21 83       	std	Z+1, r18	; 0x01
    2ad4:	32 83       	std	Z+2, r19	; 0x02
    2ad6:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2ada:	0f 90       	pop	r0
    2adc:	0f 90       	pop	r0
	else
		printf_P( PSTR("\r\n#5 program (erase) was successfull (0)") );

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    2ade:	17 fd       	sbrc	r17, 7
    2ae0:	55 c0       	rjmp	.+170    	; 0x2b8c <tm_cmd_flash_status+0x14c>
		printf_P( PSTR("\r\n#7 sector protection registers LOCKED (1)\r\n\r\n") );
	else
		printf_P(PSTR("\r\n#7 sector protection registers UNLOCKED (0)\r\n\r\n") );
    2ae2:	00 d0       	rcall	.+0      	; 0x2ae4 <tm_cmd_flash_status+0xa4>
    2ae4:	80 eb       	ldi	r24, 0xB0	; 176
    2ae6:	94 e0       	ldi	r25, 0x04	; 4
    2ae8:	ed b7       	in	r30, 0x3d	; 61
    2aea:	fe b7       	in	r31, 0x3e	; 62
    2aec:	81 83       	std	Z+1, r24	; 0x01
    2aee:	92 83       	std	Z+2, r25	; 0x02
    2af0:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2af4:	0f 90       	pop	r0
    2af6:	0f 90       	pop	r0
}
    2af8:	df 91       	pop	r29
    2afa:	cf 91       	pop	r28
    2afc:	1f 91       	pop	r17
    2afe:	08 95       	ret
	uint8_t stat_flash = dataflash_read_status ( );

	if (stat_flash&FLASH_READY)
		printf_P( PSTR("\r\n#0 NOT ready (1)") );
	else
		printf_P( PSTR("\r\n#0 ready (0)") );
    2b00:	00 d0       	rcall	.+0      	; 0x2b02 <tm_cmd_flash_status+0xc2>
    2b02:	89 e0       	ldi	r24, 0x09	; 9
    2b04:	96 e0       	ldi	r25, 0x06	; 6
    2b06:	ed b7       	in	r30, 0x3d	; 61
    2b08:	fe b7       	in	r31, 0x3e	; 62
    2b0a:	81 83       	std	Z+1, r24	; 0x01
    2b0c:	92 83       	std	Z+2, r25	; 0x02
    2b0e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2b12:	0f 90       	pop	r0
    2b14:	0f 90       	pop	r0

	if (stat_flash&FLASH_WE)
    2b16:	c1 fd       	sbrc	r28, 1
    2b18:	ab cf       	rjmp	.-170    	; 0x2a70 <tm_cmd_flash_status+0x30>
		printf_P( PSTR("\r\n#1 write enabled (1)") );
	else
		printf_P( PSTR("\r\n#1 NOT write enabled (0)") );
    2b1a:	00 d0       	rcall	.+0      	; 0x2b1c <tm_cmd_flash_status+0xdc>
    2b1c:	87 ed       	ldi	r24, 0xD7	; 215
    2b1e:	95 e0       	ldi	r25, 0x05	; 5
    2b20:	ed b7       	in	r30, 0x3d	; 61
    2b22:	fe b7       	in	r31, 0x3e	; 62
    2b24:	81 83       	std	Z+1, r24	; 0x01
    2b26:	92 83       	std	Z+2, r25	; 0x02
    2b28:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2b2c:	0f 90       	pop	r0
    2b2e:	0f 90       	pop	r0

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		printf_P( PSTR("\r\n#23 write protected (11)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		printf_P( PSTR("\r\n#23 partly write protected (01)") );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    2b30:	9e 01       	movw	r18, r28
    2b32:	2c 70       	andi	r18, 0x0C	; 12
    2b34:	30 70       	andi	r19, 0x00	; 0
    2b36:	21 15       	cp	r18, r1
    2b38:	31 05       	cpc	r19, r1
    2b3a:	09 f4       	brne	.+2      	; 0x2b3e <tm_cmd_flash_status+0xfe>
    2b3c:	ab cf       	rjmp	.-170    	; 0x2a94 <tm_cmd_flash_status+0x54>
		printf_P( PSTR("\r\n#23 NOT write protected (00)") );
	else
		printf_P( PSTR("\r\n#23 protection unknown (10 reserved)") );
    2b3e:	00 d0       	rcall	.+0      	; 0x2b40 <tm_cmd_flash_status+0x100>
    2b40:	21 e9       	ldi	r18, 0x91	; 145
    2b42:	35 e0       	ldi	r19, 0x05	; 5
    2b44:	ed b7       	in	r30, 0x3d	; 61
    2b46:	fe b7       	in	r31, 0x3e	; 62
    2b48:	21 83       	std	Z+1, r18	; 0x01
    2b4a:	32 83       	std	Z+2, r19	; 0x02
    2b4c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2b50:	0f 90       	pop	r0
    2b52:	0f 90       	pop	r0

	if (stat_flash&FLASH_WP_PIN)
    2b54:	c4 fd       	sbrc	r28, 4
    2b56:	ab cf       	rjmp	.-170    	; 0x2aae <tm_cmd_flash_status+0x6e>
		printf_P( PSTR("\r\n#4 NOT write protected (1)") );
	else
		printf_P( PSTR("\r\n#4 write protected (0)") );
    2b58:	00 d0       	rcall	.+0      	; 0x2b5a <tm_cmd_flash_status+0x11a>
    2b5a:	2b e5       	ldi	r18, 0x5B	; 91
    2b5c:	35 e0       	ldi	r19, 0x05	; 5
    2b5e:	ed b7       	in	r30, 0x3d	; 61
    2b60:	fe b7       	in	r31, 0x3e	; 62
    2b62:	21 83       	std	Z+1, r18	; 0x01
    2b64:	32 83       	std	Z+2, r19	; 0x02
    2b66:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2b6a:	0f 90       	pop	r0
    2b6c:	0f 90       	pop	r0

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    2b6e:	c5 fd       	sbrc	r28, 5
    2b70:	ab cf       	rjmp	.-170    	; 0x2ac8 <tm_cmd_flash_status+0x88>
		printf_P( PSTR("\r\n#5 failed program (erase) (1)") );
	else
		printf_P( PSTR("\r\n#5 program (erase) was successfull (0)") );
    2b72:	00 d0       	rcall	.+0      	; 0x2b74 <tm_cmd_flash_status+0x134>
    2b74:	22 e1       	ldi	r18, 0x12	; 18
    2b76:	35 e0       	ldi	r19, 0x05	; 5
    2b78:	ed b7       	in	r30, 0x3d	; 61
    2b7a:	fe b7       	in	r31, 0x3e	; 62
    2b7c:	21 83       	std	Z+1, r18	; 0x01
    2b7e:	32 83       	std	Z+2, r19	; 0x02
    2b80:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2b84:	0f 90       	pop	r0
    2b86:	0f 90       	pop	r0

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    2b88:	17 ff       	sbrs	r17, 7
    2b8a:	ab cf       	rjmp	.-170    	; 0x2ae2 <tm_cmd_flash_status+0xa2>
		printf_P( PSTR("\r\n#7 sector protection registers LOCKED (1)\r\n\r\n") );
    2b8c:	00 d0       	rcall	.+0      	; 0x2b8e <tm_cmd_flash_status+0x14e>
    2b8e:	82 ee       	ldi	r24, 0xE2	; 226
    2b90:	94 e0       	ldi	r25, 0x04	; 4
    2b92:	ed b7       	in	r30, 0x3d	; 61
    2b94:	fe b7       	in	r31, 0x3e	; 62
    2b96:	81 83       	std	Z+1, r24	; 0x01
    2b98:	92 83       	std	Z+2, r25	; 0x02
    2b9a:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
	else
		printf_P(PSTR("\r\n#7 sector protection registers UNLOCKED (0)\r\n\r\n") );
}
    2ba2:	df 91       	pop	r29
    2ba4:	cf 91       	pop	r28
    2ba6:	1f 91       	pop	r17
    2ba8:	08 95       	ret

00002baa <tm_cmd_unprotect_flash>:
/*!
	Write-UnProtect the flash memory    
*/
/**************************************************************************/
void tm_cmd_unprotect_flash	(U8 argc, char **argv)
{
    2baa:	cf 93       	push	r28
    2bac:	df 93       	push	r29
	if ( argc != 2 )
    2bae:	82 30       	cpi	r24, 0x02	; 2
    2bb0:	49 f5       	brne	.+82     	; 0x2c04 <tm_cmd_unprotect_flash+0x5a>
		printf_P( PSTR("usage: unprot_flash [<block number> or <ALL>]\r\n"));
		return;		
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
    2bb2:	fb 01       	movw	r30, r22
    2bb4:	c2 81       	ldd	r28, Z+2	; 0x02
    2bb6:	d3 81       	ldd	r29, Z+3	; 0x03
    2bb8:	ce 01       	movw	r24, r28
    2bba:	65 e2       	ldi	r22, 0x25	; 37
    2bbc:	70 e2       	ldi	r23, 0x20	; 32
    2bbe:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    2bc2:	00 97       	sbiw	r24, 0x00	; 0
    2bc4:	e1 f0       	breq	.+56     	; 0x2bfe <tm_cmd_unprotect_flash+0x54>
		else
		{
			uint32_t iBlock;
			uint32_t iAddress;

			iBlock = atol (argv[1]);						// This is the data
    2bc6:	ce 01       	movw	r24, r28
    2bc8:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2bcc:	dc 01       	movw	r26, r24
    2bce:	cb 01       	movw	r24, r22

			// Calculate address
			iAddress = iBlock * (uint32_t)(FLASH_BLOCK4_SIZE);
    2bd0:	6c e0       	ldi	r22, 0x0C	; 12
    2bd2:	88 0f       	add	r24, r24
    2bd4:	99 1f       	adc	r25, r25
    2bd6:	aa 1f       	adc	r26, r26
    2bd8:	bb 1f       	adc	r27, r27
    2bda:	6a 95       	dec	r22
    2bdc:	d1 f7       	brne	.-12     	; 0x2bd2 <tm_cmd_unprotect_flash+0x28>

			dataflash_unprotect_block4 ( iAddress );
    2bde:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <dataflash_unprotect_block4>
		}
	}
	printf_P (PSTR("OK\r\n"));
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <tm_cmd_unprotect_flash+0x3a>
    2be4:	82 e9       	ldi	r24, 0x92	; 146
    2be6:	96 e0       	ldi	r25, 0x06	; 6
    2be8:	ed b7       	in	r30, 0x3d	; 61
    2bea:	fe b7       	in	r31, 0x3e	; 62
    2bec:	81 83       	std	Z+1, r24	; 0x01
    2bee:	92 83       	std	Z+2, r25	; 0x02
    2bf0:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2bf4:	0f 90       	pop	r0
    2bf6:	0f 90       	pop	r0
}
    2bf8:	df 91       	pop	r29
    2bfa:	cf 91       	pop	r28
    2bfc:	08 95       	ret
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
		{
			dataflash_unprotect_all ( );
    2bfe:	0e 94 86 1c 	call	0x390c	; 0x390c <dataflash_unprotect_all>
    2c02:	ef cf       	rjmp	.-34     	; 0x2be2 <tm_cmd_unprotect_flash+0x38>
/**************************************************************************/
void tm_cmd_unprotect_flash	(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: unprot_flash [<block number> or <ALL>]\r\n"));
    2c04:	00 d0       	rcall	.+0      	; 0x2c06 <tm_cmd_unprotect_flash+0x5c>
    2c06:	87 e9       	ldi	r24, 0x97	; 151
    2c08:	96 e0       	ldi	r25, 0x06	; 6
    2c0a:	ed b7       	in	r30, 0x3d	; 61
    2c0c:	fe b7       	in	r31, 0x3e	; 62
    2c0e:	81 83       	std	Z+1, r24	; 0x01
    2c10:	92 83       	std	Z+2, r25	; 0x02
    2c12:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;		
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0

			dataflash_unprotect_block4 ( iAddress );
		}
	}
	printf_P (PSTR("OK\r\n"));
}
    2c1a:	df 91       	pop	r29
    2c1c:	cf 91       	pop	r28
    2c1e:	08 95       	ret

00002c20 <tm_cmd_erase_flash>:
/*!
	Erase the flash chip - per block of ALL   
*/
/**************************************************************************/
void tm_cmd_erase_flash		(U8 argc, char **argv)
{
    2c20:	ef 92       	push	r14
    2c22:	ff 92       	push	r15
    2c24:	0f 93       	push	r16
    2c26:	1f 93       	push	r17
    2c28:	cf 93       	push	r28
    2c2a:	df 93       	push	r29
	if ( argc != 2 )
    2c2c:	82 30       	cpi	r24, 0x02	; 2
    2c2e:	51 f5       	brne	.+84     	; 0x2c84 <tm_cmd_erase_flash+0x64>
		printf_P( PSTR("usage: erase_flash [<block number> or <ALL>]\r\n"));
		return;		
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
    2c30:	fb 01       	movw	r30, r22
    2c32:	c2 81       	ldd	r28, Z+2	; 0x02
    2c34:	d3 81       	ldd	r29, Z+3	; 0x03
    2c36:	ce 01       	movw	r24, r28
    2c38:	65 e2       	ldi	r22, 0x25	; 37
    2c3a:	70 e2       	ldi	r23, 0x20	; 32
    2c3c:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    2c40:	00 97       	sbiw	r24, 0x00	; 0
    2c42:	e9 f0       	breq	.+58     	; 0x2c7e <tm_cmd_erase_flash+0x5e>
		}
		else
		{
			uint32_t iBlock;

			iBlock = atol (argv[1]);						// This is the data
    2c44:	ce 01       	movw	r24, r28
    2c46:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2c4a:	7b 01       	movw	r14, r22
    2c4c:	8c 01       	movw	r16, r24
			
			dataflash_unprotect_block4 ( (uint16_t)(iBlock) );
    2c4e:	cb 01       	movw	r24, r22
    2c50:	0e 94 1d 1e 	call	0x3c3a	; 0x3c3a <dataflash_unprotect_block4>

			dataflash_erase_block4 ( (uint16_t)(iBlock) );
    2c54:	c7 01       	movw	r24, r14
    2c56:	0e 94 cc 1d 	call	0x3b98	; 0x3b98 <dataflash_erase_block4>
		}
	}
	printf_P (PSTR("OK\r\n"));
    2c5a:	00 d0       	rcall	.+0      	; 0x2c5c <tm_cmd_erase_flash+0x3c>
    2c5c:	8b e2       	ldi	r24, 0x2B	; 43
    2c5e:	96 e0       	ldi	r25, 0x06	; 6
    2c60:	ed b7       	in	r30, 0x3d	; 61
    2c62:	fe b7       	in	r31, 0x3e	; 62
    2c64:	81 83       	std	Z+1, r24	; 0x01
    2c66:	92 83       	std	Z+2, r25	; 0x02
    2c68:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2c6c:	0f 90       	pop	r0
    2c6e:	0f 90       	pop	r0
}
    2c70:	df 91       	pop	r29
    2c72:	cf 91       	pop	r28
    2c74:	1f 91       	pop	r17
    2c76:	0f 91       	pop	r16
    2c78:	ff 90       	pop	r15
    2c7a:	ef 90       	pop	r14
    2c7c:	08 95       	ret
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
		{
			dataflash_erase_all ( );
    2c7e:	0e 94 3e 1d 	call	0x3a7c	; 0x3a7c <dataflash_erase_all>
    2c82:	eb cf       	rjmp	.-42     	; 0x2c5a <tm_cmd_erase_flash+0x3a>
/**************************************************************************/
void tm_cmd_erase_flash		(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: erase_flash [<block number> or <ALL>]\r\n"));
    2c84:	00 d0       	rcall	.+0      	; 0x2c86 <tm_cmd_erase_flash+0x66>
    2c86:	80 e3       	ldi	r24, 0x30	; 48
    2c88:	96 e0       	ldi	r25, 0x06	; 6
    2c8a:	ed b7       	in	r30, 0x3d	; 61
    2c8c:	fe b7       	in	r31, 0x3e	; 62
    2c8e:	81 83       	std	Z+1, r24	; 0x01
    2c90:	92 83       	std	Z+2, r25	; 0x02
    2c92:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;		
    2c96:	0f 90       	pop	r0
    2c98:	0f 90       	pop	r0

			dataflash_erase_block4 ( (uint16_t)(iBlock) );
		}
	}
	printf_P (PSTR("OK\r\n"));
}
    2c9a:	df 91       	pop	r29
    2c9c:	cf 91       	pop	r28
    2c9e:	1f 91       	pop	r17
    2ca0:	0f 91       	pop	r16
    2ca2:	ff 90       	pop	r15
    2ca4:	ef 90       	pop	r14
    2ca6:	08 95       	ret

00002ca8 <tm_cmd_protect_flash>:
/*!
	Write-Protect the flash memory   
*/
/**************************************************************************/
void tm_cmd_protect_flash	(U8 argc, char **argv)
{
    2ca8:	cf 93       	push	r28
    2caa:	df 93       	push	r29
	if ( argc != 2 )
    2cac:	82 30       	cpi	r24, 0x02	; 2
    2cae:	49 f5       	brne	.+82     	; 0x2d02 <tm_cmd_protect_flash+0x5a>
		printf_P( PSTR("usage: prot_flash [<block number> or <ALL>]\r\n"));
		return;		
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
    2cb0:	fb 01       	movw	r30, r22
    2cb2:	c2 81       	ldd	r28, Z+2	; 0x02
    2cb4:	d3 81       	ldd	r29, Z+3	; 0x03
    2cb6:	ce 01       	movw	r24, r28
    2cb8:	65 e2       	ldi	r22, 0x25	; 37
    2cba:	70 e2       	ldi	r23, 0x20	; 32
    2cbc:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    2cc0:	00 97       	sbiw	r24, 0x00	; 0
    2cc2:	e1 f0       	breq	.+56     	; 0x2cfc <tm_cmd_protect_flash+0x54>
		else
		{
			uint32_t iBlock;
			uint32_t iAddress;

			iBlock = atol (argv[1]);						// This is the data
    2cc4:	ce 01       	movw	r24, r28
    2cc6:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2cca:	dc 01       	movw	r26, r24
    2ccc:	cb 01       	movw	r24, r22

			// Calculate address
			iAddress = iBlock * (uint32_t)(FLASH_BLOCK4_SIZE);
    2cce:	7c e0       	ldi	r23, 0x0C	; 12
    2cd0:	88 0f       	add	r24, r24
    2cd2:	99 1f       	adc	r25, r25
    2cd4:	aa 1f       	adc	r26, r26
    2cd6:	bb 1f       	adc	r27, r27
    2cd8:	7a 95       	dec	r23
    2cda:	d1 f7       	brne	.-12     	; 0x2cd0 <tm_cmd_protect_flash+0x28>

			dataflash_protect_block4 ( iAddress );
    2cdc:	0e 94 6e 1e 	call	0x3cdc	; 0x3cdc <dataflash_protect_block4>
		}
	}
	printf_P (PSTR("OK\r\n"));
    2ce0:	00 d0       	rcall	.+0      	; 0x2ce2 <tm_cmd_protect_flash+0x3a>
    2ce2:	8f e5       	ldi	r24, 0x5F	; 95
    2ce4:	96 e0       	ldi	r25, 0x06	; 6
    2ce6:	ed b7       	in	r30, 0x3d	; 61
    2ce8:	fe b7       	in	r31, 0x3e	; 62
    2cea:	81 83       	std	Z+1, r24	; 0x01
    2cec:	92 83       	std	Z+2, r25	; 0x02
    2cee:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2cf2:	0f 90       	pop	r0
    2cf4:	0f 90       	pop	r0
}
    2cf6:	df 91       	pop	r29
    2cf8:	cf 91       	pop	r28
    2cfa:	08 95       	ret
	}
	else
	{
		if ( strcmp(argv[1], "ALL") == 0)
		{
			dataflash_protect_all ( );
    2cfc:	0e 94 e2 1c 	call	0x39c4	; 0x39c4 <dataflash_protect_all>
    2d00:	ef cf       	rjmp	.-34     	; 0x2ce0 <tm_cmd_protect_flash+0x38>
/**************************************************************************/
void tm_cmd_protect_flash	(U8 argc, char **argv)
{
	if ( argc != 2 )
	{
		printf_P( PSTR("usage: prot_flash [<block number> or <ALL>]\r\n"));
    2d02:	00 d0       	rcall	.+0      	; 0x2d04 <tm_cmd_protect_flash+0x5c>
    2d04:	84 e6       	ldi	r24, 0x64	; 100
    2d06:	96 e0       	ldi	r25, 0x06	; 6
    2d08:	ed b7       	in	r30, 0x3d	; 61
    2d0a:	fe b7       	in	r31, 0x3e	; 62
    2d0c:	81 83       	std	Z+1, r24	; 0x01
    2d0e:	92 83       	std	Z+2, r25	; 0x02
    2d10:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;		
    2d14:	0f 90       	pop	r0
    2d16:	0f 90       	pop	r0

			dataflash_protect_block4 ( iAddress );
		}
	}
	printf_P (PSTR("OK\r\n"));
}
    2d18:	df 91       	pop	r29
    2d1a:	cf 91       	pop	r28
    2d1c:	08 95       	ret

00002d1e <tm_cmd_spi_transfer>:
/*!
	Send an spi commant to the flash memory   
*/
/**************************************************************************/
void tm_cmd_spi_transfer	(U8 argc, char **argv)
{
    2d1e:	df 93       	push	r29
    2d20:	cf 93       	push	r28
    2d22:	0f 92       	push	r0
    2d24:	cd b7       	in	r28, 0x3d	; 61
    2d26:	de b7       	in	r29, 0x3e	; 62
	if ( argc != 2)
    2d28:	82 30       	cpi	r24, 0x02	; 2
    2d2a:	89 f0       	breq	.+34     	; 0x2d4e <tm_cmd_spi_transfer+0x30>
	{
		printf_P( PSTR("usage: spi_trans [byte]\r\n"));
    2d2c:	00 d0       	rcall	.+0      	; 0x2d2e <tm_cmd_spi_transfer+0x10>
    2d2e:	88 ee       	ldi	r24, 0xE8	; 232
    2d30:	96 e0       	ldi	r25, 0x06	; 6
    2d32:	ad b7       	in	r26, 0x3d	; 61
    2d34:	be b7       	in	r27, 0x3e	; 62
    2d36:	11 96       	adiw	r26, 0x01	; 1
    2d38:	8d 93       	st	X+, r24
    2d3a:	9c 93       	st	X, r25
    2d3c:	12 97       	sbiw	r26, 0x02	; 2
    2d3e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;		
    2d42:	0f 90       	pop	r0
    2d44:	0f 90       	pop	r0
		printf_P( PSTR("\r\nSending 0x%x"), byte_sent );
		byte_rec = SPI_MasterTransceiveByte(&spiMasterD, byte_sent);

		printf_P( PSTR("\r\nRecieved 0x%x\r\n"), byte_rec );
	}
}
    2d46:	0f 90       	pop	r0
    2d48:	cf 91       	pop	r28
    2d4a:	df 91       	pop	r29
    2d4c:	08 95       	ret
	else
	{
		U8 byte_sent;
		U8 byte_rec;

		byte_sent = atoi (argv[1]);	
    2d4e:	fb 01       	movw	r30, r22
    2d50:	82 81       	ldd	r24, Z+2	; 0x02
    2d52:	93 81       	ldd	r25, Z+3	; 0x03
    2d54:	0e 94 95 23 	call	0x472a	; 0x472a <atoi>

		printf_P( PSTR("\r\nSending 0x%x"), byte_sent );
    2d58:	00 d0       	rcall	.+0      	; 0x2d5a <tm_cmd_spi_transfer+0x3c>
    2d5a:	00 d0       	rcall	.+0      	; 0x2d5c <tm_cmd_spi_transfer+0x3e>
    2d5c:	ed b7       	in	r30, 0x3d	; 61
    2d5e:	fe b7       	in	r31, 0x3e	; 62
    2d60:	31 96       	adiw	r30, 0x01	; 1
    2d62:	29 ed       	ldi	r18, 0xD9	; 217
    2d64:	36 e0       	ldi	r19, 0x06	; 6
    2d66:	ad b7       	in	r26, 0x3d	; 61
    2d68:	be b7       	in	r27, 0x3e	; 62
    2d6a:	11 96       	adiw	r26, 0x01	; 1
    2d6c:	2d 93       	st	X+, r18
    2d6e:	3c 93       	st	X, r19
    2d70:	12 97       	sbiw	r26, 0x02	; 2
    2d72:	82 83       	std	Z+2, r24	; 0x02
    2d74:	13 82       	std	Z+3, r1	; 0x03
    2d76:	89 83       	std	Y+1, r24	; 0x01
    2d78:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		byte_rec = SPI_MasterTransceiveByte(&spiMasterD, byte_sent);
    2d7c:	0f 90       	pop	r0
    2d7e:	0f 90       	pop	r0
    2d80:	0f 90       	pop	r0
    2d82:	0f 90       	pop	r0
    2d84:	8e e1       	ldi	r24, 0x1E	; 30
    2d86:	93 e2       	ldi	r25, 0x23	; 35
    2d88:	69 81       	ldd	r22, Y+1	; 0x01
    2d8a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

		printf_P( PSTR("\r\nRecieved 0x%x\r\n"), byte_rec );
    2d8e:	00 d0       	rcall	.+0      	; 0x2d90 <tm_cmd_spi_transfer+0x72>
    2d90:	00 d0       	rcall	.+0      	; 0x2d92 <tm_cmd_spi_transfer+0x74>
    2d92:	ed b7       	in	r30, 0x3d	; 61
    2d94:	fe b7       	in	r31, 0x3e	; 62
    2d96:	31 96       	adiw	r30, 0x01	; 1
    2d98:	27 ec       	ldi	r18, 0xC7	; 199
    2d9a:	36 e0       	ldi	r19, 0x06	; 6
    2d9c:	ad b7       	in	r26, 0x3d	; 61
    2d9e:	be b7       	in	r27, 0x3e	; 62
    2da0:	11 96       	adiw	r26, 0x01	; 1
    2da2:	2d 93       	st	X+, r18
    2da4:	3c 93       	st	X, r19
    2da6:	12 97       	sbiw	r26, 0x02	; 2
    2da8:	82 83       	std	Z+2, r24	; 0x02
    2daa:	13 82       	std	Z+3, r1	; 0x03
    2dac:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2db0:	0f 90       	pop	r0
    2db2:	0f 90       	pop	r0
    2db4:	0f 90       	pop	r0
    2db6:	0f 90       	pop	r0
	}
}
    2db8:	0f 90       	pop	r0
    2dba:	cf 91       	pop	r28
    2dbc:	df 91       	pop	r29
    2dbe:	08 95       	ret

00002dc0 <tm_cmd_write_block>:
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
{
    2dc0:	2f 92       	push	r2
    2dc2:	3f 92       	push	r3
    2dc4:	4f 92       	push	r4
    2dc6:	5f 92       	push	r5
    2dc8:	6f 92       	push	r6
    2dca:	7f 92       	push	r7
    2dcc:	8f 92       	push	r8
    2dce:	9f 92       	push	r9
    2dd0:	af 92       	push	r10
    2dd2:	bf 92       	push	r11
    2dd4:	cf 92       	push	r12
    2dd6:	df 92       	push	r13
    2dd8:	ef 92       	push	r14
    2dda:	ff 92       	push	r15
    2ddc:	0f 93       	push	r16
    2dde:	1f 93       	push	r17
    2de0:	df 93       	push	r29
    2de2:	cf 93       	push	r28
    2de4:	cd b7       	in	r28, 0x3d	; 61
    2de6:	de b7       	in	r29, 0x3e	; 62
    2de8:	c8 54       	subi	r28, 0x48	; 72
    2dea:	d0 40       	sbci	r29, 0x00	; 0
    2dec:	cd bf       	out	0x3d, r28	; 61
    2dee:	de bf       	out	0x3e, r29	; 62
    2df0:	7b 01       	movw	r14, r22
	if ( argc != 4 )
    2df2:	84 30       	cpi	r24, 0x04	; 4
    2df4:	21 f1       	breq	.+72     	; 0x2e3e <tm_cmd_write_block+0x7e>
	{
		printf_P( PSTR("usage: write_block [start_block] [quant] [length]\r\n"));
    2df6:	00 d0       	rcall	.+0      	; 0x2df8 <tm_cmd_write_block+0x38>
    2df8:	81 e4       	ldi	r24, 0x41	; 65
    2dfa:	97 e0       	ldi	r25, 0x07	; 7
    2dfc:	ad b7       	in	r26, 0x3d	; 61
    2dfe:	be b7       	in	r27, 0x3e	; 62
    2e00:	11 96       	adiw	r26, 0x01	; 1
    2e02:	8d 93       	st	X+, r24
    2e04:	9c 93       	st	X, r25
    2e06:	12 97       	sbiw	r26, 0x02	; 2
    2e08:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		return;	
    2e0c:	0f 90       	pop	r0
    2e0e:	0f 90       	pop	r0
			{
				printf_P (PSTR("fail\r\n"));
			}
		}
	}
}
    2e10:	c8 5b       	subi	r28, 0xB8	; 184
    2e12:	df 4f       	sbci	r29, 0xFF	; 255
    2e14:	cd bf       	out	0x3d, r28	; 61
    2e16:	de bf       	out	0x3e, r29	; 62
    2e18:	cf 91       	pop	r28
    2e1a:	df 91       	pop	r29
    2e1c:	1f 91       	pop	r17
    2e1e:	0f 91       	pop	r16
    2e20:	ff 90       	pop	r15
    2e22:	ef 90       	pop	r14
    2e24:	df 90       	pop	r13
    2e26:	cf 90       	pop	r12
    2e28:	bf 90       	pop	r11
    2e2a:	af 90       	pop	r10
    2e2c:	9f 90       	pop	r9
    2e2e:	8f 90       	pop	r8
    2e30:	7f 90       	pop	r7
    2e32:	6f 90       	pop	r6
    2e34:	5f 90       	pop	r5
    2e36:	4f 90       	pop	r4
    2e38:	3f 90       	pop	r3
    2e3a:	2f 90       	pop	r2
    2e3c:	08 95       	ret
		uint32_t msgCount;
		uint8_t currQuant;
		uint32_t iPlace;
		uint16_t crc16 = 0xffff;
		
		uint32_t iStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
    2e3e:	fb 01       	movw	r30, r22
    2e40:	82 81       	ldd	r24, Z+2	; 0x02
    2e42:	93 81       	ldd	r25, Z+3	; 0x03
    2e44:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2e48:	5b 01       	movw	r10, r22
    2e4a:	6c 01       	movw	r12, r24
		uint8_t iQuant = atoi(argv[2]);
    2e4c:	d7 01       	movw	r26, r14
    2e4e:	14 96       	adiw	r26, 0x04	; 4
    2e50:	8d 91       	ld	r24, X+
    2e52:	9c 91       	ld	r25, X
    2e54:	15 97       	sbiw	r26, 0x05	; 5
    2e56:	0e 94 95 23 	call	0x472a	; 0x472a <atoi>
    2e5a:	98 2e       	mov	r9, r24
		uint32_t iLength = atol(argv[3]);
    2e5c:	f7 01       	movw	r30, r14
    2e5e:	86 81       	ldd	r24, Z+6	; 0x06
    2e60:	97 81       	ldd	r25, Z+7	; 0x07
    2e62:	0e 94 b3 23 	call	0x4766	; 0x4766 <atol>
    2e66:	2b 01       	movw	r4, r22
    2e68:	3c 01       	movw	r6, r24
		iPlace = iStartAddress;
		
		msgCount = iLength;
		
		// Send the OK that says we are ready to get data chunks
		printf_P (PSTR("OK\r\n"));
    2e6a:	00 d0       	rcall	.+0      	; 0x2e6c <tm_cmd_write_block+0xac>
    2e6c:	8c e3       	ldi	r24, 0x3C	; 60
    2e6e:	97 e0       	ldi	r25, 0x07	; 7
    2e70:	ad b7       	in	r26, 0x3d	; 61
    2e72:	be b7       	in	r27, 0x3e	; 62
    2e74:	11 96       	adiw	r26, 0x01	; 1
    2e76:	8d 93       	st	X+, r24
    2e78:	9c 93       	st	X, r25
    2e7a:	12 97       	sbiw	r26, 0x02	; 2
    2e7c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
		
		while (msgCount)
    2e80:	0f 90       	pop	r0
    2e82:	0f 90       	pop	r0
    2e84:	41 14       	cp	r4, r1
    2e86:	51 04       	cpc	r5, r1
    2e88:	61 04       	cpc	r6, r1
    2e8a:	71 04       	cpc	r7, r1
    2e8c:	09 f2       	breq	.-126    	; 0x2e10 <tm_cmd_write_block+0x50>
		uint32_t msgCount;
		uint8_t currQuant;
		uint32_t iPlace;
		uint16_t crc16 = 0xffff;
		
		uint32_t iStartAddress = atol(argv[1])*FLASH_BLOCK4_SIZE;
    2e8e:	29 2d       	mov	r18, r9
    2e90:	30 e0       	ldi	r19, 0x00	; 0
    2e92:	40 e0       	ldi	r20, 0x00	; 0
    2e94:	50 e0       	ldi	r21, 0x00	; 0
    2e96:	25 96       	adiw	r28, 0x05	; 5
    2e98:	2c af       	std	Y+60, r18	; 0x3c
    2e9a:	3d af       	std	Y+61, r19	; 0x3d
    2e9c:	4e af       	std	Y+62, r20	; 0x3e
    2e9e:	5f af       	std	Y+63, r21	; 0x3f
    2ea0:	25 97       	sbiw	r28, 0x05	; 5
		uint8_t iQuant = atoi(argv[2]);
		uint32_t iLength = atol(argv[3]);
		iPlace = iStartAddress;
    2ea2:	d6 01       	movw	r26, r12
    2ea4:	c5 01       	movw	r24, r10
    2ea6:	1c e0       	ldi	r17, 0x0C	; 12
    2ea8:	88 0f       	add	r24, r24
    2eaa:	99 1f       	adc	r25, r25
    2eac:	aa 1f       	adc	r26, r26
    2eae:	bb 1f       	adc	r27, r27
    2eb0:	1a 95       	dec	r17
    2eb2:	d1 f7       	brne	.-12     	; 0x2ea8 <tm_cmd_write_block+0xe8>
    2eb4:	29 96       	adiw	r28, 0x09	; 9
    2eb6:	8c af       	std	Y+60, r24	; 0x3c
    2eb8:	9d af       	std	Y+61, r25	; 0x3d
    2eba:	ae af       	std	Y+62, r26	; 0x3e
    2ebc:	bf af       	std	Y+63, r27	; 0x3f
    2ebe:	29 97       	sbiw	r28, 0x09	; 9
    2ec0:	5e 01       	movw	r10, r28
    2ec2:	08 94       	sec
    2ec4:	a1 1c       	adc	r10, r1
    2ec6:	b1 1c       	adc	r11, r1
/**************************************************************************/
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
    2ec8:	a2 e0       	ldi	r26, 0x02	; 2
    2eca:	8a 2e       	mov	r8, r26
    2ecc:	8a 0c       	add	r8, r10
    2ece:	f2 e0       	ldi	r31, 0x02	; 2
    2ed0:	2f 2e       	mov	r2, r31
    2ed2:	31 2c       	mov	r3, r1
    2ed4:	2c 0e       	add	r2, r28
    2ed6:	3d 1e       	adc	r3, r29
		// Send the OK that says we are ready to get data chunks
		printf_P (PSTR("OK\r\n"));
		
		while (msgCount)
		{
			currQuant = (iQuant>msgCount)?msgCount:iQuant;
    2ed8:	94 2c       	mov	r9, r4
    2eda:	25 96       	adiw	r28, 0x05	; 5
    2edc:	2c ad       	ldd	r18, Y+60	; 0x3c
    2ede:	3d ad       	ldd	r19, Y+61	; 0x3d
    2ee0:	4e ad       	ldd	r20, Y+62	; 0x3e
    2ee2:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ee4:	25 97       	sbiw	r28, 0x05	; 5
    2ee6:	24 15       	cp	r18, r4
    2ee8:	35 05       	cpc	r19, r5
    2eea:	46 05       	cpc	r20, r6
    2eec:	57 05       	cpc	r21, r7
    2eee:	08 f4       	brcc	.+2      	; 0x2ef2 <tm_cmd_write_block+0x132>
    2ef0:	92 2e       	mov	r9, r18
			count = currQuant + 2;		// added 2 bytes of crc16
			dataIt = rawData;
			
			while (count--) *dataIt++=getchar( );
    2ef2:	39 2d       	mov	r19, r9
    2ef4:	3e 3f       	cpi	r19, 0xFE	; 254
    2ef6:	71 f0       	breq	.+28     	; 0x2f14 <tm_cmd_write_block+0x154>
		
		while (msgCount)
		{
			currQuant = (iQuant>msgCount)?msgCount:iQuant;
			count = currQuant + 2;		// added 2 bytes of crc16
			dataIt = rawData;
    2ef8:	75 01       	movw	r14, r10
/**************************************************************************/
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
    2efa:	c9 2c       	mov	r12, r9
    2efc:	c8 0c       	add	r12, r8
		{
			currQuant = (iQuant>msgCount)?msgCount:iQuant;
			count = currQuant + 2;		// added 2 bytes of crc16
			dataIt = rawData;
			
			while (count--) *dataIt++=getchar( );
    2efe:	80 91 25 23 	lds	r24, 0x2325
    2f02:	90 91 26 23 	lds	r25, 0x2326
    2f06:	0e 94 4d 24 	call	0x489a	; 0x489a <fgetc>
    2f0a:	d7 01       	movw	r26, r14
    2f0c:	8d 93       	st	X+, r24
    2f0e:	7d 01       	movw	r14, r26
    2f10:	ca 16       	cp	r12, r26
    2f12:	a9 f7       	brne	.-22     	; 0x2efe <tm_cmd_write_block+0x13e>
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
    2f14:	99 20       	and	r9, r9
    2f16:	09 f4       	brne	.+2      	; 0x2f1a <tm_cmd_write_block+0x15a>
    2f18:	8e c0       	rjmp	.+284    	; 0x3036 <__stack+0x37>
    2f1a:	f5 01       	movw	r30, r10
/**************************************************************************/
/*!
	write a whole (or part) of a block in the flash   
*/
/**************************************************************************/
void tm_cmd_write_block		(U8 argc, char **argv)
    2f1c:	89 2d       	mov	r24, r9
    2f1e:	81 50       	subi	r24, 0x01	; 1
    2f20:	91 01       	movw	r18, r2
    2f22:	28 0f       	add	r18, r24
    2f24:	31 1d       	adc	r19, r1
    2f26:	8f ef       	ldi	r24, 0xFF	; 255
    2f28:	9f ef       	ldi	r25, 0xFF	; 255
			while (count--) *dataIt++=getchar( );
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
				crc16 = _crc16_update(crc16, rawData[i]);
    2f2a:	41 91       	ld	r20, Z+
_crc16_update(uint16_t __crc, uint8_t __data)
{
	uint8_t __tmp;
	uint16_t __ret;

	__asm__ __volatile__ (
    2f2c:	84 27       	eor	r24, r20
    2f2e:	48 2f       	mov	r20, r24
    2f30:	42 95       	swap	r20
    2f32:	48 27       	eor	r20, r24
    2f34:	04 2e       	mov	r0, r20
    2f36:	46 95       	lsr	r20
    2f38:	46 95       	lsr	r20
    2f3a:	40 25       	eor	r20, r0
    2f3c:	04 2e       	mov	r0, r20
    2f3e:	46 95       	lsr	r20
    2f40:	40 25       	eor	r20, r0
    2f42:	47 70       	andi	r20, 0x07	; 7
    2f44:	08 2e       	mov	r0, r24
    2f46:	89 2f       	mov	r24, r25
    2f48:	46 95       	lsr	r20
    2f4a:	07 94       	ror	r0
    2f4c:	47 95       	ror	r20
    2f4e:	90 2d       	mov	r25, r0
    2f50:	84 27       	eor	r24, r20
    2f52:	06 94       	lsr	r0
    2f54:	47 95       	ror	r20
    2f56:	90 25       	eor	r25, r0
    2f58:	84 27       	eor	r24, r20
			
			while (count--) *dataIt++=getchar( );
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
    2f5a:	e2 17       	cp	r30, r18
    2f5c:	f3 07       	cpc	r31, r19
    2f5e:	29 f7       	brne	.-54     	; 0x2f2a <tm_cmd_write_block+0x16a>
				crc16 = _crc16_update(crc16, rawData[i]);
			
			// check success	
			if ((crc16&0xff)==rawData[currQuant] && ((crc16>>8)&0xff)==rawData[currQuant+1])
    2f60:	29 2d       	mov	r18, r9
    2f62:	30 e0       	ldi	r19, 0x00	; 0
    2f64:	bc 01       	movw	r22, r24
    2f66:	70 70       	andi	r23, 0x00	; 0
    2f68:	f5 01       	movw	r30, r10
    2f6a:	e2 0f       	add	r30, r18
    2f6c:	f3 1f       	adc	r31, r19
    2f6e:	40 81       	ld	r20, Z
    2f70:	50 e0       	ldi	r21, 0x00	; 0
    2f72:	64 17       	cp	r22, r20
    2f74:	75 07       	cpc	r23, r21
    2f76:	51 f4       	brne	.+20     	; 0x2f8c <tm_cmd_write_block+0x1cc>
    2f78:	89 2f       	mov	r24, r25
    2f7a:	99 27       	eor	r25, r25
    2f7c:	22 0d       	add	r18, r2
    2f7e:	33 1d       	adc	r19, r3
    2f80:	f9 01       	movw	r30, r18
    2f82:	20 81       	ld	r18, Z
    2f84:	30 e0       	ldi	r19, 0x00	; 0
    2f86:	82 17       	cp	r24, r18
    2f88:	93 07       	cpc	r25, r19
    2f8a:	a1 f0       	breq	.+40     	; 0x2fb4 <tm_cmd_write_block+0x1f4>
				msgCount -= iQuant;
				printf_P (PSTR("okok\r\n"));
			}
			else
			{
				printf_P (PSTR("fail\r\n"));
    2f8c:	00 d0       	rcall	.+0      	; 0x2f8e <tm_cmd_write_block+0x1ce>
    2f8e:	ee e2       	ldi	r30, 0x2E	; 46
    2f90:	f7 e0       	ldi	r31, 0x07	; 7
    2f92:	ad b7       	in	r26, 0x3d	; 61
    2f94:	be b7       	in	r27, 0x3e	; 62
    2f96:	11 96       	adiw	r26, 0x01	; 1
    2f98:	ed 93       	st	X+, r30
    2f9a:	fc 93       	st	X, r31
    2f9c:	12 97       	sbiw	r26, 0x02	; 2
    2f9e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    2fa2:	0f 90       	pop	r0
    2fa4:	0f 90       	pop	r0
		msgCount = iLength;
		
		// Send the OK that says we are ready to get data chunks
		printf_P (PSTR("OK\r\n"));
		
		while (msgCount)
    2fa6:	41 14       	cp	r4, r1
    2fa8:	51 04       	cpc	r5, r1
    2faa:	61 04       	cpc	r6, r1
    2fac:	71 04       	cpc	r7, r1
    2fae:	09 f0       	breq	.+2      	; 0x2fb2 <tm_cmd_write_block+0x1f2>
    2fb0:	93 cf       	rjmp	.-218    	; 0x2ed8 <tm_cmd_write_block+0x118>
    2fb2:	2e cf       	rjmp	.-420    	; 0x2e10 <tm_cmd_write_block+0x50>
			
			// check success	
			if ((crc16&0xff)==rawData[currQuant] && ((crc16>>8)&0xff)==rawData[currQuant+1])
			{
				// write those stuff to the flash memory and post success message
				for (i=0; i<currQuant; i++)	dataflash_write	( iPlace+i, rawData[i] );
    2fb4:	99 20       	and	r9, r9
    2fb6:	b9 f0       	breq	.+46     	; 0x2fe6 <tm_cmd_write_block+0x226>
    2fb8:	29 96       	adiw	r28, 0x09	; 9
    2fba:	ec ac       	ldd	r14, Y+60	; 0x3c
    2fbc:	fd ac       	ldd	r15, Y+61	; 0x3d
    2fbe:	0e ad       	ldd	r16, Y+62	; 0x3e
    2fc0:	1f ad       	ldd	r17, Y+63	; 0x3f
    2fc2:	29 97       	sbiw	r28, 0x09	; 9
    2fc4:	65 01       	movw	r12, r10
    2fc6:	d6 01       	movw	r26, r12
    2fc8:	4d 91       	ld	r20, X+
    2fca:	6d 01       	movw	r12, r26
    2fcc:	c8 01       	movw	r24, r16
    2fce:	b7 01       	movw	r22, r14
    2fd0:	0e 94 fb 1b 	call	0x37f6	; 0x37f6 <dataflash_write>
    2fd4:	08 94       	sec
    2fd6:	e1 1c       	adc	r14, r1
    2fd8:	f1 1c       	adc	r15, r1
    2fda:	01 1d       	adc	r16, r1
    2fdc:	11 1d       	adc	r17, r1
    2fde:	8c 2d       	mov	r24, r12
    2fe0:	8a 19       	sub	r24, r10
    2fe2:	89 15       	cp	r24, r9
    2fe4:	80 f3       	brcs	.-32     	; 0x2fc6 <tm_cmd_write_block+0x206>
				iPlace += iQuant;
    2fe6:	29 96       	adiw	r28, 0x09	; 9
    2fe8:	2c ad       	ldd	r18, Y+60	; 0x3c
    2fea:	3d ad       	ldd	r19, Y+61	; 0x3d
    2fec:	4e ad       	ldd	r20, Y+62	; 0x3e
    2fee:	5f ad       	ldd	r21, Y+63	; 0x3f
    2ff0:	29 97       	sbiw	r28, 0x09	; 9
    2ff2:	25 96       	adiw	r28, 0x05	; 5
    2ff4:	8c ad       	ldd	r24, Y+60	; 0x3c
    2ff6:	9d ad       	ldd	r25, Y+61	; 0x3d
    2ff8:	ae ad       	ldd	r26, Y+62	; 0x3e
    2ffa:	bf ad       	ldd	r27, Y+63	; 0x3f
    2ffc:	25 97       	sbiw	r28, 0x05	; 5
    2ffe:	28 0f       	add	r18, r24
    3000:	39 1f       	adc	r19, r25
    3002:	4a 1f       	adc	r20, r26
    3004:	5b 1f       	adc	r21, r27
    3006:	29 96       	adiw	r28, 0x09	; 9
    3008:	2c af       	std	Y+60, r18	; 0x3c
    300a:	3d af       	std	Y+61, r19	; 0x3d
    300c:	4e af       	std	Y+62, r20	; 0x3e
    300e:	5f af       	std	Y+63, r21	; 0x3f
    3010:	29 97       	sbiw	r28, 0x09	; 9
				msgCount -= iQuant;
    3012:	48 1a       	sub	r4, r24
    3014:	59 0a       	sbc	r5, r25
    3016:	6a 0a       	sbc	r6, r26
    3018:	7b 0a       	sbc	r7, r27
				printf_P (PSTR("okok\r\n"));
    301a:	00 d0       	rcall	.+0      	; 0x301c <__stack+0x1d>
    301c:	e5 e3       	ldi	r30, 0x35	; 53
    301e:	f7 e0       	ldi	r31, 0x07	; 7
    3020:	ad b7       	in	r26, 0x3d	; 61
    3022:	be b7       	in	r27, 0x3e	; 62
    3024:	11 96       	adiw	r26, 0x01	; 1
    3026:	ed 93       	st	X+, r30
    3028:	fc 93       	st	X, r31
    302a:	12 97       	sbiw	r26, 0x02	; 2
    302c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    3030:	0f 90       	pop	r0
    3032:	0f 90       	pop	r0
    3034:	b8 cf       	rjmp	.-144    	; 0x2fa6 <tm_cmd_write_block+0x1e6>
			
			while (count--) *dataIt++=getchar( );
			
			// calculate the crc16 of the just received data
			crc16 = 0xffff;
			for (i=0; i<currQuant; i++)
    3036:	8f ef       	ldi	r24, 0xFF	; 255
    3038:	9f ef       	ldi	r25, 0xFF	; 255
    303a:	92 cf       	rjmp	.-220    	; 0x2f60 <tm_cmd_write_block+0x1a0>

0000303c <tm_cmd_idn>:
/*!
	Print out an identification information   
*/
/**************************************************************************/
void tm_cmd_idn				(U8 argc, char **argv)
{
    303c:	df 93       	push	r29
    303e:	cf 93       	push	r28
    3040:	00 d0       	rcall	.+0      	; 0x3042 <tm_cmd_idn+0x6>
    3042:	00 d0       	rcall	.+0      	; 0x3044 <tm_cmd_idn+0x8>
    3044:	cd b7       	in	r28, 0x3d	; 61
    3046:	de b7       	in	r29, 0x3e	; 62
	char ManID, DevID1, DevID2, ExData;

	printf_P ( PSTR("ANIBIKE VERSION:%03d.%d;"			// The project
    3048:	8d b7       	in	r24, 0x3d	; 61
    304a:	9e b7       	in	r25, 0x3e	; 62
    304c:	40 97       	sbiw	r24, 0x10	; 16
    304e:	8d bf       	out	0x3d, r24	; 61
    3050:	9e bf       	out	0x3e, r25	; 62
    3052:	ed b7       	in	r30, 0x3d	; 61
    3054:	fe b7       	in	r31, 0x3e	; 62
    3056:	31 96       	adiw	r30, 0x01	; 1
    3058:	8c e9       	ldi	r24, 0x9C	; 156
    305a:	98 e0       	ldi	r25, 0x08	; 8
    305c:	ad b7       	in	r26, 0x3d	; 61
    305e:	be b7       	in	r27, 0x3e	; 62
    3060:	11 96       	adiw	r26, 0x01	; 1
    3062:	8d 93       	st	X+, r24
    3064:	9c 93       	st	X, r25
    3066:	12 97       	sbiw	r26, 0x02	; 2
    3068:	82 e0       	ldi	r24, 0x02	; 2
    306a:	90 e0       	ldi	r25, 0x00	; 0
    306c:	82 83       	std	Z+2, r24	; 0x02
    306e:	93 83       	std	Z+3, r25	; 0x03
    3070:	87 e0       	ldi	r24, 0x07	; 7
    3072:	90 e0       	ldi	r25, 0x00	; 0
    3074:	84 83       	std	Z+4, r24	; 0x04
    3076:	95 83       	std	Z+5, r25	; 0x05
    3078:	80 e2       	ldi	r24, 0x20	; 32
    307a:	90 e0       	ldi	r25, 0x00	; 0
    307c:	86 83       	std	Z+6, r24	; 0x06
    307e:	97 83       	std	Z+7, r25	; 0x07
    3080:	80 87       	std	Z+8, r24	; 0x08
    3082:	91 87       	std	Z+9, r25	; 0x09
    3084:	82 87       	std	Z+10, r24	; 0x0a
    3086:	93 87       	std	Z+11, r25	; 0x0b
    3088:	81 e0       	ldi	r24, 0x01	; 1
    308a:	90 e0       	ldi	r25, 0x00	; 0
    308c:	84 87       	std	Z+12, r24	; 0x0c
    308e:	95 87       	std	Z+13, r25	; 0x0d
    3090:	80 e0       	ldi	r24, 0x00	; 0
    3092:	90 e1       	ldi	r25, 0x10	; 16
    3094:	86 87       	std	Z+14, r24	; 0x0e
    3096:	97 87       	std	Z+15, r25	; 0x0f
    3098:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
					ANIBIKE_CLOCK_SPEED,
					ANIBIKE_NUM_LEDS,
					ANIBIKE_IS_RGB,
					FLASH_BLOCK4_SIZE );

	printf_P ( PSTR("\r\nFlashInfo:\r\n") );
    309c:	ed b7       	in	r30, 0x3d	; 61
    309e:	fe b7       	in	r31, 0x3e	; 62
    30a0:	3e 96       	adiw	r30, 0x0e	; 14
    30a2:	ed bf       	out	0x3d, r30	; 61
    30a4:	fe bf       	out	0x3e, r31	; 62
    30a6:	8d e8       	ldi	r24, 0x8D	; 141
    30a8:	98 e0       	ldi	r25, 0x08	; 8
    30aa:	81 83       	std	Z+1, r24	; 0x01
    30ac:	92 83       	std	Z+2, r25	; 0x02
    30ae:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    30b2:	0f 90       	pop	r0
    30b4:	0f 90       	pop	r0
    30b6:	ce 01       	movw	r24, r28
    30b8:	01 96       	adiw	r24, 0x01	; 1
    30ba:	be 01       	movw	r22, r28
    30bc:	6e 5f       	subi	r22, 0xFE	; 254
    30be:	7f 4f       	sbci	r23, 0xFF	; 255
    30c0:	ae 01       	movw	r20, r28
    30c2:	4d 5f       	subi	r20, 0xFD	; 253
    30c4:	5f 4f       	sbci	r21, 0xFF	; 255
    30c6:	9e 01       	movw	r18, r28
    30c8:	2c 5f       	subi	r18, 0xFC	; 252
    30ca:	3f 4f       	sbci	r19, 0xFF	; 255
    30cc:	0e 94 b6 1b 	call	0x376c	; 0x376c <dataflash_spi_idn>

	printf_P ( PSTR("ManID = 0x%x; DevID1 = 0x%x; DevID2 = 0x%x; ExData = 0x%xeol\r\n"),
    30d0:	8d b7       	in	r24, 0x3d	; 61
    30d2:	9e b7       	in	r25, 0x3e	; 62
    30d4:	0a 97       	sbiw	r24, 0x0a	; 10
    30d6:	8d bf       	out	0x3d, r24	; 61
    30d8:	9e bf       	out	0x3e, r25	; 62
    30da:	ed b7       	in	r30, 0x3d	; 61
    30dc:	fe b7       	in	r31, 0x3e	; 62
    30de:	31 96       	adiw	r30, 0x01	; 1
    30e0:	8e e4       	ldi	r24, 0x4E	; 78
    30e2:	98 e0       	ldi	r25, 0x08	; 8
    30e4:	ad b7       	in	r26, 0x3d	; 61
    30e6:	be b7       	in	r27, 0x3e	; 62
    30e8:	11 96       	adiw	r26, 0x01	; 1
    30ea:	8d 93       	st	X+, r24
    30ec:	9c 93       	st	X, r25
    30ee:	12 97       	sbiw	r26, 0x02	; 2
    30f0:	89 81       	ldd	r24, Y+1	; 0x01
    30f2:	82 83       	std	Z+2, r24	; 0x02
    30f4:	13 82       	std	Z+3, r1	; 0x03
    30f6:	8a 81       	ldd	r24, Y+2	; 0x02
    30f8:	84 83       	std	Z+4, r24	; 0x04
    30fa:	15 82       	std	Z+5, r1	; 0x05
    30fc:	8b 81       	ldd	r24, Y+3	; 0x03
    30fe:	86 83       	std	Z+6, r24	; 0x06
    3100:	17 82       	std	Z+7, r1	; 0x07
    3102:	8c 81       	ldd	r24, Y+4	; 0x04
    3104:	80 87       	std	Z+8, r24	; 0x08
    3106:	11 86       	std	Z+9, r1	; 0x09
    3108:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    310c:	ed b7       	in	r30, 0x3d	; 61
    310e:	fe b7       	in	r31, 0x3e	; 62
    3110:	3a 96       	adiw	r30, 0x0a	; 10
    3112:	ed bf       	out	0x3d, r30	; 61
    3114:	fe bf       	out	0x3e, r31	; 62
					ManID, DevID1, DevID2, ExData );

}
    3116:	24 96       	adiw	r28, 0x04	; 4
    3118:	cd bf       	out	0x3d, r28	; 61
    311a:	de bf       	out	0x3e, r29	; 62
    311c:	cf 91       	pop	r28
    311e:	df 91       	pop	r29
    3120:	08 95       	ret

00003122 <rx_handler>:
	and echoing it back. As the cmd is finished transmitting, it sends it
	to the parser
*/
/**************************************************************************/
void rx_handler ( void )
{
    3122:	2f 92       	push	r2
    3124:	3f 92       	push	r3
    3126:	4f 92       	push	r4
    3128:	5f 92       	push	r5
    312a:	6f 92       	push	r6
    312c:	7f 92       	push	r7
    312e:	8f 92       	push	r8
    3130:	9f 92       	push	r9
    3132:	af 92       	push	r10
    3134:	bf 92       	push	r11
    3136:	cf 92       	push	r12
    3138:	df 92       	push	r13
    313a:	ef 92       	push	r14
    313c:	ff 92       	push	r15
    313e:	0f 93       	push	r16
    3140:	1f 93       	push	r17
    3142:	df 93       	push	r29
    3144:	cf 93       	push	r28
    3146:	cd b7       	in	r28, 0x3d	; 61
    3148:	de b7       	in	r29, 0x3e	; 62
    314a:	ec 97       	sbiw	r28, 0x3c	; 60
    314c:	cd bf       	out	0x3d, r28	; 61
    314e:	de bf       	out	0x3e, r29	; 62
	char c;
	bool bInLoop = true;
	
	printf_P( PSTR("ANIBIKE INC. VER. 2.7 BT.\r\n") );
    3150:	00 d0       	rcall	.+0      	; 0x3152 <rx_handler+0x30>
    3152:	81 e5       	ldi	r24, 0x51	; 81
    3154:	99 e0       	ldi	r25, 0x09	; 9
    3156:	ed b7       	in	r30, 0x3d	; 61
    3158:	fe b7       	in	r31, 0x3e	; 62
    315a:	81 83       	std	Z+1, r24	; 0x01
    315c:	92 83       	std	Z+2, r25	; 0x02
    315e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    3162:	80 91 26 22 	lds	r24, 0x2226
    3166:	0f 90       	pop	r0
    3168:	0f 90       	pop	r0
    316a:	88 23       	and	r24, r24
    316c:	29 f4       	brne	.+10     	; 0x3178 <rx_handler+0x56>
    316e:	80 91 30 20 	lds	r24, 0x2030
    3172:	81 30       	cpi	r24, 0x01	; 1
    3174:	09 f4       	brne	.+2      	; 0x3178 <rx_handler+0x56>
    3176:	38 c1       	rjmp	.+624    	; 0x33e8 <rx_handler+0x2c6>
    3178:	7e e2       	ldi	r23, 0x2E	; 46
    317a:	c7 2e       	mov	r12, r23
    317c:	72 e2       	ldi	r23, 0x22	; 34
    317e:	d7 2e       	mov	r13, r23
    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    do
    {
        argv[++i] = strtok(NULL, " ");
    3180:	65 e0       	ldi	r22, 0x05	; 5
    3182:	86 2e       	mov	r8, r22
    3184:	91 2c       	mov	r9, r1
    3186:	8c 0e       	add	r8, r28
    3188:	9d 1e       	adc	r9, r29
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
        {
            cmd_tbl[i].func(argc, argv);
    318a:	3e 01       	movw	r6, r28
    318c:	08 94       	sec
    318e:	61 1c       	adc	r6, r1
    3190:	71 1c       	adc	r7, r1

	        *msg_ptr = '\0';

			if (g_EchoOnOff)
			{
		        printf_P( PSTR("\r\n") );
    3192:	5e e4       	ldi	r21, 0x4E	; 78
    3194:	45 2e       	mov	r4, r21
    3196:	59 e0       	ldi	r21, 0x09	; 9
    3198:	55 2e       	mov	r5, r21
//	TIMSK1 = 0;	// Compare Interrupt
//	TIMSK2 = 0; // Compare interrupt

//	ROW_PORT = 0x00;

	CS_UP;
    319a:	40 e6       	ldi	r20, 0x60	; 96
    319c:	24 2e       	mov	r2, r20
    319e:	46 e0       	ldi	r20, 0x06	; 6
    31a0:	34 2e       	mov	r3, r20
	printf_P( PSTR("ANIBIKE INC. VER. 2.7 BT.\r\n") );
	cmd_menu ( );
	
	while (bInLoop)
	{
	    c = swUART_ReadChar( );
    31a2:	0e 94 e6 21 	call	0x43cc	; 0x43cc <swUART_ReadChar>
    31a6:	08 2f       	mov	r16, r24

	    switch (c)
    31a8:	8d 30       	cpi	r24, 0x0D	; 13
    31aa:	c1 f0       	breq	.+48     	; 0x31dc <rx_handler+0xba>
    31ac:	8a 33       	cpi	r24, 0x3A	; 58
    31ae:	b1 f0       	breq	.+44     	; 0x31dc <rx_handler+0xba>
    31b0:	88 30       	cpi	r24, 0x08	; 8
    31b2:	09 f4       	brne	.+2      	; 0x31b6 <rx_handler+0x94>
    31b4:	4b c0       	rjmp	.+150    	; 0x324c <rx_handler+0x12a>
			}
	        break;
			
           
	    default:
			if (g_EchoOnOff)
    31b6:	80 91 30 20 	lds	r24, 0x2030
    31ba:	88 23       	and	r24, r24
    31bc:	09 f0       	breq	.+2      	; 0x31c0 <rx_handler+0x9e>
    31be:	e4 c0       	rjmp	.+456    	; 0x3388 <rx_handler+0x266>
				swUART_PutChar ( c );

	        *msg_ptr++ = c;
    31c0:	e0 91 2c 22 	lds	r30, 0x222C
    31c4:	f0 91 2d 22 	lds	r31, 0x222D
    31c8:	01 93       	st	Z+, r16
    31ca:	e0 93 2c 22 	sts	0x222C, r30
    31ce:	f0 93 2d 22 	sts	0x222D, r31
	printf_P( PSTR("ANIBIKE INC. VER. 2.7 BT.\r\n") );
	cmd_menu ( );
	
	while (bInLoop)
	{
	    c = swUART_ReadChar( );
    31d2:	0e 94 e6 21 	call	0x43cc	; 0x43cc <swUART_ReadChar>
    31d6:	08 2f       	mov	r16, r24

	    switch (c)
    31d8:	8d 30       	cpi	r24, 0x0D	; 13
    31da:	41 f7       	brne	.-48     	; 0x31ac <rx_handler+0x8a>
	    {
		case ':':
	    case '\r':
	        // terminate the msg and reset the msg ptr. then send
	        // it to the handler for processing.
			if (g_isOperating != 0)
    31dc:	80 91 2b 22 	lds	r24, 0x222B
    31e0:	88 23       	and	r24, r24
    31e2:	09 f0       	breq	.+2      	; 0x31e6 <rx_handler+0xc4>
    31e4:	c0 c0       	rjmp	.+384    	; 0x3366 <rx_handler+0x244>
			{
				tm_cmd_stop_all(0, NULL);
			}

	        *msg_ptr = '\0';
    31e6:	e0 91 2c 22 	lds	r30, 0x222C
    31ea:	f0 91 2d 22 	lds	r31, 0x222D
    31ee:	10 82       	st	Z, r1

			if (g_EchoOnOff)
    31f0:	80 91 30 20 	lds	r24, 0x2030
    31f4:	88 23       	and	r24, r24
    31f6:	09 f0       	breq	.+2      	; 0x31fa <rx_handler+0xd8>
    31f8:	ac c0       	rjmp	.+344    	; 0x3352 <rx_handler+0x230>
			{
		        printf_P( PSTR("\r\n") );
			}				
	               
			if ( strcmp ((char*)msg, "exit") == 0 )
    31fa:	8e e2       	ldi	r24, 0x2E	; 46
    31fc:	92 e2       	ldi	r25, 0x22	; 34
    31fe:	69 e2       	ldi	r22, 0x29	; 41
    3200:	70 e2       	ldi	r23, 0x20	; 32
    3202:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    3206:	00 97       	sbiw	r24, 0x00	; 0
    3208:	d1 f5       	brne	.+116    	; 0x327e <rx_handler+0x15c>
			{
				bInLoop = false;
				printf_P( PSTR("Goodbye...\r\n"));
    320a:	00 d0       	rcall	.+0      	; 0x320c <rx_handler+0xea>
    320c:	81 e4       	ldi	r24, 0x41	; 65
    320e:	99 e0       	ldi	r25, 0x09	; 9
    3210:	ed b7       	in	r30, 0x3d	; 61
    3212:	fe b7       	in	r31, 0x3e	; 62
    3214:	81 83       	std	Z+1, r24	; 0x01
    3216:	92 83       	std	Z+2, r25	; 0x02
    3218:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>

	        *msg_ptr++ = c;
	        break;
	    }
	}		
}
    321c:	0f 90       	pop	r0
    321e:	0f 90       	pop	r0
    3220:	ec 96       	adiw	r28, 0x3c	; 60
    3222:	cd bf       	out	0x3d, r28	; 61
    3224:	de bf       	out	0x3e, r29	; 62
    3226:	cf 91       	pop	r28
    3228:	df 91       	pop	r29
    322a:	1f 91       	pop	r17
    322c:	0f 91       	pop	r16
    322e:	ff 90       	pop	r15
    3230:	ef 90       	pop	r14
    3232:	df 90       	pop	r13
    3234:	cf 90       	pop	r12
    3236:	bf 90       	pop	r11
    3238:	af 90       	pop	r10
    323a:	9f 90       	pop	r9
    323c:	8f 90       	pop	r8
    323e:	7f 90       	pop	r7
    3240:	6f 90       	pop	r6
    3242:	5f 90       	pop	r5
    3244:	4f 90       	pop	r4
    3246:	3f 90       	pop	r3
    3248:	2f 90       	pop	r2
    324a:	08 95       	ret
			cmd_parse((char *)msg);
	        msg_ptr = msg;
	        break;
            
	    case '\b':
	        if (msg_ptr > msg)
    324c:	80 91 2c 22 	lds	r24, 0x222C
    3250:	90 91 2d 22 	lds	r25, 0x222D
    3254:	e2 e2       	ldi	r30, 0x22	; 34
    3256:	8e 32       	cpi	r24, 0x2E	; 46
    3258:	9e 07       	cpc	r25, r30
    325a:	09 f0       	breq	.+2      	; 0x325e <rx_handler+0x13c>
    325c:	08 f4       	brcc	.+2      	; 0x3260 <rx_handler+0x13e>
    325e:	a1 cf       	rjmp	.-190    	; 0x31a2 <rx_handler+0x80>
	        {
	            msg_ptr--;
    3260:	01 97       	sbiw	r24, 0x01	; 1
    3262:	80 93 2c 22 	sts	0x222C, r24
    3266:	90 93 2d 22 	sts	0x222D, r25
				swUART_PutChar ( c );
    326a:	88 e0       	ldi	r24, 0x08	; 8
    326c:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <swUART_PutChar>
				swUART_PutChar ( ' ' );
    3270:	80 e2       	ldi	r24, 0x20	; 32
    3272:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <swUART_PutChar>
				swUART_PutChar ( c );
    3276:	88 e0       	ldi	r24, 0x08	; 8
    3278:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <swUART_PutChar>
    327c:	92 cf       	rjmp	.-220    	; 0x31a2 <rx_handler+0x80>
				bInLoop = false;
				printf_P( PSTR("Goodbye...\r\n"));
				break;
			}									   
			
			strcpy (last_msg, msg);	    
    327e:	80 e6       	ldi	r24, 0x60	; 96
    3280:	92 e2       	ldi	r25, 0x22	; 34
    3282:	6e e2       	ldi	r22, 0x2E	; 46
    3284:	72 e2       	ldi	r23, 0x22	; 34
    3286:	0e 94 e8 23 	call	0x47d0	; 0x47d0 <strcpy>
    U8 argc, i = 0;
    char *argv[30];

    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    328a:	8e e2       	ldi	r24, 0x2E	; 46
    328c:	92 e2       	ldi	r25, 0x22	; 34
    328e:	6e e2       	ldi	r22, 0x2E	; 46
    3290:	70 e2       	ldi	r23, 0x20	; 32
    3292:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    3296:	89 83       	std	Y+1, r24	; 0x01
    3298:	9a 83       	std	Y+2, r25	; 0x02
    do
    {
        argv[++i] = strtok(NULL, " ");
    329a:	80 e0       	ldi	r24, 0x00	; 0
    329c:	90 e0       	ldi	r25, 0x00	; 0
    329e:	6e e2       	ldi	r22, 0x2E	; 46
    32a0:	70 e2       	ldi	r23, 0x20	; 32
    32a2:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    32a6:	28 2f       	mov	r18, r24
    32a8:	39 2f       	mov	r19, r25
    32aa:	2b 83       	std	Y+3, r18	; 0x03
    32ac:	3c 83       	std	Y+4, r19	; 0x04
    32ae:	84 01       	movw	r16, r8
    32b0:	bb 24       	eor	r11, r11
    32b2:	b3 94       	inc	r11
    32b4:	10 c0       	rjmp	.+32     	; 0x32d6 <rx_handler+0x1b4>
    32b6:	b3 94       	inc	r11
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	6e e2       	ldi	r22, 0x2E	; 46
    32be:	70 e2       	ldi	r23, 0x20	; 32
    32c0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    32c4:	28 2f       	mov	r18, r24
    32c6:	39 2f       	mov	r19, r25
    32c8:	f8 01       	movw	r30, r16
    32ca:	21 93       	st	Z+, r18
    32cc:	31 93       	st	Z+, r19
    32ce:	8f 01       	movw	r16, r30
    } while ((i < 30) && (argv[i] != NULL));
    32d0:	fb 2d       	mov	r31, r11
    32d2:	fe 31       	cpi	r31, 0x1E	; 30
    32d4:	19 f0       	breq	.+6      	; 0x32dc <rx_handler+0x1ba>
    32d6:	21 15       	cp	r18, r1
    32d8:	31 05       	cpc	r19, r1
    32da:	69 f7       	brne	.-38     	; 0x32b6 <rx_handler+0x194>
    32dc:	e9 80       	ldd	r14, Y+1	; 0x01
    32de:	fa 80       	ldd	r15, Y+2	; 0x02
    
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    32e0:	62 e1       	ldi	r22, 0x12	; 18
    32e2:	70 e2       	ldi	r23, 0x20	; 32
    32e4:	00 e0       	ldi	r16, 0x00	; 0
    32e6:	10 e0       	ldi	r17, 0x00	; 0
    32e8:	aa 24       	eor	r10, r10
    32ea:	12 c0       	rjmp	.+36     	; 0x3310 <rx_handler+0x1ee>
    32ec:	a3 94       	inc	r10
    32ee:	0a 2d       	mov	r16, r10
    32f0:	10 e0       	ldi	r17, 0x00	; 0
    32f2:	f8 01       	movw	r30, r16
    32f4:	ee 0f       	add	r30, r30
    32f6:	ff 1f       	adc	r31, r31
    32f8:	e0 0f       	add	r30, r16
    32fa:	f1 1f       	adc	r31, r17
    32fc:	ee 0f       	add	r30, r30
    32fe:	ff 1f       	adc	r31, r31
    3300:	ec 59       	subi	r30, 0x9C	; 156
    3302:	fe 4d       	sbci	r31, 0xDE	; 222
    3304:	60 81       	ld	r22, Z
    3306:	71 81       	ldd	r23, Z+1	; 0x01
    3308:	61 15       	cp	r22, r1
    330a:	71 05       	cpc	r23, r1
    330c:	09 f4       	brne	.+2      	; 0x3310 <rx_handler+0x1ee>
    330e:	40 c0       	rjmp	.+128    	; 0x3390 <rx_handler+0x26e>
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
    3310:	c7 01       	movw	r24, r14
    3312:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    3316:	00 97       	sbiw	r24, 0x00	; 0
    3318:	49 f7       	brne	.-46     	; 0x32ec <rx_handler+0x1ca>
        {
            cmd_tbl[i].func(argc, argv);
    331a:	f8 01       	movw	r30, r16
    331c:	ee 0f       	add	r30, r30
    331e:	ff 1f       	adc	r31, r31
    3320:	e0 0f       	add	r30, r16
    3322:	f1 1f       	adc	r31, r17
    3324:	ee 0f       	add	r30, r30
    3326:	ff 1f       	adc	r31, r31
    3328:	ec 59       	subi	r30, 0x9C	; 156
    332a:	fe 4d       	sbci	r31, 0xDE	; 222
    332c:	02 80       	ldd	r0, Z+2	; 0x02
    332e:	f3 81       	ldd	r31, Z+3	; 0x03
    3330:	e0 2d       	mov	r30, r0
    3332:	8b 2d       	mov	r24, r11
    3334:	b3 01       	movw	r22, r6
    3336:	09 95       	icall
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    3338:	80 91 26 22 	lds	r24, 0x2226
    333c:	88 23       	and	r24, r24
    333e:	21 f4       	brne	.+8      	; 0x3348 <rx_handler+0x226>
    3340:	80 91 30 20 	lds	r24, 0x2030
    3344:	81 30       	cpi	r24, 0x01	; 1
    3346:	e1 f1       	breq	.+120    	; 0x33c0 <rx_handler+0x29e>
				break;
			}									   
			
			strcpy (last_msg, msg);	    
			cmd_parse((char *)msg);
	        msg_ptr = msg;
    3348:	c0 92 2c 22 	sts	0x222C, r12
    334c:	d0 92 2d 22 	sts	0x222D, r13
	        break;
    3350:	28 cf       	rjmp	.-432    	; 0x31a2 <rx_handler+0x80>

	        *msg_ptr = '\0';

			if (g_EchoOnOff)
			{
		        printf_P( PSTR("\r\n") );
    3352:	00 d0       	rcall	.+0      	; 0x3354 <rx_handler+0x232>
    3354:	ed b7       	in	r30, 0x3d	; 61
    3356:	fe b7       	in	r31, 0x3e	; 62
    3358:	41 82       	std	Z+1, r4	; 0x01
    335a:	52 82       	std	Z+2, r5	; 0x02
    335c:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    3360:	0f 90       	pop	r0
    3362:	0f 90       	pop	r0
    3364:	4a cf       	rjmp	.-364    	; 0x31fa <rx_handler+0xd8>
	Entered the transfer mode so stop all the other stuff
*/
/**************************************************************************/
void tm_cmd_stop_all(U8 argc, char **argv)
{
	g_isOperating = 0;
    3366:	10 92 2b 22 	sts	0x222B, r1
//	TIMSK1 = 0;	// Compare Interrupt
//	TIMSK2 = 0; // Compare interrupt

//	ROW_PORT = 0x00;

	CS_UP;
    336a:	20 e1       	ldi	r18, 0x10	; 16
    336c:	f1 01       	movw	r30, r2
    336e:	25 83       	std	Z+5, r18	; 0x05

	printf_P (PSTR("OK\r\n"));
    3370:	00 d0       	rcall	.+0      	; 0x3372 <rx_handler+0x250>
    3372:	82 e2       	ldi	r24, 0x22	; 34
    3374:	99 e0       	ldi	r25, 0x09	; 9
    3376:	ed b7       	in	r30, 0x3d	; 61
    3378:	fe b7       	in	r31, 0x3e	; 62
    337a:	81 83       	std	Z+1, r24	; 0x01
    337c:	92 83       	std	Z+2, r25	; 0x02
    337e:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    3382:	0f 90       	pop	r0
    3384:	0f 90       	pop	r0
    3386:	2f cf       	rjmp	.-418    	; 0x31e6 <rx_handler+0xc4>
	        break;
			
           
	    default:
			if (g_EchoOnOff)
				swUART_PutChar ( c );
    3388:	80 2f       	mov	r24, r16
    338a:	0e 94 d0 21 	call	0x43a0	; 0x43a0 <swUART_PutChar>
    338e:	18 cf       	rjmp	.-464    	; 0x31c0 <rx_handler+0x9e>
            cmd_tbl[i].func(argc, argv);
            cmd_menu();
            return;
        }
    }
    printf_P( PSTR("%s: Command not recognized.\r\n"), cmd);
    3390:	00 d0       	rcall	.+0      	; 0x3392 <rx_handler+0x270>
    3392:	00 d0       	rcall	.+0      	; 0x3394 <rx_handler+0x272>
    3394:	8a ef       	ldi	r24, 0xFA	; 250
    3396:	98 e0       	ldi	r25, 0x08	; 8
    3398:	ed b7       	in	r30, 0x3d	; 61
    339a:	fe b7       	in	r31, 0x3e	; 62
    339c:	81 83       	std	Z+1, r24	; 0x01
    339e:	92 83       	std	Z+2, r25	; 0x02
    33a0:	c3 82       	std	Z+3, r12	; 0x03
    33a2:	d4 82       	std	Z+4, r13	; 0x04
    33a4:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    33a8:	80 91 26 22 	lds	r24, 0x2226
    33ac:	0f 90       	pop	r0
    33ae:	0f 90       	pop	r0
    33b0:	0f 90       	pop	r0
    33b2:	0f 90       	pop	r0
    33b4:	88 23       	and	r24, r24
    33b6:	41 f6       	brne	.-112    	; 0x3348 <rx_handler+0x226>
    33b8:	80 91 30 20 	lds	r24, 0x2030
    33bc:	81 30       	cpi	r24, 0x01	; 1
    33be:	21 f6       	brne	.-120    	; 0x3348 <rx_handler+0x226>
	{
    	printf_P( PSTR("\r\n"));
    33c0:	00 d0       	rcall	.+0      	; 0x33c2 <rx_handler+0x2a0>
    33c2:	8e e3       	ldi	r24, 0x3E	; 62
    33c4:	99 e0       	ldi	r25, 0x09	; 9
    33c6:	ed b7       	in	r30, 0x3d	; 61
    33c8:	fe b7       	in	r31, 0x3e	; 62
    33ca:	81 83       	std	Z+1, r24	; 0x01
    33cc:	92 83       	std	Z+2, r25	; 0x02
    33ce:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    33d2:	8c e2       	ldi	r24, 0x2C	; 44
    33d4:	99 e0       	ldi	r25, 0x09	; 9
    33d6:	ed b7       	in	r30, 0x3d	; 61
    33d8:	fe b7       	in	r31, 0x3e	; 62
    33da:	81 83       	std	Z+1, r24	; 0x01
    33dc:	92 83       	std	Z+2, r25	; 0x02
    33de:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    33e2:	0f 90       	pop	r0
    33e4:	0f 90       	pop	r0
    33e6:	b0 cf       	rjmp	.-160    	; 0x3348 <rx_handler+0x226>
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
	{
    	printf_P( PSTR("\r\n"));
    33e8:	00 d0       	rcall	.+0      	; 0x33ea <rx_handler+0x2c8>
    33ea:	8e e3       	ldi	r24, 0x3E	; 62
    33ec:	99 e0       	ldi	r25, 0x09	; 9
    33ee:	ed b7       	in	r30, 0x3d	; 61
    33f0:	fe b7       	in	r31, 0x3e	; 62
    33f2:	81 83       	std	Z+1, r24	; 0x01
    33f4:	92 83       	std	Z+2, r25	; 0x02
    33f6:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    33fa:	8c e2       	ldi	r24, 0x2C	; 44
    33fc:	99 e0       	ldi	r25, 0x09	; 9
    33fe:	ed b7       	in	r30, 0x3d	; 61
    3400:	fe b7       	in	r31, 0x3e	; 62
    3402:	81 83       	std	Z+1, r24	; 0x01
    3404:	92 83       	std	Z+2, r25	; 0x02
    3406:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    340a:	0f 90       	pop	r0
    340c:	0f 90       	pop	r0
    340e:	b4 ce       	rjmp	.-664    	; 0x3178 <rx_handler+0x56>

00003410 <cmd_menu>:
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    3410:	80 91 26 22 	lds	r24, 0x2226
    3414:	88 23       	and	r24, r24
    3416:	21 f4       	brne	.+8      	; 0x3420 <cmd_menu+0x10>
    3418:	80 91 30 20 	lds	r24, 0x2030
    341c:	81 30       	cpi	r24, 0x01	; 1
    341e:	09 f0       	breq	.+2      	; 0x3422 <cmd_menu+0x12>
    3420:	08 95       	ret
	{
    	printf_P( PSTR("\r\n"));
    3422:	00 d0       	rcall	.+0      	; 0x3424 <cmd_menu+0x14>
    3424:	8e e3       	ldi	r24, 0x3E	; 62
    3426:	99 e0       	ldi	r25, 0x09	; 9
    3428:	ed b7       	in	r30, 0x3d	; 61
    342a:	fe b7       	in	r31, 0x3e	; 62
    342c:	81 83       	std	Z+1, r24	; 0x01
    342e:	92 83       	std	Z+2, r25	; 0x02
    3430:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    3434:	8c e2       	ldi	r24, 0x2C	; 44
    3436:	99 e0       	ldi	r25, 0x09	; 9
    3438:	ed b7       	in	r30, 0x3d	; 61
    343a:	fe b7       	in	r31, 0x3e	; 62
    343c:	81 83       	std	Z+1, r24	; 0x01
    343e:	92 83       	std	Z+2, r25	; 0x02
    3440:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    3444:	0f 90       	pop	r0
    3446:	0f 90       	pop	r0
    3448:	08 95       	ret

0000344a <cmd_parse>:
	to find a suitable command line in the cmd_table. Then invokes the
	appropriate function given in the cmd_table.    
*/
/**************************************************************************/
void cmd_parse(char *cmd)
{
    344a:	af 92       	push	r10
    344c:	bf 92       	push	r11
    344e:	cf 92       	push	r12
    3450:	df 92       	push	r13
    3452:	ef 92       	push	r14
    3454:	ff 92       	push	r15
    3456:	0f 93       	push	r16
    3458:	1f 93       	push	r17
    345a:	df 93       	push	r29
    345c:	cf 93       	push	r28
    345e:	cd b7       	in	r28, 0x3d	; 61
    3460:	de b7       	in	r29, 0x3e	; 62
    3462:	ec 97       	sbiw	r28, 0x3c	; 60
    3464:	cd bf       	out	0x3d, r28	; 61
    3466:	de bf       	out	0x3e, r29	; 62
    3468:	6c 01       	movw	r12, r24
    U8 argc, i = 0;
    char *argv[30];

    fflush(stdout);

    argv[i] = strtok(cmd, " ");
    346a:	6e e2       	ldi	r22, 0x2E	; 46
    346c:	70 e2       	ldi	r23, 0x20	; 32
    346e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    3472:	89 83       	std	Y+1, r24	; 0x01
    3474:	9a 83       	std	Y+2, r25	; 0x02
    do
    {
        argv[++i] = strtok(NULL, " ");
    3476:	80 e0       	ldi	r24, 0x00	; 0
    3478:	90 e0       	ldi	r25, 0x00	; 0
    347a:	6e e2       	ldi	r22, 0x2E	; 46
    347c:	70 e2       	ldi	r23, 0x20	; 32
    347e:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    3482:	28 2f       	mov	r18, r24
    3484:	39 2f       	mov	r19, r25
    3486:	2b 83       	std	Y+3, r18	; 0x03
    3488:	3c 83       	std	Y+4, r19	; 0x04
    348a:	8e 01       	movw	r16, r28
    348c:	0b 5f       	subi	r16, 0xFB	; 251
    348e:	1f 4f       	sbci	r17, 0xFF	; 255
    3490:	bb 24       	eor	r11, r11
    3492:	b3 94       	inc	r11
    3494:	10 c0       	rjmp	.+32     	; 0x34b6 <cmd_parse+0x6c>
    3496:	b3 94       	inc	r11
    3498:	80 e0       	ldi	r24, 0x00	; 0
    349a:	90 e0       	ldi	r25, 0x00	; 0
    349c:	6e e2       	ldi	r22, 0x2E	; 46
    349e:	70 e2       	ldi	r23, 0x20	; 32
    34a0:	0e 94 da 23 	call	0x47b4	; 0x47b4 <strtok>
    34a4:	28 2f       	mov	r18, r24
    34a6:	39 2f       	mov	r19, r25
    34a8:	f8 01       	movw	r30, r16
    34aa:	21 93       	st	Z+, r18
    34ac:	31 93       	st	Z+, r19
    34ae:	8f 01       	movw	r16, r30
    } while ((i < 30) && (argv[i] != NULL));
    34b0:	fb 2d       	mov	r31, r11
    34b2:	fe 31       	cpi	r31, 0x1E	; 30
    34b4:	19 f0       	breq	.+6      	; 0x34bc <cmd_parse+0x72>
    34b6:	21 15       	cp	r18, r1
    34b8:	31 05       	cpc	r19, r1
    34ba:	69 f7       	brne	.-38     	; 0x3496 <cmd_parse+0x4c>
    34bc:	e9 80       	ldd	r14, Y+1	; 0x01
    34be:	fa 80       	ldd	r15, Y+2	; 0x02
    
    argc = i;
    for (i=0; cmd_tbl[i].cmd != NULL; i++)
    34c0:	62 e1       	ldi	r22, 0x12	; 18
    34c2:	70 e2       	ldi	r23, 0x20	; 32
    34c4:	00 e0       	ldi	r16, 0x00	; 0
    34c6:	10 e0       	ldi	r17, 0x00	; 0
    34c8:	aa 24       	eor	r10, r10
    34ca:	11 c0       	rjmp	.+34     	; 0x34ee <cmd_parse+0xa4>
    34cc:	a3 94       	inc	r10
    34ce:	0a 2d       	mov	r16, r10
    34d0:	10 e0       	ldi	r17, 0x00	; 0
    34d2:	f8 01       	movw	r30, r16
    34d4:	ee 0f       	add	r30, r30
    34d6:	ff 1f       	adc	r31, r31
    34d8:	e0 0f       	add	r30, r16
    34da:	f1 1f       	adc	r31, r17
    34dc:	ee 0f       	add	r30, r30
    34de:	ff 1f       	adc	r31, r31
    34e0:	ec 59       	subi	r30, 0x9C	; 156
    34e2:	fe 4d       	sbci	r31, 0xDE	; 222
    34e4:	60 81       	ld	r22, Z
    34e6:	71 81       	ldd	r23, Z+1	; 0x01
    34e8:	61 15       	cp	r22, r1
    34ea:	71 05       	cpc	r23, r1
    34ec:	61 f1       	breq	.+88     	; 0x3546 <cmd_parse+0xfc>
    {
        if (!strcmp(argv[0], cmd_tbl[i].cmd))
    34ee:	c7 01       	movw	r24, r14
    34f0:	0e 94 df 23 	call	0x47be	; 0x47be <strcmp>
    34f4:	00 97       	sbiw	r24, 0x00	; 0
    34f6:	51 f7       	brne	.-44     	; 0x34cc <cmd_parse+0x82>
        {
            cmd_tbl[i].func(argc, argv);
    34f8:	f8 01       	movw	r30, r16
    34fa:	ee 0f       	add	r30, r30
    34fc:	ff 1f       	adc	r31, r31
    34fe:	e0 0f       	add	r30, r16
    3500:	f1 1f       	adc	r31, r17
    3502:	ee 0f       	add	r30, r30
    3504:	ff 1f       	adc	r31, r31
    3506:	ec 59       	subi	r30, 0x9C	; 156
    3508:	fe 4d       	sbci	r31, 0xDE	; 222
    350a:	02 80       	ldd	r0, Z+2	; 0x02
    350c:	f3 81       	ldd	r31, Z+3	; 0x03
    350e:	e0 2d       	mov	r30, r0
    3510:	8b 2d       	mov	r24, r11
    3512:	be 01       	movw	r22, r28
    3514:	6f 5f       	subi	r22, 0xFF	; 255
    3516:	7f 4f       	sbci	r23, 0xFF	; 255
    3518:	09 95       	icall
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    351a:	80 91 26 22 	lds	r24, 0x2226
    351e:	88 23       	and	r24, r24
    3520:	21 f4       	brne	.+8      	; 0x352a <cmd_parse+0xe0>
    3522:	80 91 30 20 	lds	r24, 0x2030
    3526:	81 30       	cpi	r24, 0x01	; 1
    3528:	31 f1       	breq	.+76     	; 0x3576 <cmd_parse+0x12c>
        }
    }
    printf_P( PSTR("%s: Command not recognized.\r\n"), cmd);

    cmd_menu();
}
    352a:	ec 96       	adiw	r28, 0x3c	; 60
    352c:	cd bf       	out	0x3d, r28	; 61
    352e:	de bf       	out	0x3e, r29	; 62
    3530:	cf 91       	pop	r28
    3532:	df 91       	pop	r29
    3534:	1f 91       	pop	r17
    3536:	0f 91       	pop	r16
    3538:	ff 90       	pop	r15
    353a:	ef 90       	pop	r14
    353c:	df 90       	pop	r13
    353e:	cf 90       	pop	r12
    3540:	bf 90       	pop	r11
    3542:	af 90       	pop	r10
    3544:	08 95       	ret
            cmd_tbl[i].func(argc, argv);
            cmd_menu();
            return;
        }
    }
    printf_P( PSTR("%s: Command not recognized.\r\n"), cmd);
    3546:	00 d0       	rcall	.+0      	; 0x3548 <cmd_parse+0xfe>
    3548:	00 d0       	rcall	.+0      	; 0x354a <cmd_parse+0x100>
    354a:	8a ef       	ldi	r24, 0xFA	; 250
    354c:	98 e0       	ldi	r25, 0x08	; 8
    354e:	ed b7       	in	r30, 0x3d	; 61
    3550:	fe b7       	in	r31, 0x3e	; 62
    3552:	81 83       	std	Z+1, r24	; 0x01
    3554:	92 83       	std	Z+2, r25	; 0x02
    3556:	c3 82       	std	Z+3, r12	; 0x03
    3558:	d4 82       	std	Z+4, r13	; 0x04
    355a:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
	This is the command prompt shell line printer command    
*/
/**************************************************************************/
void cmd_menu( void )
{
	if ( !g_leftDataToGet && g_EchoOnOff==1)
    355e:	80 91 26 22 	lds	r24, 0x2226
    3562:	0f 90       	pop	r0
    3564:	0f 90       	pop	r0
    3566:	0f 90       	pop	r0
    3568:	0f 90       	pop	r0
    356a:	88 23       	and	r24, r24
    356c:	f1 f6       	brne	.-68     	; 0x352a <cmd_parse+0xe0>
    356e:	80 91 30 20 	lds	r24, 0x2030
    3572:	81 30       	cpi	r24, 0x01	; 1
    3574:	d1 f6       	brne	.-76     	; 0x352a <cmd_parse+0xe0>
	{
    	printf_P( PSTR("\r\n"));
    3576:	00 d0       	rcall	.+0      	; 0x3578 <cmd_parse+0x12e>
    3578:	8e e3       	ldi	r24, 0x3E	; 62
    357a:	99 e0       	ldi	r25, 0x09	; 9
    357c:	ed b7       	in	r30, 0x3d	; 61
    357e:	fe b7       	in	r31, 0x3e	; 62
    3580:	81 83       	std	Z+1, r24	; 0x01
    3582:	92 83       	std	Z+2, r25	; 0x02
    3584:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    	printf_P( PSTR(COMMAND_PROMPT));
    3588:	8c e2       	ldi	r24, 0x2C	; 44
    358a:	99 e0       	ldi	r25, 0x09	; 9
    358c:	ed b7       	in	r30, 0x3d	; 61
    358e:	fe b7       	in	r31, 0x3e	; 62
    3590:	81 83       	std	Z+1, r24	; 0x01
    3592:	92 83       	std	Z+2, r25	; 0x02
    3594:	0e 94 e7 24 	call	0x49ce	; 0x49ce <printf_P>
    3598:	0f 90       	pop	r0
    359a:	0f 90       	pop	r0
    359c:	c6 cf       	rjmp	.-116    	; 0x352a <cmd_parse+0xe0>

0000359e <CCPWrite>:
 *
 *  \param address A pointer to the address to write to.
 *  \param value   The value to put in to the register.
 */
void CCPWrite( volatile uint8_t * address, uint8_t value )
{
    359e:	0f 93       	push	r16
    35a0:	df 93       	push	r29
    35a2:	cf 93       	push	r28
    35a4:	0f 92       	push	r0
    35a6:	cd b7       	in	r28, 0x3d	; 61
    35a8:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    35aa:	2f b7       	in	r18, 0x3f	; 63
    35ac:	29 83       	std	Y+1, r18	; 0x01
    35ae:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    35b0:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    35b2:	fc 01       	movw	r30, r24
    35b4:	08 ed       	ldi	r16, 0xD8	; 216
    35b6:	04 bf       	out	0x34, r16	; 52
    35b8:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    35ba:	89 81       	ldd	r24, Y+1	; 0x01
    35bc:	8f bf       	out	0x3f, r24	; 63
#endif
}
    35be:	0f 90       	pop	r0
    35c0:	cf 91       	pop	r28
    35c2:	df 91       	pop	r29
    35c4:	0f 91       	pop	r16
    35c6:	08 95       	ret

000035c8 <CLKSYS_XOSC_Config>:
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    35c8:	66 23       	and	r22, r22
    35ca:	39 f4       	brne	.+14     	; 0x35da <CLKSYS_XOSC_Config+0x12>
    35cc:	90 e0       	ldi	r25, 0x00	; 0
    35ce:	84 2b       	or	r24, r20
    35d0:	89 2b       	or	r24, r25
    35d2:	e0 e5       	ldi	r30, 0x50	; 80
    35d4:	f0 e0       	ldi	r31, 0x00	; 0
    35d6:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    35d8:	08 95       	ret
 */
void CLKSYS_XOSC_Config( OSC_FRQRANGE_t freqRange,
                         bool lowPower32kHz,
                         OSC_XOSCSEL_t xoscModeSelection )
{
	OSC.XOSCCTRL = (uint8_t) freqRange |
    35da:	90 e2       	ldi	r25, 0x20	; 32
    35dc:	84 2b       	or	r24, r20
    35de:	89 2b       	or	r24, r25
    35e0:	e0 e5       	ldi	r30, 0x50	; 80
    35e2:	f0 e0       	ldi	r31, 0x00	; 0
    35e4:	82 83       	std	Z+2, r24	; 0x02
	               ( lowPower32kHz ? OSC_X32KLPM_bm : 0 ) |
	               xoscModeSelection;
}
    35e6:	08 95       	ret

000035e8 <CLKSYS_PLL_Config>:
 *  \param  factor      PLL multiplication factor, must be
 *                      from 1 to 31, inclusive.
 */
void CLKSYS_PLL_Config( OSC_PLLSRC_t clockSource, uint8_t factor )
{
	factor &= OSC_PLLFAC_gm;
    35e8:	6f 71       	andi	r22, 0x1F	; 31
	OSC.PLLCTRL = (uint8_t) clockSource | ( factor << OSC_PLLFAC_gp );
    35ea:	68 2b       	or	r22, r24
    35ec:	e0 e5       	ldi	r30, 0x50	; 80
    35ee:	f0 e0       	ldi	r31, 0x00	; 0
    35f0:	65 83       	std	Z+5, r22	; 0x05
}
    35f2:	08 95       	ret

000035f4 <CLKSYS_Disable>:
 *
 *  \return  Non-zero if oscillator was disabled successfully.
 */
uint8_t CLKSYS_Disable( uint8_t oscSel )
{
	OSC.CTRL &= ~oscSel;
    35f4:	e0 e5       	ldi	r30, 0x50	; 80
    35f6:	f0 e0       	ldi	r31, 0x00	; 0
    35f8:	20 81       	ld	r18, Z
    35fa:	98 2f       	mov	r25, r24
    35fc:	90 95       	com	r25
    35fe:	92 23       	and	r25, r18
    3600:	90 83       	st	Z, r25
	uint8_t clkEnabled = OSC.CTRL & oscSel;
    3602:	90 81       	ld	r25, Z
	return clkEnabled;
}
    3604:	89 23       	and	r24, r25
    3606:	08 95       	ret

00003608 <CLKSYS_Prescalers_Config>:
 *  \param  PSBCfactor  Prescaler B and C division factor, in the combination
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
    3608:	0f 93       	push	r16
    360a:	df 93       	push	r29
    360c:	cf 93       	push	r28
    360e:	0f 92       	push	r0
    3610:	cd b7       	in	r28, 0x3d	; 61
    3612:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    3614:	9f b7       	in	r25, 0x3f	; 63
    3616:	99 83       	std	Y+1, r25	; 0x01
    3618:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    361a:	1b be       	out	0x3b, r1	; 59
 *                      of (1,1), (1,2), (4,1) or (2,2).
 */
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
    361c:	68 2b       	or	r22, r24
	AVR_ENTER_CRITICAL_REGION( );
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
#endif
	asm volatile(
    361e:	81 e4       	ldi	r24, 0x41	; 65
    3620:	90 e0       	ldi	r25, 0x00	; 0
    3622:	fc 01       	movw	r30, r24
    3624:	08 ed       	ldi	r16, 0xD8	; 216
    3626:	04 bf       	out	0x34, r16	; 52
    3628:	60 83       	st	Z, r22
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    362a:	89 81       	ldd	r24, Y+1	; 0x01
    362c:	8f bf       	out	0x3f, r24	; 63
void CLKSYS_Prescalers_Config( CLK_PSADIV_t PSAfactor,
                               CLK_PSBCDIV_t PSBCfactor )
{
	uint8_t PSconfig = (uint8_t) PSAfactor | PSBCfactor;
	CCPWrite( &CLK.PSCTRL, PSconfig );
}
    362e:	0f 90       	pop	r0
    3630:	cf 91       	pop	r28
    3632:	df 91       	pop	r29
    3634:	0f 91       	pop	r16
    3636:	08 95       	ret

00003638 <CLKSYS_Main_ClockSource_Select>:
 *                       prescaler block.
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
    3638:	0f 93       	push	r16
    363a:	df 93       	push	r29
    363c:	cf 93       	push	r28
    363e:	0f 92       	push	r0
    3640:	cd b7       	in	r28, 0x3d	; 61
    3642:	de b7       	in	r29, 0x3e	; 62
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3644:	a0 e4       	ldi	r26, 0x40	; 64
    3646:	b0 e0       	ldi	r27, 0x00	; 0
    3648:	9c 91       	ld	r25, X

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    364a:	2f b7       	in	r18, 0x3f	; 63
    364c:	29 83       	std	Y+1, r18	; 0x01
    364e:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3650:	1b be       	out	0x3b, r1	; 59
 *
 *  \return  Non-zero if change was successful.
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
    3652:	98 7f       	andi	r25, 0xF8	; 248
    3654:	98 2b       	or	r25, r24
	AVR_ENTER_CRITICAL_REGION( );
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
#endif
	asm volatile(
    3656:	20 e4       	ldi	r18, 0x40	; 64
    3658:	30 e0       	ldi	r19, 0x00	; 0
    365a:	f9 01       	movw	r30, r18
    365c:	08 ed       	ldi	r16, 0xD8	; 216
    365e:	04 bf       	out	0x34, r16	; 52
    3660:	90 83       	st	Z, r25
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    3662:	99 81       	ldd	r25, Y+1	; 0x01
    3664:	9f bf       	out	0x3f, r25	; 63
 */
uint8_t CLKSYS_Main_ClockSource_Select( CLK_SCLKSEL_t clockSource )
{
	uint8_t clkCtrl = ( CLK.CTRL & ~CLK_SCLKSEL_gm ) | clockSource;
	CCPWrite( &CLK.CTRL, clkCtrl );
	clkCtrl = ( CLK.CTRL & clockSource );
    3666:	9c 91       	ld	r25, X
	return clkCtrl;
}
    3668:	89 23       	and	r24, r25
    366a:	0f 90       	pop	r0
    366c:	cf 91       	pop	r28
    366e:	df 91       	pop	r29
    3670:	0f 91       	pop	r16
    3672:	08 95       	ret

00003674 <CLKSYS_RTC_ClockSource_Enable>:
 *
 *  \param  clockSource  Clock source to use for the RTC.
 */
void CLKSYS_RTC_ClockSource_Enable( CLK_RTCSRC_t clockSource )
{
	CLK.RTCCTRL = ( CLK.RTCCTRL & ~CLK_RTCSRC_gm ) |
    3674:	e0 e4       	ldi	r30, 0x40	; 64
    3676:	f0 e0       	ldi	r31, 0x00	; 0
    3678:	93 81       	ldd	r25, Z+3	; 0x03
    367a:	91 7f       	andi	r25, 0xF1	; 241
    367c:	91 60       	ori	r25, 0x01	; 1
    367e:	98 2b       	or	r25, r24
    3680:	93 83       	std	Z+3, r25	; 0x03
	              clockSource |
	              CLK_RTCEN_bm;
}
    3682:	08 95       	ret

00003684 <CLKSYS_AutoCalibration_Enable>:
 *                       OSC_RC32MCREF_bm.
 *  \param  extReference True if external crystal should be used as reference.
 */
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
    3684:	30 91 56 00 	lds	r19, 0x0056
    3688:	28 2f       	mov	r18, r24
    368a:	98 2f       	mov	r25, r24
    368c:	90 95       	com	r25
    368e:	93 23       	and	r25, r19
    3690:	66 23       	and	r22, r22
    3692:	09 f4       	brne	.+2      	; 0x3696 <CLKSYS_AutoCalibration_Enable+0x12>
    3694:	20 e0       	ldi	r18, 0x00	; 0
    3696:	92 2b       	or	r25, r18
    3698:	e0 e5       	ldi	r30, 0x50	; 80
    369a:	f0 e0       	ldi	r31, 0x00	; 0
    369c:	96 83       	std	Z+6, r25	; 0x06
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
    369e:	81 30       	cpi	r24, 0x01	; 1
    36a0:	49 f0       	breq	.+18     	; 0x36b4 <CLKSYS_AutoCalibration_Enable+0x30>
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
	} else if (clkSource == OSC_RC32MCREF_bm) {
    36a2:	82 30       	cpi	r24, 0x02	; 2
    36a4:	09 f0       	breq	.+2      	; 0x36a8 <CLKSYS_AutoCalibration_Enable+0x24>
    36a6:	08 95       	ret
		DFLLRC32M.CTRL |= DFLL_ENABLE_bm;
    36a8:	80 91 60 00 	lds	r24, 0x0060
    36ac:	81 60       	ori	r24, 0x01	; 1
    36ae:	80 93 60 00 	sts	0x0060, r24
    36b2:	08 95       	ret
void CLKSYS_AutoCalibration_Enable( uint8_t clkSource, bool extReference )
{
	OSC.DFLLCTRL = ( OSC.DFLLCTRL & ~clkSource ) |
	               ( extReference ? clkSource : 0 );
	if (clkSource == OSC_RC2MCREF_bm) {
		DFLLRC2M.CTRL |= DFLL_ENABLE_bm;
    36b4:	80 91 68 00 	lds	r24, 0x0068
    36b8:	81 60       	ori	r24, 0x01	; 1
    36ba:	80 93 68 00 	sts	0x0068, r24
    36be:	08 95       	ret

000036c0 <CLKSYS_XOSC_FailureDetection_Enable>:
 *  XOSCFD _will_ issue the XOSCF Non-maskable Interrupt (NMI) regardless of
 *  any interrupt priorities and settings. Therefore, make sure that a handler
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
    36c0:	0f 93       	push	r16
    36c2:	df 93       	push	r29
    36c4:	cf 93       	push	r28
    36c6:	0f 92       	push	r0
    36c8:	cd b7       	in	r28, 0x3d	; 61
    36ca:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    36cc:	8f b7       	in	r24, 0x3f	; 63
    36ce:	89 83       	std	Y+1, r24	; 0x01
    36d0:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    36d2:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    36d4:	23 e0       	ldi	r18, 0x03	; 3
    36d6:	83 e5       	ldi	r24, 0x53	; 83
    36d8:	90 e0       	ldi	r25, 0x00	; 0
    36da:	fc 01       	movw	r30, r24
    36dc:	08 ed       	ldi	r16, 0xD8	; 216
    36de:	04 bf       	out	0x34, r16	; 52
    36e0:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    36e2:	89 81       	ldd	r24, Y+1	; 0x01
    36e4:	8f bf       	out	0x3f, r24	; 63
 *  is implemented for the XOSCF NMI when you enable it.
 */
void CLKSYS_XOSC_FailureDetection_Enable( void )
{
	CCPWrite( &OSC.XOSCFAIL, ( OSC_XOSCFDIF_bm | OSC_XOSCFDEN_bm ) );
}
    36e6:	0f 90       	pop	r0
    36e8:	cf 91       	pop	r28
    36ea:	df 91       	pop	r29
    36ec:	0f 91       	pop	r16
    36ee:	08 95       	ret

000036f0 <CLKSYS_Configuration_Lock>:
 *  This will lock the configuration until the next reset, or until the
 *  External Oscillator Failure Detections (XOSCFD) feature detects a failure
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
    36f0:	0f 93       	push	r16
    36f2:	df 93       	push	r29
    36f4:	cf 93       	push	r28
    36f6:	0f 92       	push	r0
    36f8:	cd b7       	in	r28, 0x3d	; 61
    36fa:	de b7       	in	r29, 0x3e	; 62

	// Restore global interrupt setting from scratch register.
        asm("out  0x3F, R1");

#elif defined __GNUC__
	AVR_ENTER_CRITICAL_REGION( );
    36fc:	8f b7       	in	r24, 0x3f	; 63
    36fe:	89 83       	std	Y+1, r24	; 0x01
    3700:	f8 94       	cli
	volatile uint8_t * tmpAddr = address;
#ifdef RAMPZ
	RAMPZ = 0;
    3702:	1b be       	out	0x3b, r1	; 59
#endif
	asm volatile(
    3704:	21 e0       	ldi	r18, 0x01	; 1
    3706:	82 e4       	ldi	r24, 0x42	; 66
    3708:	90 e0       	ldi	r25, 0x00	; 0
    370a:	fc 01       	movw	r30, r24
    370c:	08 ed       	ldi	r16, 0xD8	; 216
    370e:	04 bf       	out	0x34, r16	; 52
    3710:	20 83       	st	Z, r18
		:
		: "r" (tmpAddr), "r" (value), "M" (CCP_IOREG_gc), "i" (&CCP)
		: "r16", "r30", "r31"
		);

	AVR_LEAVE_CRITICAL_REGION( );
    3712:	89 81       	ldd	r24, Y+1	; 0x01
    3714:	8f bf       	out	0x3f, r24	; 63
 *  and switches to internal 2MHz RC oscillator.
 */
void CLKSYS_Configuration_Lock( void )
{
	CCPWrite( &CLK.LOCK, CLK_LOCK_bm );
}
    3716:	0f 90       	pop	r0
    3718:	cf 91       	pop	r28
    371a:	df 91       	pop	r29
    371c:	0f 91       	pop	r16
    371e:	08 95       	ret

00003720 <dataflash_spi_init>:

SPI_Master_t spiMasterD;

//__________________________________________________________________________________________________
void dataflash_spi_init(void)
{
    3720:	8f 92       	push	r8
    3722:	af 92       	push	r10
    3724:	cf 92       	push	r12
    3726:	ef 92       	push	r14
    3728:	0f 93       	push	r16
    372a:	1f 93       	push	r17
    372c:	cf 93       	push	r28
    372e:	df 93       	push	r29
	/* Init SS pin as output with wired AND and pull-up. */
	PORTD.DIRSET = PIN4_bm;
    3730:	c0 e6       	ldi	r28, 0x60	; 96
    3732:	d6 e0       	ldi	r29, 0x06	; 6
    3734:	10 e1       	ldi	r17, 0x10	; 16
    3736:	19 83       	std	Y+1, r17	; 0x01

	/* Set SS output to high. (No slave addressed). */
	//PORTD.OUTSET = PIN4_bm;
	
	/* Initialize SPI master on port DATAFLASH_PORT. */
	SPI_MasterInit(&spiMasterD,
    3738:	8e e1       	ldi	r24, 0x1E	; 30
    373a:	93 e2       	ldi	r25, 0x23	; 35
    373c:	60 ec       	ldi	r22, 0xC0	; 192
    373e:	79 e0       	ldi	r23, 0x09	; 9
    3740:	40 e6       	ldi	r20, 0x60	; 96
    3742:	56 e0       	ldi	r21, 0x06	; 6
    3744:	20 e0       	ldi	r18, 0x00	; 0
    3746:	00 e0       	ldi	r16, 0x00	; 0
    3748:	ee 24       	eor	r14, r14
    374a:	cc 24       	eor	r12, r12
    374c:	c3 94       	inc	r12
    374e:	aa 24       	eor	r10, r10
    3750:	88 24       	eor	r8, r8
    3752:	83 94       	inc	r8
    3754:	0e 94 63 20 	call	0x40c6	; 0x40c6 <SPI_MasterInit>
	               SPI_INTLVL_OFF_gc,
	               true,
	               SPI_PRESCALER_DIV4_gc, 1);
				   
	// Set CS
	CS_UP;
    3758:	1d 83       	std	Y+5, r17	; 0x05
}
    375a:	df 91       	pop	r29
    375c:	cf 91       	pop	r28
    375e:	1f 91       	pop	r17
    3760:	0f 91       	pop	r16
    3762:	ef 90       	pop	r14
    3764:	cf 90       	pop	r12
    3766:	af 90       	pop	r10
    3768:	8f 90       	pop	r8
    376a:	08 95       	ret

0000376c <dataflash_spi_idn>:



//__________________________________________________________________________________________________
void dataflash_spi_idn ( char *ManID, char* DevID1, char* DevID2, char* ExData )
{
    376c:	7f 92       	push	r7
    376e:	8f 92       	push	r8
    3770:	9f 92       	push	r9
    3772:	af 92       	push	r10
    3774:	bf 92       	push	r11
    3776:	cf 92       	push	r12
    3778:	df 92       	push	r13
    377a:	ef 92       	push	r14
    377c:	ff 92       	push	r15
    377e:	0f 93       	push	r16
    3780:	1f 93       	push	r17
    3782:	cf 93       	push	r28
    3784:	df 93       	push	r29
    3786:	4c 01       	movw	r8, r24
    3788:	5b 01       	movw	r10, r22
    378a:	6a 01       	movw	r12, r20
    378c:	79 01       	movw	r14, r18
	CS_DOWN;
    378e:	00 e6       	ldi	r16, 0x60	; 96
    3790:	16 e0       	ldi	r17, 0x06	; 6
    3792:	80 e1       	ldi	r24, 0x10	; 16
    3794:	78 2e       	mov	r7, r24
    3796:	f8 01       	movw	r30, r16
    3798:	76 82       	std	Z+6, r7	; 0x06
	
	SPI_MasterTransceiveByte(&spiMasterD, IDN);			// Write IDN? command
    379a:	ce e1       	ldi	r28, 0x1E	; 30
    379c:	d3 e2       	ldi	r29, 0x23	; 35
    379e:	ce 01       	movw	r24, r28
    37a0:	6f e9       	ldi	r22, 0x9F	; 159
    37a2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	*ManID = SPI_MasterTransceiveByte(&spiMasterD, 0);
    37a6:	ce 01       	movw	r24, r28
    37a8:	60 e0       	ldi	r22, 0x00	; 0
    37aa:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    37ae:	f4 01       	movw	r30, r8
    37b0:	80 83       	st	Z, r24
	*DevID1 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    37b2:	ce 01       	movw	r24, r28
    37b4:	60 e0       	ldi	r22, 0x00	; 0
    37b6:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    37ba:	f5 01       	movw	r30, r10
    37bc:	80 83       	st	Z, r24
	*DevID2 = SPI_MasterTransceiveByte(&spiMasterD, 0);
    37be:	ce 01       	movw	r24, r28
    37c0:	60 e0       	ldi	r22, 0x00	; 0
    37c2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    37c6:	f6 01       	movw	r30, r12
    37c8:	80 83       	st	Z, r24
	*ExData = SPI_MasterTransceiveByte(&spiMasterD, 0);
    37ca:	ce 01       	movw	r24, r28
    37cc:	60 e0       	ldi	r22, 0x00	; 0
    37ce:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
    37d2:	f7 01       	movw	r30, r14
    37d4:	80 83       	st	Z, r24

	CS_UP;
    37d6:	f8 01       	movw	r30, r16
    37d8:	75 82       	std	Z+5, r7	; 0x05
}
    37da:	df 91       	pop	r29
    37dc:	cf 91       	pop	r28
    37de:	1f 91       	pop	r17
    37e0:	0f 91       	pop	r16
    37e2:	ff 90       	pop	r15
    37e4:	ef 90       	pop	r14
    37e6:	df 90       	pop	r13
    37e8:	cf 90       	pop	r12
    37ea:	bf 90       	pop	r11
    37ec:	af 90       	pop	r10
    37ee:	9f 90       	pop	r9
    37f0:	8f 90       	pop	r8
    37f2:	7f 90       	pop	r7
    37f4:	08 95       	ret

000037f6 <dataflash_write>:

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
    37f6:	cf 92       	push	r12
    37f8:	df 92       	push	r13
    37fa:	ef 92       	push	r14
    37fc:	ff 92       	push	r15
    37fe:	0f 93       	push	r16
    3800:	1f 93       	push	r17
    3802:	cf 93       	push	r28
    3804:	df 93       	push	r29
    3806:	6b 01       	movw	r12, r22
    3808:	7c 01       	movw	r14, r24
    380a:	04 2f       	mov	r16, r20
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
	      
	CS_DOWN;
    380c:	c0 e6       	ldi	r28, 0x60	; 96
    380e:	d6 e0       	ldi	r29, 0x06	; 6
    3810:	10 e1       	ldi	r17, 0x10	; 16
    3812:	1e 83       	std	Y+6, r17	; 0x06

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    3814:	8e e1       	ldi	r24, 0x1E	; 30
    3816:	93 e2       	ldi	r25, 0x23	; 35
    3818:	66 e0       	ldi	r22, 0x06	; 6
    381a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    381e:	1d 83       	std	Y+5, r17	; 0x05
	
	CS_DOWN;
    3820:	1e 83       	std	Y+6, r17	; 0x06

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_BYTE_PAGE);	// Write command   
    3822:	8e e1       	ldi	r24, 0x1E	; 30
    3824:	93 e2       	ldi	r25, 0x23	; 35
    3826:	62 e0       	ldi	r22, 0x02	; 2
    3828:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
    382c:	97 01       	movw	r18, r14
    382e:	44 27       	eor	r20, r20
    3830:	55 27       	eor	r21, r21
	
	CS_DOWN;

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_BYTE_PAGE);	// Write command   

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3832:	8e e1       	ldi	r24, 0x1E	; 30
    3834:	93 e2       	ldi	r25, 0x23	; 35
    3836:	62 2f       	mov	r22, r18
    3838:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
    383c:	55 27       	eor	r21, r21
    383e:	4f 2d       	mov	r20, r15
    3840:	3e 2d       	mov	r19, r14
    3842:	2d 2d       	mov	r18, r13
	CS_DOWN;

	SPI_MasterTransceiveByte(&spiMasterD, WRITE_BYTE_PAGE);	// Write command   

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3844:	8e e1       	ldi	r24, 0x1E	; 30
    3846:	93 e2       	ldi	r25, 0x23	; 35
    3848:	62 2f       	mov	r22, r18
    384a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    384e:	8e e1       	ldi	r24, 0x1E	; 30
    3850:	93 e2       	ldi	r25, 0x23	; 35
    3852:	6c 2d       	mov	r22, r12
    3854:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, Wrdat);			// Send data byte
    3858:	8e e1       	ldi	r24, 0x1E	; 30
    385a:	93 e2       	ldi	r25, 0x23	; 35
    385c:	60 2f       	mov	r22, r16
    385e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;      
    3862:	1d 83       	std	Y+5, r17	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3864:	00 e1       	ldi	r16, 0x10	; 16
    3866:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3868:	8e e1       	ldi	r24, 0x1E	; 30
    386a:	93 e2       	ldi	r25, 0x23	; 35
    386c:	65 e0       	ldi	r22, 0x05	; 5
    386e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3872:	8e e1       	ldi	r24, 0x1E	; 30
    3874:	93 e2       	ldi	r25, 0x23	; 35
    3876:	60 e0       	ldi	r22, 0x00	; 0
    3878:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    387c:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, Wrdat);			// Send data byte

	CS_UP;      

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    387e:	80 fd       	sbrc	r24, 0
    3880:	f2 cf       	rjmp	.-28     	; 0x3866 <dataflash_write+0x70>
	{
		//_delay_us(10);
	}
}
    3882:	df 91       	pop	r29
    3884:	cf 91       	pop	r28
    3886:	1f 91       	pop	r17
    3888:	0f 91       	pop	r16
    388a:	ff 90       	pop	r15
    388c:	ef 90       	pop	r14
    388e:	df 90       	pop	r13
    3890:	cf 90       	pop	r12
    3892:	08 95       	ret

00003894 <dataflash_read>:

//__________________________________________________________________________________________________
char dataflash_read(uint32_t addr)
{
    3894:	bf 92       	push	r11
    3896:	cf 92       	push	r12
    3898:	df 92       	push	r13
    389a:	ef 92       	push	r14
    389c:	ff 92       	push	r15
    389e:	0f 93       	push	r16
    38a0:	1f 93       	push	r17
    38a2:	cf 93       	push	r28
    38a4:	df 93       	push	r29
    38a6:	7b 01       	movw	r14, r22
    38a8:	8c 01       	movw	r16, r24

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
   
	CS_DOWN;
    38aa:	60 e6       	ldi	r22, 0x60	; 96
    38ac:	c6 2e       	mov	r12, r22
    38ae:	66 e0       	ldi	r22, 0x06	; 6
    38b0:	d6 2e       	mov	r13, r22
    38b2:	50 e1       	ldi	r21, 0x10	; 16
    38b4:	b5 2e       	mov	r11, r21
    38b6:	f6 01       	movw	r30, r12
    38b8:	b6 82       	std	Z+6, r11	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);		// Read command     
    38ba:	ce e1       	ldi	r28, 0x1E	; 30
    38bc:	d3 e2       	ldi	r29, 0x23	; 35
    38be:	ce 01       	movw	r24, r28
    38c0:	63 e0       	ldi	r22, 0x03	; 3
    38c2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
char dataflash_read(uint32_t addr)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
    38c6:	98 01       	movw	r18, r16
    38c8:	44 27       	eor	r20, r20
    38ca:	55 27       	eor	r21, r21
	adrByte3 = addr&0xff;     
   
	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);		// Read command     

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    38cc:	ce 01       	movw	r24, r28
    38ce:	62 2f       	mov	r22, r18
    38d0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
    38d4:	55 27       	eor	r21, r21
    38d6:	41 2f       	mov	r20, r17
    38d8:	30 2f       	mov	r19, r16
    38da:	2f 2d       	mov	r18, r15
   
	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, READ_ARRAY);		// Read command     

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    38dc:	ce 01       	movw	r24, r28
    38de:	62 2f       	mov	r22, r18
    38e0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    38e4:	ce 01       	movw	r24, r28
    38e6:	6e 2d       	mov	r22, r14
    38e8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte( &spiMasterD, 0 );	
    38ec:	ce 01       	movw	r24, r28
    38ee:	60 e0       	ldi	r22, 0x00	; 0
    38f0:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    38f4:	f6 01       	movw	r30, r12
    38f6:	b5 82       	std	Z+5, r11	; 0x05

	return data;
}
    38f8:	df 91       	pop	r29
    38fa:	cf 91       	pop	r28
    38fc:	1f 91       	pop	r17
    38fe:	0f 91       	pop	r16
    3900:	ff 90       	pop	r15
    3902:	ef 90       	pop	r14
    3904:	df 90       	pop	r13
    3906:	cf 90       	pop	r12
    3908:	bf 90       	pop	r11
    390a:	08 95       	ret

0000390c <dataflash_unprotect_all>:


//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
    390c:	cf 92       	push	r12
    390e:	df 92       	push	r13
    3910:	ef 92       	push	r14
    3912:	ff 92       	push	r15
    3914:	0f 93       	push	r16
    3916:	1f 93       	push	r17
    3918:	cf 93       	push	r28
    391a:	df 93       	push	r29
    391c:	cc 24       	eor	r12, r12
    391e:	dd 24       	eor	r13, r13
    3920:	76 01       	movw	r14, r12
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    3922:	c0 e6       	ldi	r28, 0x60	; 96
    3924:	d6 e0       	ldi	r29, 0x06	; 6
    3926:	10 e1       	ldi	r17, 0x10	; 16
    3928:	00 e1       	ldi	r16, 0x10	; 16
    392a:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    392c:	8e e1       	ldi	r24, 0x1E	; 30
    392e:	93 e2       	ldi	r25, 0x23	; 35
    3930:	66 e0       	ldi	r22, 0x06	; 6
    3932:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    3936:	1d 83       	std	Y+5, r17	; 0x05

	CS_DOWN;
    3938:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode
    393a:	8e e1       	ldi	r24, 0x1E	; 30
    393c:	93 e2       	ldi	r25, 0x23	; 35
    393e:	69 e3       	ldi	r22, 0x39	; 57
    3940:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3944:	97 01       	movw	r18, r14
    3946:	44 27       	eor	r20, r20
    3948:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    394a:	8e e1       	ldi	r24, 0x1E	; 30
    394c:	93 e2       	ldi	r25, 0x23	; 35
    394e:	62 2f       	mov	r22, r18
    3950:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3954:	55 27       	eor	r21, r21
    3956:	4f 2d       	mov	r20, r15
    3958:	3e 2d       	mov	r19, r14
    395a:	2d 2d       	mov	r18, r13
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    395c:	8e e1       	ldi	r24, 0x1E	; 30
    395e:	93 e2       	ldi	r25, 0x23	; 35
    3960:	62 2f       	mov	r22, r18
    3962:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3966:	8e e1       	ldi	r24, 0x1E	; 30
    3968:	93 e2       	ldi	r25, 0x23	; 35
    396a:	60 e0       	ldi	r22, 0x00	; 0
    396c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3970:	1d 83       	std	Y+5, r17	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3972:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3974:	8e e1       	ldi	r24, 0x1E	; 30
    3976:	93 e2       	ldi	r25, 0x23	; 35
    3978:	65 e0       	ldi	r22, 0x05	; 5
    397a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    397e:	8e e1       	ldi	r24, 0x1E	; 30
    3980:	93 e2       	ldi	r25, 0x23	; 35
    3982:	60 e0       	ldi	r22, 0x00	; 0
    3984:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3988:	1d 83       	std	Y+5, r17	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    398a:	80 fd       	sbrc	r24, 0
    398c:	f2 cf       	rjmp	.-28     	; 0x3972 <dataflash_unprotect_all+0x66>
    398e:	80 e0       	ldi	r24, 0x00	; 0
    3990:	90 e1       	ldi	r25, 0x10	; 16
    3992:	a0 e0       	ldi	r26, 0x00	; 0
    3994:	b0 e0       	ldi	r27, 0x00	; 0
    3996:	c8 0e       	add	r12, r24
    3998:	d9 1e       	adc	r13, r25
    399a:	ea 1e       	adc	r14, r26
    399c:	fb 1e       	adc	r15, r27
//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    399e:	90 e0       	ldi	r25, 0x00	; 0
    39a0:	c9 16       	cp	r12, r25
    39a2:	90 e0       	ldi	r25, 0x00	; 0
    39a4:	d9 06       	cpc	r13, r25
    39a6:	90 e4       	ldi	r25, 0x40	; 64
    39a8:	e9 06       	cpc	r14, r25
    39aa:	90 e0       	ldi	r25, 0x00	; 0
    39ac:	f9 06       	cpc	r15, r25
    39ae:	09 f0       	breq	.+2      	; 0x39b2 <dataflash_unprotect_all+0xa6>
    39b0:	bc cf       	rjmp	.-136    	; 0x392a <dataflash_unprotect_all+0x1e>
	{
		dataflash_unprotect_block4 (i);
	}
}
    39b2:	df 91       	pop	r29
    39b4:	cf 91       	pop	r28
    39b6:	1f 91       	pop	r17
    39b8:	0f 91       	pop	r16
    39ba:	ff 90       	pop	r15
    39bc:	ef 90       	pop	r14
    39be:	df 90       	pop	r13
    39c0:	cf 90       	pop	r12
    39c2:	08 95       	ret

000039c4 <dataflash_protect_all>:

//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
    39c4:	cf 92       	push	r12
    39c6:	df 92       	push	r13
    39c8:	ef 92       	push	r14
    39ca:	ff 92       	push	r15
    39cc:	0f 93       	push	r16
    39ce:	1f 93       	push	r17
    39d0:	cf 93       	push	r28
    39d2:	df 93       	push	r29
    39d4:	cc 24       	eor	r12, r12
    39d6:	dd 24       	eor	r13, r13
    39d8:	76 01       	movw	r14, r12
void		dataflash_protect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    39da:	c0 e6       	ldi	r28, 0x60	; 96
    39dc:	d6 e0       	ldi	r29, 0x06	; 6
    39de:	10 e1       	ldi	r17, 0x10	; 16
    39e0:	00 e1       	ldi	r16, 0x10	; 16
    39e2:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);			// Write enable command
    39e4:	8e e1       	ldi	r24, 0x1E	; 30
    39e6:	93 e2       	ldi	r25, 0x23	; 35
    39e8:	66 e0       	ldi	r22, 0x06	; 6
    39ea:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    39ee:	1d 83       	std	Y+5, r17	; 0x05

	CS_DOWN;
    39f0:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode
    39f2:	8e e1       	ldi	r24, 0x1E	; 30
    39f4:	93 e2       	ldi	r25, 0x23	; 35
    39f6:	66 e3       	ldi	r22, 0x36	; 54
    39f8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    39fc:	97 01       	movw	r18, r14
    39fe:	44 27       	eor	r20, r20
    3a00:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3a02:	8e e1       	ldi	r24, 0x1E	; 30
    3a04:	93 e2       	ldi	r25, 0x23	; 35
    3a06:	62 2f       	mov	r22, r18
    3a08:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3a0c:	55 27       	eor	r21, r21
    3a0e:	4f 2d       	mov	r20, r15
    3a10:	3e 2d       	mov	r19, r14
    3a12:	2d 2d       	mov	r18, r13
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3a14:	8e e1       	ldi	r24, 0x1E	; 30
    3a16:	93 e2       	ldi	r25, 0x23	; 35
    3a18:	62 2f       	mov	r22, r18
    3a1a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3a1e:	8e e1       	ldi	r24, 0x1E	; 30
    3a20:	93 e2       	ldi	r25, 0x23	; 35
    3a22:	60 e0       	ldi	r22, 0x00	; 0
    3a24:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3a28:	1d 83       	std	Y+5, r17	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3a2a:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3a2c:	8e e1       	ldi	r24, 0x1E	; 30
    3a2e:	93 e2       	ldi	r25, 0x23	; 35
    3a30:	65 e0       	ldi	r22, 0x05	; 5
    3a32:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3a36:	8e e1       	ldi	r24, 0x1E	; 30
    3a38:	93 e2       	ldi	r25, 0x23	; 35
    3a3a:	60 e0       	ldi	r22, 0x00	; 0
    3a3c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3a40:	1d 83       	std	Y+5, r17	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3a42:	80 fd       	sbrc	r24, 0
    3a44:	f2 cf       	rjmp	.-28     	; 0x3a2a <dataflash_protect_all+0x66>
    3a46:	80 e0       	ldi	r24, 0x00	; 0
    3a48:	90 e1       	ldi	r25, 0x10	; 16
    3a4a:	a0 e0       	ldi	r26, 0x00	; 0
    3a4c:	b0 e0       	ldi	r27, 0x00	; 0
    3a4e:	c8 0e       	add	r12, r24
    3a50:	d9 1e       	adc	r13, r25
    3a52:	ea 1e       	adc	r14, r26
    3a54:	fb 1e       	adc	r15, r27
//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	c9 16       	cp	r12, r25
    3a5a:	90 e0       	ldi	r25, 0x00	; 0
    3a5c:	d9 06       	cpc	r13, r25
    3a5e:	90 e4       	ldi	r25, 0x40	; 64
    3a60:	e9 06       	cpc	r14, r25
    3a62:	90 e0       	ldi	r25, 0x00	; 0
    3a64:	f9 06       	cpc	r15, r25
    3a66:	09 f0       	breq	.+2      	; 0x3a6a <dataflash_protect_all+0xa6>
    3a68:	bc cf       	rjmp	.-136    	; 0x39e2 <dataflash_protect_all+0x1e>
	{
		dataflash_protect_block4 (i);
	}
}
    3a6a:	df 91       	pop	r29
    3a6c:	cf 91       	pop	r28
    3a6e:	1f 91       	pop	r17
    3a70:	0f 91       	pop	r16
    3a72:	ff 90       	pop	r15
    3a74:	ef 90       	pop	r14
    3a76:	df 90       	pop	r13
    3a78:	cf 90       	pop	r12
    3a7a:	08 95       	ret

00003a7c <dataflash_erase_all>:

//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
    3a7c:	9f 92       	push	r9
    3a7e:	af 92       	push	r10
    3a80:	bf 92       	push	r11
    3a82:	cf 92       	push	r12
    3a84:	df 92       	push	r13
    3a86:	ef 92       	push	r14
    3a88:	ff 92       	push	r15
    3a8a:	0f 93       	push	r16
    3a8c:	1f 93       	push	r17
    3a8e:	cf 93       	push	r28
    3a90:	df 93       	push	r29
    3a92:	aa 24       	eor	r10, r10
    3a94:	bb 24       	eor	r11, r11
    3a96:	65 01       	movw	r12, r10
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    3a98:	c0 e6       	ldi	r28, 0x60	; 96
    3a9a:	d6 e0       	ldi	r29, 0x06	; 6
    3a9c:	40 e1       	ldi	r20, 0x10	; 16
    3a9e:	f4 2e       	mov	r15, r20
    3aa0:	30 e1       	ldi	r19, 0x10	; 16
    3aa2:	e3 2e       	mov	r14, r19
    3aa4:	ee 82       	std	Y+6, r14	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    3aa6:	8e e1       	ldi	r24, 0x1E	; 30
    3aa8:	93 e2       	ldi	r25, 0x23	; 35
    3aaa:	66 e0       	ldi	r22, 0x06	; 6
    3aac:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    3ab0:	fd 82       	std	Y+5, r15	; 0x05

	CS_DOWN;
    3ab2:	fe 82       	std	Y+6, r15	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode
    3ab4:	8e e1       	ldi	r24, 0x1E	; 30
    3ab6:	93 e2       	ldi	r25, 0x23	; 35
    3ab8:	69 e3       	ldi	r22, 0x39	; 57
    3aba:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3abe:	96 01       	movw	r18, r12
    3ac0:	44 27       	eor	r20, r20
    3ac2:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3ac4:	8e e1       	ldi	r24, 0x1E	; 30
    3ac6:	93 e2       	ldi	r25, 0x23	; 35
    3ac8:	62 2f       	mov	r22, r18
    3aca:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3ace:	55 27       	eor	r21, r21
    3ad0:	4d 2d       	mov	r20, r13
    3ad2:	3c 2d       	mov	r19, r12
    3ad4:	2b 2d       	mov	r18, r11
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3ad6:	8e e1       	ldi	r24, 0x1E	; 30
    3ad8:	93 e2       	ldi	r25, 0x23	; 35
    3ada:	62 2f       	mov	r22, r18
    3adc:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3ae0:	8e e1       	ldi	r24, 0x1E	; 30
    3ae2:	93 e2       	ldi	r25, 0x23	; 35
    3ae4:	60 e0       	ldi	r22, 0x00	; 0
    3ae6:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3aea:	fd 82       	std	Y+5, r15	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3aec:	00 e6       	ldi	r16, 0x60	; 96
    3aee:	16 e0       	ldi	r17, 0x06	; 6
    3af0:	80 e1       	ldi	r24, 0x10	; 16
    3af2:	98 2e       	mov	r9, r24
    3af4:	ee 82       	std	Y+6, r14	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3af6:	8e e1       	ldi	r24, 0x1E	; 30
    3af8:	93 e2       	ldi	r25, 0x23	; 35
    3afa:	65 e0       	ldi	r22, 0x05	; 5
    3afc:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3b00:	8e e1       	ldi	r24, 0x1E	; 30
    3b02:	93 e2       	ldi	r25, 0x23	; 35
    3b04:	60 e0       	ldi	r22, 0x00	; 0
    3b06:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3b0a:	fd 82       	std	Y+5, r15	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3b0c:	80 fd       	sbrc	r24, 0
    3b0e:	ee cf       	rjmp	.-36     	; 0x3aec <dataflash_erase_all+0x70>
    3b10:	80 e0       	ldi	r24, 0x00	; 0
    3b12:	90 e1       	ldi	r25, 0x10	; 16
    3b14:	a0 e0       	ldi	r26, 0x00	; 0
    3b16:	b0 e0       	ldi	r27, 0x00	; 0
    3b18:	a8 0e       	add	r10, r24
    3b1a:	b9 1e       	adc	r11, r25
    3b1c:	ca 1e       	adc	r12, r26
    3b1e:	db 1e       	adc	r13, r27
//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    3b20:	90 e0       	ldi	r25, 0x00	; 0
    3b22:	a9 16       	cp	r10, r25
    3b24:	90 e0       	ldi	r25, 0x00	; 0
    3b26:	b9 06       	cpc	r11, r25
    3b28:	90 e4       	ldi	r25, 0x40	; 64
    3b2a:	c9 06       	cpc	r12, r25
    3b2c:	90 e0       	ldi	r25, 0x00	; 0
    3b2e:	d9 06       	cpc	r13, r25
    3b30:	09 f0       	breq	.+2      	; 0x3b34 <dataflash_erase_all+0xb8>
    3b32:	b8 cf       	rjmp	.-144    	; 0x3aa4 <dataflash_erase_all+0x28>
//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
	dataflash_unprotect_all ();

	CS_DOWN;
    3b34:	d8 01       	movw	r26, r16
    3b36:	16 96       	adiw	r26, 0x06	; 6
    3b38:	9c 92       	st	X, r9
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);	// Write enable command
    3b3a:	8e e1       	ldi	r24, 0x1E	; 30
    3b3c:	93 e2       	ldi	r25, 0x23	; 35
    3b3e:	66 e0       	ldi	r22, 0x06	; 6
    3b40:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    3b44:	f8 01       	movw	r30, r16
    3b46:	95 82       	std	Z+5, r9	; 0x05

	CS_DOWN;
    3b48:	96 82       	std	Z+6, r9	; 0x06

	SPI_MasterTransceiveByte(&spiMasterD, CHIP_ERASE);     		// Write erase4 opcode
    3b4a:	8e e1       	ldi	r24, 0x1E	; 30
    3b4c:	93 e2       	ldi	r25, 0x23	; 35
    3b4e:	60 e6       	ldi	r22, 0x60	; 96
    3b50:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3b54:	d8 01       	movw	r26, r16
    3b56:	15 96       	adiw	r26, 0x05	; 5
    3b58:	9c 92       	st	X, r9
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3b5a:	c0 e6       	ldi	r28, 0x60	; 96
    3b5c:	d6 e0       	ldi	r29, 0x06	; 6
    3b5e:	b0 e1       	ldi	r27, 0x10	; 16
    3b60:	fb 2e       	mov	r15, r27
    3b62:	00 e1       	ldi	r16, 0x10	; 16
    3b64:	0e 83       	std	Y+6, r16	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3b66:	8e e1       	ldi	r24, 0x1E	; 30
    3b68:	93 e2       	ldi	r25, 0x23	; 35
    3b6a:	65 e0       	ldi	r22, 0x05	; 5
    3b6c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3b70:	8e e1       	ldi	r24, 0x1E	; 30
    3b72:	93 e2       	ldi	r25, 0x23	; 35
    3b74:	60 e0       	ldi	r22, 0x00	; 0
    3b76:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3b7a:	fd 82       	std	Y+5, r15	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, CHIP_ERASE);     		// Write erase4 opcode

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3b7c:	80 fd       	sbrc	r24, 0
    3b7e:	f2 cf       	rjmp	.-28     	; 0x3b64 <dataflash_erase_all+0xe8>
	{
		//_delay_ms(5);
	}
}
    3b80:	df 91       	pop	r29
    3b82:	cf 91       	pop	r28
    3b84:	1f 91       	pop	r17
    3b86:	0f 91       	pop	r16
    3b88:	ff 90       	pop	r15
    3b8a:	ef 90       	pop	r14
    3b8c:	df 90       	pop	r13
    3b8e:	cf 90       	pop	r12
    3b90:	bf 90       	pop	r11
    3b92:	af 90       	pop	r10
    3b94:	9f 90       	pop	r9
    3b96:	08 95       	ret

00003b98 <dataflash_erase_block4>:

//__________________________________________________________________________________________________
void		dataflash_erase_block4		( uint16_t BlockNum )
{
    3b98:	df 92       	push	r13
    3b9a:	ef 92       	push	r14
    3b9c:	ff 92       	push	r15
    3b9e:	0f 93       	push	r16
    3ba0:	1f 93       	push	r17
    3ba2:	cf 93       	push	r28
    3ba4:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    3ba6:	7c 01       	movw	r14, r24
    3ba8:	00 e0       	ldi	r16, 0x00	; 0
    3baa:	10 e0       	ldi	r17, 0x00	; 0
    3bac:	ec e0       	ldi	r30, 0x0C	; 12
    3bae:	ee 0c       	add	r14, r14
    3bb0:	ff 1c       	adc	r15, r15
    3bb2:	00 1f       	adc	r16, r16
    3bb4:	11 1f       	adc	r17, r17
    3bb6:	ea 95       	dec	r30
    3bb8:	d1 f7       	brne	.-12     	; 0x3bae <dataflash_erase_block4+0x16>

	CS_DOWN;
    3bba:	c0 e6       	ldi	r28, 0x60	; 96
    3bbc:	d6 e0       	ldi	r29, 0x06	; 6
    3bbe:	70 e1       	ldi	r23, 0x10	; 16
    3bc0:	d7 2e       	mov	r13, r23
    3bc2:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);			// Write enable command
    3bc4:	8e e1       	ldi	r24, 0x1E	; 30
    3bc6:	93 e2       	ldi	r25, 0x23	; 35
    3bc8:	66 e0       	ldi	r22, 0x06	; 6
    3bca:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    3bce:	dd 82       	std	Y+5, r13	; 0x05

	CS_DOWN;
    3bd0:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, BLOCK_ERASE_4K);			// Write erase4 opcode
    3bd2:	8e e1       	ldi	r24, 0x1E	; 30
    3bd4:	93 e2       	ldi	r25, 0x23	; 35
    3bd6:	60 e2       	ldi	r22, 0x20	; 32
    3bd8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3bdc:	98 01       	movw	r18, r16
    3bde:	44 27       	eor	r20, r20
    3be0:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3be2:	8e e1       	ldi	r24, 0x1E	; 30
    3be4:	93 e2       	ldi	r25, 0x23	; 35
    3be6:	62 2f       	mov	r22, r18
    3be8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, BLOCK_ERASE_4K);			// Write erase4 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3bec:	ef 2c       	mov	r14, r15
    3bee:	f0 2e       	mov	r15, r16
    3bf0:	01 2f       	mov	r16, r17
    3bf2:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3bf4:	8e e1       	ldi	r24, 0x1E	; 30
    3bf6:	93 e2       	ldi	r25, 0x23	; 35
    3bf8:	6e 2d       	mov	r22, r14
    3bfa:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3bfe:	8e e1       	ldi	r24, 0x1E	; 30
    3c00:	93 e2       	ldi	r25, 0x23	; 35
    3c02:	60 e0       	ldi	r22, 0x00	; 0
    3c04:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3c08:	dd 82       	std	Y+5, r13	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3c0a:	00 e1       	ldi	r16, 0x10	; 16
    3c0c:	10 e1       	ldi	r17, 0x10	; 16
    3c0e:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3c10:	8e e1       	ldi	r24, 0x1E	; 30
    3c12:	93 e2       	ldi	r25, 0x23	; 35
    3c14:	65 e0       	ldi	r22, 0x05	; 5
    3c16:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3c1a:	8e e1       	ldi	r24, 0x1E	; 30
    3c1c:	93 e2       	ldi	r25, 0x23	; 35
    3c1e:	60 e0       	ldi	r22, 0x00	; 0
    3c20:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3c24:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3c26:	80 fd       	sbrc	r24, 0
    3c28:	f2 cf       	rjmp	.-28     	; 0x3c0e <dataflash_erase_block4+0x76>
	{
		//_delay_ms(5);
	}
}
    3c2a:	df 91       	pop	r29
    3c2c:	cf 91       	pop	r28
    3c2e:	1f 91       	pop	r17
    3c30:	0f 91       	pop	r16
    3c32:	ff 90       	pop	r15
    3c34:	ef 90       	pop	r14
    3c36:	df 90       	pop	r13
    3c38:	08 95       	ret

00003c3a <dataflash_unprotect_block4>:

//__________________________________________________________________________________________________
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
    3c3a:	df 92       	push	r13
    3c3c:	ef 92       	push	r14
    3c3e:	ff 92       	push	r15
    3c40:	0f 93       	push	r16
    3c42:	1f 93       	push	r17
    3c44:	cf 93       	push	r28
    3c46:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    3c48:	7c 01       	movw	r14, r24
    3c4a:	00 e0       	ldi	r16, 0x00	; 0
    3c4c:	10 e0       	ldi	r17, 0x00	; 0
    3c4e:	8c e0       	ldi	r24, 0x0C	; 12
    3c50:	ee 0c       	add	r14, r14
    3c52:	ff 1c       	adc	r15, r15
    3c54:	00 1f       	adc	r16, r16
    3c56:	11 1f       	adc	r17, r17
    3c58:	8a 95       	dec	r24
    3c5a:	d1 f7       	brne	.-12     	; 0x3c50 <dataflash_unprotect_block4+0x16>

	CS_DOWN;
    3c5c:	c0 e6       	ldi	r28, 0x60	; 96
    3c5e:	d6 e0       	ldi	r29, 0x06	; 6
    3c60:	b0 e1       	ldi	r27, 0x10	; 16
    3c62:	db 2e       	mov	r13, r27
    3c64:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);				// Write enable command
    3c66:	8e e1       	ldi	r24, 0x1E	; 30
    3c68:	93 e2       	ldi	r25, 0x23	; 35
    3c6a:	66 e0       	ldi	r22, 0x06	; 6
    3c6c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    3c70:	dd 82       	std	Y+5, r13	; 0x05

	CS_DOWN;
    3c72:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode
    3c74:	8e e1       	ldi	r24, 0x1E	; 30
    3c76:	93 e2       	ldi	r25, 0x23	; 35
    3c78:	69 e3       	ldi	r22, 0x39	; 57
    3c7a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3c7e:	98 01       	movw	r18, r16
    3c80:	44 27       	eor	r20, r20
    3c82:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3c84:	8e e1       	ldi	r24, 0x1E	; 30
    3c86:	93 e2       	ldi	r25, 0x23	; 35
    3c88:	62 2f       	mov	r22, r18
    3c8a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3c8e:	ef 2c       	mov	r14, r15
    3c90:	f0 2e       	mov	r15, r16
    3c92:	01 2f       	mov	r16, r17
    3c94:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3c96:	8e e1       	ldi	r24, 0x1E	; 30
    3c98:	93 e2       	ldi	r25, 0x23	; 35
    3c9a:	6e 2d       	mov	r22, r14
    3c9c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3ca0:	8e e1       	ldi	r24, 0x1E	; 30
    3ca2:	93 e2       	ldi	r25, 0x23	; 35
    3ca4:	60 e0       	ldi	r22, 0x00	; 0
    3ca6:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3caa:	dd 82       	std	Y+5, r13	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3cac:	00 e1       	ldi	r16, 0x10	; 16
    3cae:	10 e1       	ldi	r17, 0x10	; 16
    3cb0:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3cb2:	8e e1       	ldi	r24, 0x1E	; 30
    3cb4:	93 e2       	ldi	r25, 0x23	; 35
    3cb6:	65 e0       	ldi	r22, 0x05	; 5
    3cb8:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3cbc:	8e e1       	ldi	r24, 0x1E	; 30
    3cbe:	93 e2       	ldi	r25, 0x23	; 35
    3cc0:	60 e0       	ldi	r22, 0x00	; 0
    3cc2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3cc6:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3cc8:	80 fd       	sbrc	r24, 0
    3cca:	f2 cf       	rjmp	.-28     	; 0x3cb0 <dataflash_unprotect_block4+0x76>
	{
		//_delay_ms(5);
	}
}
    3ccc:	df 91       	pop	r29
    3cce:	cf 91       	pop	r28
    3cd0:	1f 91       	pop	r17
    3cd2:	0f 91       	pop	r16
    3cd4:	ff 90       	pop	r15
    3cd6:	ef 90       	pop	r14
    3cd8:	df 90       	pop	r13
    3cda:	08 95       	ret

00003cdc <dataflash_protect_block4>:

//__________________________________________________________________________________________________
void		dataflash_protect_block4	( uint16_t BlockNum )
{
    3cdc:	df 92       	push	r13
    3cde:	ef 92       	push	r14
    3ce0:	ff 92       	push	r15
    3ce2:	0f 93       	push	r16
    3ce4:	1f 93       	push	r17
    3ce6:	cf 93       	push	r28
    3ce8:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    3cea:	7c 01       	movw	r14, r24
    3cec:	00 e0       	ldi	r16, 0x00	; 0
    3cee:	10 e0       	ldi	r17, 0x00	; 0
    3cf0:	4c e0       	ldi	r20, 0x0C	; 12
    3cf2:	ee 0c       	add	r14, r14
    3cf4:	ff 1c       	adc	r15, r15
    3cf6:	00 1f       	adc	r16, r16
    3cf8:	11 1f       	adc	r17, r17
    3cfa:	4a 95       	dec	r20
    3cfc:	d1 f7       	brne	.-12     	; 0x3cf2 <dataflash_protect_block4+0x16>

	CS_DOWN;
    3cfe:	c0 e6       	ldi	r28, 0x60	; 96
    3d00:	d6 e0       	ldi	r29, 0x06	; 6
    3d02:	30 e1       	ldi	r19, 0x10	; 16
    3d04:	d3 2e       	mov	r13, r19
    3d06:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, WRITE_ENABLE);			// Write enable command
    3d08:	8e e1       	ldi	r24, 0x1E	; 30
    3d0a:	93 e2       	ldi	r25, 0x23	; 35
    3d0c:	66 e0       	ldi	r22, 0x06	; 6
    3d0e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;
    3d12:	dd 82       	std	Y+5, r13	; 0x05

	CS_DOWN;
    3d14:	de 82       	std	Y+6, r13	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode
    3d16:	8e e1       	ldi	r24, 0x1E	; 30
    3d18:	93 e2       	ldi	r25, 0x23	; 35
    3d1a:	66 e3       	ldi	r22, 0x36	; 54
    3d1c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	adrByte1 = (iAddress>>16)&0xff;
    3d20:	98 01       	movw	r18, r16
    3d22:	44 27       	eor	r20, r20
    3d24:	55 27       	eor	r21, r21
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
    3d26:	8e e1       	ldi	r24, 0x1E	; 30
    3d28:	93 e2       	ldi	r25, 0x23	; 35
    3d2a:	62 2f       	mov	r22, r18
    3d2c:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_DOWN;
	SPI_MasterTransceiveByte(&spiMasterD, PROTECT_SECTOR);    		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    3d30:	ef 2c       	mov	r14, r15
    3d32:	f0 2e       	mov	r15, r16
    3d34:	01 2f       	mov	r16, r17
    3d36:	11 27       	eor	r17, r17
	adrByte3 = iAddress&0xff;

	SPI_MasterTransceiveByte(&spiMasterD, adrByte1);		// Send address - 24 bits
	SPI_MasterTransceiveByte(&spiMasterD, adrByte2);		// starting from MSB
    3d38:	8e e1       	ldi	r24, 0x1E	; 30
    3d3a:	93 e2       	ldi	r25, 0x23	; 35
    3d3c:	6e 2d       	mov	r22, r14
    3d3e:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);
    3d42:	8e e1       	ldi	r24, 0x1E	; 30
    3d44:	93 e2       	ldi	r25, 0x23	; 35
    3d46:	60 e0       	ldi	r22, 0x00	; 0
    3d48:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	CS_UP;
    3d4c:	dd 82       	std	Y+5, r13	; 0x05
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    3d4e:	00 e1       	ldi	r16, 0x10	; 16
    3d50:	10 e1       	ldi	r17, 0x10	; 16
    3d52:	1e 83       	std	Y+6, r17	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3d54:	8e e1       	ldi	r24, 0x1E	; 30
    3d56:	93 e2       	ldi	r25, 0x23	; 35
    3d58:	65 e0       	ldi	r22, 0x05	; 5
    3d5a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3d5e:	8e e1       	ldi	r24, 0x1E	; 30
    3d60:	93 e2       	ldi	r25, 0x23	; 35
    3d62:	60 e0       	ldi	r22, 0x00	; 0
    3d64:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3d68:	0d 83       	std	Y+5, r16	; 0x05
	SPI_MasterTransceiveByte(&spiMasterD, adrByte3);

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    3d6a:	80 fd       	sbrc	r24, 0
    3d6c:	f2 cf       	rjmp	.-28     	; 0x3d52 <dataflash_protect_block4+0x76>
	{
		//_delay_ms(5);
	}

}
    3d6e:	df 91       	pop	r29
    3d70:	cf 91       	pop	r28
    3d72:	1f 91       	pop	r17
    3d74:	0f 91       	pop	r16
    3d76:	ff 90       	pop	r15
    3d78:	ef 90       	pop	r14
    3d7a:	df 90       	pop	r13
    3d7c:	08 95       	ret

00003d7e <dataflash_read_status>:

//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
    3d7e:	ff 92       	push	r15
    3d80:	0f 93       	push	r16
    3d82:	1f 93       	push	r17
    3d84:	cf 93       	push	r28
    3d86:	df 93       	push	r29
	uint8_t data;

	CS_DOWN;
    3d88:	c0 e6       	ldi	r28, 0x60	; 96
    3d8a:	d6 e0       	ldi	r29, 0x06	; 6
    3d8c:	50 e1       	ldi	r21, 0x10	; 16
    3d8e:	f5 2e       	mov	r15, r21
    3d90:	fe 82       	std	Y+6, r15	; 0x06
	SPI_MasterTransceiveByte(&spiMasterD, READ_STATUS_REG);    		// Read status   
    3d92:	0e e1       	ldi	r16, 0x1E	; 30
    3d94:	13 e2       	ldi	r17, 0x23	; 35
    3d96:	c8 01       	movw	r24, r16
    3d98:	65 e0       	ldi	r22, 0x05	; 5
    3d9a:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>

	data = SPI_MasterTransceiveByte(&spiMasterD, 0);				// Send data byte
    3d9e:	c8 01       	movw	r24, r16
    3da0:	60 e0       	ldi	r22, 0x00	; 0
    3da2:	0e 94 6b 21 	call	0x42d6	; 0x42d6 <SPI_MasterTransceiveByte>
	CS_UP;      
    3da6:	fd 82       	std	Y+5, r15	; 0x05

	return data;
}
    3da8:	df 91       	pop	r29
    3daa:	cf 91       	pop	r28
    3dac:	1f 91       	pop	r17
    3dae:	0f 91       	pop	r16
    3db0:	ff 90       	pop	r15
    3db2:	08 95       	ret

00003db4 <EEPROM_WriteByte>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3db4:	90 91 cf 01 	lds	r25, 0x01CF
    3db8:	97 fd       	sbrc	r25, 7
    3dba:	fc cf       	rjmp	.-8      	; 0x3db4 <EEPROM_WriteByte>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3dbc:	90 91 cf 01 	lds	r25, 0x01CF
    3dc0:	91 ff       	sbrs	r25, 1
    3dc2:	12 c0       	rjmp	.+36     	; 0x3de8 <EEPROM_WriteByte+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3dc4:	96 e3       	ldi	r25, 0x36	; 54
    3dc6:	e0 ec       	ldi	r30, 0xC0	; 192
    3dc8:	f1 e0       	ldi	r31, 0x01	; 1
    3dca:	92 87       	std	Z+10, r25	; 0x0a
		NVM_EXEC();
    3dcc:	ef 93       	push	r30
    3dce:	ff 93       	push	r31
    3dd0:	0f 93       	push	r16
    3dd2:	2f 93       	push	r18
    3dd4:	eb ec       	ldi	r30, 0xCB	; 203
    3dd6:	f1 e0       	ldi	r31, 0x01	; 1
    3dd8:	08 ed       	ldi	r16, 0xD8	; 216
    3dda:	21 e0       	ldi	r18, 0x01	; 1
    3ddc:	04 bf       	out	0x34, r16	; 52
    3dde:	20 83       	st	Z, r18
    3de0:	2f 91       	pop	r18
    3de2:	0f 91       	pop	r16
    3de4:	ff 91       	pop	r31
    3de6:	ef 91       	pop	r30
{
	/*  Flush buffer to make sure no unintetional data is written and load
	 *  the "Page Load" command into the command register.
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3de8:	e0 ec       	ldi	r30, 0xC0	; 192
    3dea:	f1 e0       	ldi	r31, 0x01	; 1
    3dec:	93 e3       	ldi	r25, 0x33	; 51
    3dee:	92 87       	std	Z+10, r25	; 0x0a

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    3df0:	70 e0       	ldi	r23, 0x00	; 0
    3df2:	6f 71       	andi	r22, 0x1F	; 31
    3df4:	70 70       	andi	r23, 0x00	; 0
	 */
	EEPROM_FlushBuffer();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	88 0f       	add	r24, r24
    3dfa:	99 1f       	adc	r25, r25
    3dfc:	82 95       	swap	r24
    3dfe:	92 95       	swap	r25
    3e00:	90 7f       	andi	r25, 0xF0	; 240
    3e02:	98 27       	eor	r25, r24
    3e04:	80 7f       	andi	r24, 0xF0	; 240
    3e06:	98 27       	eor	r25, r24
    3e08:	68 2b       	or	r22, r24
    3e0a:	79 2b       	or	r23, r25
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to write to. */
	NVM.ADDR0 = address & 0xFF;
    3e0c:	60 93 c0 01 	sts	0x01C0, r22
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3e10:	87 2f       	mov	r24, r23
    3e12:	8f 71       	andi	r24, 0x1F	; 31
    3e14:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3e16:	12 82       	std	Z+2, r1	; 0x02

	/* Load data to write, which triggers the loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    3e18:	44 83       	std	Z+4, r20	; 0x04

	/*  Issue EEPROM Atomic Write (Erase&Write) command. Load command, write
	 *  the protection signature and execute command.
	 */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3e1a:	85 e3       	ldi	r24, 0x35	; 53
    3e1c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3e1e:	ef 93       	push	r30
    3e20:	ff 93       	push	r31
    3e22:	0f 93       	push	r16
    3e24:	2f 93       	push	r18
    3e26:	eb ec       	ldi	r30, 0xCB	; 203
    3e28:	f1 e0       	ldi	r31, 0x01	; 1
    3e2a:	08 ed       	ldi	r16, 0xD8	; 216
    3e2c:	21 e0       	ldi	r18, 0x01	; 1
    3e2e:	04 bf       	out	0x34, r16	; 52
    3e30:	20 83       	st	Z, r18
    3e32:	2f 91       	pop	r18
    3e34:	0f 91       	pop	r16
    3e36:	ff 91       	pop	r31
    3e38:	ef 91       	pop	r30
}
    3e3a:	08 95       	ret

00003e3c <EEPROM_ReadByte>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3e3c:	e0 ec       	ldi	r30, 0xC0	; 192
    3e3e:	f1 e0       	ldi	r31, 0x01	; 1
    3e40:	90 91 cf 01 	lds	r25, 0x01CF
    3e44:	97 fd       	sbrc	r25, 7
    3e46:	fa cf       	rjmp	.-12     	; 0x3e3c <EEPROM_ReadByte>
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
	                            |(byteAddr & (EEPROM_PAGESIZE-1));
    3e48:	70 e0       	ldi	r23, 0x00	; 0
    3e4a:	6f 71       	andi	r22, 0x1F	; 31
    3e4c:	70 70       	andi	r23, 0x00	; 0
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE)
    3e4e:	90 e0       	ldi	r25, 0x00	; 0
    3e50:	88 0f       	add	r24, r24
    3e52:	99 1f       	adc	r25, r25
    3e54:	82 95       	swap	r24
    3e56:	92 95       	swap	r25
    3e58:	90 7f       	andi	r25, 0xF0	; 240
    3e5a:	98 27       	eor	r25, r24
    3e5c:	80 7f       	andi	r24, 0xF0	; 240
    3e5e:	98 27       	eor	r25, r24
    3e60:	68 2b       	or	r22, r24
    3e62:	79 2b       	or	r23, r25
	                            |(byteAddr & (EEPROM_PAGESIZE-1));

	/* Set address to read from. */
	NVM.ADDR0 = address & 0xFF;
    3e64:	60 93 c0 01 	sts	0x01C0, r22
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3e68:	87 2f       	mov	r24, r23
    3e6a:	8f 71       	andi	r24, 0x1F	; 31
    3e6c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3e6e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Read command. */
	NVM.CMD = NVM_CMD_READ_EEPROM_gc;
    3e70:	86 e0       	ldi	r24, 0x06	; 6
    3e72:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3e74:	ef 93       	push	r30
    3e76:	ff 93       	push	r31
    3e78:	0f 93       	push	r16
    3e7a:	2f 93       	push	r18
    3e7c:	eb ec       	ldi	r30, 0xCB	; 203
    3e7e:	f1 e0       	ldi	r31, 0x01	; 1
    3e80:	08 ed       	ldi	r16, 0xD8	; 216
    3e82:	21 e0       	ldi	r18, 0x01	; 1
    3e84:	04 bf       	out	0x34, r16	; 52
    3e86:	20 83       	st	Z, r18
    3e88:	2f 91       	pop	r18
    3e8a:	0f 91       	pop	r16
    3e8c:	ff 91       	pop	r31
    3e8e:	ef 91       	pop	r30

	return NVM.DATA0;
    3e90:	80 91 c4 01 	lds	r24, 0x01C4
}
    3e94:	08 95       	ret

00003e96 <EEPROM_WaitForNVM>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3e96:	80 91 cf 01 	lds	r24, 0x01CF
    3e9a:	87 fd       	sbrc	r24, 7
    3e9c:	fc cf       	rjmp	.-8      	; 0x3e96 <EEPROM_WaitForNVM>
}
    3e9e:	08 95       	ret

00003ea0 <EEPROM_FlushBuffer>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3ea0:	80 91 cf 01 	lds	r24, 0x01CF
    3ea4:	87 fd       	sbrc	r24, 7
    3ea6:	fc cf       	rjmp	.-8      	; 0x3ea0 <EEPROM_FlushBuffer>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Flush EEPROM page buffer if necessary. */
	if ((NVM.STATUS & NVM_EELOAD_bm) != 0) {
    3ea8:	80 91 cf 01 	lds	r24, 0x01CF
    3eac:	81 ff       	sbrs	r24, 1
    3eae:	12 c0       	rjmp	.+36     	; 0x3ed4 <EEPROM_FlushBuffer+0x34>
		NVM.CMD = NVM_CMD_ERASE_EEPROM_BUFFER_gc;
    3eb0:	86 e3       	ldi	r24, 0x36	; 54
    3eb2:	e0 ec       	ldi	r30, 0xC0	; 192
    3eb4:	f1 e0       	ldi	r31, 0x01	; 1
    3eb6:	82 87       	std	Z+10, r24	; 0x0a
		NVM_EXEC();
    3eb8:	ef 93       	push	r30
    3eba:	ff 93       	push	r31
    3ebc:	0f 93       	push	r16
    3ebe:	2f 93       	push	r18
    3ec0:	eb ec       	ldi	r30, 0xCB	; 203
    3ec2:	f1 e0       	ldi	r31, 0x01	; 1
    3ec4:	08 ed       	ldi	r16, 0xD8	; 216
    3ec6:	21 e0       	ldi	r18, 0x01	; 1
    3ec8:	04 bf       	out	0x34, r16	; 52
    3eca:	20 83       	st	Z, r18
    3ecc:	2f 91       	pop	r18
    3ece:	0f 91       	pop	r16
    3ed0:	ff 91       	pop	r31
    3ed2:	ef 91       	pop	r30
    3ed4:	08 95       	ret

00003ed6 <EEPROM_LoadByte>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3ed6:	e0 ec       	ldi	r30, 0xC0	; 192
    3ed8:	f1 e0       	ldi	r31, 0x01	; 1
    3eda:	90 91 cf 01 	lds	r25, 0x01CF
    3ede:	97 fd       	sbrc	r25, 7
    3ee0:	fa cf       	rjmp	.-12     	; 0x3ed6 <EEPROM_LoadByte>
 */
void EEPROM_LoadByte( uint8_t byteAddr, uint8_t value )
{
	/* Wait until NVM is not busy and prepare NVM command.*/
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3ee2:	93 e3       	ldi	r25, 0x33	; 51
    3ee4:	92 87       	std	Z+10, r25	; 0x0a

	/* Set address. */
	NVM.ADDR0 = byteAddr & 0xFF;
    3ee6:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = 0x00;
    3eea:	11 82       	std	Z+1, r1	; 0x01
	NVM.ADDR2 = 0x00;
    3eec:	12 82       	std	Z+2, r1	; 0x02

	/* Set data, which triggers loading of EEPROM page buffer. */
	NVM.DATA0 = value;
    3eee:	64 83       	std	Z+4, r22	; 0x04
}
    3ef0:	08 95       	ret

00003ef2 <EEPROM_LoadPage>:
 *        EEPROM write page operation.
 *
 *  \param  values   Pointer to SRAM buffer containing an entire page.
 */
void EEPROM_LoadPage( const uint8_t * values )
{
    3ef2:	fc 01       	movw	r30, r24
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3ef4:	a0 ec       	ldi	r26, 0xC0	; 192
    3ef6:	b1 e0       	ldi	r27, 0x01	; 1
    3ef8:	80 91 cf 01 	lds	r24, 0x01CF
    3efc:	87 fd       	sbrc	r24, 7
    3efe:	fa cf       	rjmp	.-12     	; 0x3ef4 <EEPROM_LoadPage+0x2>
 */
void EEPROM_LoadPage( const uint8_t * values )
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();
	NVM.CMD = NVM_CMD_LOAD_EEPROM_BUFFER_gc;
    3f00:	83 e3       	ldi	r24, 0x33	; 51
    3f02:	1a 96       	adiw	r26, 0x0a	; 10
    3f04:	8c 93       	st	X, r24
    3f06:	1a 97       	sbiw	r26, 0x0a	; 10

	/*  Set address to zero, as only the lower bits matters. ADDR0 is
	 *  maintained inside the loop below.
	 */
	NVM.ADDR1 = 0x00;
    3f08:	11 96       	adiw	r26, 0x01	; 1
    3f0a:	1c 92       	st	X, r1
    3f0c:	11 97       	sbiw	r26, 0x01	; 1
	NVM.ADDR2 = 0x00;
    3f0e:	12 96       	adiw	r26, 0x02	; 2
    3f10:	1c 92       	st	X, r1
    3f12:	12 97       	sbiw	r26, 0x02	; 2

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    3f14:	80 e0       	ldi	r24, 0x00	; 0
		NVM.ADDR0 = i;
    3f16:	80 93 c0 01 	sts	0x01C0, r24
		NVM.DATA0 = *values;
    3f1a:	91 91       	ld	r25, Z+
    3f1c:	14 96       	adiw	r26, 0x04	; 4
    3f1e:	9c 93       	st	X, r25
    3f20:	14 97       	sbiw	r26, 0x04	; 4
	 */
	NVM.ADDR1 = 0x00;
	NVM.ADDR2 = 0x00;

	/* Load multible bytes into page buffer. */
	for (uint8_t i = 0; i < EEPROM_PAGESIZE; ++i) {
    3f22:	8f 5f       	subi	r24, 0xFF	; 255
    3f24:	80 32       	cpi	r24, 0x20	; 32
    3f26:	b9 f7       	brne	.-18     	; 0x3f16 <EEPROM_LoadPage+0x24>
		NVM.ADDR0 = i;
		NVM.DATA0 = *values;
		++values;
	}
}
    3f28:	08 95       	ret

00003f2a <EEPROM_AtomicWritePage>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3f2a:	e0 ec       	ldi	r30, 0xC0	; 192
    3f2c:	f1 e0       	ldi	r31, 0x01	; 1
    3f2e:	90 91 cf 01 	lds	r25, 0x01CF
    3f32:	97 fd       	sbrc	r25, 7
    3f34:	fa cf       	rjmp	.-12     	; 0x3f2a <EEPROM_AtomicWritePage>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3f36:	90 e0       	ldi	r25, 0x00	; 0
    3f38:	88 0f       	add	r24, r24
    3f3a:	99 1f       	adc	r25, r25
    3f3c:	82 95       	swap	r24
    3f3e:	92 95       	swap	r25
    3f40:	90 7f       	andi	r25, 0xF0	; 240
    3f42:	98 27       	eor	r25, r24
    3f44:	80 7f       	andi	r24, 0xF0	; 240
    3f46:	98 27       	eor	r25, r24

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3f48:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3f4c:	89 2f       	mov	r24, r25
    3f4e:	8f 71       	andi	r24, 0x1F	; 31
    3f50:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3f52:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Atomic Write (Erase&Write) command. */
	NVM.CMD = NVM_CMD_ERASE_WRITE_EEPROM_PAGE_gc;
    3f54:	85 e3       	ldi	r24, 0x35	; 53
    3f56:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3f58:	ef 93       	push	r30
    3f5a:	ff 93       	push	r31
    3f5c:	0f 93       	push	r16
    3f5e:	2f 93       	push	r18
    3f60:	eb ec       	ldi	r30, 0xCB	; 203
    3f62:	f1 e0       	ldi	r31, 0x01	; 1
    3f64:	08 ed       	ldi	r16, 0xD8	; 216
    3f66:	21 e0       	ldi	r18, 0x01	; 1
    3f68:	04 bf       	out	0x34, r16	; 52
    3f6a:	20 83       	st	Z, r18
    3f6c:	2f 91       	pop	r18
    3f6e:	0f 91       	pop	r16
    3f70:	ff 91       	pop	r31
    3f72:	ef 91       	pop	r30
}
    3f74:	08 95       	ret

00003f76 <EEPROM_ErasePage>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3f76:	e0 ec       	ldi	r30, 0xC0	; 192
    3f78:	f1 e0       	ldi	r31, 0x01	; 1
    3f7a:	90 91 cf 01 	lds	r25, 0x01CF
    3f7e:	97 fd       	sbrc	r25, 7
    3f80:	fa cf       	rjmp	.-12     	; 0x3f76 <EEPROM_ErasePage>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3f82:	90 e0       	ldi	r25, 0x00	; 0
    3f84:	88 0f       	add	r24, r24
    3f86:	99 1f       	adc	r25, r25
    3f88:	82 95       	swap	r24
    3f8a:	92 95       	swap	r25
    3f8c:	90 7f       	andi	r25, 0xF0	; 240
    3f8e:	98 27       	eor	r25, r24
    3f90:	80 7f       	andi	r24, 0xF0	; 240
    3f92:	98 27       	eor	r25, r24

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3f94:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3f98:	89 2f       	mov	r24, r25
    3f9a:	8f 71       	andi	r24, 0x1F	; 31
    3f9c:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3f9e:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Erase command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_PAGE_gc;
    3fa0:	82 e3       	ldi	r24, 0x32	; 50
    3fa2:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3fa4:	ef 93       	push	r30
    3fa6:	ff 93       	push	r31
    3fa8:	0f 93       	push	r16
    3faa:	2f 93       	push	r18
    3fac:	eb ec       	ldi	r30, 0xCB	; 203
    3fae:	f1 e0       	ldi	r31, 0x01	; 1
    3fb0:	08 ed       	ldi	r16, 0xD8	; 216
    3fb2:	21 e0       	ldi	r18, 0x01	; 1
    3fb4:	04 bf       	out	0x34, r16	; 52
    3fb6:	20 83       	st	Z, r18
    3fb8:	2f 91       	pop	r18
    3fba:	0f 91       	pop	r16
    3fbc:	ff 91       	pop	r31
    3fbe:	ef 91       	pop	r30
}
    3fc0:	08 95       	ret

00003fc2 <EEPROM_SplitWritePage>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    3fc2:	e0 ec       	ldi	r30, 0xC0	; 192
    3fc4:	f1 e0       	ldi	r31, 0x01	; 1
    3fc6:	90 91 cf 01 	lds	r25, 0x01CF
    3fca:	97 fd       	sbrc	r25, 7
    3fcc:	fa cf       	rjmp	.-12     	; 0x3fc2 <EEPROM_SplitWritePage>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Calculate page address */
	uint16_t address = (uint16_t)(pageAddr*EEPROM_PAGESIZE);
    3fce:	90 e0       	ldi	r25, 0x00	; 0
    3fd0:	88 0f       	add	r24, r24
    3fd2:	99 1f       	adc	r25, r25
    3fd4:	82 95       	swap	r24
    3fd6:	92 95       	swap	r25
    3fd8:	90 7f       	andi	r25, 0xF0	; 240
    3fda:	98 27       	eor	r25, r24
    3fdc:	80 7f       	andi	r24, 0xF0	; 240
    3fde:	98 27       	eor	r25, r24

	/* Set address. */
	NVM.ADDR0 = address & 0xFF;
    3fe0:	80 93 c0 01 	sts	0x01C0, r24
	NVM.ADDR1 = (address >> 8) & 0x1F;
    3fe4:	89 2f       	mov	r24, r25
    3fe6:	8f 71       	andi	r24, 0x1F	; 31
    3fe8:	81 83       	std	Z+1, r24	; 0x01
	NVM.ADDR2 = 0x00;
    3fea:	12 82       	std	Z+2, r1	; 0x02

	/* Issue EEPROM Split Write command. */
	NVM.CMD = NVM_CMD_WRITE_EEPROM_PAGE_gc;
    3fec:	84 e3       	ldi	r24, 0x34	; 52
    3fee:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    3ff0:	ef 93       	push	r30
    3ff2:	ff 93       	push	r31
    3ff4:	0f 93       	push	r16
    3ff6:	2f 93       	push	r18
    3ff8:	eb ec       	ldi	r30, 0xCB	; 203
    3ffa:	f1 e0       	ldi	r31, 0x01	; 1
    3ffc:	08 ed       	ldi	r16, 0xD8	; 216
    3ffe:	21 e0       	ldi	r18, 0x01	; 1
    4000:	04 bf       	out	0x34, r16	; 52
    4002:	20 83       	st	Z, r18
    4004:	2f 91       	pop	r18
    4006:	0f 91       	pop	r16
    4008:	ff 91       	pop	r31
    400a:	ef 91       	pop	r30
}
    400c:	08 95       	ret

0000400e <EEPROM_EraseAll>:
 */
void EEPROM_WaitForNVM( void )
{
	do {
		/* Block execution while waiting for the NVM to be ready. */
	} while ((NVM.STATUS & NVM_NVMBUSY_bm) == NVM_NVMBUSY_bm);
    400e:	80 91 cf 01 	lds	r24, 0x01CF
    4012:	87 fd       	sbrc	r24, 7
    4014:	fc cf       	rjmp	.-8      	; 0x400e <EEPROM_EraseAll>
{
	/* Wait until NVM is not busy. */
	EEPROM_WaitForNVM();

	/* Issue EEPROM Erase All command. */
	NVM.CMD = NVM_CMD_ERASE_EEPROM_gc;
    4016:	80 e3       	ldi	r24, 0x30	; 48
    4018:	e0 ec       	ldi	r30, 0xC0	; 192
    401a:	f1 e0       	ldi	r31, 0x01	; 1
    401c:	82 87       	std	Z+10, r24	; 0x0a
	NVM_EXEC();
    401e:	ef 93       	push	r30
    4020:	ff 93       	push	r31
    4022:	0f 93       	push	r16
    4024:	2f 93       	push	r18
    4026:	eb ec       	ldi	r30, 0xCB	; 203
    4028:	f1 e0       	ldi	r31, 0x01	; 1
    402a:	08 ed       	ldi	r16, 0xD8	; 216
    402c:	21 e0       	ldi	r18, 0x01	; 1
    402e:	04 bf       	out	0x34, r16	; 52
    4030:	20 83       	st	Z, r18
    4032:	2f 91       	pop	r18
    4034:	0f 91       	pop	r16
    4036:	ff 91       	pop	r31
    4038:	ef 91       	pop	r30
}
    403a:	08 95       	ret

0000403c <PORT_ConfigureInterrupt0>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 0.
 */
void PORT_ConfigureInterrupt0( PORT_t * port,
                               PORT_INT0LVL_t intLevel,
                               uint8_t pinMask )
{
    403c:	fc 01       	movw	r30, r24
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT0LVL_gm ) | intLevel;
    403e:	81 85       	ldd	r24, Z+9	; 0x09
    4040:	8c 7f       	andi	r24, 0xFC	; 252
    4042:	68 2b       	or	r22, r24
    4044:	61 87       	std	Z+9, r22	; 0x09
	port->INT0MASK = pinMask;
    4046:	42 87       	std	Z+10, r20	; 0x0a
}
    4048:	08 95       	ret

0000404a <PORT_ConfigureInterrupt1>:
 *  \param pinMask    A mask that selects the pins to associate with port interrupt 1.
 */
void PORT_ConfigureInterrupt1( PORT_t * port,
                               PORT_INT1LVL_t intLevel,
                               uint8_t pinMask )
{
    404a:	fc 01       	movw	r30, r24
	port->INTCTRL = ( port->INTCTRL & ~PORT_INT1LVL_gm ) | intLevel;
    404c:	81 85       	ldd	r24, Z+9	; 0x09
    404e:	83 7f       	andi	r24, 0xF3	; 243
    4050:	68 2b       	or	r22, r24
    4052:	61 87       	std	Z+9, r22	; 0x09
	port->INT1MASK = pinMask;
    4054:	43 87       	std	Z+11, r20	; 0x0b
}
    4056:	08 95       	ret

00004058 <PORT_ConfigurePins>:
                         uint8_t pinMask,
                         uint8_t slewRateEnable,
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
    4058:	ef 92       	push	r14
    405a:	0f 93       	push	r16
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    405c:	e0 2a       	or	r14, r16
    405e:	44 23       	and	r20, r20
    4060:	81 f0       	breq	.+32     	; 0x4082 <PORT_ConfigurePins+0x2a>
    4062:	30 e8       	ldi	r19, 0x80	; 128
    4064:	e3 2a       	or	r14, r19
    4066:	22 23       	and	r18, r18
    4068:	81 f4       	brne	.+32     	; 0x408a <PORT_ConfigurePins+0x32>
    406a:	20 e0       	ldi	r18, 0x00	; 0
    406c:	e2 2a       	or	r14, r18
	               (invertEnable ? PORT_INVEN_bm : 0);

	/* Configure the pins in one atomic operation. */

	/* Save status register. */
	uint8_t sreg = SREG;
    406e:	2f b7       	in	r18, 0x3f	; 63

	cli();
    4070:	f8 94       	cli
	PORTCFG.MPCMASK = pinMask;
    4072:	60 93 b0 00 	sts	0x00B0, r22
	port->PIN0CTRL = temp;
    4076:	fc 01       	movw	r30, r24
    4078:	e0 8a       	std	Z+16, r14	; 0x10

	/* Restore status register. */
	SREG = sreg;
    407a:	2f bf       	out	0x3f, r18	; 63
}
    407c:	0f 91       	pop	r16
    407e:	ef 90       	pop	r14
    4080:	08 95       	ret
                         uint8_t invertEnable,
                         PORT_OPC_t opc,
                         PORT_ISC_t isc)
{
	/* Build pin control register value. */
	uint8_t temp = (uint8_t) opc |
    4082:	30 e0       	ldi	r19, 0x00	; 0
    4084:	e3 2a       	or	r14, r19
    4086:	22 23       	and	r18, r18
    4088:	81 f3       	breq	.-32     	; 0x406a <PORT_ConfigurePins+0x12>
    408a:	20 e4       	ldi	r18, 0x40	; 64
    408c:	ef cf       	rjmp	.-34     	; 0x406c <PORT_ConfigurePins+0x14>

0000408e <PORT_MapVirtualPort0>:
 *
 *  \param realPort Selects the real port to map to virtual port 0.
 */
void PORT_MapVirtualPort0(PORTCFG_VP0MAP_t realPort)
{
	PORTCFG.VPCTRLA = ( PORTCFG.VPCTRLA & ~PORTCFG_VP0MAP_gm ) | realPort;
    408e:	e0 eb       	ldi	r30, 0xB0	; 176
    4090:	f0 e0       	ldi	r31, 0x00	; 0
    4092:	92 81       	ldd	r25, Z+2	; 0x02
    4094:	90 7f       	andi	r25, 0xF0	; 240
    4096:	98 2b       	or	r25, r24
    4098:	92 83       	std	Z+2, r25	; 0x02
}
    409a:	08 95       	ret

0000409c <PORT_MapVirtualPort1>:
 *
 *  \param realPort Selects the real port to map to virtual port 1.
 */
void PORT_MapVirtualPort1(PORTCFG_VP1MAP_t realPort)
{
	PORTCFG.VPCTRLA = ( PORTCFG.VPCTRLA & ~PORTCFG_VP1MAP_gm ) | realPort;
    409c:	e0 eb       	ldi	r30, 0xB0	; 176
    409e:	f0 e0       	ldi	r31, 0x00	; 0
    40a0:	92 81       	ldd	r25, Z+2	; 0x02
    40a2:	9f 70       	andi	r25, 0x0F	; 15
    40a4:	98 2b       	or	r25, r24
    40a6:	92 83       	std	Z+2, r25	; 0x02
}
    40a8:	08 95       	ret

000040aa <PORT_MapVirtualPort2>:
 *
 *  \param realPort Selects the real port to map to virtual port 2.
 */
void PORT_MapVirtualPort2(PORTCFG_VP2MAP_t realPort)
{
	PORTCFG.VPCTRLB = ( PORTCFG.VPCTRLB & ~PORTCFG_VP2MAP_gm ) | realPort;
    40aa:	e0 eb       	ldi	r30, 0xB0	; 176
    40ac:	f0 e0       	ldi	r31, 0x00	; 0
    40ae:	93 81       	ldd	r25, Z+3	; 0x03
    40b0:	90 7f       	andi	r25, 0xF0	; 240
    40b2:	98 2b       	or	r25, r24
    40b4:	93 83       	std	Z+3, r25	; 0x03
}
    40b6:	08 95       	ret

000040b8 <PORT_MapVirtualPort3>:
 *
 *  \param realPort Selects the real port to map to virtual port 3.
 */
void PORT_MapVirtualPort3(PORTCFG_VP3MAP_t realPort)
{
	PORTCFG.VPCTRLB = ( PORTCFG.VPCTRLB & ~PORTCFG_VP3MAP_gm ) | realPort;
    40b8:	e0 eb       	ldi	r30, 0xB0	; 176
    40ba:	f0 e0       	ldi	r31, 0x00	; 0
    40bc:	93 81       	ldd	r25, Z+3	; 0x03
    40be:	9f 70       	andi	r25, 0x0F	; 15
    40c0:	98 2b       	or	r25, r24
    40c2:	93 83       	std	Z+3, r25	; 0x03
}
    40c4:	08 95       	ret

000040c6 <SPI_MasterInit>:
                    SPI_MODE_t mode,
                    SPI_INTLVL_t intLevel,
                    bool clk2x,
                    SPI_PRESCALER_t clockDivision,
					bool enable)
{
    40c6:	8f 92       	push	r8
    40c8:	af 92       	push	r10
    40ca:	cf 92       	push	r12
    40cc:	ef 92       	push	r14
    40ce:	0f 93       	push	r16
    40d0:	df 93       	push	r29
    40d2:	cf 93       	push	r28
    40d4:	cd b7       	in	r28, 0x3d	; 61
    40d6:	de b7       	in	r29, 0x3e	; 62
    40d8:	fc 01       	movw	r30, r24
	spi->module         = module;
    40da:	60 83       	st	Z, r22
    40dc:	71 83       	std	Z+1, r23	; 0x01
	spi->port           = port;
    40de:	42 83       	std	Z+2, r20	; 0x02
    40e0:	53 83       	std	Z+3, r21	; 0x03
	spi->interrupted    = false;
    40e2:	14 82       	std	Z+4, r1	; 0x04

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    40e4:	cc 20       	and	r12, r12
    40e6:	39 f1       	breq	.+78     	; 0x4136 <SPI_MasterInit+0x70>
    40e8:	30 e8       	ldi	r19, 0x80	; 128
    40ea:	88 20       	and	r8, r8
    40ec:	39 f1       	breq	.+78     	; 0x413c <SPI_MasterInit+0x76>
    40ee:	90 e4       	ldi	r25, 0x40	; 64
    40f0:	22 23       	and	r18, r18
    40f2:	39 f5       	brne	.+78     	; 0x4142 <SPI_MasterInit+0x7c>
    40f4:	80 e0       	ldi	r24, 0x00	; 0
    40f6:	00 61       	ori	r16, 0x10	; 16
    40f8:	0a 29       	or	r16, r10
    40fa:	03 2b       	or	r16, r19
    40fc:	09 2b       	or	r16, r25
    40fe:	08 2b       	or	r16, r24
    4100:	db 01       	movw	r26, r22
    4102:	0c 93       	st	X, r16
	                      (lsbFirst ? SPI_DORD_bm  : 0) |  /* Data order. */
	                      SPI_MASTER_bm |                  /* SPI master. */
	                      mode;                            /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    4104:	a0 81       	ld	r26, Z
    4106:	b1 81       	ldd	r27, Z+1	; 0x01
    4108:	11 96       	adiw	r26, 0x01	; 1
    410a:	ec 92       	st	X, r14
	spi->module->STATUS = SPI_IF_bm;
    410c:	a0 81       	ld	r26, Z
    410e:	b1 81       	ldd	r27, Z+1	; 0x01
    4110:	80 e8       	ldi	r24, 0x80	; 128
    4112:	12 96       	adiw	r26, 0x02	; 2
    4114:	8c 93       	st	X, r24
    4116:	12 97       	sbiw	r26, 0x02	; 2

	/* No assigned data packet. */
	spi->dataPacket = NULL;
    4118:	15 82       	std	Z+5, r1	; 0x05
    411a:	16 82       	std	Z+6, r1	; 0x06

 	/* MOSI and SCK as output. */
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
    411c:	02 80       	ldd	r0, Z+2	; 0x02
    411e:	f3 81       	ldd	r31, Z+3	; 0x03
    4120:	e0 2d       	mov	r30, r0
    4122:	80 ea       	ldi	r24, 0xA0	; 160
    4124:	81 83       	std	Z+1, r24	; 0x01
}
    4126:	cf 91       	pop	r28
    4128:	df 91       	pop	r29
    412a:	0f 91       	pop	r16
    412c:	ef 90       	pop	r14
    412e:	cf 90       	pop	r12
    4130:	af 90       	pop	r10
    4132:	8f 90       	pop	r8
    4134:	08 95       	ret
{
	spi->module         = module;
	spi->port           = port;
	spi->interrupted    = false;

	spi->module->CTRL   = clockDivision |                  /* SPI prescaler. */
    4136:	30 e0       	ldi	r19, 0x00	; 0
    4138:	88 20       	and	r8, r8
    413a:	c9 f6       	brne	.-78     	; 0x40ee <SPI_MasterInit+0x28>
    413c:	90 e0       	ldi	r25, 0x00	; 0
    413e:	22 23       	and	r18, r18
    4140:	c9 f2       	breq	.-78     	; 0x40f4 <SPI_MasterInit+0x2e>
    4142:	80 e2       	ldi	r24, 0x20	; 32
    4144:	d8 cf       	rjmp	.-80     	; 0x40f6 <SPI_MasterInit+0x30>

00004146 <SPI_MasterEnable>:
	spi->port->DIRSET  = SPI_MOSI_bm | SPI_SCK_bm;
}

void SPI_MasterEnable(SPI_Master_t *spi, uint8_t bEnable)
{
	if (bEnable)
    4146:	66 23       	and	r22, r22
    4148:	41 f4       	brne	.+16     	; 0x415a <SPI_MasterEnable+0x14>
		spi->module->CTRL |= SPI_ENABLE_bm;
	else
		spi->module->CTRL &= ~(SPI_ENABLE_bm);
    414a:	dc 01       	movw	r26, r24
    414c:	ed 91       	ld	r30, X+
    414e:	fc 91       	ld	r31, X
    4150:	11 97       	sbiw	r26, 0x01	; 1
    4152:	80 81       	ld	r24, Z
    4154:	8f 7b       	andi	r24, 0xBF	; 191
    4156:	80 83       	st	Z, r24
    4158:	08 95       	ret
}

void SPI_MasterEnable(SPI_Master_t *spi, uint8_t bEnable)
{
	if (bEnable)
		spi->module->CTRL |= SPI_ENABLE_bm;
    415a:	dc 01       	movw	r26, r24
    415c:	ed 91       	ld	r30, X+
    415e:	fc 91       	ld	r31, X
    4160:	11 97       	sbiw	r26, 0x01	; 1
    4162:	80 81       	ld	r24, Z
    4164:	80 64       	ori	r24, 0x40	; 64
    4166:	80 83       	st	Z, r24
    4168:	08 95       	ret

0000416a <SPI_SlaveInit>:
                   SPI_t *module,
                   PORT_t *port,
                   bool lsbFirst,
                   SPI_MODE_t mode,
                   SPI_INTLVL_t intLevel)
{
    416a:	ef 92       	push	r14
    416c:	0f 93       	push	r16
    416e:	fc 01       	movw	r30, r24
	/* SPI module. */
	spi->module       = module;
    4170:	60 83       	st	Z, r22
    4172:	71 83       	std	Z+1, r23	; 0x01
	spi->port         = port;
    4174:	42 83       	std	Z+2, r20	; 0x02
    4176:	53 83       	std	Z+3, r21	; 0x03

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    4178:	22 23       	and	r18, r18
    417a:	89 f4       	brne	.+34     	; 0x419e <SPI_SlaveInit+0x34>
    417c:	80 e4       	ldi	r24, 0x40	; 64
    417e:	08 2b       	or	r16, r24
    4180:	db 01       	movw	r26, r22
    4182:	0c 93       	st	X, r16
	                    (lsbFirst ? SPI_DORD_bm : 0) | /* Data order. */
	                    mode;                          /* SPI mode. */

	/* Interrupt level. */
	spi->module->INTCTRL = intLevel;
    4184:	a0 81       	ld	r26, Z
    4186:	b1 81       	ldd	r27, Z+1	; 0x01
    4188:	11 96       	adiw	r26, 0x01	; 1
    418a:	ec 92       	st	X, r14
    418c:	11 97       	sbiw	r26, 0x01	; 1

	/* MISO as output. */
	spi->port->DIRSET = SPI_MISO_bm;
    418e:	02 80       	ldd	r0, Z+2	; 0x02
    4190:	f3 81       	ldd	r31, Z+3	; 0x03
    4192:	e0 2d       	mov	r30, r0
    4194:	80 e4       	ldi	r24, 0x40	; 64
    4196:	81 83       	std	Z+1, r24	; 0x01
}
    4198:	0f 91       	pop	r16
    419a:	ef 90       	pop	r14
    419c:	08 95       	ret
{
	/* SPI module. */
	spi->module       = module;
	spi->port         = port;

	spi->module->CTRL = SPI_ENABLE_bm |                /* Enable SPI module. */
    419e:	80 e6       	ldi	r24, 0x60	; 96
    41a0:	ee cf       	rjmp	.-36     	; 0x417e <SPI_SlaveInit+0x14>

000041a2 <SPI_MasterCreateDataPacket>:
                                const uint8_t *transmitData,
                                uint8_t *receiveData,
                                uint8_t bytesToTransceive,
                                PORT_t *ssPort,
                                uint8_t ssPinMask)
{
    41a2:	ef 92       	push	r14
    41a4:	0f 93       	push	r16
    41a6:	1f 93       	push	r17
    41a8:	fc 01       	movw	r30, r24
	dataPacket->ssPort            = ssPort;
    41aa:	00 83       	st	Z, r16
    41ac:	11 83       	std	Z+1, r17	; 0x01
	dataPacket->ssPinMask         = ssPinMask;
    41ae:	e2 82       	std	Z+2, r14	; 0x02
	dataPacket->transmitData      = transmitData;
    41b0:	63 83       	std	Z+3, r22	; 0x03
    41b2:	74 83       	std	Z+4, r23	; 0x04
	dataPacket->receiveData       = receiveData;
    41b4:	45 83       	std	Z+5, r20	; 0x05
    41b6:	56 83       	std	Z+6, r21	; 0x06
	dataPacket->bytesToTransceive  = bytesToTransceive;
    41b8:	27 83       	std	Z+7, r18	; 0x07
	dataPacket->bytesTransceived   = 0;
    41ba:	10 86       	std	Z+8, r1	; 0x08
	dataPacket->complete          = false;
    41bc:	11 86       	std	Z+9, r1	; 0x09
}
    41be:	1f 91       	pop	r17
    41c0:	0f 91       	pop	r16
    41c2:	ef 90       	pop	r14
    41c4:	08 95       	ret

000041c6 <SPI_MasterInterruptHandler>:
 *  a pointer to the related SPI_Master_t struct as argument.
 *
 *  \param spi        Pointer to the modules own SPI_Master_t struct.
 */
void SPI_MasterInterruptHandler(SPI_Master_t *spi)
{
    41c6:	cf 93       	push	r28
    41c8:	df 93       	push	r29
    41ca:	fc 01       	movw	r30, r24
	uint8_t data;
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;
    41cc:	a5 81       	ldd	r26, Z+5	; 0x05
    41ce:	b6 81       	ldd	r27, Z+6	; 0x06
    41d0:	18 96       	adiw	r26, 0x08	; 8
    41d2:	8c 91       	ld	r24, X
    41d4:	18 97       	sbiw	r26, 0x08	; 8

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
    41d6:	c0 81       	ld	r28, Z
    41d8:	d1 81       	ldd	r29, Z+1	; 0x01
    41da:	98 81       	ld	r25, Y
    41dc:	94 ff       	sbrs	r25, 4
    41de:	37 c0       	rjmp	.+110    	; 0x424e <SPI_MasterInterruptHandler+0x88>
	}

	else {  /* Data interrupt. */

		/* Store received data. */
		data = spi->module->DATA;
    41e0:	9b 81       	ldd	r25, Y+3	; 0x03
		spi->dataPacket->receiveData[bytesTransceived] = data;
    41e2:	15 96       	adiw	r26, 0x05	; 5
    41e4:	0d 90       	ld	r0, X+
    41e6:	bc 91       	ld	r27, X
    41e8:	a0 2d       	mov	r26, r0
    41ea:	a8 0f       	add	r26, r24
    41ec:	b1 1d       	adc	r27, r1
    41ee:	9c 93       	st	X, r25

		/* Next byte. */
		bytesTransceived++;
    41f0:	8f 5f       	subi	r24, 0xFF	; 255

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
    41f2:	a5 81       	ldd	r26, Z+5	; 0x05
    41f4:	b6 81       	ldd	r27, Z+6	; 0x06
    41f6:	17 96       	adiw	r26, 0x07	; 7
    41f8:	9c 91       	ld	r25, X
    41fa:	17 97       	sbiw	r26, 0x07	; 7
    41fc:	89 17       	cp	r24, r25
    41fe:	a0 f0       	brcs	.+40     	; 0x4228 <SPI_MasterInterruptHandler+0x62>

		/* Transmission complete. */
		else {

			/* Release SS to slave(s). */
			uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    4200:	12 96       	adiw	r26, 0x02	; 2
    4202:	9c 91       	ld	r25, X
    4204:	12 97       	sbiw	r26, 0x02	; 2
			SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    4206:	0d 90       	ld	r0, X+
    4208:	bc 91       	ld	r27, X
    420a:	a0 2d       	mov	r26, r0
    420c:	15 96       	adiw	r26, 0x05	; 5
    420e:	9c 93       	st	X, r25

			spi->dataPacket->complete = true;
    4210:	a5 81       	ldd	r26, Z+5	; 0x05
    4212:	b6 81       	ldd	r27, Z+6	; 0x06
    4214:	91 e0       	ldi	r25, 0x01	; 1
    4216:	19 96       	adiw	r26, 0x09	; 9
    4218:	9c 93       	st	X, r25
    421a:	19 97       	sbiw	r26, 0x09	; 9
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    421c:	18 96       	adiw	r26, 0x08	; 8
    421e:	8c 93       	st	X, r24
    4220:	18 97       	sbiw	r26, 0x08	; 8
}
    4222:	df 91       	pop	r29
    4224:	cf 91       	pop	r28
    4226:	08 95       	ret
		bytesTransceived++;

		/* If more data. */
		if (bytesTransceived < spi->dataPacket->bytesToTransceive) {
			/* Put data byte in transmit data register. */
			data = spi->dataPacket->transmitData[bytesTransceived];
    4228:	13 96       	adiw	r26, 0x03	; 3
    422a:	0d 90       	ld	r0, X+
    422c:	bc 91       	ld	r27, X
    422e:	a0 2d       	mov	r26, r0
    4230:	a8 0f       	add	r26, r24
    4232:	b1 1d       	adc	r27, r1
    4234:	9c 91       	ld	r25, X
			spi->module->DATA = data;
    4236:	a0 81       	ld	r26, Z
    4238:	b1 81       	ldd	r27, Z+1	; 0x01
    423a:	13 96       	adiw	r26, 0x03	; 3
    423c:	9c 93       	st	X, r25
    423e:	a5 81       	ldd	r26, Z+5	; 0x05
    4240:	b6 81       	ldd	r27, Z+6	; 0x06

			spi->dataPacket->complete = true;
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    4242:	18 96       	adiw	r26, 0x08	; 8
    4244:	8c 93       	st	X, r24
    4246:	18 97       	sbiw	r26, 0x08	; 8
}
    4248:	df 91       	pop	r29
    424a:	cf 91       	pop	r28
    424c:	08 95       	ret
	uint8_t bytesTransceived = spi->dataPacket->bytesTransceived;

	/* If SS pin interrupt (SS used and pulled low).
	*  No data received at this point. */
	if ( !(spi->module->CTRL & SPI_MASTER_bm) ) {
		spi->interrupted = true;
    424e:	91 e0       	ldi	r25, 0x01	; 1
    4250:	94 83       	std	Z+4, r25	; 0x04

			spi->dataPacket->complete = true;
		}
	}
	/* Write back bytesTransceived to data packet. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    4252:	18 96       	adiw	r26, 0x08	; 8
    4254:	8c 93       	st	X, r24
    4256:	18 97       	sbiw	r26, 0x08	; 8
}
    4258:	df 91       	pop	r29
    425a:	cf 91       	pop	r28
    425c:	08 95       	ret

0000425e <SPI_MasterInterruptTransceivePacket>:
 *  \retval SPI_BUSY          The SPI module is busy.
 *  \retval SPI_INTERRUPTED   The transmission was interrupted by another master.
 */
uint8_t SPI_MasterInterruptTransceivePacket(SPI_Master_t *spi,
                                            SPI_DataPacket_t *dataPacket)
{
    425e:	cf 93       	push	r28
    4260:	df 93       	push	r29
    4262:	fc 01       	movw	r30, r24
    4264:	db 01       	movw	r26, r22
	uint8_t data;
	bool interrupted = spi->interrupted;
    4266:	94 81       	ldd	r25, Z+4	; 0x04

	/* If no packets sent so far. */
	if (spi->dataPacket == NULL) {
    4268:	c5 81       	ldd	r28, Z+5	; 0x05
    426a:	d6 81       	ldd	r29, Z+6	; 0x06
    426c:	20 97       	sbiw	r28, 0x00	; 0
    426e:	29 f0       	breq	.+10     	; 0x427a <SPI_MasterInterruptTransceivePacket+0x1c>
		spi->dataPacket = dataPacket;
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
    4270:	89 85       	ldd	r24, Y+9	; 0x09
    4272:	88 23       	and	r24, r24
    4274:	61 f1       	breq	.+88     	; 0x42ce <SPI_MasterInterruptTransceivePacket+0x70>
		return (SPI_BUSY);
	}

	/* If interrupted by other master. */
	else if (interrupted) {
    4276:	99 23       	and	r25, r25
    4278:	09 f5       	brne	.+66     	; 0x42bc <SPI_MasterInterruptTransceivePacket+0x5e>
		}
	}

	/* NOT interrupted by other master.
	* Start transmission. */
	spi->dataPacket = dataPacket;
    427a:	a5 83       	std	Z+5, r26	; 0x05
    427c:	b6 83       	std	Z+6, r27	; 0x06
	spi->dataPacket->complete = false;
    427e:	19 96       	adiw	r26, 0x09	; 9
    4280:	1c 92       	st	X, r1
    4282:	19 97       	sbiw	r26, 0x09	; 9
	spi->interrupted = false;
    4284:	14 82       	std	Z+4, r1	; 0x04

	/* SS to slave(s) low.*/
	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    4286:	12 96       	adiw	r26, 0x02	; 2
    4288:	8c 91       	ld	r24, X
    428a:	12 97       	sbiw	r26, 0x02	; 2
	SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    428c:	0d 90       	ld	r0, X+
    428e:	bc 91       	ld	r27, X
    4290:	a0 2d       	mov	r26, r0
    4292:	16 96       	adiw	r26, 0x06	; 6
    4294:	8c 93       	st	X, r24

	spi->dataPacket->bytesTransceived = 0;
    4296:	a5 81       	ldd	r26, Z+5	; 0x05
    4298:	b6 81       	ldd	r27, Z+6	; 0x06
    429a:	18 96       	adiw	r26, 0x08	; 8
    429c:	1c 92       	st	X, r1

	/* Start sending data. */
	data = spi->dataPacket->transmitData[0];
    429e:	a5 81       	ldd	r26, Z+5	; 0x05
    42a0:	b6 81       	ldd	r27, Z+6	; 0x06
    42a2:	13 96       	adiw	r26, 0x03	; 3
    42a4:	0d 90       	ld	r0, X+
    42a6:	bc 91       	ld	r27, X
    42a8:	a0 2d       	mov	r26, r0
    42aa:	8c 91       	ld	r24, X
	spi->module->DATA = data;
    42ac:	01 90       	ld	r0, Z+
    42ae:	f0 81       	ld	r31, Z
    42b0:	e0 2d       	mov	r30, r0
    42b2:	83 83       	std	Z+3, r24	; 0x03

	/* Successs */
	return (SPI_OK);
    42b4:	80 e0       	ldi	r24, 0x00	; 0
}
    42b6:	df 91       	pop	r29
    42b8:	cf 91       	pop	r28
    42ba:	08 95       	ret
	}

	/* If interrupted by other master. */
	else if (interrupted) {
		/* If SS released. */
		if (spi->port->OUT & SPI_SS_bm) {
    42bc:	c2 81       	ldd	r28, Z+2	; 0x02
    42be:	d3 81       	ldd	r29, Z+3	; 0x03
    42c0:	8c 81       	ldd	r24, Y+4	; 0x04
    42c2:	84 fd       	sbrc	r24, 4
    42c4:	da cf       	rjmp	.-76     	; 0x427a <SPI_MasterInterruptTransceivePacket+0x1c>
			/* No longer interrupted. */
			interrupted = false;
		}
		else {
			return (SPI_INTERRUPTED);
    42c6:	81 e0       	ldi	r24, 0x01	; 1
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
    42c8:	df 91       	pop	r29
    42ca:	cf 91       	pop	r28
    42cc:	08 95       	ret
		spi->dataPacket = dataPacket;
	}

	/* If ongoing transmission. */
	else if (spi->dataPacket->complete == false) {
		return (SPI_BUSY);
    42ce:	82 e0       	ldi	r24, 0x02	; 2
	data = spi->dataPacket->transmitData[0];
	spi->module->DATA = data;

	/* Successs */
	return (SPI_OK);
}
    42d0:	df 91       	pop	r29
    42d2:	cf 91       	pop	r28
    42d4:	08 95       	ret

000042d6 <SPI_MasterTransceiveByte>:
 *  \param TXdata     Data to transmit to slave.
 *
 *  \return           Data received from slave.
 */
uint8_t SPI_MasterTransceiveByte(SPI_Master_t *spi, uint8_t TXdata)
{
    42d6:	fc 01       	movw	r30, r24
	/* Send pattern. */
	spi->module->DATA = TXdata;
    42d8:	a0 81       	ld	r26, Z
    42da:	b1 81       	ldd	r27, Z+1	; 0x01
    42dc:	13 96       	adiw	r26, 0x03	; 3
    42de:	6c 93       	st	X, r22
    42e0:	13 97       	sbiw	r26, 0x03	; 3
    42e2:	01 90       	ld	r0, Z+
    42e4:	f0 81       	ld	r31, Z
    42e6:	e0 2d       	mov	r30, r0

	/* Wait for transmission complete. */
	while(!(spi->module->STATUS & SPI_IF_bm)) {
    42e8:	82 81       	ldd	r24, Z+2	; 0x02
    42ea:	87 ff       	sbrs	r24, 7
    42ec:	fd cf       	rjmp	.-6      	; 0x42e8 <SPI_MasterTransceiveByte+0x12>

	}
	/* Read received data. */
	uint8_t result = spi->module->DATA;
    42ee:	83 81       	ldd	r24, Z+3	; 0x03

	return(result);
}
    42f0:	08 95       	ret

000042f2 <SPI_MasterTransceivePacket>:
 *  \retval true	   Success
 *  \retval false	   Failure
 */
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
    42f2:	cf 93       	push	r28
    42f4:	df 93       	push	r29
    42f6:	fc 01       	movw	r30, r24
    42f8:	eb 01       	movw	r28, r22
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
    42fa:	20 97       	sbiw	r28, 0x00	; 0
    42fc:	09 f4       	brne	.+2      	; 0x4300 <SPI_MasterTransceivePacket+0xe>
    42fe:	4c c0       	rjmp	.+152    	; 0x4398 <SPI_MasterTransceivePacket+0xa6>
		return false;
	}

	/* Assign datapacket to SPI module. */
	spi->dataPacket = dataPacket;
    4300:	65 83       	std	Z+5, r22	; 0x05
    4302:	76 83       	std	Z+6, r23	; 0x06

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;
    4304:	3a 81       	ldd	r19, Y+2	; 0x02

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    4306:	a8 81       	ld	r26, Y
    4308:	b9 81       	ldd	r27, Y+1	; 0x01
    430a:	10 97       	sbiw	r26, 0x00	; 0
    430c:	09 f4       	brne	.+2      	; 0x4310 <SPI_MasterTransceivePacket+0x1e>
    430e:	42 c0       	rjmp	.+132    	; 0x4394 <SPI_MasterTransceivePacket+0xa2>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
    4310:	16 96       	adiw	r26, 0x06	; 6
    4312:	3c 93       	st	X, r19
    4314:	a5 81       	ldd	r26, Z+5	; 0x05
    4316:	b6 81       	ldd	r27, Z+6	; 0x06
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
    4318:	4f 81       	ldd	r20, Y+7	; 0x07
	while (bytesTransceived < bytesToTransceive) {
    431a:	44 23       	and	r20, r20
    431c:	29 f1       	breq	.+74     	; 0x4368 <SPI_MasterTransceivePacket+0x76>
    431e:	80 e0       	ldi	r24, 0x00	; 0
    4320:	90 e0       	ldi	r25, 0x00	; 0

		/* Send pattern. */
		uint8_t data = spi->dataPacket->transmitData[bytesTransceived];
    4322:	13 96       	adiw	r26, 0x03	; 3
    4324:	0d 90       	ld	r0, X+
    4326:	bc 91       	ld	r27, X
    4328:	a0 2d       	mov	r26, r0
    432a:	a8 0f       	add	r26, r24
    432c:	b9 1f       	adc	r27, r25
    432e:	2c 91       	ld	r18, X
		spi->module->DATA = data;
    4330:	a0 81       	ld	r26, Z
    4332:	b1 81       	ldd	r27, Z+1	; 0x01
    4334:	13 96       	adiw	r26, 0x03	; 3
    4336:	2c 93       	st	X, r18
    4338:	a0 81       	ld	r26, Z
    433a:	b1 81       	ldd	r27, Z+1	; 0x01

		/* Wait for transmission complete. */
		while(!(spi->module->STATUS & SPI_IF_bm)) {
    433c:	12 96       	adiw	r26, 0x02	; 2
    433e:	2c 91       	ld	r18, X
    4340:	12 97       	sbiw	r26, 0x02	; 2
    4342:	27 ff       	sbrs	r18, 7
    4344:	fb cf       	rjmp	.-10     	; 0x433c <SPI_MasterTransceivePacket+0x4a>

		}
		/* Read received data. */
		data = spi->module->DATA;
    4346:	13 96       	adiw	r26, 0x03	; 3
    4348:	2c 91       	ld	r18, X
		spi->dataPacket->receiveData[bytesTransceived] = data;
    434a:	a5 81       	ldd	r26, Z+5	; 0x05
    434c:	b6 81       	ldd	r27, Z+6	; 0x06
    434e:	15 96       	adiw	r26, 0x05	; 5
    4350:	0d 90       	ld	r0, X+
    4352:	bc 91       	ld	r27, X
    4354:	a0 2d       	mov	r26, r0
    4356:	a8 0f       	add	r26, r24
    4358:	b9 1f       	adc	r27, r25
    435a:	2c 93       	st	X, r18
    435c:	01 96       	adiw	r24, 0x01	; 1
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
	uint8_t bytesToTransceive = dataPacket->bytesToTransceive;
	while (bytesTransceived < bytesToTransceive) {
    435e:	84 17       	cp	r24, r20
    4360:	20 f4       	brcc	.+8      	; 0x436a <SPI_MasterTransceivePacket+0x78>
    4362:	a5 81       	ldd	r26, Z+5	; 0x05
    4364:	b6 81       	ldd	r27, Z+6	; 0x06
    4366:	dd cf       	rjmp	.-70     	; 0x4322 <SPI_MasterTransceivePacket+0x30>
		/* SS to slave(s) low. */
		SPI_MasterSSLow(spi->dataPacket->ssPort, ssPinMask);
	}

	/* Transceive bytes. */
	uint8_t bytesTransceived = 0;
    4368:	40 e0       	ldi	r20, 0x00	; 0

		bytesTransceived++;
	}

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    436a:	a5 81       	ldd	r26, Z+5	; 0x05
    436c:	b6 81       	ldd	r27, Z+6	; 0x06
    436e:	cd 91       	ld	r28, X+
    4370:	dc 91       	ld	r29, X
    4372:	11 97       	sbiw	r26, 0x01	; 1
    4374:	20 97       	sbiw	r28, 0x00	; 0
    4376:	19 f0       	breq	.+6      	; 0x437e <SPI_MasterTransceivePacket+0x8c>
		/* Release SS to slave(s). */
		SPI_MasterSSHigh(spi->dataPacket->ssPort, ssPinMask);
    4378:	3d 83       	std	Y+5, r19	; 0x05
    437a:	a5 81       	ldd	r26, Z+5	; 0x05
    437c:	b6 81       	ldd	r27, Z+6	; 0x06
	}

	/* Set variables to indicate that transmission is complete. */
	spi->dataPacket->bytesTransceived = bytesTransceived;
    437e:	18 96       	adiw	r26, 0x08	; 8
    4380:	4c 93       	st	X, r20
    4382:	18 97       	sbiw	r26, 0x08	; 8
	spi->dataPacket->complete = true;
    4384:	05 80       	ldd	r0, Z+5	; 0x05
    4386:	f6 81       	ldd	r31, Z+6	; 0x06
    4388:	e0 2d       	mov	r30, r0
    438a:	81 e0       	ldi	r24, 0x01	; 1
    438c:	81 87       	std	Z+9, r24	; 0x09

	/* Report success. */
	return true;
}
    438e:	df 91       	pop	r29
    4390:	cf 91       	pop	r28
    4392:	08 95       	ret
	spi->dataPacket = dataPacket;

	uint8_t ssPinMask = spi->dataPacket->ssPinMask;

	/* If SS signal to slave(s). */
	if (spi->dataPacket->ssPort != NULL) {
    4394:	db 01       	movw	r26, r22
    4396:	c0 cf       	rjmp	.-128    	; 0x4318 <SPI_MasterTransceivePacket+0x26>
bool SPI_MasterTransceivePacket(SPI_Master_t *spi,
                                SPI_DataPacket_t *dataPacket)
{
	/* Check if data packet has been created. */
	if(dataPacket == NULL) {
		return false;
    4398:	80 e0       	ldi	r24, 0x00	; 0
	spi->dataPacket->bytesTransceived = bytesTransceived;
	spi->dataPacket->complete = true;

	/* Report success. */
	return true;
}
    439a:	df 91       	pop	r29
    439c:	cf 91       	pop	r28
    439e:	08 95       	ret

000043a0 <swUART_PutChar>:
 *	Input: uint8_t uiData - 8bit char to write
 *	Output: none
 *****************************************************************/
void swUART_PutChar ( uint8_t uiData )
{	 
	asm volatile (
    43a0:	1f 93       	push	r17
    43a2:	1f b7       	in	r17, 0x3f	; 63
    43a4:	1f 93       	push	r17
    43a6:	8f 93       	push	r24

000043a8 <pchar>:
    43a8:	1a e0       	ldi	r17, 0x0A	; 10
    43aa:	80 95       	com	r24
    43ac:	08 94       	sec

000043ae <pchar0>:
    43ae:	10 f4       	brcc	.+4      	; 0x43b4 <pchar1>
    43b0:	8b 98       	cbi	0x11, 3	; 17
    43b2:	02 c0       	rjmp	.+4      	; 0x43b8 <pchar2>

000043b4 <pchar1>:
    43b4:	8b 9a       	sbi	0x11, 3	; 17
	...

000043b8 <pchar2>:
    43b8:	11 d1       	rcall	.+546    	; 0x45dc <swUART_Delay_Tx>
    43ba:	10 d1       	rcall	.+544    	; 0x45dc <swUART_Delay_Tx>
    43bc:	86 95       	lsr	r24
    43be:	1a 95       	dec	r17
    43c0:	b1 f7       	brne	.-20     	; 0x43ae <pchar0>
    43c2:	8f 91       	pop	r24
    43c4:	1f 91       	pop	r17
    43c6:	1f bf       	out	0x3f, r17	; 63
    43c8:	1f 91       	pop	r17
    43ca:	08 95       	ret

000043cc <swUART_ReadChar>:
 *	Input: none
 *	Output: uint8_t - read value
 *****************************************************************/
uint8_t swUART_ReadChar ( void )
{
	asm volatile (
    43cc:	3f 93       	push	r19
    43ce:	3f b7       	in	r19, 0x3f	; 63
    43d0:	3f 93       	push	r19

000043d2 <getchar>:
    43d2:	39 e0       	ldi	r19, 0x09	; 9

000043d4 <getchar1>:
    43d4:	92 99       	sbic	0x12, 2	; 18
    43d6:	fe cf       	rjmp	.-4      	; 0x43d4 <getchar1>
    43d8:	08 d1       	rcall	.+528    	; 0x45ea <swUART_Delay_Rx>

000043da <getchar2>:
    43da:	07 d1       	rcall	.+526    	; 0x45ea <swUART_Delay_Rx>
    43dc:	06 d1       	rcall	.+524    	; 0x45ea <swUART_Delay_Rx>
    43de:	88 94       	clc
    43e0:	92 99       	sbic	0x12, 2	; 18
    43e2:	08 94       	sec
    43e4:	3a 95       	dec	r19
    43e6:	11 f0       	breq	.+4      	; 0x43ec <getchar3>
    43e8:	87 95       	ror	r24
    43ea:	f7 cf       	rjmp	.-18     	; 0x43da <getchar2>

000043ec <getchar3>:
    43ec:	3f 91       	pop	r19
    43ee:	3f bf       	out	0x3f, r19	; 63
    43f0:	3f 91       	pop	r19
    43f2:	08 95       	ret

000043f4 <swUART_ConfigureDevice>:
 *	Input: iIntLevel - the Rx interrupt level 
					   (see swUART_SetRxInterruptLevel function).
 *	Output: none
 *****************************************************************/
void swUART_ConfigureDevice ( int iIntLevel )
{
    43f4:	ef 92       	push	r14
    43f6:	0f 93       	push	r16
    43f8:	cf 93       	push	r28
    43fa:	df 93       	push	r29
    43fc:	ec 01       	movw	r28, r24
	// Map port B to Virtual Port 0
	#ifdef UART_PORT_IS_PORTA
		PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTA_gc );	
	#else
		#ifdef UART_PORT_IS_PORTB
			PORT_MapVirtualPort0( PORTCFG_VP0MAP_PORTB_gc );
    43fe:	81 e0       	ldi	r24, 0x01	; 1
    4400:	0e 94 47 20 	call	0x408e	; 0x408e <PORT_MapVirtualPort0>
			#endif 
		#endif 
	#endif
	
		
	stdout = &file_str;
    4404:	82 e1       	ldi	r24, 0x12	; 18
    4406:	92 e2       	ldi	r25, 0x22	; 34
    4408:	80 93 27 23 	sts	0x2327, r24
    440c:	90 93 28 23 	sts	0x2328, r25
	stdin = &file_str;
    4410:	80 93 25 23 	sts	0x2325, r24
    4414:	90 93 26 23 	sts	0x2326, r25
	
	// configure pin directions
	VPORT0_DIR &= ~(1<<UART_RX_PIN);
    4418:	82 98       	cbi	0x10, 2	; 16
	VPORT0_DIR |= (1<<UART_TX_PIN);
    441a:	83 9a       	sbi	0x10, 3	; 16
	VPORT0_OUT |= (1<<UART_TX_PIN);
    441c:	8b 9a       	sbi	0x11, 3	; 17
 *					4 - interrupt enabled at high priority
 *	Output: none
 *****************************************************************/
void swUART_SetRxInterruptLevel ( int iIntLevel )
{
	if (iIntLevel != 0)
    441e:	20 97       	sbiw	r28, 0x00	; 0
    4420:	39 f1       	breq	.+78     	; 0x4470 <swUART_ConfigureDevice+0x7c>
	{
		bInterruptEnabled = true;
    4422:	81 e0       	ldi	r24, 0x01	; 1
    4424:	80 93 94 22 	sts	0x2294, r24
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    4428:	80 e2       	ldi	r24, 0x20	; 32
    442a:	96 e0       	ldi	r25, 0x06	; 6
    442c:	64 e0       	ldi	r22, 0x04	; 4
    442e:	40 e0       	ldi	r20, 0x00	; 0
    4430:	20 e0       	ldi	r18, 0x00	; 0
    4432:	00 e0       	ldi	r16, 0x00	; 0
    4434:	52 e0       	ldi	r21, 0x02	; 2
    4436:	e5 2e       	mov	r14, r21
    4438:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    443c:	c2 30       	cpi	r28, 0x02	; 2
    443e:	d1 05       	cpc	r29, r1
    4440:	a9 f1       	breq	.+106    	; 0x44ac <swUART_ConfigureDevice+0xb8>
    4442:	c3 30       	cpi	r28, 0x03	; 3
    4444:	d1 05       	cpc	r29, r1
    4446:	2c f5       	brge	.+74     	; 0x4492 <swUART_ConfigureDevice+0x9e>
    4448:	c1 30       	cpi	r28, 0x01	; 1
    444a:	d1 05       	cpc	r29, r1
    444c:	31 f4       	brne	.+12     	; 0x445a <swUART_ConfigureDevice+0x66>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
    444e:	80 e2       	ldi	r24, 0x20	; 32
    4450:	96 e0       	ldi	r25, 0x06	; 6
    4452:	60 e0       	ldi	r22, 0x00	; 0
    4454:	44 e0       	ldi	r20, 0x04	; 4
    4456:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
			break;
			default:
			break;
		}				
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
    445a:	80 91 a2 00 	lds	r24, 0x00A2
    445e:	87 60       	ori	r24, 0x07	; 7
    4460:	e0 ea       	ldi	r30, 0xA0	; 160
    4462:	f0 e0       	ldi	r31, 0x00	; 0
    4464:	82 83       	std	Z+2, r24	; 0x02
	VPORT0_DIR &= ~(1<<UART_RX_PIN);
	VPORT0_DIR |= (1<<UART_TX_PIN);
	VPORT0_OUT |= (1<<UART_TX_PIN);
	
	swUART_SetRxInterruptLevel ( iIntLevel );
}
    4466:	df 91       	pop	r29
    4468:	cf 91       	pop	r28
    446a:	0f 91       	pop	r16
    446c:	ef 90       	pop	r14
    446e:	08 95       	ret
	
		// I don't turn on the interrupt handling for now. The main program will choose what to do.
	}		
	else
	{
		bInterruptEnabled = false;		
    4470:	10 92 94 22 	sts	0x2294, r1
		
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    4474:	80 e2       	ldi	r24, 0x20	; 32
    4476:	96 e0       	ldi	r25, 0x06	; 6
    4478:	64 e0       	ldi	r22, 0x04	; 4
    447a:	40 e0       	ldi	r20, 0x00	; 0
    447c:	20 e0       	ldi	r18, 0x00	; 0
    447e:	00 e0       	ldi	r16, 0x00	; 0
    4480:	37 e0       	ldi	r19, 0x07	; 7
    4482:	e3 2e       	mov	r14, r19
    4484:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
	VPORT0_DIR &= ~(1<<UART_RX_PIN);
	VPORT0_DIR |= (1<<UART_TX_PIN);
	VPORT0_OUT |= (1<<UART_TX_PIN);
	
	swUART_SetRxInterruptLevel ( iIntLevel );
}
    4488:	df 91       	pop	r29
    448a:	cf 91       	pop	r28
    448c:	0f 91       	pop	r16
    448e:	ef 90       	pop	r14
    4490:	08 95       	ret
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    4492:	c3 30       	cpi	r28, 0x03	; 3
    4494:	d1 05       	cpc	r29, r1
    4496:	89 f0       	breq	.+34     	; 0x44ba <swUART_ConfigureDevice+0xc6>
    4498:	c4 30       	cpi	r28, 0x04	; 4
    449a:	d1 05       	cpc	r29, r1
    449c:	f1 f6       	brne	.-68     	; 0x445a <swUART_ConfigureDevice+0x66>
			break;
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
			break;
			case 4:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
    449e:	80 e2       	ldi	r24, 0x20	; 32
    44a0:	96 e0       	ldi	r25, 0x06	; 6
    44a2:	63 e0       	ldi	r22, 0x03	; 3
    44a4:	44 e0       	ldi	r20, 0x04	; 4
    44a6:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
    44aa:	d7 cf       	rjmp	.-82     	; 0x445a <swUART_ConfigureDevice+0x66>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
			break;
			case 2:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_LO_gc, (1<<UART_RX_PIN) );		
    44ac:	80 e2       	ldi	r24, 0x20	; 32
    44ae:	96 e0       	ldi	r25, 0x06	; 6
    44b0:	61 e0       	ldi	r22, 0x01	; 1
    44b2:	44 e0       	ldi	r20, 0x04	; 4
    44b4:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
    44b8:	d0 cf       	rjmp	.-96     	; 0x445a <swUART_ConfigureDevice+0x66>
			break;
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
    44ba:	80 e2       	ldi	r24, 0x20	; 32
    44bc:	96 e0       	ldi	r25, 0x06	; 6
    44be:	62 e0       	ldi	r22, 0x02	; 2
    44c0:	44 e0       	ldi	r20, 0x04	; 4
    44c2:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
    44c6:	c9 cf       	rjmp	.-110    	; 0x445a <swUART_ConfigureDevice+0x66>

000044c8 <swUART_SetRxInterruptLevel>:
 *					3 - interrupt enabled at medium priority
 *					4 - interrupt enabled at high priority
 *	Output: none
 *****************************************************************/
void swUART_SetRxInterruptLevel ( int iIntLevel )
{
    44c8:	ef 92       	push	r14
    44ca:	0f 93       	push	r16
    44cc:	cf 93       	push	r28
    44ce:	df 93       	push	r29
    44d0:	ec 01       	movw	r28, r24
	if (iIntLevel != 0)
    44d2:	00 97       	sbiw	r24, 0x00	; 0
    44d4:	39 f1       	breq	.+78     	; 0x4524 <swUART_SetRxInterruptLevel+0x5c>
	{
		bInterruptEnabled = true;
    44d6:	81 e0       	ldi	r24, 0x01	; 1
    44d8:	80 93 94 22 	sts	0x2294, r24
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    44dc:	80 e2       	ldi	r24, 0x20	; 32
    44de:	96 e0       	ldi	r25, 0x06	; 6
    44e0:	64 e0       	ldi	r22, 0x04	; 4
    44e2:	40 e0       	ldi	r20, 0x00	; 0
    44e4:	20 e0       	ldi	r18, 0x00	; 0
    44e6:	00 e0       	ldi	r16, 0x00	; 0
    44e8:	e2 e0       	ldi	r30, 0x02	; 2
    44ea:	ee 2e       	mov	r14, r30
    44ec:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    44f0:	c2 30       	cpi	r28, 0x02	; 2
    44f2:	d1 05       	cpc	r29, r1
    44f4:	a9 f1       	breq	.+106    	; 0x4560 <swUART_SetRxInterruptLevel+0x98>
    44f6:	c3 30       	cpi	r28, 0x03	; 3
    44f8:	d1 05       	cpc	r29, r1
    44fa:	2c f5       	brge	.+74     	; 0x4546 <swUART_SetRxInterruptLevel+0x7e>
    44fc:	c1 30       	cpi	r28, 0x01	; 1
    44fe:	d1 05       	cpc	r29, r1
    4500:	31 f4       	brne	.+12     	; 0x450e <swUART_SetRxInterruptLevel+0x46>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
    4502:	80 e2       	ldi	r24, 0x20	; 32
    4504:	96 e0       	ldi	r25, 0x06	; 6
    4506:	60 e0       	ldi	r22, 0x00	; 0
    4508:	44 e0       	ldi	r20, 0x04	; 4
    450a:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
			break;
			default:
			break;
		}				
		PMIC.CTRL |= PMIC_LOLVLEN_bm|PMIC_MEDLVLEN_bm|PMIC_HILVLEN_bm;		
    450e:	80 91 a2 00 	lds	r24, 0x00A2
    4512:	87 60       	ori	r24, 0x07	; 7
    4514:	e0 ea       	ldi	r30, 0xA0	; 160
    4516:	f0 e0       	ldi	r31, 0x00	; 0
    4518:	82 83       	std	Z+2, r24	; 0x02
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_INPUT_DISABLE_gc );		
	}
}	
    451a:	df 91       	pop	r29
    451c:	cf 91       	pop	r28
    451e:	0f 91       	pop	r16
    4520:	ef 90       	pop	r14
    4522:	08 95       	ret
	
		// I don't turn on the interrupt handling for now. The main program will choose what to do.
	}		
	else
	{
		bInterruptEnabled = false;		
    4524:	10 92 94 22 	sts	0x2294, r1
		
		// Configure the interrupts for UART_PORT
		PORT_ConfigurePins( &UART_PORT,
    4528:	80 e2       	ldi	r24, 0x20	; 32
    452a:	96 e0       	ldi	r25, 0x06	; 6
    452c:	64 e0       	ldi	r22, 0x04	; 4
    452e:	40 e0       	ldi	r20, 0x00	; 0
    4530:	20 e0       	ldi	r18, 0x00	; 0
    4532:	00 e0       	ldi	r16, 0x00	; 0
    4534:	77 e0       	ldi	r23, 0x07	; 7
    4536:	e7 2e       	mov	r14, r23
    4538:	0e 94 2c 20 	call	0x4058	; 0x4058 <PORT_ConfigurePins>
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_INPUT_DISABLE_gc );		
	}
}	
    453c:	df 91       	pop	r29
    453e:	cf 91       	pop	r28
    4540:	0f 91       	pop	r16
    4542:	ef 90       	pop	r14
    4544:	08 95       	ret
							false,
							false,
							PORT_OPC_TOTEM_gc,
							PORT_ISC_FALLING_gc );
		
		switch (iIntLevel)
    4546:	c3 30       	cpi	r28, 0x03	; 3
    4548:	d1 05       	cpc	r29, r1
    454a:	89 f0       	breq	.+34     	; 0x456e <swUART_SetRxInterruptLevel+0xa6>
    454c:	c4 30       	cpi	r28, 0x04	; 4
    454e:	d1 05       	cpc	r29, r1
    4550:	f1 f6       	brne	.-68     	; 0x450e <swUART_SetRxInterruptLevel+0x46>
			break;
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
			break;
			case 4:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_HI_gc, (1<<UART_RX_PIN) );		
    4552:	80 e2       	ldi	r24, 0x20	; 32
    4554:	96 e0       	ldi	r25, 0x06	; 6
    4556:	63 e0       	ldi	r22, 0x03	; 3
    4558:	44 e0       	ldi	r20, 0x04	; 4
    455a:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
			break;
    455e:	d7 cf       	rjmp	.-82     	; 0x450e <swUART_SetRxInterruptLevel+0x46>
		{
			case 1:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT1LVL_OFF_gc, (1<<UART_RX_PIN) );	
			break;
			case 2:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_LO_gc, (1<<UART_RX_PIN) );		
    4560:	80 e2       	ldi	r24, 0x20	; 32
    4562:	96 e0       	ldi	r25, 0x06	; 6
    4564:	61 e0       	ldi	r22, 0x01	; 1
    4566:	44 e0       	ldi	r20, 0x04	; 4
    4568:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
			break;
    456c:	d0 cf       	rjmp	.-96     	; 0x450e <swUART_SetRxInterruptLevel+0x46>
			case 3:
				PORT_ConfigureInterrupt0( &UART_PORT, PORT_INT0LVL_MED_gc, (1<<UART_RX_PIN) );		
    456e:	80 e2       	ldi	r24, 0x20	; 32
    4570:	96 e0       	ldi	r25, 0x06	; 6
    4572:	62 e0       	ldi	r22, 0x02	; 2
    4574:	44 e0       	ldi	r20, 0x04	; 4
    4576:	0e 94 1e 20 	call	0x403c	; 0x403c <PORT_ConfigureInterrupt0>
			break;
    457a:	c9 cf       	rjmp	.-110    	; 0x450e <swUART_SetRxInterruptLevel+0x46>

0000457c <swUART_SetInterruptHandler>:
		can be NULL and its as if the interrupt is doing nothing.
 *	Output: none
 *****************************************************************/
void	swUART_SetInterruptHandler ( void (*Handler)( void ) )
{
	swUART_RxHandler = Handler;
    457c:	80 93 92 22 	sts	0x2292, r24
    4580:	90 93 93 22 	sts	0x2293, r25
}
    4584:	08 95       	ret

00004586 <__vector_34>:
 *	Description: ISR for RX interrupt
 *	Input: none
 *	Output: none
 *****************************************************************/
ISR(PORTB_INT0_vect)
{
    4586:	1f 92       	push	r1
    4588:	0f 92       	push	r0
    458a:	0f b6       	in	r0, 0x3f	; 63
    458c:	0f 92       	push	r0
    458e:	11 24       	eor	r1, r1
    4590:	2f 93       	push	r18
    4592:	3f 93       	push	r19
    4594:	4f 93       	push	r20
    4596:	5f 93       	push	r21
    4598:	6f 93       	push	r22
    459a:	7f 93       	push	r23
    459c:	8f 93       	push	r24
    459e:	9f 93       	push	r25
    45a0:	af 93       	push	r26
    45a2:	bf 93       	push	r27
    45a4:	ef 93       	push	r30
    45a6:	ff 93       	push	r31
	cli ();
    45a8:	f8 94       	cli
	
	if (swUART_RxHandler!=NULL)
    45aa:	e0 91 92 22 	lds	r30, 0x2292
    45ae:	f0 91 93 22 	lds	r31, 0x2293
    45b2:	30 97       	sbiw	r30, 0x00	; 0
    45b4:	09 f0       	breq	.+2      	; 0x45b8 <__vector_34+0x32>
		swUART_RxHandler ( );
    45b6:	09 95       	icall
	
	sei ( );
    45b8:	78 94       	sei
}
    45ba:	ff 91       	pop	r31
    45bc:	ef 91       	pop	r30
    45be:	bf 91       	pop	r27
    45c0:	af 91       	pop	r26
    45c2:	9f 91       	pop	r25
    45c4:	8f 91       	pop	r24
    45c6:	7f 91       	pop	r23
    45c8:	6f 91       	pop	r22
    45ca:	5f 91       	pop	r21
    45cc:	4f 91       	pop	r20
    45ce:	3f 91       	pop	r19
    45d0:	2f 91       	pop	r18
    45d2:	0f 90       	pop	r0
    45d4:	0f be       	out	0x3f, r0	; 63
    45d6:	0f 90       	pop	r0
    45d8:	1f 90       	pop	r1
    45da:	18 95       	reti

000045dc <swUART_Delay_Tx>:
 *	Input: none
 *	Output: none
 *****************************************************************/
void swUART_Delay_Tx ( void )
{
	asm volatile (
    45dc:	8f 93       	push	r24

000045de <UART_delay>:
    45de:	8c e8       	ldi	r24, 0x8C	; 140

000045e0 <UART_delay1>:
    45e0:	8a 95       	dec	r24
    45e2:	f1 f7       	brne	.-4      	; 0x45e0 <UART_delay1>
    45e4:	8f 91       	pop	r24
    45e6:	00 00       	nop
    45e8:	08 95       	ret

000045ea <swUART_Delay_Rx>:
	);	
}

void swUART_Delay_Rx ( void )
{
	asm volatile (
    45ea:	8f 93       	push	r24

000045ec <UART_delay2>:
    45ec:	8c e8       	ldi	r24, 0x8C	; 140

000045ee <UART_delay3>:
    45ee:	8a 95       	dec	r24
    45f0:	f1 f7       	brne	.-4      	; 0x45ee <UART_delay3>
    45f2:	8f 91       	pop	r24
    45f4:	00 00       	nop
    45f6:	08 95       	ret

000045f8 <TC0_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC0_ConfigClockSource( volatile TC0_t * tc, TC_CLKSEL_t clockSelection )
{
    45f8:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | clockSelection;
    45fa:	80 81       	ld	r24, Z
    45fc:	80 7f       	andi	r24, 0xF0	; 240
    45fe:	68 2b       	or	r22, r24
    4600:	60 83       	st	Z, r22
}
    4602:	08 95       	ret

00004604 <TC1_ConfigClockSource>:
 *
 *  \param tc              Timer/Counter module instance.
 *  \param clockSelection  Timer/Counter clock source setting.
 */
void TC1_ConfigClockSource( volatile TC1_t * tc, TC_CLKSEL_t clockSelection )
{
    4604:	fc 01       	movw	r30, r24
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | clockSelection;
    4606:	80 81       	ld	r24, Z
    4608:	80 7f       	andi	r24, 0xF0	; 240
    460a:	68 2b       	or	r22, r24
    460c:	60 83       	st	Z, r22
}
    460e:	08 95       	ret

00004610 <TC0_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC0_ConfigWGM( volatile TC0_t * tc, TC_WGMODE_t wgm )
{
    4610:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC0_WGMODE_gm ) | wgm;
    4612:	81 81       	ldd	r24, Z+1	; 0x01
    4614:	88 7f       	andi	r24, 0xF8	; 248
    4616:	68 2b       	or	r22, r24
    4618:	61 83       	std	Z+1, r22	; 0x01
}
    461a:	08 95       	ret

0000461c <TC1_ConfigWGM>:
 *
 *  \param tc    Timer/Counter module instance.
 *  \param wgm   Waveform generation mode.
 */
void TC1_ConfigWGM( volatile TC1_t * tc, TC_WGMODE_t wgm )
{
    461c:	fc 01       	movw	r30, r24
	tc->CTRLB = ( tc->CTRLB & ~TC1_WGMODE_gm ) | wgm;
    461e:	81 81       	ldd	r24, Z+1	; 0x01
    4620:	88 7f       	andi	r24, 0xF8	; 248
    4622:	68 2b       	or	r22, r24
    4624:	61 83       	std	Z+1, r22	; 0x01
}
    4626:	08 95       	ret

00004628 <TC0_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC0_ConfigInputCapture( volatile TC0_t * tc, TC_EVSEL_t eventSource )
{
    4628:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC0_EVSEL_gm | TC0_EVACT_gm ) ) |
    462a:	83 81       	ldd	r24, Z+3	; 0x03
    462c:	80 71       	andi	r24, 0x10	; 16
    462e:	80 62       	ori	r24, 0x20	; 32
    4630:	86 2b       	or	r24, r22
    4632:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    4634:	08 95       	ret

00004636 <TC1_ConfigInputCapture>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param eventSource      Event source selection.
 */
void TC1_ConfigInputCapture( volatile TC1_t * tc, TC_EVSEL_t eventSource )
{
    4636:	fc 01       	movw	r30, r24
	tc->CTRLD = ( tc->CTRLD & ~( TC1_EVSEL_gm | TC1_EVACT_gm ) ) |
    4638:	83 81       	ldd	r24, Z+3	; 0x03
    463a:	80 71       	andi	r24, 0x10	; 16
    463c:	80 62       	ori	r24, 0x20	; 32
    463e:	86 2b       	or	r24, r22
    4640:	83 83       	std	Z+3, r24	; 0x03
	            eventSource |
	            TC_EVACT_CAPT_gc;
}
    4642:	08 95       	ret

00004644 <TC0_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
    4644:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    4646:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC0_EnableCCChannels( volatile TC0_t * tc, uint8_t enableMask )
{
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
    4648:	60 7f       	andi	r22, 0xF0	; 240

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    464a:	68 2b       	or	r22, r24
    464c:	61 83       	std	Z+1, r22	; 0x01
}
    464e:	08 95       	ret

00004650 <TC1_EnableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
    4650:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    4652:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param enableMask       Mask of channels to enable.
 */
void TC1_EnableCCChannels( volatile TC1_t * tc, uint8_t enableMask )
{
	/* Make sure only CCxEN bits are set in enableMask. */
	enableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );
    4654:	60 73       	andi	r22, 0x30	; 48

	/* Enable channels. */
	tc->CTRLB |= enableMask;
    4656:	68 2b       	or	r22, r24
    4658:	61 83       	std	Z+1, r22	; 0x01
}
    465a:	08 95       	ret

0000465c <TC0_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
    465c:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    465e:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param disableMask      Mask of channels to disable.
 */
void TC0_DisableCCChannels( volatile TC0_t * tc, uint8_t disableMask )
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC0_CCAEN_bm | TC0_CCBEN_bm | TC0_CCCEN_bm | TC0_CCDEN_bm );
    4660:	60 7f       	andi	r22, 0xF0	; 240

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    4662:	60 95       	com	r22
    4664:	68 23       	and	r22, r24
    4666:	61 83       	std	Z+1, r22	; 0x01
}
    4668:	08 95       	ret

0000466a <TC1_DisableCCChannels>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
    466a:	fc 01       	movw	r30, r24
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    466c:	81 81       	ldd	r24, Z+1	; 0x01
 *  \param disableMask      Mask of channels to disable.
 */
void TC1_DisableCCChannels( volatile TC1_t * tc, uint8_t disableMask )
{
	/* Make sure only CCxEN bits are set in disableMask. */
	disableMask &= ( TC1_CCAEN_bm | TC1_CCBEN_bm );
    466e:	60 73       	andi	r22, 0x30	; 48

	/* Disable channels. */
	tc->CTRLB &= ~disableMask;
    4670:	60 95       	com	r22
    4672:	68 23       	and	r22, r24
    4674:	61 83       	std	Z+1, r22	; 0x01
}
    4676:	08 95       	ret

00004678 <TC0_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC0_SetOverflowIntLevel( volatile TC0_t * tc, TC_OVFINTLVL_t intLevel )
{
    4678:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_OVFINTLVL_gm ) | intLevel;
    467a:	86 81       	ldd	r24, Z+6	; 0x06
    467c:	8c 7f       	andi	r24, 0xFC	; 252
    467e:	68 2b       	or	r22, r24
    4680:	66 83       	std	Z+6, r22	; 0x06
}
    4682:	08 95       	ret

00004684 <TC1_SetOverflowIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New overflow interrupt level.
 */
void TC1_SetOverflowIntLevel( volatile TC1_t * tc, TC_OVFINTLVL_t intLevel )
{
    4684:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_OVFINTLVL_gm ) | intLevel;
    4686:	86 81       	ldd	r24, Z+6	; 0x06
    4688:	8c 7f       	andi	r24, 0xFC	; 252
    468a:	68 2b       	or	r22, r24
    468c:	66 83       	std	Z+6, r22	; 0x06
}
    468e:	08 95       	ret

00004690 <TC0_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC0_SetErrorIntLevel( volatile TC0_t * tc, TC_ERRINTLVL_t intLevel )
{
    4690:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC0_ERRINTLVL_gm ) | intLevel;
    4692:	86 81       	ldd	r24, Z+6	; 0x06
    4694:	83 7f       	andi	r24, 0xF3	; 243
    4696:	68 2b       	or	r22, r24
    4698:	66 83       	std	Z+6, r22	; 0x06
}
    469a:	08 95       	ret

0000469c <TC1_SetErrorIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New error interrupt level.
 */
void TC1_SetErrorIntLevel( volatile TC1_t * tc, TC_ERRINTLVL_t intLevel )
{
    469c:	fc 01       	movw	r30, r24
	tc->INTCTRLA = ( tc->INTCTRLA & ~TC1_ERRINTLVL_gm ) | intLevel;
    469e:	86 81       	ldd	r24, Z+6	; 0x06
    46a0:	83 7f       	andi	r24, 0xF3	; 243
    46a2:	68 2b       	or	r22, r24
    46a4:	66 83       	std	Z+6, r22	; 0x06
}
    46a6:	08 95       	ret

000046a8 <TC0_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCAIntLevel( volatile TC0_t * tc, TC_CCAINTLVL_t intLevel )
{
    46a8:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCAINTLVL_gm ) | intLevel;
    46aa:	87 81       	ldd	r24, Z+7	; 0x07
    46ac:	8c 7f       	andi	r24, 0xFC	; 252
    46ae:	68 2b       	or	r22, r24
    46b0:	67 83       	std	Z+7, r22	; 0x07
}
    46b2:	08 95       	ret

000046b4 <TC1_SetCCAIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC1_SetCCAIntLevel( volatile TC1_t * tc, TC_CCAINTLVL_t intLevel )
{
    46b4:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCAINTLVL_gm ) | intLevel;
    46b6:	87 81       	ldd	r24, Z+7	; 0x07
    46b8:	8c 7f       	andi	r24, 0xFC	; 252
    46ba:	68 2b       	or	r22, r24
    46bc:	67 83       	std	Z+7, r22	; 0x07
}
    46be:	08 95       	ret

000046c0 <TC0_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC0_SetCCBIntLevel( volatile TC0_t * tc, TC_CCBINTLVL_t intLevel )
{
    46c0:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCBINTLVL_gm ) | intLevel;
    46c2:	87 81       	ldd	r24, Z+7	; 0x07
    46c4:	83 7f       	andi	r24, 0xF3	; 243
    46c6:	68 2b       	or	r22, r24
    46c8:	67 83       	std	Z+7, r22	; 0x07
}
    46ca:	08 95       	ret

000046cc <TC1_SetCCBIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel B interrupt level.
 */
void TC1_SetCCBIntLevel( volatile TC1_t * tc, TC_CCBINTLVL_t intLevel )
{
    46cc:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC1_CCBINTLVL_gm ) | intLevel;
    46ce:	87 81       	ldd	r24, Z+7	; 0x07
    46d0:	83 7f       	andi	r24, 0xF3	; 243
    46d2:	68 2b       	or	r22, r24
    46d4:	67 83       	std	Z+7, r22	; 0x07
}
    46d6:	08 95       	ret

000046d8 <TC0_SetCCCIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCCIntLevel( volatile TC0_t * tc, TC_CCCINTLVL_t intLevel )
{
    46d8:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCCINTLVL_gm ) | intLevel;
    46da:	87 81       	ldd	r24, Z+7	; 0x07
    46dc:	8f 7c       	andi	r24, 0xCF	; 207
    46de:	68 2b       	or	r22, r24
    46e0:	67 83       	std	Z+7, r22	; 0x07
}
    46e2:	08 95       	ret

000046e4 <TC0_SetCCDIntLevel>:
 *
 *  \param tc               Timer/Counter module instance.
 *  \param intLevel         New compare/capture channel A interrupt level.
 */
void TC0_SetCCDIntLevel( volatile TC0_t * tc, TC_CCDINTLVL_t intLevel )
{
    46e4:	fc 01       	movw	r30, r24
	tc->INTCTRLB = ( tc->INTCTRLB & ~TC0_CCDINTLVL_gm ) | intLevel;
    46e6:	87 81       	ldd	r24, Z+7	; 0x07
    46e8:	8f 73       	andi	r24, 0x3F	; 63
    46ea:	68 2b       	or	r22, r24
    46ec:	67 83       	std	Z+7, r22	; 0x07
}
    46ee:	08 95       	ret

000046f0 <TC0_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 0 module instance.
 */
void TC0_Reset( volatile TC0_t * tc )
{
    46f0:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC0_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    46f2:	80 81       	ld	r24, Z
    46f4:	80 7f       	andi	r24, 0xF0	; 240
    46f6:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    46f8:	8c e0       	ldi	r24, 0x0C	; 12
    46fa:	81 87       	std	Z+9, r24	; 0x09
}
    46fc:	08 95       	ret

000046fe <TC1_Reset>:
 *  reset of the device.
 *
 *  \param tc  Timer/Counter 1 module instance.
 */
void TC1_Reset( volatile TC1_t * tc )
{
    46fe:	fc 01       	movw	r30, r24
	/* TC must be turned off before a Reset command. */
	tc->CTRLA = ( tc->CTRLA & ~TC1_CLKSEL_gm ) | TC_CLKSEL_OFF_gc;
    4700:	80 81       	ld	r24, Z
    4702:	80 7f       	andi	r24, 0xF0	; 240
    4704:	80 83       	st	Z, r24

	/* Issue Reset command. */
	tc->CTRLFSET = TC_CMD_RESET_gc;
    4706:	8c e0       	ldi	r24, 0x0C	; 12
    4708:	81 87       	std	Z+9, r24	; 0x09
}
    470a:	08 95       	ret

0000470c <__umulhisi3>:
    470c:	53 9f       	mul	r21, r19
    470e:	c0 01       	movw	r24, r0
    4710:	42 9f       	mul	r20, r18
    4712:	b0 01       	movw	r22, r0
    4714:	52 9f       	mul	r21, r18
    4716:	70 0d       	add	r23, r0
    4718:	81 1d       	adc	r24, r1
    471a:	11 24       	eor	r1, r1
    471c:	91 1d       	adc	r25, r1
    471e:	34 9f       	mul	r19, r20
    4720:	70 0d       	add	r23, r0
    4722:	81 1d       	adc	r24, r1
    4724:	11 24       	eor	r1, r1
    4726:	91 1d       	adc	r25, r1
    4728:	08 95       	ret

0000472a <atoi>:
    472a:	fc 01       	movw	r30, r24
    472c:	88 27       	eor	r24, r24
    472e:	99 27       	eor	r25, r25
    4730:	e8 94       	clt
    4732:	21 91       	ld	r18, Z+
    4734:	20 32       	cpi	r18, 0x20	; 32
    4736:	e9 f3       	breq	.-6      	; 0x4732 <atoi+0x8>
    4738:	29 30       	cpi	r18, 0x09	; 9
    473a:	10 f0       	brcs	.+4      	; 0x4740 <atoi+0x16>
    473c:	2e 30       	cpi	r18, 0x0E	; 14
    473e:	c8 f3       	brcs	.-14     	; 0x4732 <atoi+0x8>
    4740:	2b 32       	cpi	r18, 0x2B	; 43
    4742:	41 f0       	breq	.+16     	; 0x4754 <atoi+0x2a>
    4744:	2d 32       	cpi	r18, 0x2D	; 45
    4746:	39 f4       	brne	.+14     	; 0x4756 <atoi+0x2c>
    4748:	68 94       	set
    474a:	04 c0       	rjmp	.+8      	; 0x4754 <atoi+0x2a>
    474c:	0e 94 45 24 	call	0x488a	; 0x488a <__mulhi_const_10>
    4750:	82 0f       	add	r24, r18
    4752:	91 1d       	adc	r25, r1
    4754:	21 91       	ld	r18, Z+
    4756:	20 53       	subi	r18, 0x30	; 48
    4758:	2a 30       	cpi	r18, 0x0A	; 10
    475a:	c0 f3       	brcs	.-16     	; 0x474c <atoi+0x22>
    475c:	1e f4       	brtc	.+6      	; 0x4764 <atoi+0x3a>
    475e:	90 95       	com	r25
    4760:	81 95       	neg	r24
    4762:	9f 4f       	sbci	r25, 0xFF	; 255
    4764:	08 95       	ret

00004766 <atol>:
    4766:	1f 93       	push	r17
    4768:	fc 01       	movw	r30, r24
    476a:	99 27       	eor	r25, r25
    476c:	88 27       	eor	r24, r24
    476e:	bc 01       	movw	r22, r24
    4770:	e8 94       	clt
    4772:	11 91       	ld	r17, Z+
    4774:	10 32       	cpi	r17, 0x20	; 32
    4776:	e9 f3       	breq	.-6      	; 0x4772 <atol+0xc>
    4778:	19 30       	cpi	r17, 0x09	; 9
    477a:	10 f0       	brcs	.+4      	; 0x4780 <atol+0x1a>
    477c:	1e 30       	cpi	r17, 0x0E	; 14
    477e:	c8 f3       	brcs	.-14     	; 0x4772 <atol+0xc>
    4780:	1b 32       	cpi	r17, 0x2B	; 43
    4782:	51 f0       	breq	.+20     	; 0x4798 <atol+0x32>
    4784:	1d 32       	cpi	r17, 0x2D	; 45
    4786:	49 f4       	brne	.+18     	; 0x479a <atol+0x34>
    4788:	68 94       	set
    478a:	06 c0       	rjmp	.+12     	; 0x4798 <atol+0x32>
    478c:	0e 94 30 24 	call	0x4860	; 0x4860 <__mulsi_const_10>
    4790:	61 0f       	add	r22, r17
    4792:	71 1d       	adc	r23, r1
    4794:	81 1d       	adc	r24, r1
    4796:	91 1d       	adc	r25, r1
    4798:	11 91       	ld	r17, Z+
    479a:	10 53       	subi	r17, 0x30	; 48
    479c:	1a 30       	cpi	r17, 0x0A	; 10
    479e:	b0 f3       	brcs	.-20     	; 0x478c <atol+0x26>
    47a0:	3e f4       	brtc	.+14     	; 0x47b0 <atol+0x4a>
    47a2:	90 95       	com	r25
    47a4:	80 95       	com	r24
    47a6:	70 95       	com	r23
    47a8:	61 95       	neg	r22
    47aa:	7f 4f       	sbci	r23, 0xFF	; 255
    47ac:	8f 4f       	sbci	r24, 0xFF	; 255
    47ae:	9f 4f       	sbci	r25, 0xFF	; 255
    47b0:	1f 91       	pop	r17
    47b2:	08 95       	ret

000047b4 <strtok>:
    47b4:	45 e9       	ldi	r20, 0x95	; 149
    47b6:	52 e2       	ldi	r21, 0x22	; 34
    47b8:	0e 94 09 24 	call	0x4812	; 0x4812 <strtok_r>
    47bc:	08 95       	ret

000047be <strcmp>:
    47be:	fb 01       	movw	r30, r22
    47c0:	dc 01       	movw	r26, r24
    47c2:	8d 91       	ld	r24, X+
    47c4:	01 90       	ld	r0, Z+
    47c6:	80 19       	sub	r24, r0
    47c8:	01 10       	cpse	r0, r1
    47ca:	d9 f3       	breq	.-10     	; 0x47c2 <strcmp+0x4>
    47cc:	99 0b       	sbc	r25, r25
    47ce:	08 95       	ret

000047d0 <strcpy>:
    47d0:	fb 01       	movw	r30, r22
    47d2:	dc 01       	movw	r26, r24
    47d4:	01 90       	ld	r0, Z+
    47d6:	0d 92       	st	X+, r0
    47d8:	00 20       	and	r0, r0
    47da:	e1 f7       	brne	.-8      	; 0x47d4 <strcpy+0x4>
    47dc:	08 95       	ret

000047de <strstr>:
    47de:	fb 01       	movw	r30, r22
    47e0:	51 91       	ld	r21, Z+
    47e2:	55 23       	and	r21, r21
    47e4:	a9 f0       	breq	.+42     	; 0x4810 <strstr+0x32>
    47e6:	bf 01       	movw	r22, r30
    47e8:	dc 01       	movw	r26, r24
    47ea:	4d 91       	ld	r20, X+
    47ec:	45 17       	cp	r20, r21
    47ee:	41 11       	cpse	r20, r1
    47f0:	e1 f7       	brne	.-8      	; 0x47ea <strstr+0xc>
    47f2:	59 f4       	brne	.+22     	; 0x480a <strstr+0x2c>
    47f4:	cd 01       	movw	r24, r26
    47f6:	01 90       	ld	r0, Z+
    47f8:	00 20       	and	r0, r0
    47fa:	49 f0       	breq	.+18     	; 0x480e <strstr+0x30>
    47fc:	4d 91       	ld	r20, X+
    47fe:	40 15       	cp	r20, r0
    4800:	41 11       	cpse	r20, r1
    4802:	c9 f3       	breq	.-14     	; 0x47f6 <strstr+0x18>
    4804:	fb 01       	movw	r30, r22
    4806:	41 11       	cpse	r20, r1
    4808:	ef cf       	rjmp	.-34     	; 0x47e8 <strstr+0xa>
    480a:	81 e0       	ldi	r24, 0x01	; 1
    480c:	90 e0       	ldi	r25, 0x00	; 0
    480e:	01 97       	sbiw	r24, 0x01	; 1
    4810:	08 95       	ret

00004812 <strtok_r>:
    4812:	fa 01       	movw	r30, r20
    4814:	a1 91       	ld	r26, Z+
    4816:	b0 81       	ld	r27, Z
    4818:	00 97       	sbiw	r24, 0x00	; 0
    481a:	19 f4       	brne	.+6      	; 0x4822 <strtok_r+0x10>
    481c:	10 97       	sbiw	r26, 0x00	; 0
    481e:	e1 f0       	breq	.+56     	; 0x4858 <strtok_r+0x46>
    4820:	cd 01       	movw	r24, r26
    4822:	dc 01       	movw	r26, r24
    4824:	cd 01       	movw	r24, r26
    4826:	0d 90       	ld	r0, X+
    4828:	00 20       	and	r0, r0
    482a:	11 f4       	brne	.+4      	; 0x4830 <strtok_r+0x1e>
    482c:	c0 01       	movw	r24, r0
    482e:	13 c0       	rjmp	.+38     	; 0x4856 <strtok_r+0x44>
    4830:	fb 01       	movw	r30, r22
    4832:	21 91       	ld	r18, Z+
    4834:	22 23       	and	r18, r18
    4836:	19 f0       	breq	.+6      	; 0x483e <strtok_r+0x2c>
    4838:	20 15       	cp	r18, r0
    483a:	d9 f7       	brne	.-10     	; 0x4832 <strtok_r+0x20>
    483c:	f3 cf       	rjmp	.-26     	; 0x4824 <strtok_r+0x12>
    483e:	fb 01       	movw	r30, r22
    4840:	21 91       	ld	r18, Z+
    4842:	20 15       	cp	r18, r0
    4844:	19 f4       	brne	.+6      	; 0x484c <strtok_r+0x3a>
    4846:	1e 92       	st	-X, r1
    4848:	11 96       	adiw	r26, 0x01	; 1
    484a:	06 c0       	rjmp	.+12     	; 0x4858 <strtok_r+0x46>
    484c:	22 23       	and	r18, r18
    484e:	c1 f7       	brne	.-16     	; 0x4840 <strtok_r+0x2e>
    4850:	0d 90       	ld	r0, X+
    4852:	00 20       	and	r0, r0
    4854:	a1 f7       	brne	.-24     	; 0x483e <strtok_r+0x2c>
    4856:	d0 01       	movw	r26, r0
    4858:	fa 01       	movw	r30, r20
    485a:	a1 93       	st	Z+, r26
    485c:	b0 83       	st	Z, r27
    485e:	08 95       	ret

00004860 <__mulsi_const_10>:
    4860:	59 2f       	mov	r21, r25
    4862:	48 2f       	mov	r20, r24
    4864:	37 2f       	mov	r19, r23
    4866:	26 2f       	mov	r18, r22
    4868:	66 0f       	add	r22, r22
    486a:	77 1f       	adc	r23, r23
    486c:	88 1f       	adc	r24, r24
    486e:	99 1f       	adc	r25, r25
    4870:	66 0f       	add	r22, r22
    4872:	77 1f       	adc	r23, r23
    4874:	88 1f       	adc	r24, r24
    4876:	99 1f       	adc	r25, r25
    4878:	62 0f       	add	r22, r18
    487a:	73 1f       	adc	r23, r19
    487c:	84 1f       	adc	r24, r20
    487e:	95 1f       	adc	r25, r21
    4880:	66 0f       	add	r22, r22
    4882:	77 1f       	adc	r23, r23
    4884:	88 1f       	adc	r24, r24
    4886:	99 1f       	adc	r25, r25
    4888:	08 95       	ret

0000488a <__mulhi_const_10>:
    488a:	7a e0       	ldi	r23, 0x0A	; 10
    488c:	97 9f       	mul	r25, r23
    488e:	90 2d       	mov	r25, r0
    4890:	87 9f       	mul	r24, r23
    4892:	80 2d       	mov	r24, r0
    4894:	91 0d       	add	r25, r1
    4896:	11 24       	eor	r1, r1
    4898:	08 95       	ret

0000489a <fgetc>:
    489a:	cf 93       	push	r28
    489c:	df 93       	push	r29
    489e:	ec 01       	movw	r28, r24
    48a0:	3b 81       	ldd	r19, Y+3	; 0x03
    48a2:	30 ff       	sbrs	r19, 0
    48a4:	36 c0       	rjmp	.+108    	; 0x4912 <fgetc+0x78>
    48a6:	36 ff       	sbrs	r19, 6
    48a8:	09 c0       	rjmp	.+18     	; 0x48bc <fgetc+0x22>
    48aa:	3f 7b       	andi	r19, 0xBF	; 191
    48ac:	3b 83       	std	Y+3, r19	; 0x03
    48ae:	8e 81       	ldd	r24, Y+6	; 0x06
    48b0:	9f 81       	ldd	r25, Y+7	; 0x07
    48b2:	01 96       	adiw	r24, 0x01	; 1
    48b4:	8e 83       	std	Y+6, r24	; 0x06
    48b6:	9f 83       	std	Y+7, r25	; 0x07
    48b8:	2a 81       	ldd	r18, Y+2	; 0x02
    48ba:	29 c0       	rjmp	.+82     	; 0x490e <fgetc+0x74>
    48bc:	32 ff       	sbrs	r19, 2
    48be:	0f c0       	rjmp	.+30     	; 0x48de <fgetc+0x44>
    48c0:	e8 81       	ld	r30, Y
    48c2:	f9 81       	ldd	r31, Y+1	; 0x01
    48c4:	80 81       	ld	r24, Z
    48c6:	99 27       	eor	r25, r25
    48c8:	87 fd       	sbrc	r24, 7
    48ca:	90 95       	com	r25
    48cc:	00 97       	sbiw	r24, 0x00	; 0
    48ce:	19 f4       	brne	.+6      	; 0x48d6 <fgetc+0x3c>
    48d0:	30 62       	ori	r19, 0x20	; 32
    48d2:	3b 83       	std	Y+3, r19	; 0x03
    48d4:	1e c0       	rjmp	.+60     	; 0x4912 <fgetc+0x78>
    48d6:	31 96       	adiw	r30, 0x01	; 1
    48d8:	e8 83       	st	Y, r30
    48da:	f9 83       	std	Y+1, r31	; 0x01
    48dc:	11 c0       	rjmp	.+34     	; 0x4900 <fgetc+0x66>
    48de:	ea 85       	ldd	r30, Y+10	; 0x0a
    48e0:	fb 85       	ldd	r31, Y+11	; 0x0b
    48e2:	ce 01       	movw	r24, r28
    48e4:	09 95       	icall
    48e6:	97 ff       	sbrs	r25, 7
    48e8:	0b c0       	rjmp	.+22     	; 0x4900 <fgetc+0x66>
    48ea:	2b 81       	ldd	r18, Y+3	; 0x03
    48ec:	3f ef       	ldi	r19, 0xFF	; 255
    48ee:	8f 3f       	cpi	r24, 0xFF	; 255
    48f0:	93 07       	cpc	r25, r19
    48f2:	11 f4       	brne	.+4      	; 0x48f8 <fgetc+0x5e>
    48f4:	80 e1       	ldi	r24, 0x10	; 16
    48f6:	01 c0       	rjmp	.+2      	; 0x48fa <fgetc+0x60>
    48f8:	80 e2       	ldi	r24, 0x20	; 32
    48fa:	82 2b       	or	r24, r18
    48fc:	8b 83       	std	Y+3, r24	; 0x03
    48fe:	09 c0       	rjmp	.+18     	; 0x4912 <fgetc+0x78>
    4900:	2e 81       	ldd	r18, Y+6	; 0x06
    4902:	3f 81       	ldd	r19, Y+7	; 0x07
    4904:	2f 5f       	subi	r18, 0xFF	; 255
    4906:	3f 4f       	sbci	r19, 0xFF	; 255
    4908:	2e 83       	std	Y+6, r18	; 0x06
    490a:	3f 83       	std	Y+7, r19	; 0x07
    490c:	28 2f       	mov	r18, r24
    490e:	30 e0       	ldi	r19, 0x00	; 0
    4910:	02 c0       	rjmp	.+4      	; 0x4916 <fgetc+0x7c>
    4912:	2f ef       	ldi	r18, 0xFF	; 255
    4914:	3f ef       	ldi	r19, 0xFF	; 255
    4916:	c9 01       	movw	r24, r18
    4918:	df 91       	pop	r29
    491a:	cf 91       	pop	r28
    491c:	08 95       	ret

0000491e <fputc>:
    491e:	0f 93       	push	r16
    4920:	1f 93       	push	r17
    4922:	cf 93       	push	r28
    4924:	df 93       	push	r29
    4926:	8c 01       	movw	r16, r24
    4928:	eb 01       	movw	r28, r22
    492a:	8b 81       	ldd	r24, Y+3	; 0x03
    492c:	81 ff       	sbrs	r24, 1
    492e:	1b c0       	rjmp	.+54     	; 0x4966 <fputc+0x48>
    4930:	82 ff       	sbrs	r24, 2
    4932:	0d c0       	rjmp	.+26     	; 0x494e <fputc+0x30>
    4934:	2e 81       	ldd	r18, Y+6	; 0x06
    4936:	3f 81       	ldd	r19, Y+7	; 0x07
    4938:	8c 81       	ldd	r24, Y+4	; 0x04
    493a:	9d 81       	ldd	r25, Y+5	; 0x05
    493c:	28 17       	cp	r18, r24
    493e:	39 07       	cpc	r19, r25
    4940:	64 f4       	brge	.+24     	; 0x495a <fputc+0x3c>
    4942:	e8 81       	ld	r30, Y
    4944:	f9 81       	ldd	r31, Y+1	; 0x01
    4946:	01 93       	st	Z+, r16
    4948:	e8 83       	st	Y, r30
    494a:	f9 83       	std	Y+1, r31	; 0x01
    494c:	06 c0       	rjmp	.+12     	; 0x495a <fputc+0x3c>
    494e:	e8 85       	ldd	r30, Y+8	; 0x08
    4950:	f9 85       	ldd	r31, Y+9	; 0x09
    4952:	80 2f       	mov	r24, r16
    4954:	09 95       	icall
    4956:	00 97       	sbiw	r24, 0x00	; 0
    4958:	31 f4       	brne	.+12     	; 0x4966 <fputc+0x48>
    495a:	8e 81       	ldd	r24, Y+6	; 0x06
    495c:	9f 81       	ldd	r25, Y+7	; 0x07
    495e:	01 96       	adiw	r24, 0x01	; 1
    4960:	8e 83       	std	Y+6, r24	; 0x06
    4962:	9f 83       	std	Y+7, r25	; 0x07
    4964:	02 c0       	rjmp	.+4      	; 0x496a <fputc+0x4c>
    4966:	0f ef       	ldi	r16, 0xFF	; 255
    4968:	1f ef       	ldi	r17, 0xFF	; 255
    496a:	c8 01       	movw	r24, r16
    496c:	df 91       	pop	r29
    496e:	cf 91       	pop	r28
    4970:	1f 91       	pop	r17
    4972:	0f 91       	pop	r16
    4974:	08 95       	ret

00004976 <gets>:
    4976:	ef 92       	push	r14
    4978:	ff 92       	push	r15
    497a:	0f 93       	push	r16
    497c:	1f 93       	push	r17
    497e:	cf 93       	push	r28
    4980:	df 93       	push	r29
    4982:	ec 01       	movw	r28, r24
    4984:	e0 91 25 23 	lds	r30, 0x2325
    4988:	f0 91 26 23 	lds	r31, 0x2326
    498c:	83 81       	ldd	r24, Z+3	; 0x03
    498e:	80 ff       	sbrs	r24, 0
    4990:	15 c0       	rjmp	.+42     	; 0x49bc <gets+0x46>
    4992:	8e 01       	movw	r16, r28
    4994:	01 c0       	rjmp	.+2      	; 0x4998 <gets+0x22>
    4996:	8f 01       	movw	r16, r30
    4998:	80 91 25 23 	lds	r24, 0x2325
    499c:	90 91 26 23 	lds	r25, 0x2326
    49a0:	0e 94 4d 24 	call	0x489a	; 0x489a <fgetc>
    49a4:	2f ef       	ldi	r18, 0xFF	; 255
    49a6:	8f 3f       	cpi	r24, 0xFF	; 255
    49a8:	92 07       	cpc	r25, r18
    49aa:	41 f0       	breq	.+16     	; 0x49bc <gets+0x46>
    49ac:	f8 01       	movw	r30, r16
    49ae:	81 93       	st	Z+, r24
    49b0:	8a 30       	cpi	r24, 0x0A	; 10
    49b2:	91 05       	cpc	r25, r1
    49b4:	81 f7       	brne	.-32     	; 0x4996 <gets+0x20>
    49b6:	f8 01       	movw	r30, r16
    49b8:	10 82       	st	Z, r1
    49ba:	02 c0       	rjmp	.+4      	; 0x49c0 <gets+0x4a>
    49bc:	c0 e0       	ldi	r28, 0x00	; 0
    49be:	d0 e0       	ldi	r29, 0x00	; 0
    49c0:	7e 01       	movw	r14, r28
    49c2:	ce 01       	movw	r24, r28
    49c4:	cd b7       	in	r28, 0x3d	; 61
    49c6:	de b7       	in	r29, 0x3e	; 62
    49c8:	e6 e0       	ldi	r30, 0x06	; 6
    49ca:	0c 94 8a 27 	jmp	0x4f14	; 0x4f14 <__epilogue_restores__+0x18>

000049ce <printf_P>:
    49ce:	a0 e0       	ldi	r26, 0x00	; 0
    49d0:	b0 e0       	ldi	r27, 0x00	; 0
    49d2:	ed ee       	ldi	r30, 0xED	; 237
    49d4:	f4 e2       	ldi	r31, 0x24	; 36
    49d6:	0c 94 75 27 	jmp	0x4eea	; 0x4eea <__prologue_saves__+0x20>
    49da:	fe 01       	movw	r30, r28
    49dc:	35 96       	adiw	r30, 0x05	; 5
    49de:	61 91       	ld	r22, Z+
    49e0:	71 91       	ld	r23, Z+
    49e2:	80 91 27 23 	lds	r24, 0x2327
    49e6:	90 91 28 23 	lds	r25, 0x2328
    49ea:	dc 01       	movw	r26, r24
    49ec:	13 96       	adiw	r26, 0x03	; 3
    49ee:	2c 91       	ld	r18, X
    49f0:	13 97       	sbiw	r26, 0x03	; 3
    49f2:	28 60       	ori	r18, 0x08	; 8
    49f4:	13 96       	adiw	r26, 0x03	; 3
    49f6:	2c 93       	st	X, r18
    49f8:	af 01       	movw	r20, r30
    49fa:	0e 94 0a 25 	call	0x4a14	; 0x4a14 <vfprintf>
    49fe:	e0 91 27 23 	lds	r30, 0x2327
    4a02:	f0 91 28 23 	lds	r31, 0x2328
    4a06:	23 81       	ldd	r18, Z+3	; 0x03
    4a08:	27 7f       	andi	r18, 0xF7	; 247
    4a0a:	23 83       	std	Z+3, r18	; 0x03
    4a0c:	20 96       	adiw	r28, 0x00	; 0
    4a0e:	e2 e0       	ldi	r30, 0x02	; 2
    4a10:	0c 94 8e 27 	jmp	0x4f1c	; 0x4f1c <__epilogue_restores__+0x20>

00004a14 <vfprintf>:
    4a14:	ac e0       	ldi	r26, 0x0C	; 12
    4a16:	b0 e0       	ldi	r27, 0x00	; 0
    4a18:	e0 e1       	ldi	r30, 0x10	; 16
    4a1a:	f5 e2       	ldi	r31, 0x25	; 37
    4a1c:	0c 94 65 27 	jmp	0x4eca	; 0x4eca <__prologue_saves__>
    4a20:	6c 01       	movw	r12, r24
    4a22:	1b 01       	movw	r2, r22
    4a24:	8a 01       	movw	r16, r20
    4a26:	fc 01       	movw	r30, r24
    4a28:	16 82       	std	Z+6, r1	; 0x06
    4a2a:	17 82       	std	Z+7, r1	; 0x07
    4a2c:	83 81       	ldd	r24, Z+3	; 0x03
    4a2e:	81 ff       	sbrs	r24, 1
    4a30:	d1 c1       	rjmp	.+930    	; 0x4dd4 <vfprintf+0x3c0>
    4a32:	2e 01       	movw	r4, r28
    4a34:	08 94       	sec
    4a36:	41 1c       	adc	r4, r1
    4a38:	51 1c       	adc	r5, r1
    4a3a:	f6 01       	movw	r30, r12
    4a3c:	93 81       	ldd	r25, Z+3	; 0x03
    4a3e:	f1 01       	movw	r30, r2
    4a40:	93 fd       	sbrc	r25, 3
    4a42:	85 91       	lpm	r24, Z+
    4a44:	93 ff       	sbrs	r25, 3
    4a46:	81 91       	ld	r24, Z+
    4a48:	1f 01       	movw	r2, r30
    4a4a:	88 23       	and	r24, r24
    4a4c:	09 f4       	brne	.+2      	; 0x4a50 <vfprintf+0x3c>
    4a4e:	be c1       	rjmp	.+892    	; 0x4dcc <vfprintf+0x3b8>
    4a50:	85 32       	cpi	r24, 0x25	; 37
    4a52:	39 f4       	brne	.+14     	; 0x4a62 <vfprintf+0x4e>
    4a54:	93 fd       	sbrc	r25, 3
    4a56:	85 91       	lpm	r24, Z+
    4a58:	93 ff       	sbrs	r25, 3
    4a5a:	81 91       	ld	r24, Z+
    4a5c:	1f 01       	movw	r2, r30
    4a5e:	85 32       	cpi	r24, 0x25	; 37
    4a60:	29 f4       	brne	.+10     	; 0x4a6c <vfprintf+0x58>
    4a62:	90 e0       	ldi	r25, 0x00	; 0
    4a64:	b6 01       	movw	r22, r12
    4a66:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4a6a:	e7 cf       	rjmp	.-50     	; 0x4a3a <vfprintf+0x26>
    4a6c:	ee 24       	eor	r14, r14
    4a6e:	ff 24       	eor	r15, r15
    4a70:	20 e0       	ldi	r18, 0x00	; 0
    4a72:	20 32       	cpi	r18, 0x20	; 32
    4a74:	b0 f4       	brcc	.+44     	; 0x4aa2 <vfprintf+0x8e>
    4a76:	8b 32       	cpi	r24, 0x2B	; 43
    4a78:	69 f0       	breq	.+26     	; 0x4a94 <vfprintf+0x80>
    4a7a:	8c 32       	cpi	r24, 0x2C	; 44
    4a7c:	28 f4       	brcc	.+10     	; 0x4a88 <vfprintf+0x74>
    4a7e:	80 32       	cpi	r24, 0x20	; 32
    4a80:	51 f0       	breq	.+20     	; 0x4a96 <vfprintf+0x82>
    4a82:	83 32       	cpi	r24, 0x23	; 35
    4a84:	71 f4       	brne	.+28     	; 0x4aa2 <vfprintf+0x8e>
    4a86:	0b c0       	rjmp	.+22     	; 0x4a9e <vfprintf+0x8a>
    4a88:	8d 32       	cpi	r24, 0x2D	; 45
    4a8a:	39 f0       	breq	.+14     	; 0x4a9a <vfprintf+0x86>
    4a8c:	80 33       	cpi	r24, 0x30	; 48
    4a8e:	49 f4       	brne	.+18     	; 0x4aa2 <vfprintf+0x8e>
    4a90:	21 60       	ori	r18, 0x01	; 1
    4a92:	2c c0       	rjmp	.+88     	; 0x4aec <vfprintf+0xd8>
    4a94:	22 60       	ori	r18, 0x02	; 2
    4a96:	24 60       	ori	r18, 0x04	; 4
    4a98:	29 c0       	rjmp	.+82     	; 0x4aec <vfprintf+0xd8>
    4a9a:	28 60       	ori	r18, 0x08	; 8
    4a9c:	27 c0       	rjmp	.+78     	; 0x4aec <vfprintf+0xd8>
    4a9e:	20 61       	ori	r18, 0x10	; 16
    4aa0:	25 c0       	rjmp	.+74     	; 0x4aec <vfprintf+0xd8>
    4aa2:	27 fd       	sbrc	r18, 7
    4aa4:	2c c0       	rjmp	.+88     	; 0x4afe <vfprintf+0xea>
    4aa6:	38 2f       	mov	r19, r24
    4aa8:	30 53       	subi	r19, 0x30	; 48
    4aaa:	3a 30       	cpi	r19, 0x0A	; 10
    4aac:	98 f4       	brcc	.+38     	; 0x4ad4 <vfprintf+0xc0>
    4aae:	26 ff       	sbrs	r18, 6
    4ab0:	08 c0       	rjmp	.+16     	; 0x4ac2 <vfprintf+0xae>
    4ab2:	8e 2d       	mov	r24, r14
    4ab4:	88 0f       	add	r24, r24
    4ab6:	e8 2e       	mov	r14, r24
    4ab8:	ee 0c       	add	r14, r14
    4aba:	ee 0c       	add	r14, r14
    4abc:	e8 0e       	add	r14, r24
    4abe:	e3 0e       	add	r14, r19
    4ac0:	15 c0       	rjmp	.+42     	; 0x4aec <vfprintf+0xd8>
    4ac2:	8f 2d       	mov	r24, r15
    4ac4:	88 0f       	add	r24, r24
    4ac6:	f8 2e       	mov	r15, r24
    4ac8:	ff 0c       	add	r15, r15
    4aca:	ff 0c       	add	r15, r15
    4acc:	f8 0e       	add	r15, r24
    4ace:	f3 0e       	add	r15, r19
    4ad0:	20 62       	ori	r18, 0x20	; 32
    4ad2:	0c c0       	rjmp	.+24     	; 0x4aec <vfprintf+0xd8>
    4ad4:	8e 32       	cpi	r24, 0x2E	; 46
    4ad6:	21 f4       	brne	.+8      	; 0x4ae0 <vfprintf+0xcc>
    4ad8:	26 fd       	sbrc	r18, 6
    4ada:	78 c1       	rjmp	.+752    	; 0x4dcc <vfprintf+0x3b8>
    4adc:	20 64       	ori	r18, 0x40	; 64
    4ade:	06 c0       	rjmp	.+12     	; 0x4aec <vfprintf+0xd8>
    4ae0:	8c 36       	cpi	r24, 0x6C	; 108
    4ae2:	11 f4       	brne	.+4      	; 0x4ae8 <vfprintf+0xd4>
    4ae4:	20 68       	ori	r18, 0x80	; 128
    4ae6:	02 c0       	rjmp	.+4      	; 0x4aec <vfprintf+0xd8>
    4ae8:	88 36       	cpi	r24, 0x68	; 104
    4aea:	49 f4       	brne	.+18     	; 0x4afe <vfprintf+0xea>
    4aec:	f1 01       	movw	r30, r2
    4aee:	93 fd       	sbrc	r25, 3
    4af0:	85 91       	lpm	r24, Z+
    4af2:	93 ff       	sbrs	r25, 3
    4af4:	81 91       	ld	r24, Z+
    4af6:	1f 01       	movw	r2, r30
    4af8:	88 23       	and	r24, r24
    4afa:	09 f0       	breq	.+2      	; 0x4afe <vfprintf+0xea>
    4afc:	ba cf       	rjmp	.-140    	; 0x4a72 <vfprintf+0x5e>
    4afe:	98 2f       	mov	r25, r24
    4b00:	95 54       	subi	r25, 0x45	; 69
    4b02:	93 30       	cpi	r25, 0x03	; 3
    4b04:	18 f0       	brcs	.+6      	; 0x4b0c <vfprintf+0xf8>
    4b06:	90 52       	subi	r25, 0x20	; 32
    4b08:	93 30       	cpi	r25, 0x03	; 3
    4b0a:	28 f4       	brcc	.+10     	; 0x4b16 <vfprintf+0x102>
    4b0c:	0c 5f       	subi	r16, 0xFC	; 252
    4b0e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b10:	ff e3       	ldi	r31, 0x3F	; 63
    4b12:	f9 83       	std	Y+1, r31	; 0x01
    4b14:	0d c0       	rjmp	.+26     	; 0x4b30 <vfprintf+0x11c>
    4b16:	83 36       	cpi	r24, 0x63	; 99
    4b18:	31 f0       	breq	.+12     	; 0x4b26 <vfprintf+0x112>
    4b1a:	83 37       	cpi	r24, 0x73	; 115
    4b1c:	71 f0       	breq	.+28     	; 0x4b3a <vfprintf+0x126>
    4b1e:	83 35       	cpi	r24, 0x53	; 83
    4b20:	09 f0       	breq	.+2      	; 0x4b24 <vfprintf+0x110>
    4b22:	60 c0       	rjmp	.+192    	; 0x4be4 <vfprintf+0x1d0>
    4b24:	22 c0       	rjmp	.+68     	; 0x4b6a <vfprintf+0x156>
    4b26:	f8 01       	movw	r30, r16
    4b28:	80 81       	ld	r24, Z
    4b2a:	89 83       	std	Y+1, r24	; 0x01
    4b2c:	0e 5f       	subi	r16, 0xFE	; 254
    4b2e:	1f 4f       	sbci	r17, 0xFF	; 255
    4b30:	42 01       	movw	r8, r4
    4b32:	71 e0       	ldi	r23, 0x01	; 1
    4b34:	a7 2e       	mov	r10, r23
    4b36:	b1 2c       	mov	r11, r1
    4b38:	16 c0       	rjmp	.+44     	; 0x4b66 <vfprintf+0x152>
    4b3a:	62 e0       	ldi	r22, 0x02	; 2
    4b3c:	66 2e       	mov	r6, r22
    4b3e:	71 2c       	mov	r7, r1
    4b40:	60 0e       	add	r6, r16
    4b42:	71 1e       	adc	r7, r17
    4b44:	f8 01       	movw	r30, r16
    4b46:	80 80       	ld	r8, Z
    4b48:	91 80       	ldd	r9, Z+1	; 0x01
    4b4a:	26 ff       	sbrs	r18, 6
    4b4c:	03 c0       	rjmp	.+6      	; 0x4b54 <vfprintf+0x140>
    4b4e:	6e 2d       	mov	r22, r14
    4b50:	70 e0       	ldi	r23, 0x00	; 0
    4b52:	02 c0       	rjmp	.+4      	; 0x4b58 <vfprintf+0x144>
    4b54:	6f ef       	ldi	r22, 0xFF	; 255
    4b56:	7f ef       	ldi	r23, 0xFF	; 255
    4b58:	c4 01       	movw	r24, r8
    4b5a:	2c 87       	std	Y+12, r18	; 0x0c
    4b5c:	0e 94 fc 26 	call	0x4df8	; 0x4df8 <strnlen>
    4b60:	5c 01       	movw	r10, r24
    4b62:	83 01       	movw	r16, r6
    4b64:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b66:	2f 77       	andi	r18, 0x7F	; 127
    4b68:	17 c0       	rjmp	.+46     	; 0x4b98 <vfprintf+0x184>
    4b6a:	52 e0       	ldi	r21, 0x02	; 2
    4b6c:	65 2e       	mov	r6, r21
    4b6e:	71 2c       	mov	r7, r1
    4b70:	60 0e       	add	r6, r16
    4b72:	71 1e       	adc	r7, r17
    4b74:	f8 01       	movw	r30, r16
    4b76:	80 80       	ld	r8, Z
    4b78:	91 80       	ldd	r9, Z+1	; 0x01
    4b7a:	26 ff       	sbrs	r18, 6
    4b7c:	03 c0       	rjmp	.+6      	; 0x4b84 <vfprintf+0x170>
    4b7e:	6e 2d       	mov	r22, r14
    4b80:	70 e0       	ldi	r23, 0x00	; 0
    4b82:	02 c0       	rjmp	.+4      	; 0x4b88 <vfprintf+0x174>
    4b84:	6f ef       	ldi	r22, 0xFF	; 255
    4b86:	7f ef       	ldi	r23, 0xFF	; 255
    4b88:	c4 01       	movw	r24, r8
    4b8a:	2c 87       	std	Y+12, r18	; 0x0c
    4b8c:	0e 94 f1 26 	call	0x4de2	; 0x4de2 <strnlen_P>
    4b90:	5c 01       	movw	r10, r24
    4b92:	2c 85       	ldd	r18, Y+12	; 0x0c
    4b94:	20 68       	ori	r18, 0x80	; 128
    4b96:	83 01       	movw	r16, r6
    4b98:	23 fd       	sbrc	r18, 3
    4b9a:	20 c0       	rjmp	.+64     	; 0x4bdc <vfprintf+0x1c8>
    4b9c:	08 c0       	rjmp	.+16     	; 0x4bae <vfprintf+0x19a>
    4b9e:	80 e2       	ldi	r24, 0x20	; 32
    4ba0:	90 e0       	ldi	r25, 0x00	; 0
    4ba2:	b6 01       	movw	r22, r12
    4ba4:	2c 87       	std	Y+12, r18	; 0x0c
    4ba6:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4baa:	fa 94       	dec	r15
    4bac:	2c 85       	ldd	r18, Y+12	; 0x0c
    4bae:	8f 2d       	mov	r24, r15
    4bb0:	90 e0       	ldi	r25, 0x00	; 0
    4bb2:	a8 16       	cp	r10, r24
    4bb4:	b9 06       	cpc	r11, r25
    4bb6:	98 f3       	brcs	.-26     	; 0x4b9e <vfprintf+0x18a>
    4bb8:	11 c0       	rjmp	.+34     	; 0x4bdc <vfprintf+0x1c8>
    4bba:	f4 01       	movw	r30, r8
    4bbc:	27 fd       	sbrc	r18, 7
    4bbe:	85 91       	lpm	r24, Z+
    4bc0:	27 ff       	sbrs	r18, 7
    4bc2:	81 91       	ld	r24, Z+
    4bc4:	4f 01       	movw	r8, r30
    4bc6:	90 e0       	ldi	r25, 0x00	; 0
    4bc8:	b6 01       	movw	r22, r12
    4bca:	2c 87       	std	Y+12, r18	; 0x0c
    4bcc:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4bd0:	2c 85       	ldd	r18, Y+12	; 0x0c
    4bd2:	f1 10       	cpse	r15, r1
    4bd4:	fa 94       	dec	r15
    4bd6:	08 94       	sec
    4bd8:	a1 08       	sbc	r10, r1
    4bda:	b1 08       	sbc	r11, r1
    4bdc:	a1 14       	cp	r10, r1
    4bde:	b1 04       	cpc	r11, r1
    4be0:	61 f7       	brne	.-40     	; 0x4bba <vfprintf+0x1a6>
    4be2:	f1 c0       	rjmp	.+482    	; 0x4dc6 <vfprintf+0x3b2>
    4be4:	84 36       	cpi	r24, 0x64	; 100
    4be6:	11 f0       	breq	.+4      	; 0x4bec <vfprintf+0x1d8>
    4be8:	89 36       	cpi	r24, 0x69	; 105
    4bea:	49 f5       	brne	.+82     	; 0x4c3e <vfprintf+0x22a>
    4bec:	27 ff       	sbrs	r18, 7
    4bee:	08 c0       	rjmp	.+16     	; 0x4c00 <vfprintf+0x1ec>
    4bf0:	f8 01       	movw	r30, r16
    4bf2:	60 81       	ld	r22, Z
    4bf4:	71 81       	ldd	r23, Z+1	; 0x01
    4bf6:	82 81       	ldd	r24, Z+2	; 0x02
    4bf8:	93 81       	ldd	r25, Z+3	; 0x03
    4bfa:	0c 5f       	subi	r16, 0xFC	; 252
    4bfc:	1f 4f       	sbci	r17, 0xFF	; 255
    4bfe:	09 c0       	rjmp	.+18     	; 0x4c12 <vfprintf+0x1fe>
    4c00:	f8 01       	movw	r30, r16
    4c02:	60 81       	ld	r22, Z
    4c04:	71 81       	ldd	r23, Z+1	; 0x01
    4c06:	88 27       	eor	r24, r24
    4c08:	77 fd       	sbrc	r23, 7
    4c0a:	80 95       	com	r24
    4c0c:	98 2f       	mov	r25, r24
    4c0e:	0e 5f       	subi	r16, 0xFE	; 254
    4c10:	1f 4f       	sbci	r17, 0xFF	; 255
    4c12:	4f e6       	ldi	r20, 0x6F	; 111
    4c14:	b4 2e       	mov	r11, r20
    4c16:	b2 22       	and	r11, r18
    4c18:	97 ff       	sbrs	r25, 7
    4c1a:	09 c0       	rjmp	.+18     	; 0x4c2e <vfprintf+0x21a>
    4c1c:	90 95       	com	r25
    4c1e:	80 95       	com	r24
    4c20:	70 95       	com	r23
    4c22:	61 95       	neg	r22
    4c24:	7f 4f       	sbci	r23, 0xFF	; 255
    4c26:	8f 4f       	sbci	r24, 0xFF	; 255
    4c28:	9f 4f       	sbci	r25, 0xFF	; 255
    4c2a:	f0 e8       	ldi	r31, 0x80	; 128
    4c2c:	bf 2a       	or	r11, r31
    4c2e:	a2 01       	movw	r20, r4
    4c30:	2a e0       	ldi	r18, 0x0A	; 10
    4c32:	30 e0       	ldi	r19, 0x00	; 0
    4c34:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__ultoa_invert>
    4c38:	78 2e       	mov	r7, r24
    4c3a:	74 18       	sub	r7, r4
    4c3c:	45 c0       	rjmp	.+138    	; 0x4cc8 <vfprintf+0x2b4>
    4c3e:	85 37       	cpi	r24, 0x75	; 117
    4c40:	31 f4       	brne	.+12     	; 0x4c4e <vfprintf+0x23a>
    4c42:	3f ee       	ldi	r19, 0xEF	; 239
    4c44:	b3 2e       	mov	r11, r19
    4c46:	b2 22       	and	r11, r18
    4c48:	2a e0       	ldi	r18, 0x0A	; 10
    4c4a:	30 e0       	ldi	r19, 0x00	; 0
    4c4c:	25 c0       	rjmp	.+74     	; 0x4c98 <vfprintf+0x284>
    4c4e:	99 ef       	ldi	r25, 0xF9	; 249
    4c50:	b9 2e       	mov	r11, r25
    4c52:	b2 22       	and	r11, r18
    4c54:	8f 36       	cpi	r24, 0x6F	; 111
    4c56:	c1 f0       	breq	.+48     	; 0x4c88 <vfprintf+0x274>
    4c58:	80 37       	cpi	r24, 0x70	; 112
    4c5a:	20 f4       	brcc	.+8      	; 0x4c64 <vfprintf+0x250>
    4c5c:	88 35       	cpi	r24, 0x58	; 88
    4c5e:	09 f0       	breq	.+2      	; 0x4c62 <vfprintf+0x24e>
    4c60:	b5 c0       	rjmp	.+362    	; 0x4dcc <vfprintf+0x3b8>
    4c62:	0d c0       	rjmp	.+26     	; 0x4c7e <vfprintf+0x26a>
    4c64:	80 37       	cpi	r24, 0x70	; 112
    4c66:	21 f0       	breq	.+8      	; 0x4c70 <vfprintf+0x25c>
    4c68:	88 37       	cpi	r24, 0x78	; 120
    4c6a:	09 f0       	breq	.+2      	; 0x4c6e <vfprintf+0x25a>
    4c6c:	af c0       	rjmp	.+350    	; 0x4dcc <vfprintf+0x3b8>
    4c6e:	02 c0       	rjmp	.+4      	; 0x4c74 <vfprintf+0x260>
    4c70:	20 e1       	ldi	r18, 0x10	; 16
    4c72:	b2 2a       	or	r11, r18
    4c74:	b4 fe       	sbrs	r11, 4
    4c76:	0b c0       	rjmp	.+22     	; 0x4c8e <vfprintf+0x27a>
    4c78:	84 e0       	ldi	r24, 0x04	; 4
    4c7a:	b8 2a       	or	r11, r24
    4c7c:	08 c0       	rjmp	.+16     	; 0x4c8e <vfprintf+0x27a>
    4c7e:	b4 fe       	sbrs	r11, 4
    4c80:	09 c0       	rjmp	.+18     	; 0x4c94 <vfprintf+0x280>
    4c82:	e6 e0       	ldi	r30, 0x06	; 6
    4c84:	be 2a       	or	r11, r30
    4c86:	06 c0       	rjmp	.+12     	; 0x4c94 <vfprintf+0x280>
    4c88:	28 e0       	ldi	r18, 0x08	; 8
    4c8a:	30 e0       	ldi	r19, 0x00	; 0
    4c8c:	05 c0       	rjmp	.+10     	; 0x4c98 <vfprintf+0x284>
    4c8e:	20 e1       	ldi	r18, 0x10	; 16
    4c90:	30 e0       	ldi	r19, 0x00	; 0
    4c92:	02 c0       	rjmp	.+4      	; 0x4c98 <vfprintf+0x284>
    4c94:	20 e1       	ldi	r18, 0x10	; 16
    4c96:	32 e0       	ldi	r19, 0x02	; 2
    4c98:	b7 fe       	sbrs	r11, 7
    4c9a:	08 c0       	rjmp	.+16     	; 0x4cac <vfprintf+0x298>
    4c9c:	f8 01       	movw	r30, r16
    4c9e:	60 81       	ld	r22, Z
    4ca0:	71 81       	ldd	r23, Z+1	; 0x01
    4ca2:	82 81       	ldd	r24, Z+2	; 0x02
    4ca4:	93 81       	ldd	r25, Z+3	; 0x03
    4ca6:	0c 5f       	subi	r16, 0xFC	; 252
    4ca8:	1f 4f       	sbci	r17, 0xFF	; 255
    4caa:	07 c0       	rjmp	.+14     	; 0x4cba <vfprintf+0x2a6>
    4cac:	f8 01       	movw	r30, r16
    4cae:	60 81       	ld	r22, Z
    4cb0:	71 81       	ldd	r23, Z+1	; 0x01
    4cb2:	80 e0       	ldi	r24, 0x00	; 0
    4cb4:	90 e0       	ldi	r25, 0x00	; 0
    4cb6:	0e 5f       	subi	r16, 0xFE	; 254
    4cb8:	1f 4f       	sbci	r17, 0xFF	; 255
    4cba:	a2 01       	movw	r20, r4
    4cbc:	0e 94 07 27 	call	0x4e0e	; 0x4e0e <__ultoa_invert>
    4cc0:	78 2e       	mov	r7, r24
    4cc2:	74 18       	sub	r7, r4
    4cc4:	ff e7       	ldi	r31, 0x7F	; 127
    4cc6:	bf 22       	and	r11, r31
    4cc8:	b6 fe       	sbrs	r11, 6
    4cca:	0b c0       	rjmp	.+22     	; 0x4ce2 <vfprintf+0x2ce>
    4ccc:	2e ef       	ldi	r18, 0xFE	; 254
    4cce:	b2 22       	and	r11, r18
    4cd0:	7e 14       	cp	r7, r14
    4cd2:	38 f4       	brcc	.+14     	; 0x4ce2 <vfprintf+0x2ce>
    4cd4:	b4 fe       	sbrs	r11, 4
    4cd6:	07 c0       	rjmp	.+14     	; 0x4ce6 <vfprintf+0x2d2>
    4cd8:	b2 fc       	sbrc	r11, 2
    4cda:	05 c0       	rjmp	.+10     	; 0x4ce6 <vfprintf+0x2d2>
    4cdc:	8f ee       	ldi	r24, 0xEF	; 239
    4cde:	b8 22       	and	r11, r24
    4ce0:	02 c0       	rjmp	.+4      	; 0x4ce6 <vfprintf+0x2d2>
    4ce2:	a7 2c       	mov	r10, r7
    4ce4:	01 c0       	rjmp	.+2      	; 0x4ce8 <vfprintf+0x2d4>
    4ce6:	ae 2c       	mov	r10, r14
    4ce8:	8b 2d       	mov	r24, r11
    4cea:	90 e0       	ldi	r25, 0x00	; 0
    4cec:	b4 fe       	sbrs	r11, 4
    4cee:	0d c0       	rjmp	.+26     	; 0x4d0a <vfprintf+0x2f6>
    4cf0:	fe 01       	movw	r30, r28
    4cf2:	e7 0d       	add	r30, r7
    4cf4:	f1 1d       	adc	r31, r1
    4cf6:	20 81       	ld	r18, Z
    4cf8:	20 33       	cpi	r18, 0x30	; 48
    4cfa:	19 f4       	brne	.+6      	; 0x4d02 <vfprintf+0x2ee>
    4cfc:	e9 ee       	ldi	r30, 0xE9	; 233
    4cfe:	be 22       	and	r11, r30
    4d00:	09 c0       	rjmp	.+18     	; 0x4d14 <vfprintf+0x300>
    4d02:	a3 94       	inc	r10
    4d04:	b2 fe       	sbrs	r11, 2
    4d06:	06 c0       	rjmp	.+12     	; 0x4d14 <vfprintf+0x300>
    4d08:	04 c0       	rjmp	.+8      	; 0x4d12 <vfprintf+0x2fe>
    4d0a:	86 78       	andi	r24, 0x86	; 134
    4d0c:	90 70       	andi	r25, 0x00	; 0
    4d0e:	00 97       	sbiw	r24, 0x00	; 0
    4d10:	09 f0       	breq	.+2      	; 0x4d14 <vfprintf+0x300>
    4d12:	a3 94       	inc	r10
    4d14:	8b 2c       	mov	r8, r11
    4d16:	99 24       	eor	r9, r9
    4d18:	b3 fc       	sbrc	r11, 3
    4d1a:	14 c0       	rjmp	.+40     	; 0x4d44 <vfprintf+0x330>
    4d1c:	b0 fe       	sbrs	r11, 0
    4d1e:	0f c0       	rjmp	.+30     	; 0x4d3e <vfprintf+0x32a>
    4d20:	af 14       	cp	r10, r15
    4d22:	28 f4       	brcc	.+10     	; 0x4d2e <vfprintf+0x31a>
    4d24:	e7 2c       	mov	r14, r7
    4d26:	ef 0c       	add	r14, r15
    4d28:	ea 18       	sub	r14, r10
    4d2a:	af 2c       	mov	r10, r15
    4d2c:	08 c0       	rjmp	.+16     	; 0x4d3e <vfprintf+0x32a>
    4d2e:	e7 2c       	mov	r14, r7
    4d30:	06 c0       	rjmp	.+12     	; 0x4d3e <vfprintf+0x32a>
    4d32:	80 e2       	ldi	r24, 0x20	; 32
    4d34:	90 e0       	ldi	r25, 0x00	; 0
    4d36:	b6 01       	movw	r22, r12
    4d38:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4d3c:	a3 94       	inc	r10
    4d3e:	af 14       	cp	r10, r15
    4d40:	c0 f3       	brcs	.-16     	; 0x4d32 <vfprintf+0x31e>
    4d42:	04 c0       	rjmp	.+8      	; 0x4d4c <vfprintf+0x338>
    4d44:	af 14       	cp	r10, r15
    4d46:	10 f4       	brcc	.+4      	; 0x4d4c <vfprintf+0x338>
    4d48:	fa 18       	sub	r15, r10
    4d4a:	01 c0       	rjmp	.+2      	; 0x4d4e <vfprintf+0x33a>
    4d4c:	ff 24       	eor	r15, r15
    4d4e:	84 fe       	sbrs	r8, 4
    4d50:	0f c0       	rjmp	.+30     	; 0x4d70 <vfprintf+0x35c>
    4d52:	80 e3       	ldi	r24, 0x30	; 48
    4d54:	90 e0       	ldi	r25, 0x00	; 0
    4d56:	b6 01       	movw	r22, r12
    4d58:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4d5c:	82 fe       	sbrs	r8, 2
    4d5e:	1f c0       	rjmp	.+62     	; 0x4d9e <vfprintf+0x38a>
    4d60:	81 fe       	sbrs	r8, 1
    4d62:	03 c0       	rjmp	.+6      	; 0x4d6a <vfprintf+0x356>
    4d64:	88 e5       	ldi	r24, 0x58	; 88
    4d66:	90 e0       	ldi	r25, 0x00	; 0
    4d68:	10 c0       	rjmp	.+32     	; 0x4d8a <vfprintf+0x376>
    4d6a:	88 e7       	ldi	r24, 0x78	; 120
    4d6c:	90 e0       	ldi	r25, 0x00	; 0
    4d6e:	0d c0       	rjmp	.+26     	; 0x4d8a <vfprintf+0x376>
    4d70:	c4 01       	movw	r24, r8
    4d72:	86 78       	andi	r24, 0x86	; 134
    4d74:	90 70       	andi	r25, 0x00	; 0
    4d76:	00 97       	sbiw	r24, 0x00	; 0
    4d78:	91 f0       	breq	.+36     	; 0x4d9e <vfprintf+0x38a>
    4d7a:	81 fc       	sbrc	r8, 1
    4d7c:	02 c0       	rjmp	.+4      	; 0x4d82 <vfprintf+0x36e>
    4d7e:	80 e2       	ldi	r24, 0x20	; 32
    4d80:	01 c0       	rjmp	.+2      	; 0x4d84 <vfprintf+0x370>
    4d82:	8b e2       	ldi	r24, 0x2B	; 43
    4d84:	b7 fc       	sbrc	r11, 7
    4d86:	8d e2       	ldi	r24, 0x2D	; 45
    4d88:	90 e0       	ldi	r25, 0x00	; 0
    4d8a:	b6 01       	movw	r22, r12
    4d8c:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4d90:	06 c0       	rjmp	.+12     	; 0x4d9e <vfprintf+0x38a>
    4d92:	80 e3       	ldi	r24, 0x30	; 48
    4d94:	90 e0       	ldi	r25, 0x00	; 0
    4d96:	b6 01       	movw	r22, r12
    4d98:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4d9c:	ea 94       	dec	r14
    4d9e:	7e 14       	cp	r7, r14
    4da0:	c0 f3       	brcs	.-16     	; 0x4d92 <vfprintf+0x37e>
    4da2:	7a 94       	dec	r7
    4da4:	f2 01       	movw	r30, r4
    4da6:	e7 0d       	add	r30, r7
    4da8:	f1 1d       	adc	r31, r1
    4daa:	80 81       	ld	r24, Z
    4dac:	90 e0       	ldi	r25, 0x00	; 0
    4dae:	b6 01       	movw	r22, r12
    4db0:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4db4:	77 20       	and	r7, r7
    4db6:	a9 f7       	brne	.-22     	; 0x4da2 <vfprintf+0x38e>
    4db8:	06 c0       	rjmp	.+12     	; 0x4dc6 <vfprintf+0x3b2>
    4dba:	80 e2       	ldi	r24, 0x20	; 32
    4dbc:	90 e0       	ldi	r25, 0x00	; 0
    4dbe:	b6 01       	movw	r22, r12
    4dc0:	0e 94 8f 24 	call	0x491e	; 0x491e <fputc>
    4dc4:	fa 94       	dec	r15
    4dc6:	ff 20       	and	r15, r15
    4dc8:	c1 f7       	brne	.-16     	; 0x4dba <vfprintf+0x3a6>
    4dca:	37 ce       	rjmp	.-914    	; 0x4a3a <vfprintf+0x26>
    4dcc:	f6 01       	movw	r30, r12
    4dce:	26 81       	ldd	r18, Z+6	; 0x06
    4dd0:	37 81       	ldd	r19, Z+7	; 0x07
    4dd2:	02 c0       	rjmp	.+4      	; 0x4dd8 <vfprintf+0x3c4>
    4dd4:	2f ef       	ldi	r18, 0xFF	; 255
    4dd6:	3f ef       	ldi	r19, 0xFF	; 255
    4dd8:	c9 01       	movw	r24, r18
    4dda:	2c 96       	adiw	r28, 0x0c	; 12
    4ddc:	e2 e1       	ldi	r30, 0x12	; 18
    4dde:	0c 94 7e 27 	jmp	0x4efc	; 0x4efc <__epilogue_restores__>

00004de2 <strnlen_P>:
    4de2:	fc 01       	movw	r30, r24
    4de4:	05 90       	lpm	r0, Z+
    4de6:	61 50       	subi	r22, 0x01	; 1
    4de8:	70 40       	sbci	r23, 0x00	; 0
    4dea:	01 10       	cpse	r0, r1
    4dec:	d8 f7       	brcc	.-10     	; 0x4de4 <strnlen_P+0x2>
    4dee:	80 95       	com	r24
    4df0:	90 95       	com	r25
    4df2:	8e 0f       	add	r24, r30
    4df4:	9f 1f       	adc	r25, r31
    4df6:	08 95       	ret

00004df8 <strnlen>:
    4df8:	fc 01       	movw	r30, r24
    4dfa:	61 50       	subi	r22, 0x01	; 1
    4dfc:	70 40       	sbci	r23, 0x00	; 0
    4dfe:	01 90       	ld	r0, Z+
    4e00:	01 10       	cpse	r0, r1
    4e02:	d8 f7       	brcc	.-10     	; 0x4dfa <strnlen+0x2>
    4e04:	80 95       	com	r24
    4e06:	90 95       	com	r25
    4e08:	8e 0f       	add	r24, r30
    4e0a:	9f 1f       	adc	r25, r31
    4e0c:	08 95       	ret

00004e0e <__ultoa_invert>:
    4e0e:	fa 01       	movw	r30, r20
    4e10:	aa 27       	eor	r26, r26
    4e12:	28 30       	cpi	r18, 0x08	; 8
    4e14:	51 f1       	breq	.+84     	; 0x4e6a <__ultoa_invert+0x5c>
    4e16:	20 31       	cpi	r18, 0x10	; 16
    4e18:	81 f1       	breq	.+96     	; 0x4e7a <__ultoa_invert+0x6c>
    4e1a:	e8 94       	clt
    4e1c:	6f 93       	push	r22
    4e1e:	6e 7f       	andi	r22, 0xFE	; 254
    4e20:	6e 5f       	subi	r22, 0xFE	; 254
    4e22:	7f 4f       	sbci	r23, 0xFF	; 255
    4e24:	8f 4f       	sbci	r24, 0xFF	; 255
    4e26:	9f 4f       	sbci	r25, 0xFF	; 255
    4e28:	af 4f       	sbci	r26, 0xFF	; 255
    4e2a:	b1 e0       	ldi	r27, 0x01	; 1
    4e2c:	3e d0       	rcall	.+124    	; 0x4eaa <__ultoa_invert+0x9c>
    4e2e:	b4 e0       	ldi	r27, 0x04	; 4
    4e30:	3c d0       	rcall	.+120    	; 0x4eaa <__ultoa_invert+0x9c>
    4e32:	67 0f       	add	r22, r23
    4e34:	78 1f       	adc	r23, r24
    4e36:	89 1f       	adc	r24, r25
    4e38:	9a 1f       	adc	r25, r26
    4e3a:	a1 1d       	adc	r26, r1
    4e3c:	68 0f       	add	r22, r24
    4e3e:	79 1f       	adc	r23, r25
    4e40:	8a 1f       	adc	r24, r26
    4e42:	91 1d       	adc	r25, r1
    4e44:	a1 1d       	adc	r26, r1
    4e46:	6a 0f       	add	r22, r26
    4e48:	71 1d       	adc	r23, r1
    4e4a:	81 1d       	adc	r24, r1
    4e4c:	91 1d       	adc	r25, r1
    4e4e:	a1 1d       	adc	r26, r1
    4e50:	20 d0       	rcall	.+64     	; 0x4e92 <__ultoa_invert+0x84>
    4e52:	09 f4       	brne	.+2      	; 0x4e56 <__ultoa_invert+0x48>
    4e54:	68 94       	set
    4e56:	3f 91       	pop	r19
    4e58:	2a e0       	ldi	r18, 0x0A	; 10
    4e5a:	26 9f       	mul	r18, r22
    4e5c:	11 24       	eor	r1, r1
    4e5e:	30 19       	sub	r19, r0
    4e60:	30 5d       	subi	r19, 0xD0	; 208
    4e62:	31 93       	st	Z+, r19
    4e64:	de f6       	brtc	.-74     	; 0x4e1c <__ultoa_invert+0xe>
    4e66:	cf 01       	movw	r24, r30
    4e68:	08 95       	ret
    4e6a:	46 2f       	mov	r20, r22
    4e6c:	47 70       	andi	r20, 0x07	; 7
    4e6e:	40 5d       	subi	r20, 0xD0	; 208
    4e70:	41 93       	st	Z+, r20
    4e72:	b3 e0       	ldi	r27, 0x03	; 3
    4e74:	0f d0       	rcall	.+30     	; 0x4e94 <__ultoa_invert+0x86>
    4e76:	c9 f7       	brne	.-14     	; 0x4e6a <__ultoa_invert+0x5c>
    4e78:	f6 cf       	rjmp	.-20     	; 0x4e66 <__ultoa_invert+0x58>
    4e7a:	46 2f       	mov	r20, r22
    4e7c:	4f 70       	andi	r20, 0x0F	; 15
    4e7e:	40 5d       	subi	r20, 0xD0	; 208
    4e80:	4a 33       	cpi	r20, 0x3A	; 58
    4e82:	18 f0       	brcs	.+6      	; 0x4e8a <__ultoa_invert+0x7c>
    4e84:	49 5d       	subi	r20, 0xD9	; 217
    4e86:	31 fd       	sbrc	r19, 1
    4e88:	40 52       	subi	r20, 0x20	; 32
    4e8a:	41 93       	st	Z+, r20
    4e8c:	02 d0       	rcall	.+4      	; 0x4e92 <__ultoa_invert+0x84>
    4e8e:	a9 f7       	brne	.-22     	; 0x4e7a <__ultoa_invert+0x6c>
    4e90:	ea cf       	rjmp	.-44     	; 0x4e66 <__ultoa_invert+0x58>
    4e92:	b4 e0       	ldi	r27, 0x04	; 4
    4e94:	a6 95       	lsr	r26
    4e96:	97 95       	ror	r25
    4e98:	87 95       	ror	r24
    4e9a:	77 95       	ror	r23
    4e9c:	67 95       	ror	r22
    4e9e:	ba 95       	dec	r27
    4ea0:	c9 f7       	brne	.-14     	; 0x4e94 <__ultoa_invert+0x86>
    4ea2:	00 97       	sbiw	r24, 0x00	; 0
    4ea4:	61 05       	cpc	r22, r1
    4ea6:	71 05       	cpc	r23, r1
    4ea8:	08 95       	ret
    4eaa:	9b 01       	movw	r18, r22
    4eac:	ac 01       	movw	r20, r24
    4eae:	0a 2e       	mov	r0, r26
    4eb0:	06 94       	lsr	r0
    4eb2:	57 95       	ror	r21
    4eb4:	47 95       	ror	r20
    4eb6:	37 95       	ror	r19
    4eb8:	27 95       	ror	r18
    4eba:	ba 95       	dec	r27
    4ebc:	c9 f7       	brne	.-14     	; 0x4eb0 <__ultoa_invert+0xa2>
    4ebe:	62 0f       	add	r22, r18
    4ec0:	73 1f       	adc	r23, r19
    4ec2:	84 1f       	adc	r24, r20
    4ec4:	95 1f       	adc	r25, r21
    4ec6:	a0 1d       	adc	r26, r0
    4ec8:	08 95       	ret

00004eca <__prologue_saves__>:
    4eca:	2f 92       	push	r2
    4ecc:	3f 92       	push	r3
    4ece:	4f 92       	push	r4
    4ed0:	5f 92       	push	r5
    4ed2:	6f 92       	push	r6
    4ed4:	7f 92       	push	r7
    4ed6:	8f 92       	push	r8
    4ed8:	9f 92       	push	r9
    4eda:	af 92       	push	r10
    4edc:	bf 92       	push	r11
    4ede:	cf 92       	push	r12
    4ee0:	df 92       	push	r13
    4ee2:	ef 92       	push	r14
    4ee4:	ff 92       	push	r15
    4ee6:	0f 93       	push	r16
    4ee8:	1f 93       	push	r17
    4eea:	cf 93       	push	r28
    4eec:	df 93       	push	r29
    4eee:	cd b7       	in	r28, 0x3d	; 61
    4ef0:	de b7       	in	r29, 0x3e	; 62
    4ef2:	ca 1b       	sub	r28, r26
    4ef4:	db 0b       	sbc	r29, r27
    4ef6:	cd bf       	out	0x3d, r28	; 61
    4ef8:	de bf       	out	0x3e, r29	; 62
    4efa:	09 94       	ijmp

00004efc <__epilogue_restores__>:
    4efc:	2a 88       	ldd	r2, Y+18	; 0x12
    4efe:	39 88       	ldd	r3, Y+17	; 0x11
    4f00:	48 88       	ldd	r4, Y+16	; 0x10
    4f02:	5f 84       	ldd	r5, Y+15	; 0x0f
    4f04:	6e 84       	ldd	r6, Y+14	; 0x0e
    4f06:	7d 84       	ldd	r7, Y+13	; 0x0d
    4f08:	8c 84       	ldd	r8, Y+12	; 0x0c
    4f0a:	9b 84       	ldd	r9, Y+11	; 0x0b
    4f0c:	aa 84       	ldd	r10, Y+10	; 0x0a
    4f0e:	b9 84       	ldd	r11, Y+9	; 0x09
    4f10:	c8 84       	ldd	r12, Y+8	; 0x08
    4f12:	df 80       	ldd	r13, Y+7	; 0x07
    4f14:	ee 80       	ldd	r14, Y+6	; 0x06
    4f16:	fd 80       	ldd	r15, Y+5	; 0x05
    4f18:	0c 81       	ldd	r16, Y+4	; 0x04
    4f1a:	1b 81       	ldd	r17, Y+3	; 0x03
    4f1c:	aa 81       	ldd	r26, Y+2	; 0x02
    4f1e:	b9 81       	ldd	r27, Y+1	; 0x01
    4f20:	ce 0f       	add	r28, r30
    4f22:	d1 1d       	adc	r29, r1
    4f24:	cd bf       	out	0x3d, r28	; 61
    4f26:	de bf       	out	0x3e, r29	; 62
    4f28:	ed 01       	movw	r28, r26
    4f2a:	08 95       	ret

00004f2c <_exit>:
    4f2c:	f8 94       	cli

00004f2e <__stop_program>:
    4f2e:	ff cf       	rjmp	.-2      	; 0x4f2e <__stop_program>
