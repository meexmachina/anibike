
AniBike2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004ea  00800100  00003786  0000381a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003786  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000140  008005ea  008005ea  00003d04  2**0
                  ALLOC
  3 .debug_aranges 000000c0  00000000  00000000  00003d08  2**3
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000740  00000000  00000000  00003dc8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002d34  00000000  00000000  00004508  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095c  00000000  00000000  0000723c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002e9a  00000000  00000000  00007b98  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003b0  00000000  00000000  0000aa34  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000008c6  00000000  00000000  0000ade4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000012f8  00000000  00000000  0000b6aa  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000b60  00000000  00000000  0000c9a2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 59 02 	jmp	0x4b2	; 0x4b2 <__vector_1>
       8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
       c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      10:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_4>
      14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 b7 00 	jmp	0x16e	; 0x16e <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      2c:	0c 94 f6 01 	jmp	0x3ec	; 0x3ec <__vector_11>
      30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      34:	0c 94 25 02 	jmp	0x44a	; 0x44a <__vector_13>
      38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d8 e0       	ldi	r29, 0x08	; 8
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	15 e0       	ldi	r17, 0x05	; 5
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e6 e8       	ldi	r30, 0x86	; 134
      70:	f7 e3       	ldi	r31, 0x37	; 55
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	aa 3e       	cpi	r26, 0xEA	; 234
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	17 e0       	ldi	r17, 0x07	; 7
      80:	aa ee       	ldi	r26, 0xEA	; 234
      82:	b5 e0       	ldi	r27, 0x05	; 5
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	aa 32       	cpi	r26, 0x2A	; 42
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 f7 04 	call	0x9ee	; 0x9ee <main>
      92:	0c 94 c1 1b 	jmp	0x3782	; 0x3782 <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <Anibike_InitLeds>:

//==============================================================================================
void Anibike_InitLeds ( void )
{
	// Direction of rows
	DDRA  = 0b11111111;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000000;
      9e:	12 b8       	out	0x02, r1	; 2

	PORTB&= 0b00001111;
      a0:	85 b1       	in	r24, 0x05	; 5
      a2:	8f 70       	andi	r24, 0x0F	; 15
      a4:	85 b9       	out	0x05, r24	; 5
	DDRB &= 0b00001111;
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	8f 70       	andi	r24, 0x0F	; 15
      aa:	84 b9       	out	0x04, r24	; 4

	PORTC = 0b00000000;
      ac:	18 b8       	out	0x08, r1	; 8
	DDRC  = 0b00000000;
      ae:	17 b8       	out	0x07, r1	; 7

	PORTD = 0b00000000;
      b0:	1b b8       	out	0x0b, r1	; 11
	DDRD  = 0b11000000;
      b2:	80 ec       	ldi	r24, 0xC0	; 192
      b4:	8a b9       	out	0x0a, r24	; 10

	PORTF = 0b00000000;
      b6:	11 ba       	out	0x11, r1	; 17
	DDRF  = 0b00000000;
      b8:	10 ba       	out	0x10, r1	; 16

	PORTG = 0b00000001;
      ba:	81 e0       	ldi	r24, 0x01	; 1
      bc:	84 bb       	out	0x14, r24	; 20
	DDRG =  0b00011101;
      be:	8d e1       	ldi	r24, 0x1D	; 29
      c0:	83 bb       	out	0x13, r24	; 19
}
      c2:	08 95       	ret

000000c4 <AniBike_CheckSecondRow>:
// Check if the second row is connected PG0 = '1'  PG1 = 'Z'
//==============================================================================================
void AniBike_CheckSecondRow ( void )
{
	uint8_t temp = PING;
	if ( temp & 0b00000010 )  // Connected
      c4:	91 99       	sbic	0x12, 1	; 18
      c6:	03 c0       	rjmp	.+6      	; 0xce <AniBike_CheckSecondRow+0xa>
		g_bBothRows = 1;	
	else // Not Connected
		g_bBothRows = 0;
      c8:	10 92 01 01 	sts	0x0101, r1
      cc:	08 95       	ret
//==============================================================================================
void AniBike_CheckSecondRow ( void )
{
	uint8_t temp = PING;
	if ( temp & 0b00000010 )  // Connected
		g_bBothRows = 1;	
      ce:	81 e0       	ldi	r24, 0x01	; 1
      d0:	80 93 01 01 	sts	0x0101, r24
      d4:	08 95       	ret

000000d6 <AniBike_InitPorts>:
// Other Initializations
//==============================================================================================
void AniBike_InitPorts ( void )
{
	// This is checking if the other row is connected
	DDRG = 0b00000001;
      d6:	81 e0       	ldi	r24, 0x01	; 1
      d8:	83 bb       	out	0x13, r24	; 19
	PORTG = 0b00000001;
      da:	84 bb       	out	0x14, r24	; 20
// Check if the second row is connected PG0 = '1'  PG1 = 'Z'
//==============================================================================================
void AniBike_CheckSecondRow ( void )
{
	uint8_t temp = PING;
	if ( temp & 0b00000010 )  // Connected
      dc:	91 99       	sbic	0x12, 1	; 18
      de:	03 c0       	rjmp	.+6      	; 0xe6 <AniBike_InitPorts+0x10>
		g_bBothRows = 1;	
	else // Not Connected
		g_bBothRows = 0;
      e0:	10 92 01 01 	sts	0x0101, r1
      e4:	08 95       	ret
//==============================================================================================
void AniBike_CheckSecondRow ( void )
{
	uint8_t temp = PING;
	if ( temp & 0b00000010 )  // Connected
		g_bBothRows = 1;	
      e6:	80 93 01 01 	sts	0x0101, r24
      ea:	08 95       	ret

000000ec <ShutOffADC>:

// Shut down ADC
//==============================================================================================
void  ShutOffADC(void)
{
    ACSR = (1<<ACD);                        // disable A/D comparator
      ec:	80 e8       	ldi	r24, 0x80	; 128
      ee:	80 bf       	out	0x30, r24	; 48
    ADCSRA = (0<<ADEN);                     // disable A/D converter
      f0:	10 92 7a 00 	sts	0x007A, r1
}
      f4:	08 95       	ret

000000f6 <AniBike_EnterPowerDown>:
   #define SLEEP_MODE_STANDBY      4
   #define SLEEP_MODE_EXT_STANDBY  5
*/

	// ADC Disabling
	cli();
      f6:	f8 94       	cli
	TIMSK0 &= ~(1<<TOIE0); 					// Set Overflow interrupt OFF
      f8:	ee e6       	ldi	r30, 0x6E	; 110
      fa:	f0 e0       	ldi	r31, 0x00	; 0
      fc:	80 81       	ld	r24, Z
      fe:	8e 7f       	andi	r24, 0xFE	; 254
     100:	80 83       	st	Z, r24
	TIMSK2 &= ~(1<<OCIE2A);					// Set Timer 2 interrupt OFF
     102:	e0 e7       	ldi	r30, 0x70	; 112
     104:	f0 e0       	ldi	r31, 0x00	; 0
     106:	80 81       	ld	r24, Z
     108:	8d 7f       	andi	r24, 0xFD	; 253
     10a:	80 83       	st	Z, r24
	
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		
     10c:	e1 ec       	ldi	r30, 0xC1	; 193
     10e:	f0 e0       	ldi	r31, 0x00	; 0
     110:	80 81       	ld	r24, Z
     112:	80 68       	ori	r24, 0x80	; 128
     114:	80 83       	st	Z, r24

	//CLKPR = 0b10001111;

	PRR = 0b00011101;
     116:	8d e1       	ldi	r24, 0x1D	; 29
     118:	80 93 64 00 	sts	0x0064, r24
	//PRR = (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
	set_sleep_mode(SLEEP_MODE_IDLE);
     11c:	83 b7       	in	r24, 0x33	; 51
     11e:	81 7f       	andi	r24, 0xF1	; 241
     120:	83 bf       	out	0x33, r24	; 51
    
	sleep_enable();
     122:	83 b7       	in	r24, 0x33	; 51
     124:	81 60       	ori	r24, 0x01	; 1
     126:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     128:	85 b7       	in	r24, 0x35	; 53
     12a:	80 66       	ori	r24, 0x60	; 96
     12c:	85 bf       	out	0x35, r24	; 53
     12e:	8f 7d       	andi	r24, 0xDF	; 223
     130:	85 bf       	out	0x35, r24	; 53
	sei();
     132:	78 94       	sei
	sleep_cpu();
     134:	88 95       	sleep
	PRR = 0b00010001;
     136:	81 e1       	ldi	r24, 0x11	; 17
     138:	80 93 64 00 	sts	0x0064, r24
	sleep_disable();
     13c:	83 b7       	in	r24, 0x33	; 51
     13e:	8e 7f       	andi	r24, 0xFE	; 254
     140:	83 bf       	out	0x33, r24	; 51


	TIMSK0 |= (1<<TOIE0); 					// Set Overflow interrupt ON
     142:	ee e6       	ldi	r30, 0x6E	; 110
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	80 81       	ld	r24, Z
     148:	81 60       	ori	r24, 0x01	; 1
     14a:	80 83       	st	Z, r24
	TIMSK2 |= (1<<OCIE2A);					// Set Timer 2 interrupt ON
     14c:	e0 e7       	ldi	r30, 0x70	; 112
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	82 60       	ori	r24, 0x02	; 2
     154:	80 83       	st	Z, r24
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		    
     156:	e1 ec       	ldi	r30, 0xC1	; 193
     158:	f0 e0       	ldi	r31, 0x00	; 0
     15a:	80 81       	ld	r24, Z
     15c:	80 68       	ori	r24, 0x80	; 128
     15e:	80 83       	st	Z, r24

	sei();
     160:	78 94       	sei

	//CLKPR = 0b00000000;
	PRR = 0b00010001;
     162:	81 e1       	ldi	r24, 0x11	; 17
     164:	80 93 64 00 	sts	0x0064, r24
	g_bEnterToIdleMode = 0;
     168:	10 92 03 01 	sts	0x0103, r1
}
     16c:	08 95       	ret

0000016e <__vector_7>:
//==============================================================================================

// Interrupt for changing single angle units
//==============================================================================================
ISR (TIMER1_COMPA_vect/*, ISR_NOBLOCK*/)
{
     16e:	1f 92       	push	r1
     170:	0f 92       	push	r0
     172:	0f b6       	in	r0, 0x3f	; 63
     174:	0f 92       	push	r0
     176:	11 24       	eor	r1, r1
     178:	af 92       	push	r10
     17a:	bf 92       	push	r11
     17c:	cf 92       	push	r12
     17e:	df 92       	push	r13
     180:	ef 92       	push	r14
     182:	ff 92       	push	r15
     184:	0f 93       	push	r16
     186:	1f 93       	push	r17
     188:	2f 93       	push	r18
     18a:	3f 93       	push	r19
     18c:	4f 93       	push	r20
     18e:	5f 93       	push	r21
     190:	8f 93       	push	r24
     192:	9f 93       	push	r25
     194:	af 93       	push	r26
     196:	bf 93       	push	r27
	unsigned char adrByte1, adrByte2, adrByte3;

	ROW_PORT = 0;
     198:	12 b8       	out	0x02, r1	; 2
	ROW_PATTERN = 0;
     19a:	1b bc       	out	0x2b, r1	; 43

#ifdef __ENABLE_POWER_SAFE
	if (g_bPowerSafeMode == 1)
     19c:	80 91 02 01 	lds	r24, 0x0102
     1a0:	81 30       	cpi	r24, 0x01	; 1
     1a2:	99 f1       	breq	.+102    	; 0x20a <__vector_7+0x9c>
		return;
#endif

	g_iInnerCounter++;
     1a4:	80 91 14 06 	lds	r24, 0x0614
     1a8:	8f 5f       	subi	r24, 0xFF	; 255
     1aa:	80 93 14 06 	sts	0x0614, r24
	if ( g_iInnerCounter == 200 ) 
     1ae:	80 91 14 06 	lds	r24, 0x0614
     1b2:	88 3c       	cpi	r24, 0xC8	; 200
     1b4:	09 f4       	brne	.+2      	; 0x1b8 <__vector_7+0x4a>
     1b6:	90 c0       	rjmp	.+288    	; 0x2d8 <__vector_7+0x16a>
#endif
		return;
	}

	// Switch Buffers
	if ( WHICH_BUFFER == 0 )
     1b8:	f6 9b       	sbis	0x1e, 6	; 30
     1ba:	3c c0       	rjmp	.+120    	; 0x234 <__vector_7+0xc6>
	{
		SET_SECOND_BUFFER;
	}
	else
	{
		SET_FIRST_BUFFER;
     1bc:	f6 98       	cbi	0x1e, 6	; 30
	}

	if ( IS_HIGHSPEED )
     1be:	f7 99       	sbic	0x1e, 7	; 30
     1c0:	3c c0       	rjmp	.+120    	; 0x23a <__vector_7+0xcc>
		while (! (SPSR & (1<<SPIF))) {}

	}
	else
	{
		g_iFlashRead = 96;		// Flash needs reading
     1c2:	80 e6       	ldi	r24, 0x60	; 96
     1c4:	80 93 00 01 	sts	0x0100, r24

		g_iCurrentAddress += 96;
     1c8:	80 91 10 06 	lds	r24, 0x0610
     1cc:	90 91 11 06 	lds	r25, 0x0611
     1d0:	a0 91 12 06 	lds	r26, 0x0612
     1d4:	b0 91 13 06 	lds	r27, 0x0613
     1d8:	80 5a       	subi	r24, 0xA0	; 160
     1da:	9f 4f       	sbci	r25, 0xFF	; 255
     1dc:	af 4f       	sbci	r26, 0xFF	; 255
     1de:	bf 4f       	sbci	r27, 0xFF	; 255
     1e0:	80 93 10 06 	sts	0x0610, r24
     1e4:	90 93 11 06 	sts	0x0611, r25
     1e8:	a0 93 12 06 	sts	0x0612, r26
     1ec:	b0 93 13 06 	sts	0x0613, r27

		if ( g_iInnerCounter == 100 )
     1f0:	80 91 14 06 	lds	r24, 0x0614
     1f4:	84 36       	cpi	r24, 0x64	; 100
     1f6:	09 f4       	brne	.+2      	; 0x1fa <__vector_7+0x8c>
     1f8:	75 c0       	rjmp	.+234    	; 0x2e4 <__vector_7+0x176>
			g_iCurrentPolarity = 1;

		}
	}

	SET_ROW(0);
     1fa:	8e b3       	in	r24, 0x1e	; 30
     1fc:	80 7f       	andi	r24, 0xF0	; 240
     1fe:	8e bb       	out	0x1e, r24	; 30
     200:	8e b3       	in	r24, 0x1e	; 30
     202:	8e bb       	out	0x1e, r24	; 30
	ROW_PATTERN = 1;
     204:	81 e0       	ldi	r24, 0x01	; 1
     206:	8b bd       	out	0x2b, r24	; 43
	PWM_COUNTER = 0;
     208:	1a bc       	out	0x2a, r1	; 42

}
     20a:	bf 91       	pop	r27
     20c:	af 91       	pop	r26
     20e:	9f 91       	pop	r25
     210:	8f 91       	pop	r24
     212:	5f 91       	pop	r21
     214:	4f 91       	pop	r20
     216:	3f 91       	pop	r19
     218:	2f 91       	pop	r18
     21a:	1f 91       	pop	r17
     21c:	0f 91       	pop	r16
     21e:	ff 90       	pop	r15
     220:	ef 90       	pop	r14
     222:	df 90       	pop	r13
     224:	cf 90       	pop	r12
     226:	bf 90       	pop	r11
     228:	af 90       	pop	r10
     22a:	0f 90       	pop	r0
     22c:	0f be       	out	0x3f, r0	; 63
     22e:	0f 90       	pop	r0
     230:	1f 90       	pop	r1
     232:	18 95       	reti
	}

	// Switch Buffers
	if ( WHICH_BUFFER == 0 )
	{
		SET_SECOND_BUFFER;
     234:	f6 9a       	sbi	0x1e, 6	; 30
	else
	{
		SET_FIRST_BUFFER;
	}

	if ( IS_HIGHSPEED )
     236:	f7 9b       	sbis	0x1e, 7	; 30
     238:	c4 cf       	rjmp	.-120    	; 0x1c2 <__vector_7+0x54>
	{
		g_iFlashRead = 48;		// Flash needs reading
     23a:	80 e3       	ldi	r24, 0x30	; 48
     23c:	80 93 00 01 	sts	0x0100, r24

		CS_UP;
     240:	28 9a       	sbi	0x05, 0	; 5
		if (g_iInnerCounter == 100)
     242:	80 91 14 06 	lds	r24, 0x0614
     246:	84 36       	cpi	r24, 0x64	; 100
     248:	09 f4       	brne	.+2      	; 0x24c <__vector_7+0xde>
     24a:	92 c0       	rjmp	.+292    	; 0x370 <__vector_7+0x202>
			g_iCurrentPolarity = 1;	
			g_iCurrentAddress = g_iStartingAddress;
		}
		else
		{
			g_iCurrentAddress += 96;
     24c:	80 91 10 06 	lds	r24, 0x0610
     250:	90 91 11 06 	lds	r25, 0x0611
     254:	a0 91 12 06 	lds	r26, 0x0612
     258:	b0 91 13 06 	lds	r27, 0x0613
     25c:	80 5a       	subi	r24, 0xA0	; 160
     25e:	9f 4f       	sbci	r25, 0xFF	; 255
     260:	af 4f       	sbci	r26, 0xFF	; 255
     262:	bf 4f       	sbci	r27, 0xFF	; 255
     264:	80 93 10 06 	sts	0x0610, r24
     268:	90 93 11 06 	sts	0x0611, r25
     26c:	a0 93 12 06 	sts	0x0612, r26
     270:	b0 93 13 06 	sts	0x0613, r27
		}

		adrByte1 = (g_iCurrentAddress>>16)&0xff;
     274:	20 91 10 06 	lds	r18, 0x0610
     278:	30 91 11 06 	lds	r19, 0x0611
     27c:	40 91 12 06 	lds	r20, 0x0612
     280:	50 91 13 06 	lds	r21, 0x0613
		adrByte2 = (g_iCurrentAddress>>8)&0xff;
     284:	e0 90 10 06 	lds	r14, 0x0610
     288:	f0 90 11 06 	lds	r15, 0x0611
     28c:	00 91 12 06 	lds	r16, 0x0612
     290:	10 91 13 06 	lds	r17, 0x0613
		adrByte3 = g_iCurrentAddress&0xff;  
     294:	a0 90 10 06 	lds	r10, 0x0610
     298:	b0 90 11 06 	lds	r11, 0x0611
     29c:	c0 90 12 06 	lds	r12, 0x0612
     2a0:	d0 90 13 06 	lds	r13, 0x0613
		CS_DOWN;
     2a4:	28 98       	cbi	0x05, 0	; 5

		SPDR = READ_ARRAY;
     2a6:	83 e0       	ldi	r24, 0x03	; 3
     2a8:	8e bd       	out	0x2e, r24	; 46
		while (! (SPSR & (1<<SPIF))) {}
     2aa:	0d b4       	in	r0, 0x2d	; 45
     2ac:	07 fe       	sbrs	r0, 7
     2ae:	fd cf       	rjmp	.-6      	; 0x2aa <__vector_7+0x13c>
		else
		{
			g_iCurrentAddress += 96;
		}

		adrByte1 = (g_iCurrentAddress>>16)&0xff;
     2b0:	ca 01       	movw	r24, r20
     2b2:	aa 27       	eor	r26, r26
     2b4:	bb 27       	eor	r27, r27
		adrByte3 = g_iCurrentAddress&0xff;  
		CS_DOWN;

		SPDR = READ_ARRAY;
		while (! (SPSR & (1<<SPIF))) {}
		SPDR = adrByte1;
     2b6:	8e bd       	out	0x2e, r24	; 46
		while (! (SPSR & (1<<SPIF))) {}
     2b8:	0d b4       	in	r0, 0x2d	; 45
     2ba:	07 fe       	sbrs	r0, 7
     2bc:	fd cf       	rjmp	.-6      	; 0x2b8 <__vector_7+0x14a>
		{
			g_iCurrentAddress += 96;
		}

		adrByte1 = (g_iCurrentAddress>>16)&0xff;
		adrByte2 = (g_iCurrentAddress>>8)&0xff;
     2be:	bb 27       	eor	r27, r27
     2c0:	a1 2f       	mov	r26, r17
     2c2:	90 2f       	mov	r25, r16
     2c4:	8f 2d       	mov	r24, r15

		SPDR = READ_ARRAY;
		while (! (SPSR & (1<<SPIF))) {}
		SPDR = adrByte1;
		while (! (SPSR & (1<<SPIF))) {}
		SPDR = adrByte2;
     2c6:	8e bd       	out	0x2e, r24	; 46
		while (! (SPSR & (1<<SPIF))) {}
     2c8:	0d b4       	in	r0, 0x2d	; 45
     2ca:	07 fe       	sbrs	r0, 7
     2cc:	fd cf       	rjmp	.-6      	; 0x2c8 <__vector_7+0x15a>
		SPDR = adrByte3;
     2ce:	ae bc       	out	0x2e, r10	; 46
		while (! (SPSR & (1<<SPIF))) {}
     2d0:	0d b4       	in	r0, 0x2d	; 45
     2d2:	07 fe       	sbrs	r0, 7
     2d4:	fd cf       	rjmp	.-6      	; 0x2d0 <__vector_7+0x162>
     2d6:	91 cf       	rjmp	.-222    	; 0x1fa <__vector_7+0x8c>
#endif

	g_iInnerCounter++;
	if ( g_iInnerCounter == 200 ) 
	{
		g_iCurrentPolarity = 0;		
     2d8:	10 92 08 06 	sts	0x0608, r1

#ifdef __ENABLE_POWER_SAFE
		g_bPowerSafeMode = 1;		
     2dc:	81 e0       	ldi	r24, 0x01	; 1
     2de:	80 93 02 01 	sts	0x0102, r24
     2e2:	93 cf       	rjmp	.-218    	; 0x20a <__vector_7+0x9c>

		g_iCurrentAddress += 96;

		if ( g_iInnerCounter == 100 )
		{	
			CS_UP;
     2e4:	28 9a       	sbi	0x05, 0	; 5
			g_iCurrentAddress = g_iStartingAddress;
     2e6:	80 91 0c 06 	lds	r24, 0x060C
     2ea:	90 91 0d 06 	lds	r25, 0x060D
     2ee:	a0 91 0e 06 	lds	r26, 0x060E
     2f2:	b0 91 0f 06 	lds	r27, 0x060F
     2f6:	80 93 10 06 	sts	0x0610, r24
     2fa:	90 93 11 06 	sts	0x0611, r25
     2fe:	a0 93 12 06 	sts	0x0612, r26
     302:	b0 93 13 06 	sts	0x0613, r27
	
			adrByte1 = (g_iStartingAddress>>16)&0xff;
     306:	20 91 0c 06 	lds	r18, 0x060C
     30a:	30 91 0d 06 	lds	r19, 0x060D
     30e:	40 91 0e 06 	lds	r20, 0x060E
     312:	50 91 0f 06 	lds	r21, 0x060F
			adrByte2 = (g_iStartingAddress>>8)&0xff;
     316:	e0 90 0c 06 	lds	r14, 0x060C
     31a:	f0 90 0d 06 	lds	r15, 0x060D
     31e:	00 91 0e 06 	lds	r16, 0x060E
     322:	10 91 0f 06 	lds	r17, 0x060F
			adrByte3 = g_iStartingAddress&0xff;  
     326:	a0 90 0c 06 	lds	r10, 0x060C
     32a:	b0 90 0d 06 	lds	r11, 0x060D
     32e:	c0 90 0e 06 	lds	r12, 0x060E
     332:	d0 90 0f 06 	lds	r13, 0x060F
			CS_DOWN;
     336:	28 98       	cbi	0x05, 0	; 5

			SPDR = READ_ARRAY;
     338:	83 e0       	ldi	r24, 0x03	; 3
     33a:	8e bd       	out	0x2e, r24	; 46
			while (! (SPSR & (1<<SPIF))) {}
     33c:	0d b4       	in	r0, 0x2d	; 45
     33e:	07 fe       	sbrs	r0, 7
     340:	fd cf       	rjmp	.-6      	; 0x33c <__vector_7+0x1ce>
		if ( g_iInnerCounter == 100 )
		{	
			CS_UP;
			g_iCurrentAddress = g_iStartingAddress;
	
			adrByte1 = (g_iStartingAddress>>16)&0xff;
     342:	ca 01       	movw	r24, r20
     344:	aa 27       	eor	r26, r26
     346:	bb 27       	eor	r27, r27
			adrByte3 = g_iStartingAddress&0xff;  
			CS_DOWN;

			SPDR = READ_ARRAY;
			while (! (SPSR & (1<<SPIF))) {}
			SPDR = adrByte1;
     348:	8e bd       	out	0x2e, r24	; 46
			while (! (SPSR & (1<<SPIF))) {}
     34a:	0d b4       	in	r0, 0x2d	; 45
     34c:	07 fe       	sbrs	r0, 7
     34e:	fd cf       	rjmp	.-6      	; 0x34a <__vector_7+0x1dc>
		{	
			CS_UP;
			g_iCurrentAddress = g_iStartingAddress;
	
			adrByte1 = (g_iStartingAddress>>16)&0xff;
			adrByte2 = (g_iStartingAddress>>8)&0xff;
     350:	bb 27       	eor	r27, r27
     352:	a1 2f       	mov	r26, r17
     354:	90 2f       	mov	r25, r16
     356:	8f 2d       	mov	r24, r15

			SPDR = READ_ARRAY;
			while (! (SPSR & (1<<SPIF))) {}
			SPDR = adrByte1;
			while (! (SPSR & (1<<SPIF))) {}
			SPDR = adrByte2;
     358:	8e bd       	out	0x2e, r24	; 46
			while (! (SPSR & (1<<SPIF))) {}
     35a:	0d b4       	in	r0, 0x2d	; 45
     35c:	07 fe       	sbrs	r0, 7
     35e:	fd cf       	rjmp	.-6      	; 0x35a <__vector_7+0x1ec>
			SPDR = adrByte3;
     360:	ae bc       	out	0x2e, r10	; 46
			while (! (SPSR & (1<<SPIF))) {}
     362:	0d b4       	in	r0, 0x2d	; 45
     364:	07 fe       	sbrs	r0, 7
     366:	fd cf       	rjmp	.-6      	; 0x362 <__vector_7+0x1f4>
			
			g_iCurrentPolarity = 1;
     368:	81 e0       	ldi	r24, 0x01	; 1
     36a:	80 93 08 06 	sts	0x0608, r24
     36e:	45 cf       	rjmp	.-374    	; 0x1fa <__vector_7+0x8c>
		g_iFlashRead = 48;		// Flash needs reading

		CS_UP;
		if (g_iInnerCounter == 100)
		{
			g_iCurrentPolarity = 1;	
     370:	81 e0       	ldi	r24, 0x01	; 1
     372:	80 93 08 06 	sts	0x0608, r24
			g_iCurrentAddress = g_iStartingAddress;
     376:	80 91 0c 06 	lds	r24, 0x060C
     37a:	90 91 0d 06 	lds	r25, 0x060D
     37e:	a0 91 0e 06 	lds	r26, 0x060E
     382:	b0 91 0f 06 	lds	r27, 0x060F
     386:	80 93 10 06 	sts	0x0610, r24
     38a:	90 93 11 06 	sts	0x0611, r25
     38e:	a0 93 12 06 	sts	0x0612, r26
     392:	b0 93 13 06 	sts	0x0613, r27
     396:	6e cf       	rjmp	.-292    	; 0x274 <__vector_7+0x106>

00000398 <__vector_4>:
//==============================================================================================
ISR (TIMER2_COMP_vect, ISR_NAKED/*, ISR_NOBLOCK*/)		// Takes 2 usec
{
//	if (g_bPowerSafeMode == 1)
//		return;
	asm ( "push r1" );
     398:	1f 92       	push	r1
	asm ( "push r0" );
     39a:	0f 92       	push	r0
	asm ( "in r0, 0x3f" );				// Store the status register
     39c:	0f b6       	in	r0, 0x3f	; 63
	asm ( "push r0" );
     39e:	0f 92       	push	r0
	asm ( "clr r1" ); 					// Clear register
     3a0:	11 24       	eor	r1, r1

	asm ( "push r24" );	
     3a2:	8f 93       	push	r24
	asm ( "push r25" );
     3a4:	9f 93       	push	r25

	asm ( "in	r24, 0x04" );			// Load the contants of DDRB
     3a6:	84 b1       	in	r24, 0x04	; 4
	asm ( "andi	r24, 0x0F" );			// Make and with 0x0F
     3a8:	8f 70       	andi	r24, 0x0F	; 15
	asm ( "out	0x04, r24" );			// Update DDRB
     3aa:	84 b9       	out	0x04, r24	; 4

	asm ( "out	0x07, r1" );			// Update DDRC to be 0
     3ac:	17 b8       	out	0x07, r1	; 7

	asm ( "in	r24, 0x0A" );			// Load the contants of DDRD
     3ae:	8a b1       	in	r24, 0x0a	; 10
	asm ( "andi	r24, 0xC3" );			// Make and with 0b00111100
     3b0:	83 7c       	andi	r24, 0xC3	; 195
	asm ( "out	0x0A, r24" );			// Update DDRD
     3b2:	8a b9       	out	0x0a, r24	; 10
	
	asm ( "out	0x10, r1" );			// Update DDRF to be 0
     3b4:	10 ba       	out	0x10, r1	; 16

	asm ( "out	0x02, r1" );			// Update PORTA to be 0
     3b6:	12 b8       	out	0x02, r1	; 2

	// Manipulate DDRB
	asm ( "lds	r25, g_iPORTB_Buf" );
     3b8:	90 91 fa 05 	lds	r25, 0x05FA
	asm ( "in	r24, 0x04" );
     3bc:	84 b1       	in	r24, 0x04	; 4
	asm ( "or	r24, r25" );
     3be:	89 2b       	or	r24, r25
	asm ( "out	0x04, r24" );
     3c0:	84 b9       	out	0x04, r24	; 4

	// Manipulate DDRC
	asm ( "lds	r25, g_iPORTC_Buf" );
     3c2:	90 91 fb 05 	lds	r25, 0x05FB
	asm ( "out	0x07, r25" );
     3c6:	97 b9       	out	0x07, r25	; 7

	// Manipulate DDRD
	asm ( "lds	r25, g_iPORTD_Buf" );
     3c8:	90 91 fc 05 	lds	r25, 0x05FC
	asm ( "in	r24, 0x0A" );
     3cc:	8a b1       	in	r24, 0x0a	; 10
	asm ( "or	r24, r25" );
     3ce:	89 2b       	or	r24, r25
	asm ( "out	0x0A, r24" );
     3d0:	8a b9       	out	0x0a, r24	; 10

	// Manipulate DDRF
	asm ( "lds	r25, g_iPORTF_Buf" );
     3d2:	90 91 fd 05 	lds	r25, 0x05FD
	asm ( "out	0x10, r25" );
     3d6:	90 bb       	out	0x10, r25	; 16

	PORTA = ROW_PATTERN;
     3d8:	8b b5       	in	r24, 0x2b	; 43
     3da:	82 b9       	out	0x02, r24	; 2
	
	// Store 0 to g_iBuffersReady
	UNSET_BUFFERREADY;
     3dc:	f5 98       	cbi	0x1e, 5	; 30

	asm ( "pop r25" );
     3de:	9f 91       	pop	r25
	asm ( "pop r24" );
     3e0:	8f 91       	pop	r24

	asm ( "pop r0" );
     3e2:	0f 90       	pop	r0
	asm ( "out 0x3F,r0" );
     3e4:	0f be       	out	0x3f, r0	; 63
	asm ( "pop r0" );
     3e6:	0f 90       	pop	r0
	asm ( "pop r1" );
     3e8:	1f 90       	pop	r1

	reti ();
     3ea:	18 95       	reti

000003ec <__vector_11>:

// Timer0 (8bit) Overflow interrupt
// Usage: for timing wheel cycle
//==============================================================================================
ISR (TIMER0_OVF_vect, /*ISR_NAKED*//*, ISR_NOBLOCK*/)
{
     3ec:	1f 92       	push	r1
     3ee:	0f 92       	push	r0
     3f0:	0f b6       	in	r0, 0x3f	; 63
     3f2:	0f 92       	push	r0
     3f4:	11 24       	eor	r1, r1
     3f6:	8f 93       	push	r24
     3f8:	9f 93       	push	r25
OUT       0x3F,R0        Out to I/O location
POP       R0             Pop register from stack
POP       R1             Pop register from stack
RETI 
*/
	if (g_iTimer0OvfCounter&0x4000)
     3fa:	80 91 03 06 	lds	r24, 0x0603
     3fe:	90 91 04 06 	lds	r25, 0x0604
     402:	96 fd       	sbrc	r25, 6
     404:	10 c0       	rjmp	.+32     	; 0x426 <__vector_11+0x3a>
		g_iTimer0OvfCounter = 0;
		g_bVeryHighSpeed = 0;
		return;
	}
	
	g_iTimer0OvfCounter++;
     406:	80 91 03 06 	lds	r24, 0x0603
     40a:	90 91 04 06 	lds	r25, 0x0604
     40e:	01 96       	adiw	r24, 0x01	; 1
     410:	90 93 04 06 	sts	0x0604, r25
     414:	80 93 03 06 	sts	0x0603, r24
}
     418:	9f 91       	pop	r25
     41a:	8f 91       	pop	r24
     41c:	0f 90       	pop	r0
     41e:	0f be       	out	0x3f, r0	; 63
     420:	0f 90       	pop	r0
     422:	1f 90       	pop	r1
     424:	18 95       	reti
POP       R1             Pop register from stack
RETI 
*/
	if (g_iTimer0OvfCounter&0x4000)
	{
		g_bEnterToIdleMode = 1;
     426:	81 e0       	ldi	r24, 0x01	; 1
     428:	80 93 03 01 	sts	0x0103, r24
		g_bPowerSafeMode = 1;
     42c:	80 93 02 01 	sts	0x0102, r24
		g_iTimer0OvfCounter = 0;
     430:	10 92 04 06 	sts	0x0604, r1
     434:	10 92 03 06 	sts	0x0603, r1
		g_bVeryHighSpeed = 0;
     438:	10 92 fe 05 	sts	0x05FE, r1
		return;
	}
	
	g_iTimer0OvfCounter++;
}
     43c:	9f 91       	pop	r25
     43e:	8f 91       	pop	r24
     440:	0f 90       	pop	r0
     442:	0f be       	out	0x3f, r0	; 63
     444:	0f 90       	pop	r0
     446:	1f 90       	pop	r1
     448:	18 95       	reti

0000044a <__vector_13>:


// Uart Communication interrupt
//==============================================================================================
ISR (USART0_RX_vect)
{ 
     44a:	1f 92       	push	r1
     44c:	0f 92       	push	r0
     44e:	0f b6       	in	r0, 0x3f	; 63
     450:	0f 92       	push	r0
     452:	11 24       	eor	r1, r1
     454:	2f 93       	push	r18
     456:	3f 93       	push	r19
     458:	4f 93       	push	r20
     45a:	5f 93       	push	r21
     45c:	6f 93       	push	r22
     45e:	7f 93       	push	r23
     460:	8f 93       	push	r24
     462:	9f 93       	push	r25
     464:	af 93       	push	r26
     466:	bf 93       	push	r27
     468:	ef 93       	push	r30
     46a:	ff 93       	push	r31
	unsigned char dummy;
	PRR = 0b00010001;
     46c:	81 e1       	ldi	r24, 0x11	; 17
     46e:	80 93 64 00 	sts	0x0064, r24

	// Shut down all leds
	ROW_PORT = 0x00;
     472:	12 b8       	out	0x02, r1	; 2

	// Disable All Interrupts
	cli ( );
     474:	f8 94       	cli

	// Run communication function
	DataTransferMode ( );
     476:	0e 94 d1 15 	call	0x2ba2	; 0x2ba2 <DataTransferMode>

	// Flush input buffer
	while ( UCSR0A & (1<<RXC0 ) ) dummy = UDR0; 
     47a:	80 91 c0 00 	lds	r24, 0x00C0
     47e:	87 ff       	sbrs	r24, 7
     480:	06 c0       	rjmp	.+12     	; 0x48e <__vector_13+0x44>
     482:	80 91 c6 00 	lds	r24, 0x00C6
     486:	80 91 c0 00 	lds	r24, 0x00C0
     48a:	87 fd       	sbrc	r24, 7
     48c:	fa cf       	rjmp	.-12     	; 0x482 <__vector_13+0x38>


	// Enable all interrupts
	sei ( );
     48e:	78 94       	sei
}
     490:	ff 91       	pop	r31
     492:	ef 91       	pop	r30
     494:	bf 91       	pop	r27
     496:	af 91       	pop	r26
     498:	9f 91       	pop	r25
     49a:	8f 91       	pop	r24
     49c:	7f 91       	pop	r23
     49e:	6f 91       	pop	r22
     4a0:	5f 91       	pop	r21
     4a2:	4f 91       	pop	r20
     4a4:	3f 91       	pop	r19
     4a6:	2f 91       	pop	r18
     4a8:	0f 90       	pop	r0
     4aa:	0f be       	out	0x3f, r0	; 63
     4ac:	0f 90       	pop	r0
     4ae:	1f 90       	pop	r1
     4b0:	18 95       	reti

000004b2 <__vector_1>:

// Hall Sensor Interrupt
// Each Hall signal we calculate the appropriate timing parameters
//==============================================================================================
ISR (INT0_vect/*, ISR_NOBLOCK*/)
{ 
     4b2:	1f 92       	push	r1
     4b4:	0f 92       	push	r0
     4b6:	0f b6       	in	r0, 0x3f	; 63
     4b8:	0f 92       	push	r0
     4ba:	11 24       	eor	r1, r1
     4bc:	af 92       	push	r10
     4be:	bf 92       	push	r11
     4c0:	cf 92       	push	r12
     4c2:	df 92       	push	r13
     4c4:	ef 92       	push	r14
     4c6:	ff 92       	push	r15
     4c8:	0f 93       	push	r16
     4ca:	1f 93       	push	r17
     4cc:	2f 93       	push	r18
     4ce:	3f 93       	push	r19
     4d0:	4f 93       	push	r20
     4d2:	5f 93       	push	r21
     4d4:	6f 93       	push	r22
     4d6:	7f 93       	push	r23
     4d8:	8f 93       	push	r24
     4da:	9f 93       	push	r25
     4dc:	af 93       	push	r26
     4de:	bf 93       	push	r27
     4e0:	ef 93       	push	r30
     4e2:	ff 93       	push	r31
//		TCNT2 = 0;
//		EICRA |= (1<<ISC01);	// External Interrupt sense HIGH->LOW transit
//		return ;
//	}

	TCNT2 = 0;
     4e4:	10 92 b2 00 	sts	0x00B2, r1

#ifdef __ENABLE_POWER_SAFE
	g_bPowerSafeMode = 0;		//2cc
     4e8:	10 92 02 01 	sts	0x0102, r1
	g_bEnterToIdleMode = 0;
     4ec:	10 92 03 01 	sts	0x0103, r1
#endif

	g_iInnerCounter = 0;		//2cc
     4f0:	10 92 14 06 	sts	0x0614, r1

	// if >440 msec -> low speed
	// if <400 msec -> hi speed
	// Hysteresis
	if (g_iTimer0OvfCounter<1400)
     4f4:	80 91 03 06 	lds	r24, 0x0603
     4f8:	90 91 04 06 	lds	r25, 0x0604
     4fc:	88 57       	subi	r24, 0x78	; 120
     4fe:	95 40       	sbci	r25, 0x05	; 5
     500:	08 f4       	brcc	.+2      	; 0x504 <__vector_1+0x52>
     502:	02 c1       	rjmp	.+516    	; 0x708 <__vector_1+0x256>
#endif
		g_iTimer0OvfCounter = 0;
		g_bVeryHighSpeed = 0;
		return ;
	}
	else if (g_iTimer0OvfCounter<1800)
     504:	80 91 03 06 	lds	r24, 0x0603
     508:	90 91 04 06 	lds	r25, 0x0604
     50c:	88 50       	subi	r24, 0x08	; 8
     50e:	97 40       	sbci	r25, 0x07	; 7
     510:	08 f0       	brcs	.+2      	; 0x514 <__vector_1+0x62>
     512:	e2 c0       	rjmp	.+452    	; 0x6d8 <__vector_1+0x226>
	{
//		OCR2A = 0x2e;							// Set 19usec
//		OCR2A = 0x24;							// Set 15usec
		OCR2A = 0x29;							// Set 17usec
     514:	89 e2       	ldi	r24, 0x29	; 41
     516:	80 93 b3 00 	sts	0x00B3, r24
		TCNT2 = 0;//0xd2;
     51a:	10 92 b2 00 	sts	0x00B2, r1
		g_bVeryHighSpeed = 1;
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	80 93 fe 05 	sts	0x05FE, r24
		SET_HIGHSPEED;
     524:	f7 9a       	sbi	0x1e, 7	; 30
		return;
	}
#endif

	// Frame managing stuff
	if ( g_iCurrentFrameCycle == 0 )
     526:	80 91 09 06 	lds	r24, 0x0609
     52a:	90 91 0a 06 	lds	r25, 0x060A
     52e:	89 2b       	or	r24, r25
     530:	09 f4       	brne	.+2      	; 0x534 <__vector_1+0x82>
     532:	06 c1       	rjmp	.+524    	; 0x740 <__vector_1+0x28e>

		}
	}
	else
	{	// in the middle of projecting the same picture
		CS_UP;
     534:	28 9a       	sbi	0x05, 0	; 5
		
		g_iCurrentFrameCycle --;	// decrease the projection time
     536:	80 91 09 06 	lds	r24, 0x0609
     53a:	90 91 0a 06 	lds	r25, 0x060A
     53e:	01 97       	sbiw	r24, 0x01	; 1
     540:	90 93 0a 06 	sts	0x060A, r25
     544:	80 93 09 06 	sts	0x0609, r24
		g_iCurrentPolarity = 0;
     548:	10 92 08 06 	sts	0x0608, r1

		g_iCurrentFrame ++;
     54c:	80 91 0b 06 	lds	r24, 0x060B
     550:	8f 5f       	subi	r24, 0xFF	; 255
     552:	80 93 0b 06 	sts	0x060B, r24
		if ( g_sCurrentFileInfo.iNumFrames <= g_iCurrentFrame )
     556:	20 91 da 06 	lds	r18, 0x06DA
     55a:	30 91 db 06 	lds	r19, 0x06DB
     55e:	80 91 0b 06 	lds	r24, 0x060B
     562:	90 e0       	ldi	r25, 0x00	; 0
     564:	82 17       	cp	r24, r18
     566:	93 07       	cpc	r25, r19
     568:	08 f0       	brcs	.+2      	; 0x56c <__vector_1+0xba>
     56a:	d8 c0       	rjmp	.+432    	; 0x71c <__vector_1+0x26a>
			g_iCurrentFrame = 0;

		g_iStartingAddress = (uint32_t)(g_sCurrentFileInfo.iBlockList[g_iCurrentFrame]) * (uint32_t)(FS_FRAME_CAP);
     56c:	e0 91 0b 06 	lds	r30, 0x060B
     570:	f0 e0       	ldi	r31, 0x00	; 0
     572:	ee 0f       	add	r30, r30
     574:	ff 1f       	adc	r31, r31
     576:	e8 51       	subi	r30, 0x18	; 24
     578:	f9 4f       	sbci	r31, 0xF9	; 249
     57a:	60 81       	ld	r22, Z
     57c:	71 81       	ldd	r23, Z+1	; 0x01
     57e:	80 e0       	ldi	r24, 0x00	; 0
     580:	90 e0       	ldi	r25, 0x00	; 0
     582:	20 e0       	ldi	r18, 0x00	; 0
     584:	30 e3       	ldi	r19, 0x30	; 48
     586:	40 e0       	ldi	r20, 0x00	; 0
     588:	50 e0       	ldi	r21, 0x00	; 0
     58a:	0e 94 2b 18 	call	0x3056	; 0x3056 <__mulsi3>
     58e:	60 93 0c 06 	sts	0x060C, r22
     592:	70 93 0d 06 	sts	0x060D, r23
     596:	80 93 0e 06 	sts	0x060E, r24
     59a:	90 93 0f 06 	sts	0x060F, r25
		g_iCurrentAddress = g_iStartingAddress;
     59e:	80 91 0c 06 	lds	r24, 0x060C
     5a2:	90 91 0d 06 	lds	r25, 0x060D
     5a6:	a0 91 0e 06 	lds	r26, 0x060E
     5aa:	b0 91 0f 06 	lds	r27, 0x060F
     5ae:	80 93 10 06 	sts	0x0610, r24
     5b2:	90 93 11 06 	sts	0x0611, r25
     5b6:	a0 93 12 06 	sts	0x0612, r26
     5ba:	b0 93 13 06 	sts	0x0613, r27
		
		if (IS_HIGHSPEED)
     5be:	f7 99       	sbic	0x1e, 7	; 30
     5c0:	2d c1       	rjmp	.+602    	; 0x81c <__vector_1+0x36a>
			g_iCurrentAddress += FS_HALF_FRAME_SIZE;

		
		adrByte1 = (g_iCurrentAddress>>16)&0xff;
     5c2:	20 91 10 06 	lds	r18, 0x0610
     5c6:	30 91 11 06 	lds	r19, 0x0611
     5ca:	40 91 12 06 	lds	r20, 0x0612
     5ce:	50 91 13 06 	lds	r21, 0x0613
		adrByte2 = (g_iCurrentAddress>>8)&0xff;
     5d2:	e0 90 10 06 	lds	r14, 0x0610
     5d6:	f0 90 11 06 	lds	r15, 0x0611
     5da:	00 91 12 06 	lds	r16, 0x0612
     5de:	10 91 13 06 	lds	r17, 0x0613
		adrByte3 = g_iCurrentAddress&0xff;  
     5e2:	a0 90 10 06 	lds	r10, 0x0610
     5e6:	b0 90 11 06 	lds	r11, 0x0611
     5ea:	c0 90 12 06 	lds	r12, 0x0612
     5ee:	d0 90 13 06 	lds	r13, 0x0613

		CS_DOWN;
     5f2:	28 98       	cbi	0x05, 0	; 5

		SPDR = READ_ARRAY;
     5f4:	83 e0       	ldi	r24, 0x03	; 3
     5f6:	8e bd       	out	0x2e, r24	; 46
		while (! (SPSR & (1<<SPIF))) {}
     5f8:	0d b4       	in	r0, 0x2d	; 45
     5fa:	07 fe       	sbrs	r0, 7
     5fc:	fd cf       	rjmp	.-6      	; 0x5f8 <__vector_1+0x146>
		
		if (IS_HIGHSPEED)
			g_iCurrentAddress += FS_HALF_FRAME_SIZE;

		
		adrByte1 = (g_iCurrentAddress>>16)&0xff;
     5fe:	ca 01       	movw	r24, r20
     600:	aa 27       	eor	r26, r26
     602:	bb 27       	eor	r27, r27

		CS_DOWN;

		SPDR = READ_ARRAY;
		while (! (SPSR & (1<<SPIF))) {}
		SPDR = adrByte1;
     604:	8e bd       	out	0x2e, r24	; 46
		while (! (SPSR & (1<<SPIF))) {}
     606:	0d b4       	in	r0, 0x2d	; 45
     608:	07 fe       	sbrs	r0, 7
     60a:	fd cf       	rjmp	.-6      	; 0x606 <__vector_1+0x154>
		if (IS_HIGHSPEED)
			g_iCurrentAddress += FS_HALF_FRAME_SIZE;

		
		adrByte1 = (g_iCurrentAddress>>16)&0xff;
		adrByte2 = (g_iCurrentAddress>>8)&0xff;
     60c:	bb 27       	eor	r27, r27
     60e:	a1 2f       	mov	r26, r17
     610:	90 2f       	mov	r25, r16
     612:	8f 2d       	mov	r24, r15

		SPDR = READ_ARRAY;
		while (! (SPSR & (1<<SPIF))) {}
		SPDR = adrByte1;
		while (! (SPSR & (1<<SPIF))) {}
		SPDR = adrByte2;
     614:	8e bd       	out	0x2e, r24	; 46
		while (! (SPSR & (1<<SPIF))) {}
     616:	0d b4       	in	r0, 0x2d	; 45
     618:	07 fe       	sbrs	r0, 7
     61a:	fd cf       	rjmp	.-6      	; 0x616 <__vector_1+0x164>
		SPDR = adrByte3;
     61c:	ae bc       	out	0x2e, r10	; 46
		while (! (SPSR & (1<<SPIF))) {}
     61e:	0d b4       	in	r0, 0x2d	; 45
     620:	07 fe       	sbrs	r0, 7
     622:	fd cf       	rjmp	.-6      	; 0x61e <__vector_1+0x16c>
		
	}


	
	SET_ROW(0);
     624:	8e b3       	in	r24, 0x1e	; 30
     626:	80 7f       	andi	r24, 0xF0	; 240
     628:	8e bb       	out	0x1e, r24	; 30
     62a:	8e b3       	in	r24, 0x1e	; 30
     62c:	8e bb       	out	0x1e, r24	; 30
	ROW_PATTERN = 1;
     62e:	81 e0       	ldi	r24, 0x01	; 1
     630:	8b bd       	out	0x2b, r24	; 43
	PWM_COUNTER = 0;
     632:	1a bc       	out	0x2a, r1	; 42
//	SET_FIRST_BUFFER;
	
	if ( IS_HIGHSPEED )
     634:	f7 99       	sbic	0x1e, 7	; 30
     636:	ee c0       	rjmp	.+476    	; 0x814 <__vector_1+0x362>
		g_iFlashRead = 48;		// Flash needs reading
	else 
		g_iFlashRead = 96;		// Flash needs reading
     638:	80 e6       	ldi	r24, 0x60	; 96
     63a:	80 93 00 01 	sts	0x0100, r24

	// divide by ANGULAR_RESOLUTION = 200
	// for ANGULAR_RESOLUTION radial pixels 
	//	more accurate = 1+1/4+1/16-1/32 = 1.281 ~= 256/200
	OCR1A =  g_iTimer0OvfCounter + (g_iTimer0OvfCounter/4)+(g_iTimer0OvfCounter/16)-(g_iTimer0OvfCounter/32);
     63e:	80 91 03 06 	lds	r24, 0x0603
     642:	90 91 04 06 	lds	r25, 0x0604
     646:	60 91 03 06 	lds	r22, 0x0603
     64a:	70 91 04 06 	lds	r23, 0x0604
     64e:	20 91 03 06 	lds	r18, 0x0603
     652:	30 91 04 06 	lds	r19, 0x0604
     656:	40 91 03 06 	lds	r20, 0x0603
     65a:	50 91 04 06 	lds	r21, 0x0604
     65e:	96 95       	lsr	r25
     660:	87 95       	ror	r24
     662:	96 95       	lsr	r25
     664:	87 95       	ror	r24
     666:	32 95       	swap	r19
     668:	22 95       	swap	r18
     66a:	2f 70       	andi	r18, 0x0F	; 15
     66c:	23 27       	eor	r18, r19
     66e:	3f 70       	andi	r19, 0x0F	; 15
     670:	23 27       	eor	r18, r19
     672:	82 0f       	add	r24, r18
     674:	93 1f       	adc	r25, r19
     676:	86 0f       	add	r24, r22
     678:	97 1f       	adc	r25, r23
     67a:	56 95       	lsr	r21
     67c:	47 95       	ror	r20
     67e:	52 95       	swap	r21
     680:	42 95       	swap	r20
     682:	4f 70       	andi	r20, 0x0F	; 15
     684:	45 27       	eor	r20, r21
     686:	5f 70       	andi	r21, 0x0F	; 15
     688:	45 27       	eor	r20, r21
     68a:	84 1b       	sub	r24, r20
     68c:	95 0b       	sbc	r25, r21
     68e:	90 93 89 00 	sts	0x0089, r25
     692:	80 93 88 00 	sts	0x0088, r24
	TCNT1 = 0;
     696:	10 92 85 00 	sts	0x0085, r1
     69a:	10 92 84 00 	sts	0x0084, r1

//	sprintf( text, "OCR:%d, Frm#:%d, Addr:%lu, Cyc:%d\r\n", OCR1A, g_iCurrentFrame, g_iCurrentAddress, g_iCurrentFrameCycle);
//	USARTWriteString ( text );

	g_iTimer0OvfCounter = 0;		// 8cc
     69e:	10 92 04 06 	sts	0x0604, r1
     6a2:	10 92 03 06 	sts	0x0603, r1
}
     6a6:	ff 91       	pop	r31
     6a8:	ef 91       	pop	r30
     6aa:	bf 91       	pop	r27
     6ac:	af 91       	pop	r26
     6ae:	9f 91       	pop	r25
     6b0:	8f 91       	pop	r24
     6b2:	7f 91       	pop	r23
     6b4:	6f 91       	pop	r22
     6b6:	5f 91       	pop	r21
     6b8:	4f 91       	pop	r20
     6ba:	3f 91       	pop	r19
     6bc:	2f 91       	pop	r18
     6be:	1f 91       	pop	r17
     6c0:	0f 91       	pop	r16
     6c2:	ff 90       	pop	r15
     6c4:	ef 90       	pop	r14
     6c6:	df 90       	pop	r13
     6c8:	cf 90       	pop	r12
     6ca:	bf 90       	pop	r11
     6cc:	af 90       	pop	r10
     6ce:	0f 90       	pop	r0
     6d0:	0f be       	out	0x3f, r0	; 63
     6d2:	0f 90       	pop	r0
     6d4:	1f 90       	pop	r1
     6d6:	18 95       	reti
		OCR2A = 0x29;							// Set 17usec
		TCNT2 = 0;//0xd2;
		g_bVeryHighSpeed = 1;
		SET_HIGHSPEED;
	}
	else if (g_iTimer0OvfCounter<2800)
     6d8:	80 91 03 06 	lds	r24, 0x0603
     6dc:	90 91 04 06 	lds	r25, 0x0604
     6e0:	80 5f       	subi	r24, 0xF0	; 240
     6e2:	9a 40       	sbci	r25, 0x0A	; 10
     6e4:	f0 f0       	brcs	.+60     	; 0x722 <__vector_1+0x270>
		TCNT2 = 0;//0xd2;
		g_bVeryHighSpeed = 0;
		SET_HIGHSPEED;
	}
#ifdef __ENABLE_POWER_SAFE
	else if (g_iTimer0OvfCounter<12000)
     6e6:	80 91 03 06 	lds	r24, 0x0603
     6ea:	90 91 04 06 	lds	r25, 0x0604
     6ee:	80 5e       	subi	r24, 0xE0	; 224
     6f0:	9e 42       	sbci	r25, 0x2E	; 46
     6f2:	08 f0       	brcs	.+2      	; 0x6f6 <__vector_1+0x244>
     6f4:	ab c0       	rjmp	.+342    	; 0x84c <__vector_1+0x39a>
	else
#endif
	{
//		OCR2A = 0x3d;							// Set 27usec
//		OCR2A = 0x33;							// Set 21usec
		OCR2A = 0x38;							// Set 23usec
     6f6:	88 e3       	ldi	r24, 0x38	; 56
     6f8:	80 93 b3 00 	sts	0x00B3, r24
//		OCR2A = 0x3c;							// Set 25usec
		TCNT2 = 0;//0xc3;
     6fc:	10 92 b2 00 	sts	0x00B2, r1
		g_bVeryHighSpeed = 0;
     700:	10 92 fe 05 	sts	0x05FE, r1
		UNSET_HIGHSPEED
     704:	f7 98       	cbi	0x1e, 7	; 30
     706:	0f cf       	rjmp	.-482    	; 0x526 <__vector_1+0x74>
	// if <400 msec -> hi speed
	// Hysteresis
	if (g_iTimer0OvfCounter<1400)
	{
#ifdef __ENABLE_POWER_SAFE
		g_bPowerSafeMode = 1;
     708:	81 e0       	ldi	r24, 0x01	; 1
     70a:	80 93 02 01 	sts	0x0102, r24
#endif
		g_iTimer0OvfCounter = 0;
     70e:	10 92 04 06 	sts	0x0604, r1
     712:	10 92 03 06 	sts	0x0603, r1
		g_bVeryHighSpeed = 0;
     716:	10 92 fe 05 	sts	0x05FE, r1
     71a:	c5 cf       	rjmp	.-118    	; 0x6a6 <__vector_1+0x1f4>
		g_iCurrentFrameCycle --;	// decrease the projection time
		g_iCurrentPolarity = 0;

		g_iCurrentFrame ++;
		if ( g_sCurrentFileInfo.iNumFrames <= g_iCurrentFrame )
			g_iCurrentFrame = 0;
     71c:	10 92 0b 06 	sts	0x060B, r1
     720:	25 cf       	rjmp	.-438    	; 0x56c <__vector_1+0xba>
	else if (g_iTimer0OvfCounter<2800)
	{
//		OCR2A = 0x2e;							// Set 19usec
//		OCR2A = 0x1d;							// Set 12usec
//		OCR2A = 0x29;							// Set 17usec
		OCR2A = 0x24;							// Set 15usec
     722:	84 e2       	ldi	r24, 0x24	; 36
     724:	80 93 b3 00 	sts	0x00B3, r24
		TCNT2 = 0;//0xd2;
     728:	10 92 b2 00 	sts	0x00B2, r1
		g_bVeryHighSpeed = 0;
     72c:	10 92 fe 05 	sts	0x05FE, r1
		SET_HIGHSPEED;
     730:	f7 9a       	sbi	0x1e, 7	; 30
		return;
	}
#endif

	// Frame managing stuff
	if ( g_iCurrentFrameCycle == 0 )
     732:	80 91 09 06 	lds	r24, 0x0609
     736:	90 91 0a 06 	lds	r25, 0x060A
     73a:	89 2b       	or	r24, r25
     73c:	09 f0       	breq	.+2      	; 0x740 <__vector_1+0x28e>
     73e:	fa ce       	rjmp	.-524    	; 0x534 <__vector_1+0x82>

		// prepare next file projection
		// ============================
			
		// read next 
		if ( FS_ReadNextEntry ( &g_sCurrentFileInfo ) )
     740:	8a ed       	ldi	r24, 0xDA	; 218
     742:	96 e0       	ldi	r25, 0x06	; 6
     744:	0e 94 64 08 	call	0x10c8	; 0x10c8 <FS_ReadNextEntry>
     748:	88 23       	and	r24, r24
     74a:	09 f4       	brne	.+2      	; 0x74e <__vector_1+0x29c>
     74c:	7b c0       	rjmp	.+246    	; 0x844 <__vector_1+0x392>
		{
			CS_UP;
     74e:	28 9a       	sbi	0x05, 0	; 5
			g_iCurrentPolarity = 0;
     750:	10 92 08 06 	sts	0x0608, r1
			g_iCurrentFrameCycle = 48;
     754:	80 e3       	ldi	r24, 0x30	; 48
     756:	90 e0       	ldi	r25, 0x00	; 0
     758:	90 93 0a 06 	sts	0x060A, r25
     75c:	80 93 09 06 	sts	0x0609, r24

			// start reading first frame
			g_iCurrentFrame = 0;
     760:	10 92 0b 06 	sts	0x060B, r1
			g_iStartingAddress = (uint32_t)(g_sCurrentFileInfo.iBlockList[0]) * (uint32_t)(FS_FRAME_CAP);
     764:	60 91 e8 06 	lds	r22, 0x06E8
     768:	70 91 e9 06 	lds	r23, 0x06E9
     76c:	80 e0       	ldi	r24, 0x00	; 0
     76e:	90 e0       	ldi	r25, 0x00	; 0
     770:	20 e0       	ldi	r18, 0x00	; 0
     772:	30 e3       	ldi	r19, 0x30	; 48
     774:	40 e0       	ldi	r20, 0x00	; 0
     776:	50 e0       	ldi	r21, 0x00	; 0
     778:	0e 94 2b 18 	call	0x3056	; 0x3056 <__mulsi3>
     77c:	60 93 0c 06 	sts	0x060C, r22
     780:	70 93 0d 06 	sts	0x060D, r23
     784:	80 93 0e 06 	sts	0x060E, r24
     788:	90 93 0f 06 	sts	0x060F, r25
			g_iCurrentAddress = g_iStartingAddress;
     78c:	80 91 0c 06 	lds	r24, 0x060C
     790:	90 91 0d 06 	lds	r25, 0x060D
     794:	a0 91 0e 06 	lds	r26, 0x060E
     798:	b0 91 0f 06 	lds	r27, 0x060F
     79c:	80 93 10 06 	sts	0x0610, r24
     7a0:	90 93 11 06 	sts	0x0611, r25
     7a4:	a0 93 12 06 	sts	0x0612, r26
     7a8:	b0 93 13 06 	sts	0x0613, r27
			
			if (IS_HIGHSPEED)
     7ac:	f7 99       	sbic	0x1e, 7	; 30
     7ae:	5a c0       	rjmp	.+180    	; 0x864 <__vector_1+0x3b2>
				g_iCurrentAddress += FS_HALF_FRAME_SIZE;	

			adrByte1 = (g_iCurrentAddress>>16)&0xff;
     7b0:	20 91 10 06 	lds	r18, 0x0610
     7b4:	30 91 11 06 	lds	r19, 0x0611
     7b8:	40 91 12 06 	lds	r20, 0x0612
     7bc:	50 91 13 06 	lds	r21, 0x0613
			adrByte2 = (g_iCurrentAddress>>8)&0xff;
     7c0:	e0 90 10 06 	lds	r14, 0x0610
     7c4:	f0 90 11 06 	lds	r15, 0x0611
     7c8:	00 91 12 06 	lds	r16, 0x0612
     7cc:	10 91 13 06 	lds	r17, 0x0613
			adrByte3 = g_iCurrentAddress&0xff;  
     7d0:	a0 90 10 06 	lds	r10, 0x0610
     7d4:	b0 90 11 06 	lds	r11, 0x0611
     7d8:	c0 90 12 06 	lds	r12, 0x0612
     7dc:	d0 90 13 06 	lds	r13, 0x0613
			CS_DOWN;
     7e0:	28 98       	cbi	0x05, 0	; 5

			SPDR = READ_ARRAY;
     7e2:	83 e0       	ldi	r24, 0x03	; 3
     7e4:	8e bd       	out	0x2e, r24	; 46
			while (! (SPSR & (1<<SPIF))) {}
     7e6:	0d b4       	in	r0, 0x2d	; 45
     7e8:	07 fe       	sbrs	r0, 7
     7ea:	fd cf       	rjmp	.-6      	; 0x7e6 <__vector_1+0x334>
			g_iCurrentAddress = g_iStartingAddress;
			
			if (IS_HIGHSPEED)
				g_iCurrentAddress += FS_HALF_FRAME_SIZE;	

			adrByte1 = (g_iCurrentAddress>>16)&0xff;
     7ec:	ca 01       	movw	r24, r20
     7ee:	aa 27       	eor	r26, r26
     7f0:	bb 27       	eor	r27, r27
			adrByte3 = g_iCurrentAddress&0xff;  
			CS_DOWN;

			SPDR = READ_ARRAY;
			while (! (SPSR & (1<<SPIF))) {}
			SPDR = adrByte1;
     7f2:	8e bd       	out	0x2e, r24	; 46
			while (! (SPSR & (1<<SPIF))) {}
     7f4:	0d b4       	in	r0, 0x2d	; 45
     7f6:	07 fe       	sbrs	r0, 7
     7f8:	fd cf       	rjmp	.-6      	; 0x7f4 <__vector_1+0x342>
			
			if (IS_HIGHSPEED)
				g_iCurrentAddress += FS_HALF_FRAME_SIZE;	

			adrByte1 = (g_iCurrentAddress>>16)&0xff;
			adrByte2 = (g_iCurrentAddress>>8)&0xff;
     7fa:	bb 27       	eor	r27, r27
     7fc:	a1 2f       	mov	r26, r17
     7fe:	90 2f       	mov	r25, r16
     800:	8f 2d       	mov	r24, r15

			SPDR = READ_ARRAY;
			while (! (SPSR & (1<<SPIF))) {}
			SPDR = adrByte1;
			while (! (SPSR & (1<<SPIF))) {}
			SPDR = adrByte2;
     802:	8e bd       	out	0x2e, r24	; 46
			while (! (SPSR & (1<<SPIF))) {}
     804:	0d b4       	in	r0, 0x2d	; 45
     806:	07 fe       	sbrs	r0, 7
     808:	fd cf       	rjmp	.-6      	; 0x804 <__vector_1+0x352>
			SPDR = adrByte3;
     80a:	ae bc       	out	0x2e, r10	; 46
			while (! (SPSR & (1<<SPIF))) {}
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <__vector_1+0x35a>
     812:	08 cf       	rjmp	.-496    	; 0x624 <__vector_1+0x172>
	ROW_PATTERN = 1;
	PWM_COUNTER = 0;
//	SET_FIRST_BUFFER;
	
	if ( IS_HIGHSPEED )
		g_iFlashRead = 48;		// Flash needs reading
     814:	80 e3       	ldi	r24, 0x30	; 48
     816:	80 93 00 01 	sts	0x0100, r24
     81a:	11 cf       	rjmp	.-478    	; 0x63e <__vector_1+0x18c>

		g_iStartingAddress = (uint32_t)(g_sCurrentFileInfo.iBlockList[g_iCurrentFrame]) * (uint32_t)(FS_FRAME_CAP);
		g_iCurrentAddress = g_iStartingAddress;
		
		if (IS_HIGHSPEED)
			g_iCurrentAddress += FS_HALF_FRAME_SIZE;
     81c:	80 91 10 06 	lds	r24, 0x0610
     820:	90 91 11 06 	lds	r25, 0x0611
     824:	a0 91 12 06 	lds	r26, 0x0612
     828:	b0 91 13 06 	lds	r27, 0x0613
     82c:	c0 96       	adiw	r24, 0x30	; 48
     82e:	a1 1d       	adc	r26, r1
     830:	b1 1d       	adc	r27, r1
     832:	80 93 10 06 	sts	0x0610, r24
     836:	90 93 11 06 	sts	0x0611, r25
     83a:	a0 93 12 06 	sts	0x0612, r26
     83e:	b0 93 13 06 	sts	0x0613, r27
     842:	bf ce       	rjmp	.-642    	; 0x5c2 <__vector_1+0x110>
			SPDR = adrByte3;
			while (! (SPSR & (1<<SPIF))) {}
		}
		else
		{
			g_bPowerSafeMode = 1;
     844:	81 e0       	ldi	r24, 0x01	; 1
     846:	80 93 02 01 	sts	0x0102, r24
     84a:	ec ce       	rjmp	.-552    	; 0x624 <__vector_1+0x172>
	}
#ifdef __ENABLE_POWER_SAFE
	else	// Enter Power-down mode
	{
//		AniBike_EnterPowerDown ( );
		g_bEnterToIdleMode = 1;
     84c:	81 e0       	ldi	r24, 0x01	; 1
     84e:	80 93 03 01 	sts	0x0103, r24
		g_bPowerSafeMode = 1;
     852:	80 93 02 01 	sts	0x0102, r24
		g_iTimer0OvfCounter = 0;
     856:	10 92 04 06 	sts	0x0604, r1
     85a:	10 92 03 06 	sts	0x0603, r1
		g_bVeryHighSpeed = 0;
     85e:	10 92 fe 05 	sts	0x05FE, r1
     862:	21 cf       	rjmp	.-446    	; 0x6a6 <__vector_1+0x1f4>
			g_iCurrentFrame = 0;
			g_iStartingAddress = (uint32_t)(g_sCurrentFileInfo.iBlockList[0]) * (uint32_t)(FS_FRAME_CAP);
			g_iCurrentAddress = g_iStartingAddress;
			
			if (IS_HIGHSPEED)
				g_iCurrentAddress += FS_HALF_FRAME_SIZE;	
     864:	80 91 10 06 	lds	r24, 0x0610
     868:	90 91 11 06 	lds	r25, 0x0611
     86c:	a0 91 12 06 	lds	r26, 0x0612
     870:	b0 91 13 06 	lds	r27, 0x0613
     874:	c0 96       	adiw	r24, 0x30	; 48
     876:	a1 1d       	adc	r26, r1
     878:	b1 1d       	adc	r27, r1
     87a:	80 93 10 06 	sts	0x0610, r24
     87e:	90 93 11 06 	sts	0x0611, r25
     882:	a0 93 12 06 	sts	0x0612, r26
     886:	b0 93 13 06 	sts	0x0613, r27
     88a:	92 cf       	rjmp	.-220    	; 0x7b0 <__vector_1+0x2fe>

0000088c <AniBike_InitAll>:

// Other Initializations
//==============================================================================================
void AniBike_InitAll ( void )
{
	UNSET_BUFFERREADY;
     88c:	f5 98       	cbi	0x1e, 5	; 30

	// Command Flow
	// =============
	// Init the SPI device
	dataflash_spi_init(  );
     88e:	0e 94 6f 0c 	call	0x18de	; 0x18de <dataflash_spi_init>

//==============================================================================================
void Anibike_InitLeds ( void )
{
	// Direction of rows
	DDRA  = 0b11111111;
     892:	8f ef       	ldi	r24, 0xFF	; 255
     894:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000000;
     896:	12 b8       	out	0x02, r1	; 2

	PORTB&= 0b00001111;
     898:	85 b1       	in	r24, 0x05	; 5
     89a:	8f 70       	andi	r24, 0x0F	; 15
     89c:	85 b9       	out	0x05, r24	; 5
	DDRB &= 0b00001111;
     89e:	84 b1       	in	r24, 0x04	; 4
     8a0:	8f 70       	andi	r24, 0x0F	; 15
     8a2:	84 b9       	out	0x04, r24	; 4

	PORTC = 0b00000000;
     8a4:	18 b8       	out	0x08, r1	; 8
	DDRC  = 0b00000000;
     8a6:	17 b8       	out	0x07, r1	; 7

	PORTD = 0b00000000;
     8a8:	1b b8       	out	0x0b, r1	; 11
	DDRD  = 0b11000000;
     8aa:	80 ec       	ldi	r24, 0xC0	; 192
     8ac:	8a b9       	out	0x0a, r24	; 10

	PORTF = 0b00000000;
     8ae:	11 ba       	out	0x11, r1	; 17
	DDRF  = 0b00000000;
     8b0:	10 ba       	out	0x10, r1	; 16

	PORTG = 0b00000001;
     8b2:	91 e0       	ldi	r25, 0x01	; 1
     8b4:	94 bb       	out	0x14, r25	; 20
	DDRG =  0b00011101;
     8b6:	8d e1       	ldi	r24, 0x1D	; 29
     8b8:	83 bb       	out	0x13, r24	; 19
// Other Initializations
//==============================================================================================
void AniBike_InitPorts ( void )
{
	// This is checking if the other row is connected
	DDRG = 0b00000001;
     8ba:	93 bb       	out	0x13, r25	; 19
	PORTG = 0b00000001;
     8bc:	94 bb       	out	0x14, r25	; 20
// Check if the second row is connected PG0 = '1'  PG1 = 'Z'
//==============================================================================================
void AniBike_CheckSecondRow ( void )
{
	uint8_t temp = PING;
	if ( temp & 0b00000010 )  // Connected
     8be:	91 99       	sbic	0x12, 1	; 18
     8c0:	93 c0       	rjmp	.+294    	; 0x9e8 <__stack+0xe9>
		g_bBothRows = 1;	
	else // Not Connected
		g_bBothRows = 0;
     8c2:	10 92 01 01 	sts	0x0101, r1

	// Init Other Ports
	AniBike_InitPorts ( );

	// Init the USART with baud rate = 57600bps
	USARTInit(20);
     8c6:	84 e1       	ldi	r24, 0x14	; 20
     8c8:	90 e0       	ldi	r25, 0x00	; 0
     8ca:	0e 94 29 06 	call	0xc52	; 0xc52 <USARTInit>

	// Init External interrupt
	EICRA |= (1<<ISC01);	// External Interrupt sense HIGH->LOW transit
     8ce:	80 91 69 00 	lds	r24, 0x0069
     8d2:	82 60       	ori	r24, 0x02	; 2
     8d4:	80 93 69 00 	sts	0x0069, r24
//	EICRA = 0;
	EIMSK |= (1<<INT0);		// External Interrupt Set the Hall Sensor (INT0 pin)
     8d8:	e8 9a       	sbi	0x1d, 0	; 29

	// Init Uart RX interrupt
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt
     8da:	80 91 c1 00 	lds	r24, 0x00C1
     8de:	80 68       	ori	r24, 0x80	; 128
     8e0:	80 93 c1 00 	sts	0x00C1, r24

	// CTC mode inter radius timer
	// Set Overflow and counting on Timer 1
	TCCR1B |= (1<<CS11)|(1<<WGM12); 		// Prescalar 8 - why?????????????
     8e4:	80 91 81 00 	lds	r24, 0x0081
     8e8:	8a 60       	ori	r24, 0x0A	; 10
     8ea:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 |= (1<<OCIE1A);//(1<<TOIE0); 	// Interrupt
     8ee:	80 91 6f 00 	lds	r24, 0x006F
     8f2:	82 60       	ori	r24, 0x02	; 2
     8f4:	80 93 6f 00 	sts	0x006F, r24
	OCR1A = 0xFFFF;
     8f8:	8f ef       	ldi	r24, 0xFF	; 255
     8fa:	9f ef       	ldi	r25, 0xFF	; 255
     8fc:	90 93 89 00 	sts	0x0089, r25
     900:	80 93 88 00 	sts	0x0088, r24

	// Between Hall sensor counter
	// Set Timer 0 counting Overflows
	TCCR0A |= (1<<CS01); 					// Prescalar 8
     904:	84 b5       	in	r24, 0x24	; 36
     906:	82 60       	ori	r24, 0x02	; 2
     908:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0); 					// Set Overflow interrupt
     90a:	21 e0       	ldi	r18, 0x01	; 1
     90c:	20 93 6e 00 	sts	0x006E, r18
	
	// PWM Timing counter
	// Set Timer 2 counting Overflows
	TCCR2A |= (1<<WGM21)|(1<<CS21); 		// Prescalar 8, Waveform generator form,
     910:	80 91 b0 00 	lds	r24, 0x00B0
     914:	8a 60       	ori	r24, 0x0A	; 10
     916:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 |= (1<<OCIE2A); 					// Set Compare interrupt
     91a:	80 91 70 00 	lds	r24, 0x0070
     91e:	82 60       	ori	r24, 0x02	; 2
     920:	80 93 70 00 	sts	0x0070, r24
	

	g_iPWM_Seq_Active = Line_Buff1;
     924:	8a e7       	ldi	r24, 0x7A	; 122
     926:	96 e0       	ldi	r25, 0x06	; 6
     928:	90 93 00 06 	sts	0x0600, r25
     92c:	80 93 ff 05 	sts	0x05FF, r24
	g_iPWM_Seq_NotActive 	= Line_Buff2;
     930:	8a e1       	ldi	r24, 0x1A	; 26
     932:	96 e0       	ldi	r25, 0x06	; 6
     934:	90 93 02 06 	sts	0x0602, r25
     938:	80 93 01 06 	sts	0x0601, r24

	// Set the timing regime
	OCR2A = 0x49;							// Set 30usec
     93c:	89 e4       	ldi	r24, 0x49	; 73
     93e:	80 93 b3 00 	sts	0x00B3, r24
	TCNT2 = 0xb7;
     942:	87 eb       	ldi	r24, 0xB7	; 183
     944:	80 93 b2 00 	sts	0x00B2, r24

//	OCR2A = 0x3d;							// Set 25usec
//	TCNT2 = 0xc3;	

	g_iFlashRead = 96;	// Flash needs reading
     948:	80 e6       	ldi	r24, 0x60	; 96
     94a:	80 93 00 01 	sts	0x0100, r24

	SET_ROW(0);
     94e:	8e b3       	in	r24, 0x1e	; 30
     950:	80 7f       	andi	r24, 0xF0	; 240
     952:	8e bb       	out	0x1e, r24	; 30
     954:	8e b3       	in	r24, 0x1e	; 30
     956:	8e bb       	out	0x1e, r24	; 30
	ROW_PATTERN = 1;
     958:	2b bd       	out	0x2b, r18	; 43

	// ADC Disabling
	PRR = 0;
     95a:	10 92 64 00 	sts	0x0064, r1
	PRR |= (1<<PRADC);
     95e:	80 91 64 00 	lds	r24, 0x0064
     962:	81 60       	ori	r24, 0x01	; 1
     964:	80 93 64 00 	sts	0x0064, r24

// Shut down ADC
//==============================================================================================
void  ShutOffADC(void)
{
    ACSR = (1<<ACD);                        // disable A/D comparator
     968:	80 e8       	ldi	r24, 0x80	; 128
     96a:	80 bf       	out	0x30, r24	; 48
    ADCSRA = (0<<ADEN);                     // disable A/D converter
     96c:	10 92 7a 00 	sts	0x007A, r1
   #define SLEEP_MODE_STANDBY      4
   #define SLEEP_MODE_EXT_STANDBY  5
*/

	// ADC Disabling
	cli();
     970:	f8 94       	cli
	TIMSK0 &= ~(1<<TOIE0); 					// Set Overflow interrupt OFF
     972:	80 91 6e 00 	lds	r24, 0x006E
     976:	8e 7f       	andi	r24, 0xFE	; 254
     978:	80 93 6e 00 	sts	0x006E, r24
	TIMSK2 &= ~(1<<OCIE2A);					// Set Timer 2 interrupt OFF
     97c:	80 91 70 00 	lds	r24, 0x0070
     980:	8d 7f       	andi	r24, 0xFD	; 253
     982:	80 93 70 00 	sts	0x0070, r24
	
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		
     986:	80 91 c1 00 	lds	r24, 0x00C1
     98a:	80 68       	ori	r24, 0x80	; 128
     98c:	80 93 c1 00 	sts	0x00C1, r24

	//CLKPR = 0b10001111;

	PRR = 0b00011101;
     990:	8d e1       	ldi	r24, 0x1D	; 29
     992:	80 93 64 00 	sts	0x0064, r24
	//PRR = (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
	set_sleep_mode(SLEEP_MODE_IDLE);
     996:	83 b7       	in	r24, 0x33	; 51
     998:	81 7f       	andi	r24, 0xF1	; 241
     99a:	83 bf       	out	0x33, r24	; 51
    
	sleep_enable();
     99c:	83 b7       	in	r24, 0x33	; 51
     99e:	81 60       	ori	r24, 0x01	; 1
     9a0:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     9a2:	85 b7       	in	r24, 0x35	; 53
     9a4:	80 66       	ori	r24, 0x60	; 96
     9a6:	85 bf       	out	0x35, r24	; 53
     9a8:	8f 7d       	andi	r24, 0xDF	; 223
     9aa:	85 bf       	out	0x35, r24	; 53
	sei();
     9ac:	78 94       	sei
	sleep_cpu();
     9ae:	88 95       	sleep
	PRR = 0b00010001;
     9b0:	81 e1       	ldi	r24, 0x11	; 17
     9b2:	80 93 64 00 	sts	0x0064, r24
	sleep_disable();
     9b6:	83 b7       	in	r24, 0x33	; 51
     9b8:	8e 7f       	andi	r24, 0xFE	; 254
     9ba:	83 bf       	out	0x33, r24	; 51


	TIMSK0 |= (1<<TOIE0); 					// Set Overflow interrupt ON
     9bc:	80 91 6e 00 	lds	r24, 0x006E
     9c0:	81 60       	ori	r24, 0x01	; 1
     9c2:	80 93 6e 00 	sts	0x006E, r24
	TIMSK2 |= (1<<OCIE2A);					// Set Timer 2 interrupt ON
     9c6:	80 91 70 00 	lds	r24, 0x0070
     9ca:	82 60       	ori	r24, 0x02	; 2
     9cc:	80 93 70 00 	sts	0x0070, r24
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		    
     9d0:	80 91 c1 00 	lds	r24, 0x00C1
     9d4:	80 68       	ori	r24, 0x80	; 128
     9d6:	80 93 c1 00 	sts	0x00C1, r24

	sei();
     9da:	78 94       	sei

	//CLKPR = 0b00000000;
	PRR = 0b00010001;
     9dc:	81 e1       	ldi	r24, 0x11	; 17
     9de:	80 93 64 00 	sts	0x0064, r24
	g_bEnterToIdleMode = 0;
     9e2:	10 92 03 01 	sts	0x0103, r1
	PRR |= (1<<PRADC);

	ShutOffADC();
	
	AniBike_EnterPowerDown (  );
}
     9e6:	08 95       	ret
//==============================================================================================
void AniBike_CheckSecondRow ( void )
{
	uint8_t temp = PING;
	if ( temp & 0b00000010 )  // Connected
		g_bBothRows = 1;	
     9e8:	90 93 01 01 	sts	0x0101, r25
     9ec:	6c cf       	rjmp	.-296    	; 0x8c6 <AniBike_InitAll+0x3a>

000009ee <main>:


// MAIN THREAD
//==============================================================================================
int main ()
{
     9ee:	0f 93       	push	r16
     9f0:	1f 93       	push	r17
	uint8_t iReadTemp = 0;

	SET_FIRST_BUFFER;
     9f2:	f6 98       	cbi	0x1e, 6	; 30

	//================================================
	//////////////// INITIALIZATIONS /////////////////
	//================================================
	AniBike_InitAll ();
     9f4:	0e 94 46 04 	call	0x88c	; 0x88c <AniBike_InitAll>

	sei (); 
     9f8:	78 94       	sei
	
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		

	//CLKPR = 0b10001111;

	PRR = 0b00011101;
     9fa:	1d e1       	ldi	r17, 0x1D	; 29
    
	sleep_enable();
	sleep_bod_disable();
	sei();
	sleep_cpu();
	PRR = 0b00010001;
     9fc:	01 e1       	ldi	r16, 0x11	; 17
			continue;		// 6cc
		}
#endif

		// Advance Row Number
		ADVANCE_ROW;
     9fe:	61 e0       	ldi	r22, 0x01	; 1
     a00:	70 e0       	ldi	r23, 0x00	; 0
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
						}
						else
						{
							Line_Buff1[48-g_iFlashRead] = SPDR;
     a02:	a0 e3       	ldi	r26, 0x30	; 48
     a04:	b0 e0       	ldi	r27, 0x00	; 0
					}
					else
					{
						if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
     a06:	20 e6       	ldi	r18, 0x60	; 96
     a08:	30 e0       	ldi	r19, 0x00	; 0
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
						}
						else
						{
							Line_Buff1[144-g_iFlashRead] = SPDR;
     a0a:	40 e9       	ldi	r20, 0x90	; 144
     a0c:	50 e0       	ldi	r21, 0x00	; 0
	//================================================

	for (;;)
	{	
#ifdef __ENABLE_POWER_SAFE
		if ( g_bPowerSafeMode ) 
     a0e:	80 91 02 01 	lds	r24, 0x0102
     a12:	88 23       	and	r24, r24
     a14:	09 f4       	brne	.+2      	; 0xa18 <main+0x2a>
     a16:	42 c0       	rjmp	.+132    	; 0xa9c <main+0xae>
		{
			//ROW_PORT = 0x00;
			ROW_PATTERN = 0;
     a18:	1b bc       	out	0x2b, r1	; 43
			if (g_bEnterToIdleMode == 1 )
     a1a:	80 91 03 01 	lds	r24, 0x0103
     a1e:	81 30       	cpi	r24, 0x01	; 1
     a20:	b1 f7       	brne	.-20     	; 0xa0e <main+0x20>
   #define SLEEP_MODE_STANDBY      4
   #define SLEEP_MODE_EXT_STANDBY  5
*/

	// ADC Disabling
	cli();
     a22:	f8 94       	cli
	TIMSK0 &= ~(1<<TOIE0); 					// Set Overflow interrupt OFF
     a24:	80 91 6e 00 	lds	r24, 0x006E
     a28:	8e 7f       	andi	r24, 0xFE	; 254
     a2a:	80 93 6e 00 	sts	0x006E, r24
	TIMSK2 &= ~(1<<OCIE2A);					// Set Timer 2 interrupt OFF
     a2e:	80 91 70 00 	lds	r24, 0x0070
     a32:	8d 7f       	andi	r24, 0xFD	; 253
     a34:	80 93 70 00 	sts	0x0070, r24
	
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		
     a38:	80 91 c1 00 	lds	r24, 0x00C1
     a3c:	80 68       	ori	r24, 0x80	; 128
     a3e:	80 93 c1 00 	sts	0x00C1, r24

	//CLKPR = 0b10001111;

	PRR = 0b00011101;
     a42:	10 93 64 00 	sts	0x0064, r17
	//PRR = (1<<PRTIM1) | (1<<PRSPI) | (1<<PRADC);
	set_sleep_mode(SLEEP_MODE_IDLE);
     a46:	83 b7       	in	r24, 0x33	; 51
     a48:	81 7f       	andi	r24, 0xF1	; 241
     a4a:	83 bf       	out	0x33, r24	; 51
    
	sleep_enable();
     a4c:	83 b7       	in	r24, 0x33	; 51
     a4e:	81 60       	ori	r24, 0x01	; 1
     a50:	83 bf       	out	0x33, r24	; 51
	sleep_bod_disable();
     a52:	85 b7       	in	r24, 0x35	; 53
     a54:	80 66       	ori	r24, 0x60	; 96
     a56:	85 bf       	out	0x35, r24	; 53
     a58:	8f 7d       	andi	r24, 0xDF	; 223
     a5a:	85 bf       	out	0x35, r24	; 53
	sei();
     a5c:	78 94       	sei
	sleep_cpu();
     a5e:	88 95       	sleep
	PRR = 0b00010001;
     a60:	00 93 64 00 	sts	0x0064, r16
	sleep_disable();
     a64:	83 b7       	in	r24, 0x33	; 51
     a66:	8e 7f       	andi	r24, 0xFE	; 254
     a68:	83 bf       	out	0x33, r24	; 51


	TIMSK0 |= (1<<TOIE0); 					// Set Overflow interrupt ON
     a6a:	80 91 6e 00 	lds	r24, 0x006E
     a6e:	81 60       	ori	r24, 0x01	; 1
     a70:	80 93 6e 00 	sts	0x006E, r24
	TIMSK2 |= (1<<OCIE2A);					// Set Timer 2 interrupt ON
     a74:	80 91 70 00 	lds	r24, 0x0070
     a78:	82 60       	ori	r24, 0x02	; 2
     a7a:	80 93 70 00 	sts	0x0070, r24
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt		    
     a7e:	80 91 c1 00 	lds	r24, 0x00C1
     a82:	80 68       	ori	r24, 0x80	; 128
     a84:	80 93 c1 00 	sts	0x00C1, r24

	sei();
     a88:	78 94       	sei

	//CLKPR = 0b00000000;
	PRR = 0b00010001;
     a8a:	00 93 64 00 	sts	0x0064, r16
	g_bEnterToIdleMode = 0;
     a8e:	10 92 03 01 	sts	0x0103, r1
	//================================================

	for (;;)
	{	
#ifdef __ENABLE_POWER_SAFE
		if ( g_bPowerSafeMode ) 
     a92:	80 91 02 01 	lds	r24, 0x0102
     a96:	88 23       	and	r24, r24
     a98:	09 f0       	breq	.+2      	; 0xa9c <main+0xae>
     a9a:	be cf       	rjmp	.-132    	; 0xa18 <main+0x2a>
			continue;		// 6cc
		}
#endif

		// Advance Row Number
		ADVANCE_ROW;
     a9c:	8e b3       	in	r24, 0x1e	; 30
     a9e:	8f 5f       	subi	r24, 0xFF	; 255
     aa0:	87 7e       	andi	r24, 0xE7	; 231
     aa2:	8e bb       	out	0x1e, r24	; 30
     aa4:	1b bc       	out	0x2b, r1	; 43
     aa6:	8e b3       	in	r24, 0x1e	; 30
     aa8:	87 70       	andi	r24, 0x07	; 7
     aaa:	fb 01       	movw	r30, r22
     aac:	02 c0       	rjmp	.+4      	; 0xab2 <main+0xc4>
     aae:	ee 0f       	add	r30, r30
     ab0:	ff 1f       	adc	r31, r31
     ab2:	8a 95       	dec	r24
     ab4:	e2 f7       	brpl	.-8      	; 0xaae <main+0xc0>
     ab6:	eb bd       	out	0x2b, r30	; 43

		if (ROW_NUM==0) 				// 5cc
     ab8:	8e b3       	in	r24, 0x1e	; 30
     aba:	90 e0       	ldi	r25, 0x00	; 0
     abc:	87 70       	andi	r24, 0x07	; 7
     abe:	90 70       	andi	r25, 0x00	; 0
     ac0:	89 2b       	or	r24, r25
     ac2:	21 f4       	brne	.+8      	; 0xacc <main+0xde>
		{
			ADVANCE_COUNTER;
     ac4:	8a b5       	in	r24, 0x2a	; 42
     ac6:	8f 5f       	subi	r24, 0xFF	; 255
     ac8:	8f 70       	andi	r24, 0x0F	; 15
     aca:	8a bd       	out	0x2a, r24	; 42
		}


		asm ( "call PrepareBuffers" );			// 10.8usec / 7usec	
     acc:	0e 94 b5 0b 	call	0x176a	; 0x176a <PrepareBuffers>
		
		// Buffers Ready flag
		SET_BUFFERREADY;						// 2cc
     ad0:	f5 9a       	sbi	0x1e, 5	; 30
		

		// Next Memory Lines Read
		if ( IS_HIGHSPEED )
     ad2:	f7 99       	sbic	0x1e, 7	; 30
     ad4:	65 c0       	rjmp	.+202    	; 0xba0 <main+0x1b2>
				g_iFlashRead --;
			}			
		}
		else
		{
			if ( g_iFlashRead > 48 )
     ad6:	80 91 00 01 	lds	r24, 0x0100
     ada:	81 33       	cpi	r24, 0x31	; 49
     adc:	08 f0       	brcs	.+2      	; 0xae0 <main+0xf2>
     ade:	3f c0       	rjmp	.+126    	; 0xb5e <main+0x170>
					// PUSH information to Line2	

					g_iFlashRead --;
				}
			}
			else if (g_iFlashRead)
     ae0:	80 91 00 01 	lds	r24, 0x0100
     ae4:	88 23       	and	r24, r24
     ae6:	09 f1       	breq	.+66     	; 0xb2a <main+0x13c>
			{
				while ( (BUFFER_IS_READY) && g_iFlashRead)
     ae8:	f5 9b       	sbis	0x1e, 5	; 30
     aea:	1f c0       	rjmp	.+62     	; 0xb2a <main+0x13c>
     aec:	80 91 00 01 	lds	r24, 0x0100
     af0:	88 23       	and	r24, r24
     af2:	d9 f0       	breq	.+54     	; 0xb2a <main+0x13c>
				{
					// Read next memory slots
					READ_FLASH_BYTE;
     af4:	1e bc       	out	0x2e, r1	; 46
     af6:	0d b4       	in	r0, 0x2d	; 45
     af8:	07 fe       	sbrs	r0, 7
     afa:	fd cf       	rjmp	.-6      	; 0xaf6 <main+0x108>
				
				
					//USARTWriteChar(c);
						
					if ( (WHICH_BUFFER) == 0 )
     afc:	f6 99       	sbic	0x1e, 6	; 30
     afe:	73 c0       	rjmp	.+230    	; 0xbe6 <main+0x1f8>
					{
						if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
     b00:	80 91 08 06 	lds	r24, 0x0608
     b04:	88 23       	and	r24, r24
     b06:	09 f0       	breq	.+2      	; 0xb0a <main+0x11c>
     b08:	90 c0       	rjmp	.+288    	; 0xc2a <main+0x23c>
						{
							Line_Buff2[96-g_iFlashRead] = SPDR;	// L2
     b0a:	80 91 00 01 	lds	r24, 0x0100
     b0e:	f9 01       	movw	r30, r18
     b10:	e8 1b       	sub	r30, r24
     b12:	f1 09       	sbc	r31, r1
     b14:	8e b5       	in	r24, 0x2e	; 46
     b16:	e6 5e       	subi	r30, 0xE6	; 230
     b18:	f9 4f       	sbci	r31, 0xF9	; 249
     b1a:	80 83       	st	Z, r24
						{
							Line_Buff1[48-g_iFlashRead] = SPDR;
						}
					}

					g_iFlashRead --;
     b1c:	80 91 00 01 	lds	r24, 0x0100
     b20:	81 50       	subi	r24, 0x01	; 1
     b22:	80 93 00 01 	sts	0x0100, r24
					g_iFlashRead --;
				}
			}
			else if (g_iFlashRead)
			{
				while ( (BUFFER_IS_READY) && g_iFlashRead)
     b26:	f5 99       	sbic	0x1e, 5	; 30
     b28:	e1 cf       	rjmp	.-62     	; 0xaec <main+0xfe>
				}
			}
		}

		// Wait for next request
		while ( BUFFER_IS_READY ) {}
     b2a:	f5 9b       	sbis	0x1e, 5	; 30
     b2c:	70 cf       	rjmp	.-288    	; 0xa0e <main+0x20>
     b2e:	f5 99       	sbic	0x1e, 5	; 30
     b30:	fc cf       	rjmp	.-8      	; 0xb2a <main+0x13c>
     b32:	6d cf       	rjmp	.-294    	; 0xa0e <main+0x20>
					// Read next memory slots
					READ_FLASH_BYTE;	

					//USARTWriteChar(c);
						
					if ( (WHICH_BUFFER) == 0 )
     b34:	f6 99       	sbic	0x1e, 6	; 30
     b36:	40 c0       	rjmp	.+128    	; 0xbb8 <main+0x1ca>
					{
						if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
     b38:	80 91 08 06 	lds	r24, 0x0608
     b3c:	88 23       	and	r24, r24
     b3e:	09 f0       	breq	.+2      	; 0xb42 <main+0x154>
     b40:	60 c0       	rjmp	.+192    	; 0xc02 <main+0x214>
						{
							Line_Buff2[96-g_iFlashRead] = SPDR;	// L2
     b42:	80 91 00 01 	lds	r24, 0x0100
     b46:	f9 01       	movw	r30, r18
     b48:	e8 1b       	sub	r30, r24
     b4a:	f1 09       	sbc	r31, r1
     b4c:	8e b5       	in	r24, 0x2e	; 46
     b4e:	e6 5e       	subi	r30, 0xE6	; 230
     b50:	f9 4f       	sbci	r31, 0xF9	; 249
     b52:	80 83       	st	Z, r24
							Line_Buff1[144-g_iFlashRead] = SPDR;
						}
					}
					// PUSH information to Line2	

					g_iFlashRead --;
     b54:	80 91 00 01 	lds	r24, 0x0100
     b58:	81 50       	subi	r24, 0x01	; 1
     b5a:	80 93 00 01 	sts	0x0100, r24
		}
		else
		{
			if ( g_iFlashRead > 48 )
			{
				while ( (BUFFER_IS_READY) && g_iFlashRead > 48)
     b5e:	f5 9b       	sbis	0x1e, 5	; 30
     b60:	e4 cf       	rjmp	.-56     	; 0xb2a <main+0x13c>
     b62:	80 91 00 01 	lds	r24, 0x0100
     b66:	81 33       	cpi	r24, 0x31	; 49
     b68:	00 f3       	brcs	.-64     	; 0xb2a <main+0x13c>
				{
					// Read next memory slots
					READ_FLASH_BYTE;	
     b6a:	1e bc       	out	0x2e, r1	; 46
     b6c:	0d b4       	in	r0, 0x2d	; 45
     b6e:	07 fe       	sbrs	r0, 7
     b70:	fd cf       	rjmp	.-6      	; 0xb6c <main+0x17e>
     b72:	e0 cf       	rjmp	.-64     	; 0xb34 <main+0x146>
		{
			while ( (BUFFER_IS_READY) && g_iFlashRead)
			{
				// Read next memory slots
				READ_FLASH_BYTE;
				iReadTemp = SPDR;
     b74:	9e b5       	in	r25, 0x2e	; 46

				if (g_bVeryHighSpeed)
     b76:	80 91 fe 05 	lds	r24, 0x05FE
     b7a:	88 23       	and	r24, r24
     b7c:	11 f0       	breq	.+4      	; 0xb82 <main+0x194>
					iReadTemp = (iReadTemp>>1)&0b01110111;
     b7e:	96 95       	lsr	r25
     b80:	97 77       	andi	r25, 0x77	; 119
			
				if ( (WHICH_BUFFER) == 0 )
     b82:	f6 99       	sbic	0x1e, 6	; 30
     b84:	27 c0       	rjmp	.+78     	; 0xbd4 <main+0x1e6>
				{

					Line_Buff2[96-g_iFlashRead] = iReadTemp;
     b86:	80 91 00 01 	lds	r24, 0x0100
     b8a:	f9 01       	movw	r30, r18
     b8c:	e8 1b       	sub	r30, r24
     b8e:	f1 09       	sbc	r31, r1
     b90:	e6 5e       	subi	r30, 0xE6	; 230
     b92:	f9 4f       	sbci	r31, 0xF9	; 249
     b94:	90 83       	st	Z, r25
				}
				else
				{
					Line_Buff1[96-g_iFlashRead] = iReadTemp;
				}
				g_iFlashRead --;
     b96:	80 91 00 01 	lds	r24, 0x0100
     b9a:	81 50       	subi	r24, 0x01	; 1
     b9c:	80 93 00 01 	sts	0x0100, r24
		

		// Next Memory Lines Read
		if ( IS_HIGHSPEED )
		{
			while ( (BUFFER_IS_READY) && g_iFlashRead)
     ba0:	f5 9b       	sbis	0x1e, 5	; 30
     ba2:	c3 cf       	rjmp	.-122    	; 0xb2a <main+0x13c>
     ba4:	80 91 00 01 	lds	r24, 0x0100
     ba8:	88 23       	and	r24, r24
     baa:	09 f4       	brne	.+2      	; 0xbae <main+0x1c0>
     bac:	be cf       	rjmp	.-132    	; 0xb2a <main+0x13c>
			{
				// Read next memory slots
				READ_FLASH_BYTE;
     bae:	1e bc       	out	0x2e, r1	; 46
     bb0:	0d b4       	in	r0, 0x2d	; 45
     bb2:	07 fe       	sbrs	r0, 7
     bb4:	fd cf       	rjmp	.-6      	; 0xbb0 <main+0x1c2>
     bb6:	de cf       	rjmp	.-68     	; 0xb74 <main+0x186>
							Line_Buff2[144-g_iFlashRead] = SPDR;
						}
					}
					else
					{
						if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
     bb8:	80 91 08 06 	lds	r24, 0x0608
     bbc:	88 23       	and	r24, r24
     bbe:	59 f5       	brne	.+86     	; 0xc16 <main+0x228>
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
     bc0:	80 91 00 01 	lds	r24, 0x0100
     bc4:	f9 01       	movw	r30, r18
     bc6:	e8 1b       	sub	r30, r24
     bc8:	f1 09       	sbc	r31, r1
     bca:	8e b5       	in	r24, 0x2e	; 46
     bcc:	e6 58       	subi	r30, 0x86	; 134
     bce:	f9 4f       	sbci	r31, 0xF9	; 249
     bd0:	80 83       	st	Z, r24
     bd2:	c0 cf       	rjmp	.-128    	; 0xb54 <main+0x166>
					Line_Buff2[96-g_iFlashRead] = iReadTemp;

				}
				else
				{
					Line_Buff1[96-g_iFlashRead] = iReadTemp;
     bd4:	80 91 00 01 	lds	r24, 0x0100
     bd8:	f9 01       	movw	r30, r18
     bda:	e8 1b       	sub	r30, r24
     bdc:	f1 09       	sbc	r31, r1
     bde:	e6 58       	subi	r30, 0x86	; 134
     be0:	f9 4f       	sbci	r31, 0xF9	; 249
     be2:	90 83       	st	Z, r25
     be4:	d8 cf       	rjmp	.-80     	; 0xb96 <main+0x1a8>
							Line_Buff2[48-g_iFlashRead] = SPDR;
						}
					}
					else
					{
						if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
     be6:	80 91 08 06 	lds	r24, 0x0608
     bea:	88 23       	and	r24, r24
     bec:	41 f5       	brne	.+80     	; 0xc3e <main+0x250>
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
     bee:	80 91 00 01 	lds	r24, 0x0100
     bf2:	f9 01       	movw	r30, r18
     bf4:	e8 1b       	sub	r30, r24
     bf6:	f1 09       	sbc	r31, r1
     bf8:	8e b5       	in	r24, 0x2e	; 46
     bfa:	e6 58       	subi	r30, 0x86	; 134
     bfc:	f9 4f       	sbci	r31, 0xF9	; 249
     bfe:	80 83       	st	Z, r24
     c00:	8d cf       	rjmp	.-230    	; 0xb1c <main+0x12e>
						{
							Line_Buff2[96-g_iFlashRead] = SPDR;	// L2
						}
						else
						{
							Line_Buff2[144-g_iFlashRead] = SPDR;
     c02:	80 91 00 01 	lds	r24, 0x0100
     c06:	fa 01       	movw	r30, r20
     c08:	e8 1b       	sub	r30, r24
     c0a:	f1 09       	sbc	r31, r1
     c0c:	8e b5       	in	r24, 0x2e	; 46
     c0e:	e6 5e       	subi	r30, 0xE6	; 230
     c10:	f9 4f       	sbci	r31, 0xF9	; 249
     c12:	80 83       	st	Z, r24
     c14:	9f cf       	rjmp	.-194    	; 0xb54 <main+0x166>
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
						}
						else
						{
							Line_Buff1[144-g_iFlashRead] = SPDR;
     c16:	80 91 00 01 	lds	r24, 0x0100
     c1a:	fa 01       	movw	r30, r20
     c1c:	e8 1b       	sub	r30, r24
     c1e:	f1 09       	sbc	r31, r1
     c20:	8e b5       	in	r24, 0x2e	; 46
     c22:	e6 58       	subi	r30, 0x86	; 134
     c24:	f9 4f       	sbci	r31, 0xF9	; 249
     c26:	80 83       	st	Z, r24
     c28:	95 cf       	rjmp	.-214    	; 0xb54 <main+0x166>
						{
							Line_Buff2[96-g_iFlashRead] = SPDR;	// L2
						}
						else
						{
							Line_Buff2[48-g_iFlashRead] = SPDR;
     c2a:	80 91 00 01 	lds	r24, 0x0100
     c2e:	fd 01       	movw	r30, r26
     c30:	e8 1b       	sub	r30, r24
     c32:	f1 09       	sbc	r31, r1
     c34:	8e b5       	in	r24, 0x2e	; 46
     c36:	e6 5e       	subi	r30, 0xE6	; 230
     c38:	f9 4f       	sbci	r31, 0xF9	; 249
     c3a:	80 83       	st	Z, r24
     c3c:	6f cf       	rjmp	.-290    	; 0xb1c <main+0x12e>
						{
							Line_Buff1[96-g_iFlashRead] = SPDR;	// L2
						}
						else
						{
							Line_Buff1[48-g_iFlashRead] = SPDR;
     c3e:	80 91 00 01 	lds	r24, 0x0100
     c42:	fd 01       	movw	r30, r26
     c44:	e8 1b       	sub	r30, r24
     c46:	f1 09       	sbc	r31, r1
     c48:	8e b5       	in	r24, 0x2e	; 46
     c4a:	e6 58       	subi	r30, 0x86	; 134
     c4c:	f9 4f       	sbci	r31, 0xF9	; 249
     c4e:	80 83       	st	Z, r24
     c50:	65 cf       	rjmp	.-310    	; 0xb1c <main+0x12e>

00000c52 <USARTInit>:
// This function is used to initialize the USART
// at a given UBRR value
void USARTInit(uint16_t ubrr_value)
{
   // Set Directions
   DDRE = 0b11111110;
     c52:	2e ef       	ldi	r18, 0xFE	; 254
     c54:	2d b9       	out	0x0d, r18	; 13

   //Set Baud rate

   UBRR0L = (unsigned char)ubrr_value;
     c56:	80 93 c4 00 	sts	0x00C4, r24
   UBRR0H = (unsigned char)(ubrr_value>>8);
     c5a:	90 93 c5 00 	sts	0x00C5, r25

   //Enable The receiver and transmitter
   UCSR0B=(1<<RXEN0)|(1<<TXEN0);
     c5e:	88 e1       	ldi	r24, 0x18	; 24
     c60:	80 93 c1 00 	sts	0x00C1, r24
   >> Asynchronous mode
   >> No Parity
   >> 1 StopBit
   >> char size 8
   */
   UCSR0C=/*(1<<UMSEL0)|*/(3<<UCSZ00);
     c64:	86 e0       	ldi	r24, 0x06	; 6
     c66:	80 93 c2 00 	sts	0x00C2, r24



}
     c6a:	08 95       	ret

00000c6c <USARTReadChar>:
// available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSR0A & (1<<RXC0)))
     c6c:	80 91 c0 00 	lds	r24, 0x00C0
     c70:	87 ff       	sbrs	r24, 7
     c72:	fc cf       	rjmp	.-8      	; 0xc6c <USARTReadChar>
      //Do nothing
   } 

   //Now USART has got data from host
   //and is available is buffer
   return UDR0;
     c74:	80 91 c6 00 	lds	r24, 0x00C6
}
     c78:	08 95       	ret

00000c7a <USARTWriteChar>:

//__________________________________________________________________________________________________
// This fuction writes the given "data" to
// the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
     c7a:	98 2f       	mov	r25, r24
   //Wait untill the transmitter is ready
   while(!(UCSR0A & (1<<UDRE0)))
     c7c:	80 91 c0 00 	lds	r24, 0x00C0
     c80:	85 ff       	sbrs	r24, 5
     c82:	fc cf       	rjmp	.-8      	; 0xc7c <USARTWriteChar+0x2>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR0=data;
     c84:	90 93 c6 00 	sts	0x00C6, r25
}
     c88:	08 95       	ret

00000c8a <USARTWriteString>:

//__________________________________________________________________________________________________
void USARTWriteString ( char* st )
{
     c8a:	dc 01       	movw	r26, r24
	uint8_t i=0;
	while (st[i]!='\0')
     c8c:	ec 91       	ld	r30, X
     c8e:	ee 23       	and	r30, r30
     c90:	71 f0       	breq	.+28     	; 0xcae <USARTWriteString+0x24>
     c92:	90 e0       	ldi	r25, 0x00	; 0
		USARTWriteChar(st[i++]);
     c94:	9f 5f       	subi	r25, 0xFF	; 255
// This fuction writes the given "data" to
// the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready
   while(!(UCSR0A & (1<<UDRE0)))
     c96:	80 91 c0 00 	lds	r24, 0x00C0
     c9a:	85 ff       	sbrs	r24, 5
     c9c:	fc cf       	rjmp	.-8      	; 0xc96 <USARTWriteString+0xc>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR0=data;
     c9e:	e0 93 c6 00 	sts	0x00C6, r30

//__________________________________________________________________________________________________
void USARTWriteString ( char* st )
{
	uint8_t i=0;
	while (st[i]!='\0')
     ca2:	fd 01       	movw	r30, r26
     ca4:	e9 0f       	add	r30, r25
     ca6:	f1 1d       	adc	r31, r1
     ca8:	e0 81       	ld	r30, Z
     caa:	ee 23       	and	r30, r30
     cac:	99 f7       	brne	.-26     	; 0xc94 <USARTWriteString+0xa>
     cae:	08 95       	ret

00000cb0 <FS_StopReadingFrame>:

//__________________________________________________________________________________________________
// File System - Stop reading from memory
void FS_StopReadingFrame ( void )
{
	CS_UP;
     cb0:	28 9a       	sbi	0x05, 0	; 5
}
     cb2:	08 95       	ret

00000cb4 <FS_WriteNewEntryTable>:
//__________________________________________________________________________________________________
// File System - Get new entry table
void FS_WriteNewEntryTable ( void )
{

}
     cb4:	08 95       	ret

00000cb6 <transfer_word>:


//__________________________________________________________________________________________________
// Transfer two bytes to and from spi recipient
uint16_t transfer_word ( uint16_t w )
{
     cb6:	1f 93       	push	r17
     cb8:	cf 93       	push	r28
     cba:	df 93       	push	r29
	uint16_t msb;
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
     cbc:	00 97       	sbiw	r24, 0x00	; 0
     cbe:	91 f0       	breq	.+36     	; 0xce4 <transfer_word+0x2e>
		msb = spi_transfer ( 0 );
		lsb = spi_transfer ( 0 );
	}
	else
	{
		lsb = w & 0xff;
     cc0:	ec 01       	movw	r28, r24
     cc2:	d0 70       	andi	r29, 0x00	; 0
		msb = w >> 8;
     cc4:	19 2f       	mov	r17, r25
		spi_transfer ( msb );
     cc6:	89 2f       	mov	r24, r25
     cc8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
		spi_transfer ( lsb );
     ccc:	8c 2f       	mov	r24, r28
     cce:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     cd2:	31 2f       	mov	r19, r17
     cd4:	20 e0       	ldi	r18, 0x00	; 0
     cd6:	2c 2b       	or	r18, r28
     cd8:	3d 2b       	or	r19, r29
	}

	ret_val = lsb | (msb<<8);

	return ret_val;
}
     cda:	c9 01       	movw	r24, r18
     cdc:	df 91       	pop	r29
     cde:	cf 91       	pop	r28
     ce0:	1f 91       	pop	r17
     ce2:	08 95       	ret
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     ce4:	80 e0       	ldi	r24, 0x00	; 0
     ce6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     cea:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     cec:	80 e0       	ldi	r24, 0x00	; 0
     cee:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     cf2:	c8 2f       	mov	r28, r24
     cf4:	d0 e0       	ldi	r29, 0x00	; 0
     cf6:	ed cf       	rjmp	.-38     	; 0xcd2 <transfer_word+0x1c>

00000cf8 <FS_ReadFrame>:
}

//__________________________________________________________________________________________________
// Read Out Frame Information
void FS_ReadFrame (uint16_t iBlock)
{
     cf8:	ef 92       	push	r14
     cfa:	ff 92       	push	r15
     cfc:	0f 93       	push	r16
     cfe:	1f 93       	push	r17
     d00:	cf 93       	push	r28
     d02:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
     d04:	28 9a       	sbi	0x05, 0	; 5

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);
     d06:	a0 e0       	ldi	r26, 0x00	; 0
     d08:	b0 e0       	ldi	r27, 0x00	; 0
     d0a:	bc 01       	movw	r22, r24
     d0c:	cd 01       	movw	r24, r26
     d0e:	20 e0       	ldi	r18, 0x00	; 0
     d10:	30 e3       	ldi	r19, 0x30	; 48
     d12:	40 e0       	ldi	r20, 0x00	; 0
     d14:	50 e0       	ldi	r21, 0x00	; 0
     d16:	0e 94 2b 18 	call	0x3056	; 0x3056 <__mulsi3>
     d1a:	7b 01       	movw	r14, r22
     d1c:	8c 01       	movw	r16, r24
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
     d1e:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
     d20:	83 e0       	ldi	r24, 0x03	; 3
     d22:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
     d26:	c8 01       	movw	r24, r16
     d28:	aa 27       	eor	r26, r26
     d2a:	bb 27       	eor	r27, r27
     d2c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
     d30:	bb 27       	eor	r27, r27
     d32:	a1 2f       	mov	r26, r17
     d34:	90 2f       	mov	r25, r16
     d36:	8f 2d       	mov	r24, r15
     d38:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte3);
     d3c:	8e 2d       	mov	r24, r14
     d3e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     d42:	c0 e0       	ldi	r28, 0x00	; 0
     d44:	d0 e0       	ldi	r29, 0x00	; 0

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
     d46:	80 e0       	ldi	r24, 0x00	; 0
     d48:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     d4c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
     d50:	21 96       	adiw	r28, 0x01	; 1
	spi_transfer(READ_ARRAY);      			// Read command
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
     d52:	85 e2       	ldi	r24, 0x25	; 37
     d54:	c0 38       	cpi	r28, 0x80	; 128
     d56:	d8 07       	cpc	r29, r24
     d58:	b1 f7       	brne	.-20     	; 0xd46 <FS_ReadFrame+0x4e>
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
	}

	CS_UP;
     d5a:	28 9a       	sbi	0x05, 0	; 5
}
     d5c:	df 91       	pop	r29
     d5e:	cf 91       	pop	r28
     d60:	1f 91       	pop	r17
     d62:	0f 91       	pop	r16
     d64:	ff 90       	pop	r15
     d66:	ef 90       	pop	r14
     d68:	08 95       	ret

00000d6a <FS_ReadEntry>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
{
     d6a:	8f 92       	push	r8
     d6c:	9f 92       	push	r9
     d6e:	bf 92       	push	r11
     d70:	cf 92       	push	r12
     d72:	df 92       	push	r13
     d74:	ef 92       	push	r14
     d76:	ff 92       	push	r15
     d78:	0f 93       	push	r16
     d7a:	1f 93       	push	r17
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	4c 01       	movw	r8, r24
     d82:	6b 01       	movw	r12, r22
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
     d84:	fc 01       	movw	r30, r24
     d86:	e0 80       	ld	r14, Z
     d88:	f1 80       	ldd	r15, Z+1	; 0x01
     d8a:	02 81       	ldd	r16, Z+2	; 0x02
     d8c:	13 81       	ldd	r17, Z+3	; 0x03
	uint16_t iNumFrames16 = 0;
	uint8_t iNumFrames = 0;
	uint8_t itr = 0;

	CS_UP;
     d8e:	28 9a       	sbi	0x05, 0	; 5
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
     d90:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
     d92:	83 e0       	ldi	r24, 0x03	; 3
     d94:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
     d98:	c8 01       	movw	r24, r16
     d9a:	aa 27       	eor	r26, r26
     d9c:	bb 27       	eor	r27, r27
     d9e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
     da2:	bb 27       	eor	r27, r27
     da4:	a1 2f       	mov	r26, r17
     da6:	90 2f       	mov	r25, r16
     da8:	8f 2d       	mov	r24, r15
     daa:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte3);
     dae:	8e 2d       	mov	r24, r14
     db0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     db4:	80 e0       	ldi	r24, 0x00	; 0
     db6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     dba:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     dbc:	80 e0       	ldi	r24, 0x00	; 0
     dbe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	// Read the number of frames
	iNumFrames16 = transfer_word ( 0 );
	iNumFrames = (uint8_t)(iNumFrames16&0xff);
     dc2:	31 2f       	mov	r19, r17
     dc4:	20 e0       	ldi	r18, 0x00	; 0
     dc6:	c8 2f       	mov	r28, r24
     dc8:	d0 e0       	ldi	r29, 0x00	; 0
     dca:	c2 2b       	or	r28, r18
     dcc:	d3 2b       	or	r29, r19
     dce:	bc 2e       	mov	r11, r28

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
     dd0:	f0 e2       	ldi	r31, 0x20	; 32
     dd2:	fc 17       	cp	r31, r28
     dd4:	08 f4       	brcc	.+2      	; 0xdd8 <FS_ReadEntry+0x6e>
     dd6:	83 c0       	rjmp	.+262    	; 0xede <FS_ReadEntry+0x174>
		// return fail
		CS_UP;
		return 0;
	}

	pEntry->iNumFrames = iNumFrames;
     dd8:	f6 01       	movw	r30, r12
     dda:	c0 83       	st	Z, r28
     ddc:	11 82       	std	Z+1, r1	; 0x01

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);
     dde:	80 e0       	ldi	r24, 0x00	; 0
     de0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     de4:	f6 01       	movw	r30, r12
     de6:	82 83       	std	Z+2, r24	; 0x02
     de8:	80 e0       	ldi	r24, 0x00	; 0
     dea:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     dee:	f6 01       	movw	r30, r12
     df0:	83 83       	std	Z+3, r24	; 0x03
     df2:	80 e0       	ldi	r24, 0x00	; 0
     df4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     df8:	f6 01       	movw	r30, r12
     dfa:	84 83       	std	Z+4, r24	; 0x04
     dfc:	80 e0       	ldi	r24, 0x00	; 0
     dfe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e02:	f6 01       	movw	r30, r12
     e04:	85 83       	std	Z+5, r24	; 0x05
     e06:	80 e0       	ldi	r24, 0x00	; 0
     e08:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e0c:	f6 01       	movw	r30, r12
     e0e:	86 83       	std	Z+6, r24	; 0x06
     e10:	80 e0       	ldi	r24, 0x00	; 0
     e12:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e16:	f6 01       	movw	r30, r12
     e18:	87 83       	std	Z+7, r24	; 0x07
     e1a:	80 e0       	ldi	r24, 0x00	; 0
     e1c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e20:	f6 01       	movw	r30, r12
     e22:	80 87       	std	Z+8, r24	; 0x08
     e24:	80 e0       	ldi	r24, 0x00	; 0
     e26:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e2a:	f6 01       	movw	r30, r12
     e2c:	81 87       	std	Z+9, r24	; 0x09
     e2e:	80 e0       	ldi	r24, 0x00	; 0
     e30:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e34:	f6 01       	movw	r30, r12
     e36:	82 87       	std	Z+10, r24	; 0x0a
     e38:	80 e0       	ldi	r24, 0x00	; 0
     e3a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e3e:	f6 01       	movw	r30, r12
     e40:	83 87       	std	Z+11, r24	; 0x0b
     e42:	80 e0       	ldi	r24, 0x00	; 0
     e44:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e48:	f6 01       	movw	r30, r12
     e4a:	84 87       	std	Z+12, r24	; 0x0c
     e4c:	80 e0       	ldi	r24, 0x00	; 0
     e4e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e52:	f6 01       	movw	r30, r12
     e54:	85 87       	std	Z+13, r24	; 0x0d

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
     e56:	cc 23       	and	r28, r28
     e58:	c1 f0       	breq	.+48     	; 0xe8a <FS_ReadEntry+0x120>
     e5a:	76 01       	movw	r14, r12
     e5c:	00 e0       	ldi	r16, 0x00	; 0
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     e5e:	80 e0       	ldi	r24, 0x00	; 0
     e60:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e64:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     e66:	80 e0       	ldi	r24, 0x00	; 0
     e68:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
     e6c:	d1 2f       	mov	r29, r17
     e6e:	c0 e0       	ldi	r28, 0x00	; 0
     e70:	90 e0       	ldi	r25, 0x00	; 0
     e72:	8c 2b       	or	r24, r28
     e74:	9d 2b       	or	r25, r29
     e76:	f7 01       	movw	r30, r14
     e78:	97 87       	std	Z+15, r25	; 0x0f
     e7a:	86 87       	std	Z+14, r24	; 0x0e
	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
     e7c:	0f 5f       	subi	r16, 0xFF	; 255
     e7e:	22 e0       	ldi	r18, 0x02	; 2
     e80:	30 e0       	ldi	r19, 0x00	; 0
     e82:	e2 0e       	add	r14, r18
     e84:	f3 1e       	adc	r15, r19
     e86:	0b 15       	cp	r16, r11
     e88:	50 f3       	brcs	.-44     	; 0xe5e <FS_ReadEntry+0xf4>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->iAngleOffset = spi_transfer(0);;
     e8a:	80 e0       	ldi	r24, 0x00	; 0
     e8c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     e90:	ee e4       	ldi	r30, 0x4E	; 78
     e92:	f0 e0       	ldi	r31, 0x00	; 0
     e94:	ce 0e       	add	r12, r30
     e96:	df 1e       	adc	r13, r31
     e98:	f6 01       	movw	r30, r12
     e9a:	81 93       	st	Z+, r24
     e9c:	6f 01       	movw	r12, r30
	pEntry->iFileType = spi_transfer(0);
     e9e:	80 e0       	ldi	r24, 0x00	; 0
     ea0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
     ea4:	f6 01       	movw	r30, r12
     ea6:	80 83       	st	Z, r24

	CS_UP;
     ea8:	28 9a       	sbi	0x05, 0	; 5

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;
     eaa:	f4 01       	movw	r30, r8
     eac:	80 81       	ld	r24, Z
     eae:	91 81       	ldd	r25, Z+1	; 0x01
     eb0:	a2 81       	ldd	r26, Z+2	; 0x02
     eb2:	b3 81       	ldd	r27, Z+3	; 0x03
     eb4:	80 5b       	subi	r24, 0xB0	; 176
     eb6:	9f 4f       	sbci	r25, 0xFF	; 255
     eb8:	af 4f       	sbci	r26, 0xFF	; 255
     eba:	bf 4f       	sbci	r27, 0xFF	; 255
     ebc:	80 83       	st	Z, r24
     ebe:	91 83       	std	Z+1, r25	; 0x01
     ec0:	a2 83       	std	Z+2, r26	; 0x02
     ec2:	b3 83       	std	Z+3, r27	; 0x03
     ec4:	81 e0       	ldi	r24, 0x01	; 1

	return 1;	// Success
}
     ec6:	df 91       	pop	r29
     ec8:	cf 91       	pop	r28
     eca:	1f 91       	pop	r17
     ecc:	0f 91       	pop	r16
     ece:	ff 90       	pop	r15
     ed0:	ef 90       	pop	r14
     ed2:	df 90       	pop	r13
     ed4:	cf 90       	pop	r12
     ed6:	bf 90       	pop	r11
     ed8:	9f 90       	pop	r9
     eda:	8f 90       	pop	r8
     edc:	08 95       	ret
	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
	{
		// return fail
		CS_UP;
     ede:	28 9a       	sbi	0x05, 0	; 5
     ee0:	80 e0       	ldi	r24, 0x00	; 0
     ee2:	f1 cf       	rjmp	.-30     	; 0xec6 <FS_ReadEntry+0x15c>

00000ee4 <FS_ShowFileInformation>:


//__________________________________________________________________________________________________
// File System - Show on uart the file system contents
void FS_ShowFileInformation ( void )
{
     ee4:	2f 92       	push	r2
     ee6:	3f 92       	push	r3
     ee8:	4f 92       	push	r4
     eea:	5f 92       	push	r5
     eec:	6f 92       	push	r6
     eee:	7f 92       	push	r7
     ef0:	8f 92       	push	r8
     ef2:	9f 92       	push	r9
     ef4:	af 92       	push	r10
     ef6:	bf 92       	push	r11
     ef8:	cf 92       	push	r12
     efa:	df 92       	push	r13
     efc:	ef 92       	push	r14
     efe:	ff 92       	push	r15
     f00:	0f 93       	push	r16
     f02:	1f 93       	push	r17
     f04:	df 93       	push	r29
     f06:	cf 93       	push	r28
     f08:	cd b7       	in	r28, 0x3d	; 61
     f0a:	de b7       	in	r29, 0x3e	; 62
     f0c:	c4 5b       	subi	r28, 0xB4	; 180
     f0e:	d0 40       	sbci	r29, 0x00	; 0
     f10:	0f b6       	in	r0, 0x3f	; 63
     f12:	f8 94       	cli
     f14:	de bf       	out	0x3e, r29	; 62
     f16:	0f be       	out	0x3f, r0	; 63
     f18:	cd bf       	out	0x3d, r28	; 61
	uint32_t 				Address = ENTRY_TABLE_ADDR;
     f1a:	e1 2c       	mov	r14, r1
     f1c:	a0 ec       	ldi	r26, 0xC0	; 192
     f1e:	fa 2e       	mov	r15, r26
     f20:	af e3       	ldi	r26, 0x3F	; 63
     f22:	0a 2f       	mov	r16, r26
     f24:	11 2d       	mov	r17, r1
     f26:	e9 82       	std	Y+1, r14	; 0x01
     f28:	fa 82       	std	Y+2, r15	; 0x02
     f2a:	0b 83       	std	Y+3, r16	; 0x03
     f2c:	1c 83       	std	Y+4, r17	; 0x04
	FileEntry_ST			sFileEntry;
	uint16_t				iCount = 0;
	char Text[96];
	uint8_t					blockNum = 0;

	USARTWriteString ( (char*)"\r\n# - Name - #1 Blk - Offs - Sz (Blks)\r\n");
     f2e:	84 e0       	ldi	r24, 0x04	; 4
     f30:	91 e0       	ldi	r25, 0x01	; 1
     f32:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	Address = ENTRY_TABLE_ADDR;
     f36:	e9 82       	std	Y+1, r14	; 0x01
     f38:	fa 82       	std	Y+2, r15	; 0x02
     f3a:	0b 83       	std	Y+3, r16	; 0x03
     f3c:	1c 83       	std	Y+4, r17	; 0x04
     f3e:	cc 24       	eor	r12, r12
     f40:	dd 24       	eor	r13, r13
     f42:	4e 01       	movw	r8, r28
     f44:	08 94       	sec
     f46:	81 1c       	adc	r8, r1
     f48:	91 1c       	adc	r9, r1
     f4a:	f5 e0       	ldi	r31, 0x05	; 5
     f4c:	6f 2e       	mov	r6, r31
     f4e:	71 2c       	mov	r7, r1
     f50:	6c 0e       	add	r6, r28
     f52:	7d 1e       	adc	r7, r29

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
	{
		iCount ++;
		sprintf(Text, "%d		%s		%d	%d	%d\r\n", 	iCount,
     f54:	e5 e5       	ldi	r30, 0x55	; 85
     f56:	ee 2e       	mov	r14, r30
     f58:	f1 2c       	mov	r15, r1
     f5a:	ec 0e       	add	r14, r28
     f5c:	fd 1e       	adc	r15, r29
     f5e:	7d e2       	ldi	r23, 0x2D	; 45
     f60:	27 2e       	mov	r2, r23
     f62:	71 e0       	ldi	r23, 0x01	; 1
     f64:	37 2e       	mov	r3, r23
     f66:	63 e5       	ldi	r22, 0x53	; 83
     f68:	46 2e       	mov	r4, r22
     f6a:	51 2c       	mov	r5, r1
     f6c:	4c 0e       	add	r4, r28
     f6e:	5d 1e       	adc	r5, r29
     f70:	5a e4       	ldi	r21, 0x4A	; 74
     f72:	a5 2e       	mov	r10, r21
     f74:	51 e0       	ldi	r21, 0x01	; 1
     f76:	b5 2e       	mov	r11, r21

	USARTWriteString ( (char*)"\r\n# - Name - #1 Blk - Offs - Sz (Blks)\r\n");

	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
     f78:	c4 01       	movw	r24, r8
     f7a:	b3 01       	movw	r22, r6
     f7c:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
     f80:	88 23       	and	r24, r24
     f82:	09 f4       	brne	.+2      	; 0xf86 <FS_ShowFileInformation+0xa2>
     f84:	7f c0       	rjmp	.+254    	; 0x1084 <FS_ShowFileInformation+0x1a0>
	{
		iCount ++;
     f86:	08 94       	sec
     f88:	c1 1c       	adc	r12, r1
     f8a:	d1 1c       	adc	r13, r1
		sprintf(Text, "%d		%s		%d	%d	%d\r\n", 	iCount,
     f8c:	8d b7       	in	r24, 0x3d	; 61
     f8e:	9e b7       	in	r25, 0x3e	; 62
     f90:	0e 97       	sbiw	r24, 0x0e	; 14
     f92:	0f b6       	in	r0, 0x3f	; 63
     f94:	f8 94       	cli
     f96:	9e bf       	out	0x3e, r25	; 62
     f98:	0f be       	out	0x3f, r0	; 63
     f9a:	8d bf       	out	0x3d, r24	; 61
     f9c:	ed b7       	in	r30, 0x3d	; 61
     f9e:	fe b7       	in	r31, 0x3e	; 62
     fa0:	31 96       	adiw	r30, 0x01	; 1
     fa2:	ad b7       	in	r26, 0x3d	; 61
     fa4:	be b7       	in	r27, 0x3e	; 62
     fa6:	12 96       	adiw	r26, 0x02	; 2
     fa8:	fc 92       	st	X, r15
     faa:	ee 92       	st	-X, r14
     fac:	11 97       	sbiw	r26, 0x01	; 1
     fae:	33 82       	std	Z+3, r3	; 0x03
     fb0:	22 82       	std	Z+2, r2	; 0x02
     fb2:	d5 82       	std	Z+5, r13	; 0x05
     fb4:	c4 82       	std	Z+4, r12	; 0x04
     fb6:	87 e0       	ldi	r24, 0x07	; 7
     fb8:	90 e0       	ldi	r25, 0x00	; 0
     fba:	8c 0f       	add	r24, r28
     fbc:	9d 1f       	adc	r25, r29
     fbe:	97 83       	std	Z+7, r25	; 0x07
     fc0:	86 83       	std	Z+6, r24	; 0x06
     fc2:	8b 89       	ldd	r24, Y+19	; 0x13
     fc4:	9c 89       	ldd	r25, Y+20	; 0x14
     fc6:	91 87       	std	Z+9, r25	; 0x09
     fc8:	80 87       	std	Z+8, r24	; 0x08
     fca:	d2 01       	movw	r26, r4
     fcc:	8c 91       	ld	r24, X
     fce:	82 87       	std	Z+10, r24	; 0x0a
     fd0:	13 86       	std	Z+11, r1	; 0x0b
     fd2:	8d 81       	ldd	r24, Y+5	; 0x05
     fd4:	9e 81       	ldd	r25, Y+6	; 0x06
     fd6:	95 87       	std	Z+13, r25	; 0x0d
     fd8:	84 87       	std	Z+12, r24	; 0x0c
     fda:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
															sFileEntry.sFileName,
															sFileEntry.iBlockList[0],
															sFileEntry.iAngleOffset,
															sFileEntry.iNumFrames );
		USARTWriteString (Text);
     fde:	ed b7       	in	r30, 0x3d	; 61
     fe0:	fe b7       	in	r31, 0x3e	; 62
     fe2:	3e 96       	adiw	r30, 0x0e	; 14
     fe4:	0f b6       	in	r0, 0x3f	; 63
     fe6:	f8 94       	cli
     fe8:	fe bf       	out	0x3e, r31	; 62
     fea:	0f be       	out	0x3f, r0	; 63
     fec:	ed bf       	out	0x3d, r30	; 61
     fee:	c7 01       	movw	r24, r14
     ff0:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

		USARTWriteString ( (char*)"Blocks:\r\n");
     ff4:	80 e4       	ldi	r24, 0x40	; 64
     ff6:	91 e0       	ldi	r25, 0x01	; 1
     ff8:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
		for (blockNum = 0; blockNum < sFileEntry.iNumFrames; blockNum++ )
     ffc:	8d 81       	ldd	r24, Y+5	; 0x05
     ffe:	9e 81       	ldd	r25, Y+6	; 0x06
    1000:	89 2b       	or	r24, r25
    1002:	89 f1       	breq	.+98     	; 0x1066 <FS_ShowFileInformation+0x182>
    1004:	10 e0       	ldi	r17, 0x00	; 0
    1006:	a0 e0       	ldi	r26, 0x00	; 0
    1008:	b0 e0       	ldi	r27, 0x00	; 0
		{
			sprintf(Text, "%d, ", sFileEntry.iBlockList[blockNum] );
    100a:	00 d0       	rcall	.+0      	; 0x100c <FS_ShowFileInformation+0x128>
    100c:	00 d0       	rcall	.+0      	; 0x100e <FS_ShowFileInformation+0x12a>
    100e:	00 d0       	rcall	.+0      	; 0x1010 <FS_ShowFileInformation+0x12c>
    1010:	2d b7       	in	r18, 0x3d	; 61
    1012:	3e b7       	in	r19, 0x3e	; 62
    1014:	2f 5f       	subi	r18, 0xFF	; 255
    1016:	3f 4f       	sbci	r19, 0xFF	; 255
    1018:	ed b7       	in	r30, 0x3d	; 61
    101a:	fe b7       	in	r31, 0x3e	; 62
    101c:	f2 82       	std	Z+2, r15	; 0x02
    101e:	e1 82       	std	Z+1, r14	; 0x01
    1020:	f9 01       	movw	r30, r18
    1022:	b3 82       	std	Z+3, r11	; 0x03
    1024:	a2 82       	std	Z+2, r10	; 0x02
    1026:	17 96       	adiw	r26, 0x07	; 7
    1028:	aa 0f       	add	r26, r26
    102a:	bb 1f       	adc	r27, r27
    102c:	a8 0d       	add	r26, r8
    102e:	b9 1d       	adc	r27, r9
    1030:	14 96       	adiw	r26, 0x04	; 4
    1032:	8d 91       	ld	r24, X+
    1034:	9c 91       	ld	r25, X
    1036:	15 97       	sbiw	r26, 0x05	; 5
    1038:	95 83       	std	Z+5, r25	; 0x05
    103a:	84 83       	std	Z+4, r24	; 0x04
    103c:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
			USARTWriteString (Text);
    1040:	8d b7       	in	r24, 0x3d	; 61
    1042:	9e b7       	in	r25, 0x3e	; 62
    1044:	06 96       	adiw	r24, 0x06	; 6
    1046:	0f b6       	in	r0, 0x3f	; 63
    1048:	f8 94       	cli
    104a:	9e bf       	out	0x3e, r25	; 62
    104c:	0f be       	out	0x3f, r0	; 63
    104e:	8d bf       	out	0x3d, r24	; 61
    1050:	c7 01       	movw	r24, r14
    1052:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
															sFileEntry.iAngleOffset,
															sFileEntry.iNumFrames );
		USARTWriteString (Text);

		USARTWriteString ( (char*)"Blocks:\r\n");
		for (blockNum = 0; blockNum < sFileEntry.iNumFrames; blockNum++ )
    1056:	1f 5f       	subi	r17, 0xFF	; 255
    1058:	a1 2f       	mov	r26, r17
    105a:	b0 e0       	ldi	r27, 0x00	; 0
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	a8 17       	cp	r26, r24
    1062:	b9 07       	cpc	r27, r25
    1064:	90 f2       	brcs	.-92     	; 0x100a <FS_ShowFileInformation+0x126>
		{
			sprintf(Text, "%d, ", sFileEntry.iBlockList[blockNum] );
			USARTWriteString (Text);
		}
		USARTWriteString ( (char*)"\r\n");
    1066:	8f e4       	ldi	r24, 0x4F	; 79
    1068:	91 e0       	ldi	r25, 0x01	; 1
    106a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

		iNumOfFiles = iCount;
    106e:	d0 92 a8 01 	sts	0x01A8, r13
    1072:	c0 92 a7 01 	sts	0x01A7, r12

	USARTWriteString ( (char*)"\r\n# - Name - #1 Blk - Offs - Sz (Blks)\r\n");

	Address = ENTRY_TABLE_ADDR;

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    1076:	c4 01       	movw	r24, r8
    1078:	b3 01       	movw	r22, r6
    107a:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
    107e:	88 23       	and	r24, r24
    1080:	09 f0       	breq	.+2      	; 0x1084 <FS_ShowFileInformation+0x1a0>
    1082:	81 cf       	rjmp	.-254    	; 0xf86 <FS_ShowFileInformation+0xa2>
		USARTWriteString ( (char*)"\r\n");

		iNumOfFiles = iCount;
	}

	if (iCount)
    1084:	cd 28       	or	r12, r13
    1086:	e9 f4       	brne	.+58     	; 0x10c2 <FS_ShowFileInformation+0x1de>
		bFS_Empty = 0;
	else
		bFS_Empty = 1;
    1088:	81 e0       	ldi	r24, 0x01	; 1
    108a:	80 93 17 06 	sts	0x0617, r24
}
    108e:	cc 54       	subi	r28, 0x4C	; 76
    1090:	df 4f       	sbci	r29, 0xFF	; 255
    1092:	0f b6       	in	r0, 0x3f	; 63
    1094:	f8 94       	cli
    1096:	de bf       	out	0x3e, r29	; 62
    1098:	0f be       	out	0x3f, r0	; 63
    109a:	cd bf       	out	0x3d, r28	; 61
    109c:	cf 91       	pop	r28
    109e:	df 91       	pop	r29
    10a0:	1f 91       	pop	r17
    10a2:	0f 91       	pop	r16
    10a4:	ff 90       	pop	r15
    10a6:	ef 90       	pop	r14
    10a8:	df 90       	pop	r13
    10aa:	cf 90       	pop	r12
    10ac:	bf 90       	pop	r11
    10ae:	af 90       	pop	r10
    10b0:	9f 90       	pop	r9
    10b2:	8f 90       	pop	r8
    10b4:	7f 90       	pop	r7
    10b6:	6f 90       	pop	r6
    10b8:	5f 90       	pop	r5
    10ba:	4f 90       	pop	r4
    10bc:	3f 90       	pop	r3
    10be:	2f 90       	pop	r2
    10c0:	08 95       	ret

		iNumOfFiles = iCount;
	}

	if (iCount)
		bFS_Empty = 0;
    10c2:	10 92 17 06 	sts	0x0617, r1
    10c6:	e3 cf       	rjmp	.-58     	; 0x108e <FS_ShowFileInformation+0x1aa>

000010c8 <FS_ReadNextEntry>:
}

//__________________________________________________________________________________________________
// Reads the next file entry and updates the global variables
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
    10c8:	cf 93       	push	r28
    10ca:	df 93       	push	r29
    10cc:	ec 01       	movw	r28, r24
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
    10ce:	83 ea       	ldi	r24, 0xA3	; 163
    10d0:	91 e0       	ldi	r25, 0x01	; 1
    10d2:	be 01       	movw	r22, r28
    10d4:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
    10d8:	88 23       	and	r24, r24
    10da:	21 f0       	breq	.+8      	; 0x10e4 <FS_ReadNextEntry+0x1c>
			bFS_Empty = 1;
			return 0;	// Fail
		}
		else
		{
			bFS_Empty = 0;
    10dc:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 1;		// Success
}
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
	{
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;
    10e4:	80 e0       	ldi	r24, 0x00	; 0
    10e6:	90 ec       	ldi	r25, 0xC0	; 192
    10e8:	af e3       	ldi	r26, 0x3F	; 63
    10ea:	b0 e0       	ldi	r27, 0x00	; 0
    10ec:	80 93 a3 01 	sts	0x01A3, r24
    10f0:	90 93 a4 01 	sts	0x01A4, r25
    10f4:	a0 93 a5 01 	sts	0x01A5, r26
    10f8:	b0 93 a6 01 	sts	0x01A6, r27

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
    10fc:	83 ea       	ldi	r24, 0xA3	; 163
    10fe:	91 e0       	ldi	r25, 0x01	; 1
    1100:	be 01       	movw	r22, r28
    1102:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
    1106:	88 23       	and	r24, r24
    1108:	19 f0       	breq	.+6      	; 0x1110 <FS_ReadNextEntry+0x48>
			bFS_Empty = 1;
			return 0;	// Fail
		}
		else
		{
			bFS_Empty = 0;
    110a:	10 92 17 06 	sts	0x0617, r1
    110e:	e6 cf       	rjmp	.-52     	; 0x10dc <FS_ReadNextEntry+0x14>
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
		{
			bFS_Empty = 1;
    1110:	81 e0       	ldi	r24, 0x01	; 1
    1112:	80 93 17 06 	sts	0x0617, r24
    1116:	80 e0       	ldi	r24, 0x00	; 0
		{
			bFS_Empty = 0;
		}
	}
	return 1;		// Success
}
    1118:	df 91       	pop	r29
    111a:	cf 91       	pop	r28
    111c:	08 95       	ret

0000111e <FS_ReadEntry_FileMatch>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - Only if filename matches
// Returns success (1) or fail (0) of no match (2)
uint8_t FS_ReadEntry_FileMatch ( uint32_t *pAddress, FileEntry_ST* pEntry, char* FileName )
{
    111e:	6f 92       	push	r6
    1120:	7f 92       	push	r7
    1122:	8f 92       	push	r8
    1124:	9f 92       	push	r9
    1126:	bf 92       	push	r11
    1128:	cf 92       	push	r12
    112a:	df 92       	push	r13
    112c:	ef 92       	push	r14
    112e:	ff 92       	push	r15
    1130:	0f 93       	push	r16
    1132:	1f 93       	push	r17
    1134:	cf 93       	push	r28
    1136:	df 93       	push	r29
    1138:	4c 01       	movw	r8, r24
    113a:	6b 01       	movw	r12, r22
    113c:	3a 01       	movw	r6, r20
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
    113e:	fc 01       	movw	r30, r24
    1140:	e0 80       	ld	r14, Z
    1142:	f1 80       	ldd	r15, Z+1	; 0x01
    1144:	02 81       	ldd	r16, Z+2	; 0x02
    1146:	13 81       	ldd	r17, Z+3	; 0x03
	uint16_t iNumFrames16 = 0;
	uint8_t iNumFrames = 0;
	uint8_t itr = 0;

	CS_UP;
    1148:	28 9a       	sbi	0x05, 0	; 5
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
    114a:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
    114c:	83 e0       	ldi	r24, 0x03	; 3
    114e:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
    1152:	c8 01       	movw	r24, r16
    1154:	aa 27       	eor	r26, r26
    1156:	bb 27       	eor	r27, r27
    1158:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
    115c:	bb 27       	eor	r27, r27
    115e:	a1 2f       	mov	r26, r17
    1160:	90 2f       	mov	r25, r16
    1162:	8f 2d       	mov	r24, r15
    1164:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte3);
    1168:	8e 2d       	mov	r24, r14
    116a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
    116e:	80 e0       	ldi	r24, 0x00	; 0
    1170:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    1174:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
    1176:	80 e0       	ldi	r24, 0x00	; 0
    1178:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	// Read the number of frames
	iNumFrames16 = transfer_word ( 0 );
	iNumFrames = (uint8_t)(iNumFrames16 & 0xff);
    117c:	31 2f       	mov	r19, r17
    117e:	20 e0       	ldi	r18, 0x00	; 0
    1180:	c8 2f       	mov	r28, r24
    1182:	d0 e0       	ldi	r29, 0x00	; 0
    1184:	c2 2b       	or	r28, r18
    1186:	d3 2b       	or	r29, r19
    1188:	bc 2e       	mov	r11, r28

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
    118a:	f0 e2       	ldi	r31, 0x20	; 32
    118c:	fc 17       	cp	r31, r28
    118e:	08 f4       	brcc	.+2      	; 0x1192 <FS_ReadEntry_FileMatch+0x74>
    1190:	63 c0       	rjmp	.+198    	; 0x1258 <FS_ReadEntry_FileMatch+0x13a>
		// return fail
		CS_UP;
		return 0;
	}

	pEntry->iNumFrames = iNumFrames;
    1192:	f6 01       	movw	r30, r12
    1194:	c0 83       	st	Z, r28
    1196:	11 82       	std	Z+1, r1	; 0x01

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);
    1198:	80 e0       	ldi	r24, 0x00	; 0
    119a:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    119e:	f6 01       	movw	r30, r12
    11a0:	82 83       	std	Z+2, r24	; 0x02
    11a2:	80 e0       	ldi	r24, 0x00	; 0
    11a4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11a8:	f6 01       	movw	r30, r12
    11aa:	83 83       	std	Z+3, r24	; 0x03
    11ac:	80 e0       	ldi	r24, 0x00	; 0
    11ae:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11b2:	f6 01       	movw	r30, r12
    11b4:	84 83       	std	Z+4, r24	; 0x04
    11b6:	80 e0       	ldi	r24, 0x00	; 0
    11b8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11bc:	f6 01       	movw	r30, r12
    11be:	85 83       	std	Z+5, r24	; 0x05
    11c0:	80 e0       	ldi	r24, 0x00	; 0
    11c2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11c6:	f6 01       	movw	r30, r12
    11c8:	86 83       	std	Z+6, r24	; 0x06
    11ca:	80 e0       	ldi	r24, 0x00	; 0
    11cc:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11d0:	f6 01       	movw	r30, r12
    11d2:	87 83       	std	Z+7, r24	; 0x07
    11d4:	80 e0       	ldi	r24, 0x00	; 0
    11d6:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11da:	f6 01       	movw	r30, r12
    11dc:	80 87       	std	Z+8, r24	; 0x08
    11de:	80 e0       	ldi	r24, 0x00	; 0
    11e0:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11e4:	f6 01       	movw	r30, r12
    11e6:	81 87       	std	Z+9, r24	; 0x09
    11e8:	80 e0       	ldi	r24, 0x00	; 0
    11ea:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11ee:	f6 01       	movw	r30, r12
    11f0:	82 87       	std	Z+10, r24	; 0x0a
    11f2:	80 e0       	ldi	r24, 0x00	; 0
    11f4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    11f8:	f6 01       	movw	r30, r12
    11fa:	83 87       	std	Z+11, r24	; 0x0b
    11fc:	80 e0       	ldi	r24, 0x00	; 0
    11fe:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    1202:	f6 01       	movw	r30, r12
    1204:	84 87       	std	Z+12, r24	; 0x0c
    1206:	80 e0       	ldi	r24, 0x00	; 0
    1208:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    120c:	f6 01       	movw	r30, r12
    120e:	85 87       	std	Z+13, r24	; 0x0d

	if ( strcmp(pEntry->sFileName, FileName) != 0 )		// No match
    1210:	c6 01       	movw	r24, r12
    1212:	02 96       	adiw	r24, 0x02	; 2
    1214:	b3 01       	movw	r22, r6
    1216:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    121a:	00 97       	sbiw	r24, 0x00	; 0
    121c:	01 f1       	breq	.+64     	; 0x125e <FS_ReadEntry_FileMatch+0x140>
	{
		CS_UP;
    121e:	28 9a       	sbi	0x05, 0	; 5
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
    1220:	f4 01       	movw	r30, r8
    1222:	80 81       	ld	r24, Z
    1224:	91 81       	ldd	r25, Z+1	; 0x01
    1226:	a2 81       	ldd	r26, Z+2	; 0x02
    1228:	b3 81       	ldd	r27, Z+3	; 0x03
    122a:	80 5b       	subi	r24, 0xB0	; 176
    122c:	9f 4f       	sbci	r25, 0xFF	; 255
    122e:	af 4f       	sbci	r26, 0xFF	; 255
    1230:	bf 4f       	sbci	r27, 0xFF	; 255
    1232:	80 83       	st	Z, r24
    1234:	91 83       	std	Z+1, r25	; 0x01
    1236:	a2 83       	std	Z+2, r26	; 0x02
    1238:	b3 83       	std	Z+3, r27	; 0x03
    123a:	82 e0       	ldi	r24, 0x02	; 2

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;

	return 1;	// Success
}
    123c:	df 91       	pop	r29
    123e:	cf 91       	pop	r28
    1240:	1f 91       	pop	r17
    1242:	0f 91       	pop	r16
    1244:	ff 90       	pop	r15
    1246:	ef 90       	pop	r14
    1248:	df 90       	pop	r13
    124a:	cf 90       	pop	r12
    124c:	bf 90       	pop	r11
    124e:	9f 90       	pop	r9
    1250:	8f 90       	pop	r8
    1252:	7f 90       	pop	r7
    1254:	6f 90       	pop	r6
    1256:	08 95       	ret
	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
	{
		// return fail
		CS_UP;
    1258:	28 9a       	sbi	0x05, 0	; 5
    125a:	80 e0       	ldi	r24, 0x00	; 0
    125c:	ef cf       	rjmp	.-34     	; 0x123c <FS_ReadEntry_FileMatch+0x11e>
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    125e:	cc 23       	and	r28, r28
    1260:	c1 f0       	breq	.+48     	; 0x1292 <FS_ReadEntry_FileMatch+0x174>

	if ( strcmp(pEntry->sFileName, FileName) != 0 )		// No match
	{
		CS_UP;
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
    1262:	76 01       	movw	r14, r12
    1264:	00 e0       	ldi	r16, 0x00	; 0
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
    1266:	80 e0       	ldi	r24, 0x00	; 0
    1268:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    126c:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
    1274:	d1 2f       	mov	r29, r17
    1276:	c0 e0       	ldi	r28, 0x00	; 0
    1278:	90 e0       	ldi	r25, 0x00	; 0
    127a:	8c 2b       	or	r24, r28
    127c:	9d 2b       	or	r25, r29
    127e:	f7 01       	movw	r30, r14
    1280:	97 87       	std	Z+15, r25	; 0x0f
    1282:	86 87       	std	Z+14, r24	; 0x0e
		*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1284:	0f 5f       	subi	r16, 0xFF	; 255
    1286:	22 e0       	ldi	r18, 0x02	; 2
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	e2 0e       	add	r14, r18
    128c:	f3 1e       	adc	r15, r19
    128e:	0b 15       	cp	r16, r11
    1290:	50 f3       	brcs	.-44     	; 0x1266 <FS_ReadEntry_FileMatch+0x148>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->iAngleOffset = spi_transfer(0);;
    1292:	80 e0       	ldi	r24, 0x00	; 0
    1294:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    1298:	ee e4       	ldi	r30, 0x4E	; 78
    129a:	f0 e0       	ldi	r31, 0x00	; 0
    129c:	ce 0e       	add	r12, r30
    129e:	df 1e       	adc	r13, r31
    12a0:	f6 01       	movw	r30, r12
    12a2:	81 93       	st	Z+, r24
    12a4:	6f 01       	movw	r12, r30
	pEntry->iFileType = spi_transfer(0);
    12a6:	80 e0       	ldi	r24, 0x00	; 0
    12a8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    12ac:	f6 01       	movw	r30, r12
    12ae:	80 83       	st	Z, r24

	CS_UP;
    12b0:	28 9a       	sbi	0x05, 0	; 5

	// Advance the address
	*pAddress += (uint32_t)(ENTRY_TABLE_EL_SIZE);//16+2*iNumFrames;
    12b2:	f4 01       	movw	r30, r8
    12b4:	80 81       	ld	r24, Z
    12b6:	91 81       	ldd	r25, Z+1	; 0x01
    12b8:	a2 81       	ldd	r26, Z+2	; 0x02
    12ba:	b3 81       	ldd	r27, Z+3	; 0x03
    12bc:	80 5b       	subi	r24, 0xB0	; 176
    12be:	9f 4f       	sbci	r25, 0xFF	; 255
    12c0:	af 4f       	sbci	r26, 0xFF	; 255
    12c2:	bf 4f       	sbci	r27, 0xFF	; 255
    12c4:	80 83       	st	Z, r24
    12c6:	91 83       	std	Z+1, r25	; 0x01
    12c8:	a2 83       	std	Z+2, r26	; 0x02
    12ca:	b3 83       	std	Z+3, r27	; 0x03
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	b6 cf       	rjmp	.-148    	; 0x123c <FS_ReadEntry_FileMatch+0x11e>

000012d0 <FS_SearchFile>:

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
    12d0:	2f 92       	push	r2
    12d2:	3f 92       	push	r3
    12d4:	4f 92       	push	r4
    12d6:	5f 92       	push	r5
    12d8:	6f 92       	push	r6
    12da:	7f 92       	push	r7
    12dc:	8f 92       	push	r8
    12de:	9f 92       	push	r9
    12e0:	af 92       	push	r10
    12e2:	bf 92       	push	r11
    12e4:	cf 92       	push	r12
    12e6:	df 92       	push	r13
    12e8:	ef 92       	push	r14
    12ea:	ff 92       	push	r15
    12ec:	0f 93       	push	r16
    12ee:	1f 93       	push	r17
    12f0:	df 93       	push	r29
    12f2:	cf 93       	push	r28
    12f4:	cd b7       	in	r28, 0x3d	; 61
    12f6:	de b7       	in	r29, 0x3e	; 62
    12f8:	c6 56       	subi	r28, 0x66	; 102
    12fa:	d0 40       	sbci	r29, 0x00	; 0
    12fc:	0f b6       	in	r0, 0x3f	; 63
    12fe:	f8 94       	cli
    1300:	de bf       	out	0x3e, r29	; 62
    1302:	0f be       	out	0x3f, r0	; 63
    1304:	cd bf       	out	0x3d, r28	; 61
    1306:	3c 01       	movw	r6, r24
    1308:	6b 01       	movw	r12, r22
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    130a:	80 e0       	ldi	r24, 0x00	; 0
    130c:	90 ec       	ldi	r25, 0xC0	; 192
    130e:	af e3       	ldi	r26, 0x3F	; 63
    1310:	b0 e0       	ldi	r27, 0x00	; 0
    1312:	89 83       	std	Y+1, r24	; 0x01
    1314:	9a 83       	std	Y+2, r25	; 0x02
    1316:	ab 83       	std	Y+3, r26	; 0x03
    1318:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    131a:	2e 01       	movw	r4, r28
    131c:	08 94       	sec
    131e:	41 1c       	adc	r4, r1
    1320:	51 1c       	adc	r5, r1
    1322:	c2 01       	movw	r24, r4
    1324:	a3 01       	movw	r20, r6
    1326:	0e 94 8f 08 	call	0x111e	; 0x111e <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    132a:	88 23       	and	r24, r24
    132c:	09 f4       	brne	.+2      	; 0x1330 <FS_SearchFile+0x60>
    132e:	b6 c0       	rjmp	.+364    	; 0x149c <FS_SearchFile+0x1cc>
	{
		if ( iSucc == 1 )	// Success
		{
			sprintf(Text, "Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n",
    1330:	96 01       	movw	r18, r12
    1332:	2e 5f       	subi	r18, 0xFE	; 254
    1334:	3f 4f       	sbci	r19, 0xFF	; 255
    1336:	a7 96       	adiw	r28, 0x27	; 39
    1338:	3f af       	std	Y+63, r19	; 0x3f
    133a:	2e af       	std	Y+62, r18	; 0x3e
    133c:	a7 97       	sbiw	r28, 0x27	; 39
    133e:	10 e0       	ldi	r17, 0x00	; 0
    1340:	35 e0       	ldi	r19, 0x05	; 5
    1342:	a3 2e       	mov	r10, r19
    1344:	b1 2c       	mov	r11, r1
    1346:	ac 0e       	add	r10, r28
    1348:	bd 1e       	adc	r11, r29
    134a:	2e e4       	ldi	r18, 0x4E	; 78
    134c:	22 2e       	mov	r2, r18
    134e:	31 2c       	mov	r3, r1
    1350:	2c 0c       	add	r2, r12
    1352:	3d 1c       	adc	r3, r13
    1354:	93 e7       	ldi	r25, 0x73	; 115
    1356:	89 2e       	mov	r8, r25
    1358:	91 e0       	ldi	r25, 0x01	; 1
    135a:	99 2e       	mov	r9, r25
    135c:	08 c0       	rjmp	.+16     	; 0x136e <FS_SearchFile+0x9e>

			USARTWriteString ( (char*)"\r\n\r\n" );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    135e:	c2 01       	movw	r24, r4
    1360:	b6 01       	movw	r22, r12
    1362:	a3 01       	movw	r20, r6
    1364:	0e 94 8f 08 	call	0x111e	; 0x111e <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1368:	88 23       	and	r24, r24
    136a:	09 f4       	brne	.+2      	; 0x136e <FS_SearchFile+0x9e>
    136c:	7a c0       	rjmp	.+244    	; 0x1462 <FS_SearchFile+0x192>
	{
		if ( iSucc == 1 )	// Success
    136e:	81 30       	cpi	r24, 0x01	; 1
    1370:	b1 f7       	brne	.-20     	; 0x135e <FS_SearchFile+0x8e>
		{
			sprintf(Text, "Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n",
    1372:	8d b7       	in	r24, 0x3d	; 61
    1374:	9e b7       	in	r25, 0x3e	; 62
    1376:	0a 97       	sbiw	r24, 0x0a	; 10
    1378:	0f b6       	in	r0, 0x3f	; 63
    137a:	f8 94       	cli
    137c:	9e bf       	out	0x3e, r25	; 62
    137e:	0f be       	out	0x3f, r0	; 63
    1380:	8d bf       	out	0x3d, r24	; 61
    1382:	ed b7       	in	r30, 0x3d	; 61
    1384:	fe b7       	in	r31, 0x3e	; 62
    1386:	31 96       	adiw	r30, 0x01	; 1
    1388:	ad b7       	in	r26, 0x3d	; 61
    138a:	be b7       	in	r27, 0x3e	; 62
    138c:	12 96       	adiw	r26, 0x02	; 2
    138e:	bc 92       	st	X, r11
    1390:	ae 92       	st	-X, r10
    1392:	11 97       	sbiw	r26, 0x01	; 1
    1394:	22 e5       	ldi	r18, 0x52	; 82
    1396:	31 e0       	ldi	r19, 0x01	; 1
    1398:	33 83       	std	Z+3, r19	; 0x03
    139a:	22 83       	std	Z+2, r18	; 0x02
    139c:	a7 96       	adiw	r28, 0x27	; 39
    139e:	8e ad       	ldd	r24, Y+62	; 0x3e
    13a0:	9f ad       	ldd	r25, Y+63	; 0x3f
    13a2:	a7 97       	sbiw	r28, 0x27	; 39
    13a4:	95 83       	std	Z+5, r25	; 0x05
    13a6:	84 83       	std	Z+4, r24	; 0x04
    13a8:	d1 01       	movw	r26, r2
    13aa:	8c 91       	ld	r24, X
    13ac:	86 83       	std	Z+6, r24	; 0x06
    13ae:	17 82       	std	Z+7, r1	; 0x07
    13b0:	d6 01       	movw	r26, r12
    13b2:	8d 91       	ld	r24, X+
    13b4:	9c 91       	ld	r25, X
    13b6:	91 87       	std	Z+9, r25	; 0x09
    13b8:	80 87       	std	Z+8, r24	; 0x08
    13ba:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
																sFileEntry->sFileName,
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
    13be:	ed b7       	in	r30, 0x3d	; 61
    13c0:	fe b7       	in	r31, 0x3e	; 62
    13c2:	3a 96       	adiw	r30, 0x0a	; 10
    13c4:	0f b6       	in	r0, 0x3f	; 63
    13c6:	f8 94       	cli
    13c8:	fe bf       	out	0x3e, r31	; 62
    13ca:	0f be       	out	0x3f, r0	; 63
    13cc:	ed bf       	out	0x3d, r30	; 61
    13ce:	c5 01       	movw	r24, r10
    13d0:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
			USARTWriteString ( (char*)"FrLst:" );
    13d4:	8c e6       	ldi	r24, 0x6C	; 108
    13d6:	91 e0       	ldi	r25, 0x01	; 1
    13d8:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    13dc:	d6 01       	movw	r26, r12
    13de:	8d 91       	ld	r24, X+
    13e0:	9c 91       	ld	r25, X
    13e2:	89 2b       	or	r24, r25
    13e4:	89 f1       	breq	.+98     	; 0x1448 <FS_SearchFile+0x178>
    13e6:	76 01       	movw	r14, r12
    13e8:	00 e0       	ldi	r16, 0x00	; 0
    13ea:	10 e0       	ldi	r17, 0x00	; 0
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
    13ec:	00 d0       	rcall	.+0      	; 0x13ee <FS_SearchFile+0x11e>
    13ee:	00 d0       	rcall	.+0      	; 0x13f0 <FS_SearchFile+0x120>
    13f0:	00 d0       	rcall	.+0      	; 0x13f2 <FS_SearchFile+0x122>
    13f2:	ed b7       	in	r30, 0x3d	; 61
    13f4:	fe b7       	in	r31, 0x3e	; 62
    13f6:	31 96       	adiw	r30, 0x01	; 1
    13f8:	ad b7       	in	r26, 0x3d	; 61
    13fa:	be b7       	in	r27, 0x3e	; 62
    13fc:	12 96       	adiw	r26, 0x02	; 2
    13fe:	bc 92       	st	X, r11
    1400:	ae 92       	st	-X, r10
    1402:	11 97       	sbiw	r26, 0x01	; 1
    1404:	93 82       	std	Z+3, r9	; 0x03
    1406:	82 82       	std	Z+2, r8	; 0x02
    1408:	d7 01       	movw	r26, r14
    140a:	1e 96       	adiw	r26, 0x0e	; 14
    140c:	8d 91       	ld	r24, X+
    140e:	9c 91       	ld	r25, X
    1410:	1f 97       	sbiw	r26, 0x0f	; 15
    1412:	95 83       	std	Z+5, r25	; 0x05
    1414:	84 83       	std	Z+4, r24	; 0x04
    1416:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
				USARTWriteString (Text);
    141a:	ed b7       	in	r30, 0x3d	; 61
    141c:	fe b7       	in	r31, 0x3e	; 62
    141e:	36 96       	adiw	r30, 0x06	; 6
    1420:	0f b6       	in	r0, 0x3f	; 63
    1422:	f8 94       	cli
    1424:	fe bf       	out	0x3e, r31	; 62
    1426:	0f be       	out	0x3f, r0	; 63
    1428:	ed bf       	out	0x3d, r30	; 61
    142a:	c5 01       	movw	r24, r10
    142c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
			USARTWriteString ( (char*)"FrLst:" );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    1430:	0f 5f       	subi	r16, 0xFF	; 255
    1432:	1f 4f       	sbci	r17, 0xFF	; 255
    1434:	22 e0       	ldi	r18, 0x02	; 2
    1436:	30 e0       	ldi	r19, 0x00	; 0
    1438:	e2 0e       	add	r14, r18
    143a:	f3 1e       	adc	r15, r19
    143c:	d6 01       	movw	r26, r12
    143e:	8d 91       	ld	r24, X+
    1440:	9c 91       	ld	r25, X
    1442:	08 17       	cp	r16, r24
    1444:	19 07       	cpc	r17, r25
    1446:	90 f2       	brcs	.-92     	; 0x13ec <FS_SearchFile+0x11c>
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
				USARTWriteString (Text);
			}

			USARTWriteString ( (char*)"\r\n\r\n" );
    1448:	87 e7       	ldi	r24, 0x77	; 119
    144a:	91 e0       	ldi	r25, 0x01	; 1
    144c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    1450:	11 e0       	ldi	r17, 0x01	; 1
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1452:	c2 01       	movw	r24, r4
    1454:	b6 01       	movw	r22, r12
    1456:	a3 01       	movw	r20, r6
    1458:	0e 94 8f 08 	call	0x111e	; 0x111e <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    145c:	88 23       	and	r24, r24
    145e:	09 f0       	breq	.+2      	; 0x1462 <FS_SearchFile+0x192>
    1460:	86 cf       	rjmp	.-244    	; 0x136e <FS_SearchFile+0x9e>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    1462:	11 23       	and	r17, r17
    1464:	d9 f0       	breq	.+54     	; 0x149c <FS_SearchFile+0x1cc>
    1466:	81 e0       	ldi	r24, 0x01	; 1
		return 0;	// Fail
	}

	return 1; 		// Success

}
    1468:	ca 59       	subi	r28, 0x9A	; 154
    146a:	df 4f       	sbci	r29, 0xFF	; 255
    146c:	0f b6       	in	r0, 0x3f	; 63
    146e:	f8 94       	cli
    1470:	de bf       	out	0x3e, r29	; 62
    1472:	0f be       	out	0x3f, r0	; 63
    1474:	cd bf       	out	0x3d, r28	; 61
    1476:	cf 91       	pop	r28
    1478:	df 91       	pop	r29
    147a:	1f 91       	pop	r17
    147c:	0f 91       	pop	r16
    147e:	ff 90       	pop	r15
    1480:	ef 90       	pop	r14
    1482:	df 90       	pop	r13
    1484:	cf 90       	pop	r12
    1486:	bf 90       	pop	r11
    1488:	af 90       	pop	r10
    148a:	9f 90       	pop	r9
    148c:	8f 90       	pop	r8
    148e:	7f 90       	pop	r7
    1490:	6f 90       	pop	r6
    1492:	5f 90       	pop	r5
    1494:	4f 90       	pop	r4
    1496:	3f 90       	pop	r3
    1498:	2f 90       	pop	r2
    149a:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		USARTWriteString ( (char*)"\r\nNot Found\r\n" );
    149c:	8c e7       	ldi	r24, 0x7C	; 124
    149e:	91 e0       	ldi	r25, 0x01	; 1
    14a0:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    14a4:	80 e0       	ldi	r24, 0x00	; 0
    14a6:	e0 cf       	rjmp	.-64     	; 0x1468 <FS_SearchFile+0x198>

000014a8 <FS_ReadFileContents>:
}

//__________________________________________________________________________________________________
// Reads out the contents of a file. Finds the file by its name
uint8_t FS_ReadFileContents( char* FileName )
{
    14a8:	2f 92       	push	r2
    14aa:	3f 92       	push	r3
    14ac:	4f 92       	push	r4
    14ae:	5f 92       	push	r5
    14b0:	6f 92       	push	r6
    14b2:	7f 92       	push	r7
    14b4:	8f 92       	push	r8
    14b6:	9f 92       	push	r9
    14b8:	af 92       	push	r10
    14ba:	bf 92       	push	r11
    14bc:	cf 92       	push	r12
    14be:	df 92       	push	r13
    14c0:	ef 92       	push	r14
    14c2:	ff 92       	push	r15
    14c4:	0f 93       	push	r16
    14c6:	1f 93       	push	r17
    14c8:	df 93       	push	r29
    14ca:	cf 93       	push	r28
    14cc:	cd b7       	in	r28, 0x3d	; 61
    14ce:	de b7       	in	r29, 0x3e	; 62
    14d0:	cc 5c       	subi	r28, 0xCC	; 204
    14d2:	d0 40       	sbci	r29, 0x00	; 0
    14d4:	0f b6       	in	r0, 0x3f	; 63
    14d6:	f8 94       	cli
    14d8:	de bf       	out	0x3e, r29	; 62
    14da:	0f be       	out	0x3f, r0	; 63
    14dc:	cd bf       	out	0x3d, r28	; 61
    14de:	4c 01       	movw	r8, r24
//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	90 ec       	ldi	r25, 0xC0	; 192
    14e4:	af e3       	ldi	r26, 0x3F	; 63
    14e6:	b0 e0       	ldi	r27, 0x00	; 0
    14e8:	89 83       	std	Y+1, r24	; 0x01
    14ea:	9a 83       	std	Y+2, r25	; 0x02
    14ec:	ab 83       	std	Y+3, r26	; 0x03
    14ee:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    14f0:	8d e1       	ldi	r24, 0x1D	; 29
    14f2:	48 2e       	mov	r4, r24
    14f4:	51 2c       	mov	r5, r1
    14f6:	4c 0e       	add	r4, r28
    14f8:	5d 1e       	adc	r5, r29
    14fa:	3e 01       	movw	r6, r28
    14fc:	08 94       	sec
    14fe:	61 1c       	adc	r6, r1
    1500:	71 1c       	adc	r7, r1
    1502:	c3 01       	movw	r24, r6
    1504:	b2 01       	movw	r22, r4
    1506:	a4 01       	movw	r20, r8
    1508:	0e 94 8f 08 	call	0x111e	; 0x111e <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    150c:	88 23       	and	r24, r24
    150e:	09 f4       	brne	.+2      	; 0x1512 <FS_ReadFileContents+0x6a>
    1510:	21 c1       	rjmp	.+578    	; 0x1754 <FS_ReadFileContents+0x2ac>
    1512:	10 e0       	ldi	r17, 0x00	; 0
	{
		if ( iSucc == 1 )	// Success
		{
			sprintf(Text, "Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n",
    1514:	0d e6       	ldi	r16, 0x6D	; 109
    1516:	c0 2e       	mov	r12, r16
    1518:	d1 2c       	mov	r13, r1
    151a:	cc 0e       	add	r12, r28
    151c:	dd 1e       	adc	r13, r29
    151e:	b2 e5       	ldi	r27, 0x52	; 82
    1520:	2b 2e       	mov	r2, r27
    1522:	b1 e0       	ldi	r27, 0x01	; 1
    1524:	3b 2e       	mov	r3, r27
    1526:	a3 e7       	ldi	r26, 0x73	; 115
    1528:	aa 2e       	mov	r10, r26
    152a:	a1 e0       	ldi	r26, 0x01	; 1
    152c:	ba 2e       	mov	r11, r26
    152e:	08 c0       	rjmp	.+16     	; 0x1540 <FS_ReadFileContents+0x98>

			USARTWriteString ( (char*)"\r\n\r\n" );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1530:	c3 01       	movw	r24, r6
    1532:	b2 01       	movw	r22, r4
    1534:	a4 01       	movw	r20, r8
    1536:	0e 94 8f 08 	call	0x111e	; 0x111e <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    153a:	88 23       	and	r24, r24
    153c:	09 f4       	brne	.+2      	; 0x1540 <FS_ReadFileContents+0x98>
    153e:	75 c0       	rjmp	.+234    	; 0x162a <FS_ReadFileContents+0x182>
	{
		if ( iSucc == 1 )	// Success
    1540:	81 30       	cpi	r24, 0x01	; 1
    1542:	b1 f7       	brne	.-20     	; 0x1530 <FS_ReadFileContents+0x88>
		{
			sprintf(Text, "Nm:%s\r\nOffs:%d\r\nNOFr:%d\r\n",
    1544:	8d b7       	in	r24, 0x3d	; 61
    1546:	9e b7       	in	r25, 0x3e	; 62
    1548:	0a 97       	sbiw	r24, 0x0a	; 10
    154a:	0f b6       	in	r0, 0x3f	; 63
    154c:	f8 94       	cli
    154e:	9e bf       	out	0x3e, r25	; 62
    1550:	0f be       	out	0x3f, r0	; 63
    1552:	8d bf       	out	0x3d, r24	; 61
    1554:	ed b7       	in	r30, 0x3d	; 61
    1556:	fe b7       	in	r31, 0x3e	; 62
    1558:	31 96       	adiw	r30, 0x01	; 1
    155a:	ad b7       	in	r26, 0x3d	; 61
    155c:	be b7       	in	r27, 0x3e	; 62
    155e:	12 96       	adiw	r26, 0x02	; 2
    1560:	dc 92       	st	X, r13
    1562:	ce 92       	st	-X, r12
    1564:	11 97       	sbiw	r26, 0x01	; 1
    1566:	33 82       	std	Z+3, r3	; 0x03
    1568:	22 82       	std	Z+2, r2	; 0x02
    156a:	8f e1       	ldi	r24, 0x1F	; 31
    156c:	90 e0       	ldi	r25, 0x00	; 0
    156e:	8c 0f       	add	r24, r28
    1570:	9d 1f       	adc	r25, r29
    1572:	95 83       	std	Z+5, r25	; 0x05
    1574:	84 83       	std	Z+4, r24	; 0x04
    1576:	ac 96       	adiw	r28, 0x2c	; 44
    1578:	8f ad       	ldd	r24, Y+63	; 0x3f
    157a:	ac 97       	sbiw	r28, 0x2c	; 44
    157c:	86 83       	std	Z+6, r24	; 0x06
    157e:	17 82       	std	Z+7, r1	; 0x07
    1580:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1582:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1584:	91 87       	std	Z+9, r25	; 0x09
    1586:	80 87       	std	Z+8, r24	; 0x08
    1588:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
																sFileEntry->sFileName,
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
    158c:	ad b7       	in	r26, 0x3d	; 61
    158e:	be b7       	in	r27, 0x3e	; 62
    1590:	1a 96       	adiw	r26, 0x0a	; 10
    1592:	0f b6       	in	r0, 0x3f	; 63
    1594:	f8 94       	cli
    1596:	be bf       	out	0x3e, r27	; 62
    1598:	0f be       	out	0x3f, r0	; 63
    159a:	ad bf       	out	0x3d, r26	; 61
    159c:	c6 01       	movw	r24, r12
    159e:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
			USARTWriteString ( (char*)"FrLst:" );
    15a2:	8c e6       	ldi	r24, 0x6C	; 108
    15a4:	91 e0       	ldi	r25, 0x01	; 1
    15a6:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    15aa:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ac:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15ae:	89 2b       	or	r24, r25
    15b0:	79 f1       	breq	.+94     	; 0x1610 <FS_ReadFileContents+0x168>
    15b2:	fb e2       	ldi	r31, 0x2B	; 43
    15b4:	ef 2e       	mov	r14, r31
    15b6:	f1 2c       	mov	r15, r1
    15b8:	ec 0e       	add	r14, r28
    15ba:	fd 1e       	adc	r15, r29
    15bc:	00 e0       	ldi	r16, 0x00	; 0
    15be:	10 e0       	ldi	r17, 0x00	; 0
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
    15c0:	00 d0       	rcall	.+0      	; 0x15c2 <FS_ReadFileContents+0x11a>
    15c2:	00 d0       	rcall	.+0      	; 0x15c4 <FS_ReadFileContents+0x11c>
    15c4:	00 d0       	rcall	.+0      	; 0x15c6 <FS_ReadFileContents+0x11e>
    15c6:	ed b7       	in	r30, 0x3d	; 61
    15c8:	fe b7       	in	r31, 0x3e	; 62
    15ca:	31 96       	adiw	r30, 0x01	; 1
    15cc:	ad b7       	in	r26, 0x3d	; 61
    15ce:	be b7       	in	r27, 0x3e	; 62
    15d0:	12 96       	adiw	r26, 0x02	; 2
    15d2:	dc 92       	st	X, r13
    15d4:	ce 92       	st	-X, r12
    15d6:	11 97       	sbiw	r26, 0x01	; 1
    15d8:	b3 82       	std	Z+3, r11	; 0x03
    15da:	a2 82       	std	Z+2, r10	; 0x02
    15dc:	d7 01       	movw	r26, r14
    15de:	8d 91       	ld	r24, X+
    15e0:	9d 91       	ld	r25, X+
    15e2:	7d 01       	movw	r14, r26
    15e4:	95 83       	std	Z+5, r25	; 0x05
    15e6:	84 83       	std	Z+4, r24	; 0x04
    15e8:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
				USARTWriteString (Text);
    15ec:	ed b7       	in	r30, 0x3d	; 61
    15ee:	fe b7       	in	r31, 0x3e	; 62
    15f0:	36 96       	adiw	r30, 0x06	; 6
    15f2:	0f b6       	in	r0, 0x3f	; 63
    15f4:	f8 94       	cli
    15f6:	fe bf       	out	0x3e, r31	; 62
    15f8:	0f be       	out	0x3f, r0	; 63
    15fa:	ed bf       	out	0x3d, r30	; 61
    15fc:	c6 01       	movw	r24, r12
    15fe:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
			USARTWriteString ( (char*)"FrLst:" );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    1602:	0f 5f       	subi	r16, 0xFF	; 255
    1604:	1f 4f       	sbci	r17, 0xFF	; 255
    1606:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1608:	9e 8d       	ldd	r25, Y+30	; 0x1e
    160a:	08 17       	cp	r16, r24
    160c:	19 07       	cpc	r17, r25
    160e:	c0 f2       	brcs	.-80     	; 0x15c0 <FS_ReadFileContents+0x118>
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
				USARTWriteString (Text);
			}

			USARTWriteString ( (char*)"\r\n\r\n" );
    1610:	87 e7       	ldi	r24, 0x77	; 119
    1612:	91 e0       	ldi	r25, 0x01	; 1
    1614:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    1618:	11 e0       	ldi	r17, 0x01	; 1
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    161a:	c3 01       	movw	r24, r6
    161c:	b2 01       	movw	r22, r4
    161e:	a4 01       	movw	r20, r8
    1620:	0e 94 8f 08 	call	0x111e	; 0x111e <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1624:	88 23       	and	r24, r24
    1626:	09 f0       	breq	.+2      	; 0x162a <FS_ReadFileContents+0x182>
    1628:	8b cf       	rjmp	.-234    	; 0x1540 <FS_ReadFileContents+0x98>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    162a:	11 23       	and	r17, r17
    162c:	09 f4       	brne	.+2      	; 0x1630 <FS_ReadFileContents+0x188>
    162e:	92 c0       	rjmp	.+292    	; 0x1754 <FS_ReadFileContents+0x2ac>

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    1630:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1632:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1634:	89 2b       	or	r24, r25
    1636:	09 f4       	brne	.+2      	; 0x163a <FS_ReadFileContents+0x192>
    1638:	72 c0       	rjmp	.+228    	; 0x171e <FS_ReadFileContents+0x276>
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		USARTWriteString ( (char*)"\r\nNot Found\r\n" );
    163a:	eb e2       	ldi	r30, 0x2B	; 43
    163c:	ae 2e       	mov	r10, r30
    163e:	b1 2c       	mov	r11, r1
    1640:	ac 0e       	add	r10, r28
    1642:	bd 1e       	adc	r11, r29
    1644:	cc 24       	eor	r12, r12
    1646:	dd 24       	eor	r13, r13
    1648:	75 e0       	ldi	r23, 0x05	; 5
    164a:	87 2e       	mov	r8, r23
    164c:	91 2c       	mov	r9, r1
    164e:	8c 0e       	add	r8, r28
    1650:	9d 1e       	adc	r9, r29
    1652:	6a e8       	ldi	r22, 0x8A	; 138
    1654:	66 2e       	mov	r6, r22
    1656:	61 e0       	ldi	r22, 0x01	; 1
    1658:	76 2e       	mov	r7, r22
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
		{
			sprintf( Text, "\r\nFrame #%d Block #%d:\r\n", itr, sFileEntry.iBlockList[itr]);
    165a:	8d b7       	in	r24, 0x3d	; 61
    165c:	9e b7       	in	r25, 0x3e	; 62
    165e:	08 97       	sbiw	r24, 0x08	; 8
    1660:	0f b6       	in	r0, 0x3f	; 63
    1662:	f8 94       	cli
    1664:	9e bf       	out	0x3e, r25	; 62
    1666:	0f be       	out	0x3f, r0	; 63
    1668:	8d bf       	out	0x3d, r24	; 61
    166a:	ed b7       	in	r30, 0x3d	; 61
    166c:	fe b7       	in	r31, 0x3e	; 62
    166e:	31 96       	adiw	r30, 0x01	; 1
    1670:	ad b7       	in	r26, 0x3d	; 61
    1672:	be b7       	in	r27, 0x3e	; 62
    1674:	12 96       	adiw	r26, 0x02	; 2
    1676:	9c 92       	st	X, r9
    1678:	8e 92       	st	-X, r8
    167a:	11 97       	sbiw	r26, 0x01	; 1
    167c:	73 82       	std	Z+3, r7	; 0x03
    167e:	62 82       	std	Z+2, r6	; 0x02
    1680:	d5 82       	std	Z+5, r13	; 0x05
    1682:	c4 82       	std	Z+4, r12	; 0x04
    1684:	d5 01       	movw	r26, r10
    1686:	8d 91       	ld	r24, X+
    1688:	9c 91       	ld	r25, X
    168a:	97 83       	std	Z+7, r25	; 0x07
    168c:	86 83       	std	Z+6, r24	; 0x06
    168e:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
			USARTWriteString (Text);
    1692:	ed b7       	in	r30, 0x3d	; 61
    1694:	fe b7       	in	r31, 0x3e	; 62
    1696:	38 96       	adiw	r30, 0x08	; 8
    1698:	0f b6       	in	r0, 0x3f	; 63
    169a:	f8 94       	cli
    169c:	fe bf       	out	0x3e, r31	; 62
    169e:	0f be       	out	0x3f, r0	; 63
    16a0:	ed bf       	out	0x3d, r30	; 61
    16a2:	c4 01       	movw	r24, r8
    16a4:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	CS_UP;
    16a8:	28 9a       	sbi	0x05, 0	; 5

	// Calculate first address
	iAddress = FS_FRAME_CAP * (uint32_t)(iBlock);
    16aa:	d5 01       	movw	r26, r10
    16ac:	6d 91       	ld	r22, X+
    16ae:	7c 91       	ld	r23, X
    16b0:	80 e0       	ldi	r24, 0x00	; 0
    16b2:	90 e0       	ldi	r25, 0x00	; 0
    16b4:	20 e0       	ldi	r18, 0x00	; 0
    16b6:	30 e3       	ldi	r19, 0x30	; 48
    16b8:	40 e0       	ldi	r20, 0x00	; 0
    16ba:	50 e0       	ldi	r21, 0x00	; 0
    16bc:	0e 94 2b 18 	call	0x3056	; 0x3056 <__mulsi3>
    16c0:	7b 01       	movw	r14, r22
    16c2:	8c 01       	movw	r16, r24
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
    16c4:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
    16c6:	83 e0       	ldi	r24, 0x03	; 3
    16c8:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
    16cc:	c8 01       	movw	r24, r16
    16ce:	aa 27       	eor	r26, r26
    16d0:	bb 27       	eor	r27, r27
    16d2:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
    16d6:	bb 27       	eor	r27, r27
    16d8:	a1 2f       	mov	r26, r17
    16da:	90 2f       	mov	r25, r16
    16dc:	8f 2d       	mov	r24, r15
    16de:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
	spi_transfer(adrByte3);
    16e2:	8e 2d       	mov	r24, r14
    16e4:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    16e8:	00 e0       	ldi	r16, 0x00	; 0
    16ea:	10 e0       	ldi	r17, 0x00	; 0

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
    16ec:	80 e0       	ldi	r24, 0x00	; 0
    16ee:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>
    16f2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
    16f6:	0f 5f       	subi	r16, 0xFF	; 255
    16f8:	1f 4f       	sbci	r17, 0xFF	; 255
	spi_transfer(READ_ARRAY);      			// Read command
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
    16fa:	b5 e2       	ldi	r27, 0x25	; 37
    16fc:	00 38       	cpi	r16, 0x80	; 128
    16fe:	1b 07       	cpc	r17, r27
    1700:	a9 f7       	brne	.-22     	; 0x16ec <FS_ReadFileContents+0x244>
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
	}

	CS_UP;
    1702:	28 9a       	sbi	0x05, 0	; 5

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    1704:	08 94       	sec
    1706:	c1 1c       	adc	r12, r1
    1708:	d1 1c       	adc	r13, r1
    170a:	e2 e0       	ldi	r30, 0x02	; 2
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	ae 0e       	add	r10, r30
    1710:	bf 1e       	adc	r11, r31
    1712:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1714:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1716:	c8 16       	cp	r12, r24
    1718:	d9 06       	cpc	r13, r25
    171a:	08 f4       	brcc	.+2      	; 0x171e <FS_ReadFileContents+0x276>
    171c:	9e cf       	rjmp	.-196    	; 0x165a <FS_ReadFileContents+0x1b2>
	{

	}

	return 1;		// Success
}
    171e:	81 e0       	ldi	r24, 0x01	; 1
    1720:	c4 53       	subi	r28, 0x34	; 52
    1722:	df 4f       	sbci	r29, 0xFF	; 255
    1724:	0f b6       	in	r0, 0x3f	; 63
    1726:	f8 94       	cli
    1728:	de bf       	out	0x3e, r29	; 62
    172a:	0f be       	out	0x3f, r0	; 63
    172c:	cd bf       	out	0x3d, r28	; 61
    172e:	cf 91       	pop	r28
    1730:	df 91       	pop	r29
    1732:	1f 91       	pop	r17
    1734:	0f 91       	pop	r16
    1736:	ff 90       	pop	r15
    1738:	ef 90       	pop	r14
    173a:	df 90       	pop	r13
    173c:	cf 90       	pop	r12
    173e:	bf 90       	pop	r11
    1740:	af 90       	pop	r10
    1742:	9f 90       	pop	r9
    1744:	8f 90       	pop	r8
    1746:	7f 90       	pop	r7
    1748:	6f 90       	pop	r6
    174a:	5f 90       	pop	r5
    174c:	4f 90       	pop	r4
    174e:	3f 90       	pop	r3
    1750:	2f 90       	pop	r2
    1752:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		USARTWriteString ( (char*)"\r\nNot Found\r\n" );
    1754:	8c e7       	ldi	r24, 0x7C	; 124
    1756:	91 e0       	ldi	r25, 0x01	; 1
    1758:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    175c:	e0 cf       	rjmp	.-64     	; 0x171e <FS_ReadFileContents+0x276>

0000175e <hiSpeedMode>:
.extern	uint8_t 	g_iPWM_Counter;
.extern uint8_t		g_bHighSpeedMode;


hiSpeedMode: 
		adiw r26,48						; Jump directly to L1
    175e:	d0 96       	adiw	r26, 0x30	; 48

		clr r16
    1760:	00 27       	eor	r16, r16
		sts g_iPORTC_Buf, r16			; Store Port C = 0
    1762:	00 93 fb 05 	sts	0x05FB, r16
		jmp L1_starts_here				; jump to L1 stuff
    1766:	0c 94 18 0c 	jmp	0x1830	; 0x1830 <L1_starts_here>

0000176a <PrepareBuffers>:


.global PrepareBuffers
PrepareBuffers:
		push r1
    176a:	1f 92       	push	r1
		push r0
    176c:	0f 92       	push	r0
		in r0, 0x3f			// Store the status register
    176e:	0f b6       	in	r0, 0x3f	; 63
		push r0
    1770:	0f 92       	push	r0
		clr r1 					// Clear register
    1772:	11 24       	eor	r1, r1

		push XH
    1774:	bf 93       	push	r27
		push XL
    1776:	af 93       	push	r26
		push r16
    1778:	0f 93       	push	r16
		push r18
    177a:	2f 93       	push	r18
		push r19
    177c:	3f 93       	push	r19
		push r20
    177e:	4f 93       	push	r20


		in r18, 0x1e					; Load the row number from GPIOR0
    1780:	2e b3       	in	r18, 0x1e	; 30
		andi r18, 0b00000111
    1782:	27 70       	andi	r18, 0x07	; 7
		lsl r18							; offset = row_number*2
    1784:	22 0f       	add	r18, r18
		in	r19, 0x2a					; Load PWM counter for comparison from GPIOR1
    1786:	3a b5       	in	r19, 0x2a	; 42


		in r20, 0x1e					; check which buffer is used
    1788:	4e b3       	in	r20, 0x1e	; 30
		andi r20, 0b01000000
    178a:	40 74       	andi	r20, 0x40	; 64
//		tst r20
		breq second_buffer
    178c:	19 f0       	breq	.+6      	; 0x1794 <second_buffer>

		ldi XL, lo8(Line_Buff1)	; Put the Array start to fill 
    178e:	aa e7       	ldi	r26, 0x7A	; 122
		ldi XH, hi8(Line_Buff1)
    1790:	b6 e0       	ldi	r27, 0x06	; 6
		brne buffer_choose_end
    1792:	11 f4       	brne	.+4      	; 0x1798 <buffer_choose_end>

00001794 <second_buffer>:
second_buffer:
		ldi XL, lo8(Line_Buff2)	; Put the Array start to fill 
    1794:	aa e1       	ldi	r26, 0x1A	; 26
		ldi XH, hi8(Line_Buff2)
    1796:	b6 e0       	ldi	r27, 0x06	; 6

00001798 <buffer_choose_end>:

buffer_choose_end:

		add XL, r18 					; Go to the offset position
    1798:	a2 0f       	add	r26, r18
		adc XH, r1						; r1 = zero
    179a:	b1 1d       	adc	r27, r1
		in r16, 0x1e					; are we in the hispeed mode
    179c:	0e b3       	in	r16, 0x1e	; 30
		andi r16, 0b10000000		/////////////////////////////////////////////////////////////////////////////////////////////
    179e:	00 78       	andi	r16, 0x80	; 128
		//cpi r16, 1						; if ==1 - in high speed mode
		brne hiSpeedMode
    17a0:	f1 f6       	brne	.-68     	; 0x175e <hiSpeedMode>
		;	PORT C BUFFER
		; ===========================================================================
		
		//clr r16							; clear the register which contains buffer
		; Start loading for Blue L2		<==========================================
		ld r20, X+						; Read the location
    17a2:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #0
    17a4:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    17a6:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    17a8:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    17aa:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    17ac:	01 1d       	adc	r16, r1
		lsl r16
    17ae:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #1
    17b0:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    17b2:	34 17       	cp	r19, r20
		adc r16, r1
    17b4:	01 1d       	adc	r16, r1
		lsl r16
    17b6:	00 0f       	add	r16, r16
		
		ld r20, X+						; Read the location
    17b8:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #2
    17ba:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    17bc:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    17be:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    17c0:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    17c2:	01 1d       	adc	r16, r1
		lsl r16
    17c4:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #3
    17c6:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    17c8:	34 17       	cp	r19, r20
		adc r16, r1
    17ca:	01 1d       	adc	r16, r1
		lsl r16
    17cc:	00 0f       	add	r16, r16
			
		adiw r26,14						; Next Color
    17ce:	1e 96       	adiw	r26, 0x0e	; 14
		; Start loading for Green L2	<==========================================
		ld r20, X+						; Read the location
    17d0:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #0
    17d2:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    17d4:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    17d6:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    17d8:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    17da:	01 1d       	adc	r16, r1
		lsl r16
    17dc:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #1
    17de:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    17e0:	34 17       	cp	r19, r20
		adc r16, r1
    17e2:	01 1d       	adc	r16, r1
		lsl r16
    17e4:	00 0f       	add	r16, r16
		
		ld r20, X+						; Read the location
    17e6:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #2
    17e8:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    17ea:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    17ec:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    17ee:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    17f0:	01 1d       	adc	r16, r1
		lsl r16
    17f2:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #3
    17f4:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    17f6:	34 17       	cp	r19, r20
		adc r16, r1
    17f8:	01 1d       	adc	r16, r1

		sts g_iPORTC_Buf, r16			; Store Port C
    17fa:	00 93 fb 05 	sts	0x05FB, r16


		; ===========================================================================
		;	PORT F BUFFER
		; ===========================================================================
		adiw r26,14						; Next Color
    17fe:	1e 96       	adiw	r26, 0x0e	; 14
		clr r16							; Clear the register for new port
    1800:	00 27       	eor	r16, r16
		; Start loading for RED L2		<==========================================
		ld r20, X+						; Read the location
    1802:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #0
    1804:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    1806:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    1808:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    180a:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    180c:	01 1d       	adc	r16, r1
		lsl r16
    180e:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #1
    1810:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    1812:	34 17       	cp	r19, r20
		adc r16, r1
    1814:	01 1d       	adc	r16, r1
		lsl r16
    1816:	00 0f       	add	r16, r16
		
		ld r20, X+						; Read the location
    1818:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #2
    181a:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    181c:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    181e:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    1820:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    1822:	01 1d       	adc	r16, r1
		lsl r16
    1824:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #3
    1826:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    1828:	34 17       	cp	r19, r20
		adc r16, r1
    182a:	01 1d       	adc	r16, r1
		lsl r16
    182c:	00 0f       	add	r16, r16

		adiw r26,14						; Next Color
    182e:	1e 96       	adiw	r26, 0x0e	; 14

00001830 <L1_starts_here>:
		; Start loading for BLUE L1		<==========================================
L1_starts_here:
		ld r20, X+						; Read the location
    1830:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #0
    1832:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    1834:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    1836:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    1838:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    183a:	01 1d       	adc	r16, r1
		lsl r16
    183c:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #1
    183e:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    1840:	34 17       	cp	r19, r20
		adc r16, r1
    1842:	01 1d       	adc	r16, r1
		lsl r16
    1844:	00 0f       	add	r16, r16
		
		ld r20, X+						; Read the location
    1846:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #2
    1848:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    184a:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    184c:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    184e:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    1850:	01 1d       	adc	r16, r1
		lsl r16
    1852:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #3
    1854:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    1856:	34 17       	cp	r19, r20
		adc r16, r1
    1858:	01 1d       	adc	r16, r1

		sts g_iPORTF_Buf, r16			; Store Port F
    185a:	00 93 fd 05 	sts	0x05FD, r16

		; ===========================================================================
		;	PORT D BUFFER
		; ===========================================================================

		adiw r26,14						; Next Color
    185e:	1e 96       	adiw	r26, 0x0e	; 14
		; Start loading for GREEN L1	<==========================================
		clr r16							; Start over
    1860:	00 27       	eor	r16, r16

		ld r20, X+						; Read the location
    1862:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #0
    1864:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    1866:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    1868:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    186a:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    186c:	01 1d       	adc	r16, r1
		lsl r16
    186e:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #1
    1870:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    1872:	34 17       	cp	r19, r20
		adc r16, r1
    1874:	01 1d       	adc	r16, r1
		lsl r16
    1876:	00 0f       	add	r16, r16
		
		ld r20, X+						; Read the location
    1878:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #2
    187a:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    187c:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    187e:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    1880:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    1882:	01 1d       	adc	r16, r1
		lsl r16
    1884:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #3
    1886:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    1888:	34 17       	cp	r19, r20
		adc r16, r1
    188a:	01 1d       	adc	r16, r1
		lsl r16
    188c:	00 0f       	add	r16, r16
		lsl r16
    188e:	00 0f       	add	r16, r16
		sts g_iPORTD_Buf, r16			; Store Port D
    1890:	00 93 fc 05 	sts	0x05FC, r16

		; ===========================================================================
		;	PORT B BUFFER
		; ===========================================================================

		adiw r26,14						; Next Color
    1894:	1e 96       	adiw	r26, 0x0e	; 14
		; Start loading for RED L1		<==========================================
		clr r16
    1896:	00 27       	eor	r16, r16
		ld r20, X+						; Read the location
    1898:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #0
    189a:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    189c:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    189e:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    18a0:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    18a2:	01 1d       	adc	r16, r1
		lsl r16
    18a4:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #1
    18a6:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    18a8:	34 17       	cp	r19, r20
		adc r16, r1
    18aa:	01 1d       	adc	r16, r1
		lsl r16
    18ac:	00 0f       	add	r16, r16
		
		ld r20, X+						; Read the location
    18ae:	4d 91       	ld	r20, X+
		mov r18, r20					; r18 contains #2
    18b0:	24 2f       	mov	r18, r20
		swap r18						; swap nibbles
    18b2:	22 95       	swap	r18
		andi r18, 0xF					; only %0 remains
    18b4:	2f 70       	andi	r18, 0x0F	; 15
		cp  r19, r18					; compare to influence Carry
    18b6:	32 17       	cp	r19, r18
		adc r16, r1						; add zero+Carry to result
    18b8:	01 1d       	adc	r16, r1
		lsl r16
    18ba:	00 0f       	add	r16, r16
		
		andi r20, 0xF					; get #3
    18bc:	4f 70       	andi	r20, 0x0F	; 15
		cp	r19, r20					; compare to influence Carry
    18be:	34 17       	cp	r19, r20
		adc r16, r1
    18c0:	01 1d       	adc	r16, r1

		swap r16						; Switch nibbles
    18c2:	02 95       	swap	r16
		sts g_iPORTB_Buf, r16			; Store Port B
    18c4:	00 93 fa 05 	sts	0x05FA, r16


		pop r20
    18c8:	4f 91       	pop	r20
		pop r19
    18ca:	3f 91       	pop	r19
		pop r18
    18cc:	2f 91       	pop	r18
		pop r16
    18ce:	0f 91       	pop	r16
		pop XL
    18d0:	af 91       	pop	r26
		pop XH
    18d2:	bf 91       	pop	r27

		pop r0
    18d4:	0f 90       	pop	r0
		out 0x3F,r0
    18d6:	0f be       	out	0x3f, r0	; 63
		pop r0
    18d8:	0f 90       	pop	r0
		pop r1
    18da:	1f 90       	pop	r1

		ret 				// Return to mother function
    18dc:	08 95       	ret

000018de <dataflash_spi_init>:

//__________________________________________________________________________________________________
void dataflash_spi_init(void)
{
	// Set SS,MOSI and SCK output, MISO input
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
    18de:	84 b1       	in	r24, 0x04	; 4
    18e0:	87 60       	ori	r24, 0x07	; 7
    18e2:	84 b9       	out	0x04, r24	; 4
	DD_PORT |= (1<<DD_MISO);		// Set internal pullup on MISO
    18e4:	2b 9a       	sbi	0x05, 3	; 5

	// Set CS
	CS_UP;
    18e6:	28 9a       	sbi	0x05, 0	; 5

	/* Enable SPI, Master, set clock rate fck/4 */
	SPCR = (1<<SPE)|(1<<MSTR);
    18e8:	80 e5       	ldi	r24, 0x50	; 80
    18ea:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPIF)|(1<<SPI2X);
    18ec:	81 e8       	ldi	r24, 0x81	; 129
    18ee:	8d bd       	out	0x2d, r24	; 45
}
    18f0:	08 95       	ret

000018f2 <spi_transfer>:
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    18f2:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    18f4:	0d b4       	in	r0, 0x2d	; 45
    18f6:	07 fe       	sbrs	r0, 7
    18f8:	fd cf       	rjmp	.-6      	; 0x18f4 <spi_transfer+0x2>
	{
	}
	return SPDR;
    18fa:	8e b5       	in	r24, 0x2e	; 46
#endif
}
    18fc:	08 95       	ret

000018fe <dataflash_spi_idn>:

//__________________________________________________________________________________________________
void dataflash_spi_idn ( char *ManID, char* DevID1, char* DevID2, char* ExData )
{
    18fe:	cf 93       	push	r28
    1900:	df 93       	push	r29
    1902:	fc 01       	movw	r30, r24
    1904:	db 01       	movw	r26, r22
    1906:	ea 01       	movw	r28, r20
	CS_DOWN;
    1908:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    190a:	8f e9       	ldi	r24, 0x9F	; 159
    190c:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    190e:	0d b4       	in	r0, 0x2d	; 45
    1910:	07 fe       	sbrs	r0, 7
    1912:	fd cf       	rjmp	.-6      	; 0x190e <dataflash_spi_idn+0x10>
	{
	}
	return SPDR;
    1914:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1916:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1918:	0d b4       	in	r0, 0x2d	; 45
    191a:	07 fe       	sbrs	r0, 7
    191c:	fd cf       	rjmp	.-6      	; 0x1918 <dataflash_spi_idn+0x1a>
	{
	}
	return SPDR;
    191e:	8e b5       	in	r24, 0x2e	; 46
{
	CS_DOWN;

	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
    1920:	80 83       	st	Z, r24
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1922:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1924:	0d b4       	in	r0, 0x2d	; 45
    1926:	07 fe       	sbrs	r0, 7
    1928:	fd cf       	rjmp	.-6      	; 0x1924 <dataflash_spi_idn+0x26>
	{
	}
	return SPDR;
    192a:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
	*DevID1 = spi_transfer(0);
    192c:	8c 93       	st	X, r24
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    192e:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1930:	0d b4       	in	r0, 0x2d	; 45
    1932:	07 fe       	sbrs	r0, 7
    1934:	fd cf       	rjmp	.-6      	; 0x1930 <dataflash_spi_idn+0x32>
	{
	}
	return SPDR;
    1936:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
	*DevID1 = spi_transfer(0);
	*DevID2 = spi_transfer(0);
    1938:	88 83       	st	Y, r24
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    193a:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    193c:	0d b4       	in	r0, 0x2d	; 45
    193e:	07 fe       	sbrs	r0, 7
    1940:	fd cf       	rjmp	.-6      	; 0x193c <dataflash_spi_idn+0x3e>
	{
	}
	return SPDR;
    1942:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
	*DevID1 = spi_transfer(0);
	*DevID2 = spi_transfer(0);
	*ExData = spi_transfer(0);
    1944:	f9 01       	movw	r30, r18
    1946:	80 83       	st	Z, r24

	CS_UP;
    1948:	28 9a       	sbi	0x05, 0	; 5
}
    194a:	df 91       	pop	r29
    194c:	cf 91       	pop	r28
    194e:	08 95       	ret

00001950 <dataflash_read>:
	}
}

//__________________________________________________________________________________________________
char dataflash_read(uint32_t addr)
{
    1950:	9b 01       	movw	r18, r22
    1952:	ac 01       	movw	r20, r24

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
   
	CS_DOWN;
    1954:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1956:	83 e0       	ldi	r24, 0x03	; 3
    1958:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    195a:	0d b4       	in	r0, 0x2d	; 45
    195c:	07 fe       	sbrs	r0, 7
    195e:	fd cf       	rjmp	.-6      	; 0x195a <dataflash_read+0xa>
	{
	}
	return SPDR;
    1960:	8e b5       	in	r24, 0x2e	; 46
char dataflash_read(uint32_t addr)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
    1962:	ca 01       	movw	r24, r20
    1964:	aa 27       	eor	r26, r26
    1966:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1968:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    196a:	0d b4       	in	r0, 0x2d	; 45
    196c:	07 fe       	sbrs	r0, 7
    196e:	fd cf       	rjmp	.-6      	; 0x196a <dataflash_read+0x1a>
	{
	}
	return SPDR;
    1970:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
    1972:	bb 27       	eor	r27, r27
    1974:	a5 2f       	mov	r26, r21
    1976:	94 2f       	mov	r25, r20
    1978:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    197a:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    197c:	0d b4       	in	r0, 0x2d	; 45
    197e:	07 fe       	sbrs	r0, 7
    1980:	fd cf       	rjmp	.-6      	; 0x197c <dataflash_read+0x2c>
	{
	}
	return SPDR;
    1982:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1984:	2e bd       	out	0x2e, r18	; 46
	while (! (SPSR & (1<<SPIF))) 
    1986:	0d b4       	in	r0, 0x2d	; 45
    1988:	07 fe       	sbrs	r0, 7
    198a:	fd cf       	rjmp	.-6      	; 0x1986 <dataflash_read+0x36>
	{
	}
	return SPDR;
    198c:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    198e:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1990:	0d b4       	in	r0, 0x2d	; 45
    1992:	07 fe       	sbrs	r0, 7
    1994:	fd cf       	rjmp	.-6      	; 0x1990 <dataflash_read+0x40>
	{
	}
	return SPDR;
    1996:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	data = spi_transfer(0);	
	CS_UP;      
    1998:	28 9a       	sbi	0x05, 0	; 5

	return data;
}
    199a:	08 95       	ret

0000199c <dataflash_read_status>:
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    199c:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    199e:	85 e0       	ldi	r24, 0x05	; 5
    19a0:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    19a2:	0d b4       	in	r0, 0x2d	; 45
    19a4:	07 fe       	sbrs	r0, 7
    19a6:	fd cf       	rjmp	.-6      	; 0x19a2 <dataflash_read_status+0x6>
	{
	}
	return SPDR;
    19a8:	8e b5       	in	r24, 0x2e	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    19aa:	8b ee       	ldi	r24, 0xEB	; 235
    19ac:	91 e0       	ldi	r25, 0x01	; 1
    19ae:	01 97       	sbiw	r24, 0x01	; 1
    19b0:	f1 f7       	brne	.-4      	; 0x19ae <dataflash_read_status+0x12>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    19b2:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    19b4:	0d b4       	in	r0, 0x2d	; 45
    19b6:	07 fe       	sbrs	r0, 7
    19b8:	fd cf       	rjmp	.-6      	; 0x19b4 <dataflash_read_status+0x18>
	{
	}
	return SPDR;
    19ba:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    19bc:	28 9a       	sbi	0x05, 0	; 5

	return data;
}
    19be:	08 95       	ret

000019c0 <dataflash_protect_block4>:

//__________________________________________________________________________________________________
void		dataflash_protect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    19c0:	9c 01       	movw	r18, r24
    19c2:	40 e0       	ldi	r20, 0x00	; 0
    19c4:	50 e0       	ldi	r21, 0x00	; 0
    19c6:	ec e0       	ldi	r30, 0x0C	; 12
    19c8:	22 0f       	add	r18, r18
    19ca:	33 1f       	adc	r19, r19
    19cc:	44 1f       	adc	r20, r20
    19ce:	55 1f       	adc	r21, r21
    19d0:	ea 95       	dec	r30
    19d2:	d1 f7       	brne	.-12     	; 0x19c8 <dataflash_protect_block4+0x8>

	CS_DOWN;
    19d4:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    19d6:	86 e0       	ldi	r24, 0x06	; 6
    19d8:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    19da:	0d b4       	in	r0, 0x2d	; 45
    19dc:	07 fe       	sbrs	r0, 7
    19de:	fd cf       	rjmp	.-6      	; 0x19da <dataflash_protect_block4+0x1a>
	{
	}
	return SPDR;
    19e0:	8e b5       	in	r24, 0x2e	; 46
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    19e2:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    19e4:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    19e6:	86 e3       	ldi	r24, 0x36	; 54
    19e8:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    19ea:	0d b4       	in	r0, 0x2d	; 45
    19ec:	07 fe       	sbrs	r0, 7
    19ee:	fd cf       	rjmp	.-6      	; 0x19ea <dataflash_protect_block4+0x2a>
	{
	}
	return SPDR;
    19f0:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(PROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
    19f2:	ca 01       	movw	r24, r20
    19f4:	aa 27       	eor	r26, r26
    19f6:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    19f8:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    19fa:	0d b4       	in	r0, 0x2d	; 45
    19fc:	07 fe       	sbrs	r0, 7
    19fe:	fd cf       	rjmp	.-6      	; 0x19fa <dataflash_protect_block4+0x3a>
	{
	}
	return SPDR;
    1a00:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(PROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1a02:	bb 27       	eor	r27, r27
    1a04:	a5 2f       	mov	r26, r21
    1a06:	94 2f       	mov	r25, r20
    1a08:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a0a:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a0c:	0d b4       	in	r0, 0x2d	; 45
    1a0e:	07 fe       	sbrs	r0, 7
    1a10:	fd cf       	rjmp	.-6      	; 0x1a0c <dataflash_protect_block4+0x4c>
	{
	}
	return SPDR;
    1a12:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a14:	2e bd       	out	0x2e, r18	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a16:	0d b4       	in	r0, 0x2d	; 45
    1a18:	07 fe       	sbrs	r0, 7
    1a1a:	fd cf       	rjmp	.-6      	; 0x1a16 <dataflash_protect_block4+0x56>
	{
	}
	return SPDR;
    1a1c:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
    1a1e:	28 9a       	sbi	0x05, 0	; 5
    1a20:	80 e0       	ldi	r24, 0x00	; 0
    1a22:	90 e6       	ldi	r25, 0x60	; 96
    1a24:	01 97       	sbiw	r24, 0x01	; 1
    1a26:	f1 f7       	brne	.-4      	; 0x1a24 <dataflash_protect_block4+0x64>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a28:	65 e0       	ldi	r22, 0x05	; 5
    1a2a:	2b ee       	ldi	r18, 0xEB	; 235
    1a2c:	31 e0       	ldi	r19, 0x01	; 1
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1a2e:	40 e0       	ldi	r20, 0x00	; 0
    1a30:	50 e6       	ldi	r21, 0x60	; 96
    1a32:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a34:	6e bd       	out	0x2e, r22	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a36:	0d b4       	in	r0, 0x2d	; 45
    1a38:	07 fe       	sbrs	r0, 7
    1a3a:	fd cf       	rjmp	.-6      	; 0x1a36 <dataflash_protect_block4+0x76>
	{
	}
	return SPDR;
    1a3c:	8e b5       	in	r24, 0x2e	; 46
    1a3e:	c9 01       	movw	r24, r18
    1a40:	01 97       	sbiw	r24, 0x01	; 1
    1a42:	f1 f7       	brne	.-4      	; 0x1a40 <dataflash_protect_block4+0x80>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a44:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a46:	0d b4       	in	r0, 0x2d	; 45
    1a48:	07 fe       	sbrs	r0, 7
    1a4a:	fd cf       	rjmp	.-6      	; 0x1a46 <dataflash_protect_block4+0x86>
	{
	}
	return SPDR;
    1a4c:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1a4e:	28 9a       	sbi	0x05, 0	; 5
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(5);
#endif

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1a50:	80 ff       	sbrs	r24, 0
    1a52:	04 c0       	rjmp	.+8      	; 0x1a5c <dataflash_protect_block4+0x9c>
    1a54:	ca 01       	movw	r24, r20
    1a56:	01 97       	sbiw	r24, 0x01	; 1
    1a58:	f1 f7       	brne	.-4      	; 0x1a56 <dataflash_protect_block4+0x96>
    1a5a:	eb cf       	rjmp	.-42     	; 0x1a32 <dataflash_protect_block4+0x72>
	{
		_delay_ms(5);
	}

}
    1a5c:	08 95       	ret

00001a5e <dataflash_unprotect_block4>:

//__________________________________________________________________________________________________
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    1a5e:	9c 01       	movw	r18, r24
    1a60:	40 e0       	ldi	r20, 0x00	; 0
    1a62:	50 e0       	ldi	r21, 0x00	; 0
    1a64:	bc e0       	ldi	r27, 0x0C	; 12
    1a66:	22 0f       	add	r18, r18
    1a68:	33 1f       	adc	r19, r19
    1a6a:	44 1f       	adc	r20, r20
    1a6c:	55 1f       	adc	r21, r21
    1a6e:	ba 95       	dec	r27
    1a70:	d1 f7       	brne	.-12     	; 0x1a66 <dataflash_unprotect_block4+0x8>

	CS_DOWN;
    1a72:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a74:	86 e0       	ldi	r24, 0x06	; 6
    1a76:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a78:	0d b4       	in	r0, 0x2d	; 45
    1a7a:	07 fe       	sbrs	r0, 7
    1a7c:	fd cf       	rjmp	.-6      	; 0x1a78 <dataflash_unprotect_block4+0x1a>
	{
	}
	return SPDR;
    1a7e:	8e b5       	in	r24, 0x2e	; 46
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    1a80:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    1a82:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a84:	89 e3       	ldi	r24, 0x39	; 57
    1a86:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a88:	0d b4       	in	r0, 0x2d	; 45
    1a8a:	07 fe       	sbrs	r0, 7
    1a8c:	fd cf       	rjmp	.-6      	; 0x1a88 <dataflash_unprotect_block4+0x2a>
	{
	}
	return SPDR;
    1a8e:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
    1a90:	ca 01       	movw	r24, r20
    1a92:	aa 27       	eor	r26, r26
    1a94:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1a96:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1a98:	0d b4       	in	r0, 0x2d	; 45
    1a9a:	07 fe       	sbrs	r0, 7
    1a9c:	fd cf       	rjmp	.-6      	; 0x1a98 <dataflash_unprotect_block4+0x3a>
	{
	}
	return SPDR;
    1a9e:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1aa0:	bb 27       	eor	r27, r27
    1aa2:	a5 2f       	mov	r26, r21
    1aa4:	94 2f       	mov	r25, r20
    1aa6:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1aa8:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1aaa:	0d b4       	in	r0, 0x2d	; 45
    1aac:	07 fe       	sbrs	r0, 7
    1aae:	fd cf       	rjmp	.-6      	; 0x1aaa <dataflash_unprotect_block4+0x4c>
	{
	}
	return SPDR;
    1ab0:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ab2:	2e bd       	out	0x2e, r18	; 46
	while (! (SPSR & (1<<SPIF))) 
    1ab4:	0d b4       	in	r0, 0x2d	; 45
    1ab6:	07 fe       	sbrs	r0, 7
    1ab8:	fd cf       	rjmp	.-6      	; 0x1ab4 <dataflash_unprotect_block4+0x56>
	{
	}
	return SPDR;
    1aba:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
    1abc:	28 9a       	sbi	0x05, 0	; 5
    1abe:	80 e0       	ldi	r24, 0x00	; 0
    1ac0:	90 ec       	ldi	r25, 0xC0	; 192
    1ac2:	01 97       	sbiw	r24, 0x01	; 1
    1ac4:	f1 f7       	brne	.-4      	; 0x1ac2 <dataflash_unprotect_block4+0x64>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ac6:	65 e0       	ldi	r22, 0x05	; 5
    1ac8:	2b ee       	ldi	r18, 0xEB	; 235
    1aca:	31 e0       	ldi	r19, 0x01	; 1
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1acc:	40 e0       	ldi	r20, 0x00	; 0
    1ace:	50 e6       	ldi	r21, 0x60	; 96
    1ad0:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ad2:	6e bd       	out	0x2e, r22	; 46
	while (! (SPSR & (1<<SPIF))) 
    1ad4:	0d b4       	in	r0, 0x2d	; 45
    1ad6:	07 fe       	sbrs	r0, 7
    1ad8:	fd cf       	rjmp	.-6      	; 0x1ad4 <dataflash_unprotect_block4+0x76>
	{
	}
	return SPDR;
    1ada:	8e b5       	in	r24, 0x2e	; 46
    1adc:	c9 01       	movw	r24, r18
    1ade:	01 97       	sbiw	r24, 0x01	; 1
    1ae0:	f1 f7       	brne	.-4      	; 0x1ade <dataflash_unprotect_block4+0x80>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ae2:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1ae4:	0d b4       	in	r0, 0x2d	; 45
    1ae6:	07 fe       	sbrs	r0, 7
    1ae8:	fd cf       	rjmp	.-6      	; 0x1ae4 <dataflash_unprotect_block4+0x86>
	{
	}
	return SPDR;
    1aea:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1aec:	28 9a       	sbi	0x05, 0	; 5
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10);
#endif

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1aee:	80 ff       	sbrs	r24, 0
    1af0:	04 c0       	rjmp	.+8      	; 0x1afa <dataflash_unprotect_block4+0x9c>
    1af2:	ca 01       	movw	r24, r20
    1af4:	01 97       	sbiw	r24, 0x01	; 1
    1af6:	f1 f7       	brne	.-4      	; 0x1af4 <dataflash_unprotect_block4+0x96>
    1af8:	eb cf       	rjmp	.-42     	; 0x1ad0 <dataflash_unprotect_block4+0x72>
	{
		_delay_ms(5);
	}
}
    1afa:	08 95       	ret

00001afc <dataflash_erase_block4>:

//__________________________________________________________________________________________________
void		dataflash_erase_block4		( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;
    1afc:	9c 01       	movw	r18, r24
    1afe:	40 e0       	ldi	r20, 0x00	; 0
    1b00:	50 e0       	ldi	r21, 0x00	; 0
    1b02:	6c e0       	ldi	r22, 0x0C	; 12
    1b04:	22 0f       	add	r18, r18
    1b06:	33 1f       	adc	r19, r19
    1b08:	44 1f       	adc	r20, r20
    1b0a:	55 1f       	adc	r21, r21
    1b0c:	6a 95       	dec	r22
    1b0e:	d1 f7       	brne	.-12     	; 0x1b04 <dataflash_erase_block4+0x8>

	CS_DOWN;
    1b10:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b12:	86 e0       	ldi	r24, 0x06	; 6
    1b14:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b16:	0d b4       	in	r0, 0x2d	; 45
    1b18:	07 fe       	sbrs	r0, 7
    1b1a:	fd cf       	rjmp	.-6      	; 0x1b16 <dataflash_erase_block4+0x1a>
	{
	}
	return SPDR;
    1b1c:	8e b5       	in	r24, 0x2e	; 46
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    1b1e:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    1b20:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b22:	80 e2       	ldi	r24, 0x20	; 32
    1b24:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b26:	0d b4       	in	r0, 0x2d	; 45
    1b28:	07 fe       	sbrs	r0, 7
    1b2a:	fd cf       	rjmp	.-6      	; 0x1b26 <dataflash_erase_block4+0x2a>
	{
	}
	return SPDR;
    1b2c:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(BLOCK_ERASE_4K);     		// Write erase4 opcode

	adrByte1 = (iAddress>>16)&0xff;
    1b2e:	ca 01       	movw	r24, r20
    1b30:	aa 27       	eor	r26, r26
    1b32:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b34:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b36:	0d b4       	in	r0, 0x2d	; 45
    1b38:	07 fe       	sbrs	r0, 7
    1b3a:	fd cf       	rjmp	.-6      	; 0x1b36 <dataflash_erase_block4+0x3a>
	{
	}
	return SPDR;
    1b3c:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(BLOCK_ERASE_4K);     		// Write erase4 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1b3e:	bb 27       	eor	r27, r27
    1b40:	a5 2f       	mov	r26, r21
    1b42:	94 2f       	mov	r25, r20
    1b44:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b46:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b48:	0d b4       	in	r0, 0x2d	; 45
    1b4a:	07 fe       	sbrs	r0, 7
    1b4c:	fd cf       	rjmp	.-6      	; 0x1b48 <dataflash_erase_block4+0x4c>
	{
	}
	return SPDR;
    1b4e:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b50:	2e bd       	out	0x2e, r18	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b52:	0d b4       	in	r0, 0x2d	; 45
    1b54:	07 fe       	sbrs	r0, 7
    1b56:	fd cf       	rjmp	.-6      	; 0x1b52 <dataflash_erase_block4+0x56>
	{
	}
	return SPDR;
    1b58:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
    1b5a:	28 9a       	sbi	0x05, 0	; 5
    1b5c:	80 e0       	ldi	r24, 0x00	; 0
    1b5e:	90 e6       	ldi	r25, 0x60	; 96
    1b60:	01 97       	sbiw	r24, 0x01	; 1
    1b62:	f1 f7       	brne	.-4      	; 0x1b60 <dataflash_erase_block4+0x64>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b64:	65 e0       	ldi	r22, 0x05	; 5
    1b66:	2b ee       	ldi	r18, 0xEB	; 235
    1b68:	31 e0       	ldi	r19, 0x01	; 1
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1b6a:	40 e0       	ldi	r20, 0x00	; 0
    1b6c:	50 e6       	ldi	r21, 0x60	; 96
    1b6e:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b70:	6e bd       	out	0x2e, r22	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b72:	0d b4       	in	r0, 0x2d	; 45
    1b74:	07 fe       	sbrs	r0, 7
    1b76:	fd cf       	rjmp	.-6      	; 0x1b72 <dataflash_erase_block4+0x76>
	{
	}
	return SPDR;
    1b78:	8e b5       	in	r24, 0x2e	; 46
    1b7a:	c9 01       	movw	r24, r18
    1b7c:	01 97       	sbiw	r24, 0x01	; 1
    1b7e:	f1 f7       	brne	.-4      	; 0x1b7c <dataflash_erase_block4+0x80>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1b80:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1b82:	0d b4       	in	r0, 0x2d	; 45
    1b84:	07 fe       	sbrs	r0, 7
    1b86:	fd cf       	rjmp	.-6      	; 0x1b82 <dataflash_erase_block4+0x86>
	{
	}
	return SPDR;
    1b88:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1b8a:	28 9a       	sbi	0x05, 0	; 5
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(5);
#endif

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1b8c:	80 ff       	sbrs	r24, 0
    1b8e:	04 c0       	rjmp	.+8      	; 0x1b98 <dataflash_erase_block4+0x9c>
    1b90:	ca 01       	movw	r24, r20
    1b92:	01 97       	sbiw	r24, 0x01	; 1
    1b94:	f1 f7       	brne	.-4      	; 0x1b92 <dataflash_erase_block4+0x96>
    1b96:	eb cf       	rjmp	.-42     	; 0x1b6e <dataflash_erase_block4+0x72>
	{
		_delay_ms(5);
	}
}
    1b98:	08 95       	ret

00001b9a <dataflash_write>:
	CS_UP;
}

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
    1b9a:	0f 93       	push	r16
    1b9c:	1f 93       	push	r17
    1b9e:	8b 01       	movw	r16, r22
    1ba0:	9c 01       	movw	r18, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
	      
	CS_DOWN;
    1ba2:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ba4:	86 e0       	ldi	r24, 0x06	; 6
    1ba6:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1ba8:	0d b4       	in	r0, 0x2d	; 45
    1baa:	07 fe       	sbrs	r0, 7
    1bac:	fd cf       	rjmp	.-6      	; 0x1ba8 <dataflash_write+0xe>
	{
	}
	return SPDR;
    1bae:	8e b5       	in	r24, 0x2e	; 46
	      
	CS_DOWN;

	spi_transfer(WRITE_ENABLE);				// Write enable command

	CS_UP;
    1bb0:	28 9a       	sbi	0x05, 0	; 5
	CS_DOWN;
    1bb2:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1bb4:	82 e0       	ldi	r24, 0x02	; 2
    1bb6:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1bb8:	0d b4       	in	r0, 0x2d	; 45
    1bba:	07 fe       	sbrs	r0, 7
    1bbc:	fd cf       	rjmp	.-6      	; 0x1bb8 <dataflash_write+0x1e>
	{
	}
	return SPDR;
    1bbe:	8e b5       	in	r24, 0x2e	; 46

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
    1bc0:	c9 01       	movw	r24, r18
    1bc2:	aa 27       	eor	r26, r26
    1bc4:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1bc6:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1bc8:	0d b4       	in	r0, 0x2d	; 45
    1bca:	07 fe       	sbrs	r0, 7
    1bcc:	fd cf       	rjmp	.-6      	; 0x1bc8 <dataflash_write+0x2e>
	{
	}
	return SPDR;
    1bce:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
    1bd0:	bb 27       	eor	r27, r27
    1bd2:	a3 2f       	mov	r26, r19
    1bd4:	92 2f       	mov	r25, r18
    1bd6:	81 2f       	mov	r24, r17
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1bd8:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1bda:	0d b4       	in	r0, 0x2d	; 45
    1bdc:	07 fe       	sbrs	r0, 7
    1bde:	fd cf       	rjmp	.-6      	; 0x1bda <dataflash_write+0x40>
	{
	}
	return SPDR;
    1be0:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1be2:	0e bd       	out	0x2e, r16	; 46
	while (! (SPSR & (1<<SPIF))) 
    1be4:	0d b4       	in	r0, 0x2d	; 45
    1be6:	07 fe       	sbrs	r0, 7
    1be8:	fd cf       	rjmp	.-6      	; 0x1be4 <dataflash_write+0x4a>
	{
	}
	return SPDR;
    1bea:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1bec:	4e bd       	out	0x2e, r20	; 46
	while (! (SPSR & (1<<SPIF))) 
    1bee:	0d b4       	in	r0, 0x2d	; 45
    1bf0:	07 fe       	sbrs	r0, 7
    1bf2:	fd cf       	rjmp	.-6      	; 0x1bee <dataflash_write+0x54>
	{
	}
	return SPDR;
    1bf4:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);
	spi_transfer(Wrdat);   					// Send data byte

	CS_UP;      
    1bf6:	28 9a       	sbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1bf8:	55 e0       	ldi	r21, 0x05	; 5
    1bfa:	2b ee       	ldi	r18, 0xEB	; 235
    1bfc:	31 e0       	ldi	r19, 0x01	; 1
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1bfe:	41 e4       	ldi	r20, 0x41	; 65
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1c00:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c02:	5e bd       	out	0x2e, r21	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c04:	0d b4       	in	r0, 0x2d	; 45
    1c06:	07 fe       	sbrs	r0, 7
    1c08:	fd cf       	rjmp	.-6      	; 0x1c04 <dataflash_write+0x6a>
	{
	}
	return SPDR;
    1c0a:	8e b5       	in	r24, 0x2e	; 46
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c0c:	c9 01       	movw	r24, r18
    1c0e:	01 97       	sbiw	r24, 0x01	; 1
    1c10:	f1 f7       	brne	.-4      	; 0x1c0e <dataflash_write+0x74>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c12:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c14:	0d b4       	in	r0, 0x2d	; 45
    1c16:	07 fe       	sbrs	r0, 7
    1c18:	fd cf       	rjmp	.-6      	; 0x1c14 <dataflash_write+0x7a>
	{
	}
	return SPDR;
    1c1a:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1c1c:	28 9a       	sbi	0x05, 0	; 5
	spi_transfer(Wrdat);   					// Send data byte

	CS_UP;      

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1c1e:	80 ff       	sbrs	r24, 0
    1c20:	04 c0       	rjmp	.+8      	; 0x1c2a <dataflash_write+0x90>
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c22:	84 2f       	mov	r24, r20
    1c24:	8a 95       	dec	r24
    1c26:	f1 f7       	brne	.-4      	; 0x1c24 <dataflash_write+0x8a>
    1c28:	eb cf       	rjmp	.-42     	; 0x1c00 <dataflash_write+0x66>
	{
		_delay_us(10);
	}
}
    1c2a:	1f 91       	pop	r17
    1c2c:	0f 91       	pop	r16
    1c2e:	08 95       	ret

00001c30 <dataflash_unprotect_all>:
}


//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
    1c30:	ff 92       	push	r15
    1c32:	0f 93       	push	r16
    1c34:	1f 93       	push	r17
    1c36:	cf 93       	push	r28
    1c38:	df 93       	push	r29
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e0       	ldi	r20, 0x00	; 0
    1c40:	50 e0       	ldi	r21, 0x00	; 0
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c42:	06 e0       	ldi	r16, 0x06	; 6
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1c44:	19 e3       	ldi	r17, 0x39	; 57
    1c46:	f1 2e       	mov	r15, r17
    1c48:	c0 e0       	ldi	r28, 0x00	; 0
    1c4a:	d0 ec       	ldi	r29, 0xC0	; 192
    1c4c:	6b ee       	ldi	r22, 0xEB	; 235
    1c4e:	71 e0       	ldi	r23, 0x01	; 1
    1c50:	e0 e0       	ldi	r30, 0x00	; 0
    1c52:	f0 e6       	ldi	r31, 0x60	; 96
    1c54:	15 e0       	ldi	r17, 0x05	; 5
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    1c56:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c58:	0e bd       	out	0x2e, r16	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c5a:	0d b4       	in	r0, 0x2d	; 45
    1c5c:	07 fe       	sbrs	r0, 7
    1c5e:	fd cf       	rjmp	.-6      	; 0x1c5a <dataflash_unprotect_all+0x2a>
	{
	}
	return SPDR;
    1c60:	8e b5       	in	r24, 0x2e	; 46
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    1c62:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    1c64:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c66:	fe bc       	out	0x2e, r15	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c68:	0d b4       	in	r0, 0x2d	; 45
    1c6a:	07 fe       	sbrs	r0, 7
    1c6c:	fd cf       	rjmp	.-6      	; 0x1c68 <dataflash_unprotect_all+0x38>
	{
	}
	return SPDR;
    1c6e:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
    1c70:	ca 01       	movw	r24, r20
    1c72:	aa 27       	eor	r26, r26
    1c74:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c76:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c78:	0d b4       	in	r0, 0x2d	; 45
    1c7a:	07 fe       	sbrs	r0, 7
    1c7c:	fd cf       	rjmp	.-6      	; 0x1c78 <dataflash_unprotect_all+0x48>
	{
	}
	return SPDR;
    1c7e:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1c80:	bb 27       	eor	r27, r27
    1c82:	a5 2f       	mov	r26, r21
    1c84:	94 2f       	mov	r25, r20
    1c86:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c88:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c8a:	0d b4       	in	r0, 0x2d	; 45
    1c8c:	07 fe       	sbrs	r0, 7
    1c8e:	fd cf       	rjmp	.-6      	; 0x1c8a <dataflash_unprotect_all+0x5a>
	{
	}
	return SPDR;
    1c90:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1c92:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1c94:	0d b4       	in	r0, 0x2d	; 45
    1c96:	07 fe       	sbrs	r0, 7
    1c98:	fd cf       	rjmp	.-6      	; 0x1c94 <dataflash_unprotect_all+0x64>
	{
	}
	return SPDR;
    1c9a:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
    1c9c:	28 9a       	sbi	0x05, 0	; 5
    1c9e:	ce 01       	movw	r24, r28
    1ca0:	01 97       	sbiw	r24, 0x01	; 1
    1ca2:	f1 f7       	brne	.-4      	; 0x1ca0 <dataflash_unprotect_all+0x70>
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1ca4:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ca6:	1e bd       	out	0x2e, r17	; 46
	while (! (SPSR & (1<<SPIF))) 
    1ca8:	0d b4       	in	r0, 0x2d	; 45
    1caa:	07 fe       	sbrs	r0, 7
    1cac:	fd cf       	rjmp	.-6      	; 0x1ca8 <dataflash_unprotect_all+0x78>
	{
	}
	return SPDR;
    1cae:	8e b5       	in	r24, 0x2e	; 46
    1cb0:	cb 01       	movw	r24, r22
    1cb2:	01 97       	sbiw	r24, 0x01	; 1
    1cb4:	f1 f7       	brne	.-4      	; 0x1cb2 <dataflash_unprotect_all+0x82>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1cb6:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1cb8:	0d b4       	in	r0, 0x2d	; 45
    1cba:	07 fe       	sbrs	r0, 7
    1cbc:	fd cf       	rjmp	.-6      	; 0x1cb8 <dataflash_unprotect_all+0x88>
	{
	}
	return SPDR;
    1cbe:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1cc0:	28 9a       	sbi	0x05, 0	; 5
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10);
#endif

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1cc2:	80 ff       	sbrs	r24, 0
    1cc4:	04 c0       	rjmp	.+8      	; 0x1cce <dataflash_unprotect_all+0x9e>
    1cc6:	cf 01       	movw	r24, r30
    1cc8:	01 97       	sbiw	r24, 0x01	; 1
    1cca:	f1 f7       	brne	.-4      	; 0x1cc8 <dataflash_unprotect_all+0x98>
    1ccc:	eb cf       	rjmp	.-42     	; 0x1ca4 <dataflash_unprotect_all+0x74>
    1cce:	20 50       	subi	r18, 0x00	; 0
    1cd0:	30 4f       	sbci	r19, 0xF0	; 240
    1cd2:	4f 4f       	sbci	r20, 0xFF	; 255
    1cd4:	5f 4f       	sbci	r21, 0xFF	; 255
//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    1cd6:	20 30       	cpi	r18, 0x00	; 0
    1cd8:	80 e0       	ldi	r24, 0x00	; 0
    1cda:	38 07       	cpc	r19, r24
    1cdc:	80 e4       	ldi	r24, 0x40	; 64
    1cde:	48 07       	cpc	r20, r24
    1ce0:	80 e0       	ldi	r24, 0x00	; 0
    1ce2:	58 07       	cpc	r21, r24
    1ce4:	09 f0       	breq	.+2      	; 0x1ce8 <dataflash_unprotect_all+0xb8>
    1ce6:	b7 cf       	rjmp	.-146    	; 0x1c56 <dataflash_unprotect_all+0x26>
	{
		dataflash_unprotect_block4 (i);
	}
}
    1ce8:	df 91       	pop	r29
    1cea:	cf 91       	pop	r28
    1cec:	1f 91       	pop	r17
    1cee:	0f 91       	pop	r16
    1cf0:	ff 90       	pop	r15
    1cf2:	08 95       	ret

00001cf4 <dataflash_protect_all>:

//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
    1cf4:	ff 92       	push	r15
    1cf6:	0f 93       	push	r16
    1cf8:	1f 93       	push	r17
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e0       	ldi	r20, 0x00	; 0
    1d00:	50 e0       	ldi	r21, 0x00	; 0
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d02:	06 e0       	ldi	r16, 0x06	; 6
    1d04:	66 e3       	ldi	r22, 0x36	; 54
    1d06:	f6 2e       	mov	r15, r22
    1d08:	e0 e0       	ldi	r30, 0x00	; 0
    1d0a:	f0 e6       	ldi	r31, 0x60	; 96
    1d0c:	6b ee       	ldi	r22, 0xEB	; 235
    1d0e:	71 e0       	ldi	r23, 0x01	; 1
    1d10:	15 e0       	ldi	r17, 0x05	; 5
void		dataflash_protect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    1d12:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d14:	0e bd       	out	0x2e, r16	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d16:	0d b4       	in	r0, 0x2d	; 45
    1d18:	07 fe       	sbrs	r0, 7
    1d1a:	fd cf       	rjmp	.-6      	; 0x1d16 <dataflash_protect_all+0x22>
	{
	}
	return SPDR;
    1d1c:	8e b5       	in	r24, 0x2e	; 46
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    1d1e:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    1d20:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d22:	fe bc       	out	0x2e, r15	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d24:	0d b4       	in	r0, 0x2d	; 45
    1d26:	07 fe       	sbrs	r0, 7
    1d28:	fd cf       	rjmp	.-6      	; 0x1d24 <dataflash_protect_all+0x30>
	{
	}
	return SPDR;
    1d2a:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(PROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
    1d2c:	ca 01       	movw	r24, r20
    1d2e:	aa 27       	eor	r26, r26
    1d30:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d32:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d34:	0d b4       	in	r0, 0x2d	; 45
    1d36:	07 fe       	sbrs	r0, 7
    1d38:	fd cf       	rjmp	.-6      	; 0x1d34 <dataflash_protect_all+0x40>
	{
	}
	return SPDR;
    1d3a:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(PROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1d3c:	bb 27       	eor	r27, r27
    1d3e:	a5 2f       	mov	r26, r21
    1d40:	94 2f       	mov	r25, r20
    1d42:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d44:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d46:	0d b4       	in	r0, 0x2d	; 45
    1d48:	07 fe       	sbrs	r0, 7
    1d4a:	fd cf       	rjmp	.-6      	; 0x1d46 <dataflash_protect_all+0x52>
	{
	}
	return SPDR;
    1d4c:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d4e:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d50:	0d b4       	in	r0, 0x2d	; 45
    1d52:	07 fe       	sbrs	r0, 7
    1d54:	fd cf       	rjmp	.-6      	; 0x1d50 <dataflash_protect_all+0x5c>
	{
	}
	return SPDR;
    1d56:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
    1d58:	28 9a       	sbi	0x05, 0	; 5
    1d5a:	cf 01       	movw	r24, r30
    1d5c:	01 97       	sbiw	r24, 0x01	; 1
    1d5e:	f1 f7       	brne	.-4      	; 0x1d5c <dataflash_protect_all+0x68>
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1d60:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d62:	1e bd       	out	0x2e, r17	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d64:	0d b4       	in	r0, 0x2d	; 45
    1d66:	07 fe       	sbrs	r0, 7
    1d68:	fd cf       	rjmp	.-6      	; 0x1d64 <dataflash_protect_all+0x70>
	{
	}
	return SPDR;
    1d6a:	8e b5       	in	r24, 0x2e	; 46
    1d6c:	cb 01       	movw	r24, r22
    1d6e:	01 97       	sbiw	r24, 0x01	; 1
    1d70:	f1 f7       	brne	.-4      	; 0x1d6e <dataflash_protect_all+0x7a>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1d72:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1d74:	0d b4       	in	r0, 0x2d	; 45
    1d76:	07 fe       	sbrs	r0, 7
    1d78:	fd cf       	rjmp	.-6      	; 0x1d74 <dataflash_protect_all+0x80>
	{
	}
	return SPDR;
    1d7a:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1d7c:	28 9a       	sbi	0x05, 0	; 5
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(5);
#endif

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1d7e:	80 ff       	sbrs	r24, 0
    1d80:	04 c0       	rjmp	.+8      	; 0x1d8a <dataflash_protect_all+0x96>
    1d82:	cf 01       	movw	r24, r30
    1d84:	01 97       	sbiw	r24, 0x01	; 1
    1d86:	f1 f7       	brne	.-4      	; 0x1d84 <dataflash_protect_all+0x90>
    1d88:	eb cf       	rjmp	.-42     	; 0x1d60 <dataflash_protect_all+0x6c>
    1d8a:	20 50       	subi	r18, 0x00	; 0
    1d8c:	30 4f       	sbci	r19, 0xF0	; 240
    1d8e:	4f 4f       	sbci	r20, 0xFF	; 255
    1d90:	5f 4f       	sbci	r21, 0xFF	; 255
//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    1d92:	20 30       	cpi	r18, 0x00	; 0
    1d94:	80 e0       	ldi	r24, 0x00	; 0
    1d96:	38 07       	cpc	r19, r24
    1d98:	80 e4       	ldi	r24, 0x40	; 64
    1d9a:	48 07       	cpc	r20, r24
    1d9c:	80 e0       	ldi	r24, 0x00	; 0
    1d9e:	58 07       	cpc	r21, r24
    1da0:	09 f0       	breq	.+2      	; 0x1da4 <dataflash_protect_all+0xb0>
    1da2:	b7 cf       	rjmp	.-146    	; 0x1d12 <dataflash_protect_all+0x1e>
	{
		dataflash_protect_block4 (i);
	}
}
    1da4:	1f 91       	pop	r17
    1da6:	0f 91       	pop	r16
    1da8:	ff 90       	pop	r15
    1daa:	08 95       	ret

00001dac <dataflash_erase_all>:

//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
    1dac:	ff 92       	push	r15
    1dae:	0f 93       	push	r16
    1db0:	1f 93       	push	r17
    1db2:	cf 93       	push	r28
    1db4:	df 93       	push	r29
    1db6:	20 e0       	ldi	r18, 0x00	; 0
    1db8:	30 e0       	ldi	r19, 0x00	; 0
    1dba:	40 e0       	ldi	r20, 0x00	; 0
    1dbc:	50 e0       	ldi	r21, 0x00	; 0
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1dbe:	06 e0       	ldi	r16, 0x06	; 6
    1dc0:	19 e3       	ldi	r17, 0x39	; 57
    1dc2:	f1 2e       	mov	r15, r17
    1dc4:	c0 e0       	ldi	r28, 0x00	; 0
    1dc6:	d0 ec       	ldi	r29, 0xC0	; 192
    1dc8:	6b ee       	ldi	r22, 0xEB	; 235
    1dca:	71 e0       	ldi	r23, 0x01	; 1
    1dcc:	e0 e0       	ldi	r30, 0x00	; 0
    1dce:	f0 e6       	ldi	r31, 0x60	; 96
    1dd0:	15 e0       	ldi	r17, 0x05	; 5
void		dataflash_unprotect_block4	( uint16_t BlockNum )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
    1dd2:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1dd4:	0e bd       	out	0x2e, r16	; 46
	while (! (SPSR & (1<<SPIF))) 
    1dd6:	0d b4       	in	r0, 0x2d	; 45
    1dd8:	07 fe       	sbrs	r0, 7
    1dda:	fd cf       	rjmp	.-6      	; 0x1dd6 <dataflash_erase_all+0x2a>
	{
	}
	return SPDR;
    1ddc:	8e b5       	in	r24, 0x2e	; 46
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t iAddress = (uint32_t)(FLASH_BLOCK4_SIZE) * BlockNum;

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    1dde:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    1de0:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1de2:	fe bc       	out	0x2e, r15	; 46
	while (! (SPSR & (1<<SPIF))) 
    1de4:	0d b4       	in	r0, 0x2d	; 45
    1de6:	07 fe       	sbrs	r0, 7
    1de8:	fd cf       	rjmp	.-6      	; 0x1de4 <dataflash_erase_all+0x38>
	{
	}
	return SPDR;
    1dea:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
    1dec:	ca 01       	movw	r24, r20
    1dee:	aa 27       	eor	r26, r26
    1df0:	bb 27       	eor	r27, r27
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1df2:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1df4:	0d b4       	in	r0, 0x2d	; 45
    1df6:	07 fe       	sbrs	r0, 7
    1df8:	fd cf       	rjmp	.-6      	; 0x1df4 <dataflash_erase_all+0x48>
	{
	}
	return SPDR;
    1dfa:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
    1dfc:	bb 27       	eor	r27, r27
    1dfe:	a5 2f       	mov	r26, r21
    1e00:	94 2f       	mov	r25, r20
    1e02:	83 2f       	mov	r24, r19
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e04:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e06:	0d b4       	in	r0, 0x2d	; 45
    1e08:	07 fe       	sbrs	r0, 7
    1e0a:	fd cf       	rjmp	.-6      	; 0x1e06 <dataflash_erase_all+0x5a>
	{
	}
	return SPDR;
    1e0c:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e0e:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e10:	0d b4       	in	r0, 0x2d	; 45
    1e12:	07 fe       	sbrs	r0, 7
    1e14:	fd cf       	rjmp	.-6      	; 0x1e10 <dataflash_erase_all+0x64>
	{
	}
	return SPDR;
    1e16:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
    1e18:	28 9a       	sbi	0x05, 0	; 5
    1e1a:	ce 01       	movw	r24, r28
    1e1c:	01 97       	sbiw	r24, 0x01	; 1
    1e1e:	f1 f7       	brne	.-4      	; 0x1e1c <dataflash_erase_all+0x70>
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1e20:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e22:	1e bd       	out	0x2e, r17	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e24:	0d b4       	in	r0, 0x2d	; 45
    1e26:	07 fe       	sbrs	r0, 7
    1e28:	fd cf       	rjmp	.-6      	; 0x1e24 <dataflash_erase_all+0x78>
	{
	}
	return SPDR;
    1e2a:	8e b5       	in	r24, 0x2e	; 46
    1e2c:	cb 01       	movw	r24, r22
    1e2e:	01 97       	sbiw	r24, 0x01	; 1
    1e30:	f1 f7       	brne	.-4      	; 0x1e2e <dataflash_erase_all+0x82>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e32:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e34:	0d b4       	in	r0, 0x2d	; 45
    1e36:	07 fe       	sbrs	r0, 7
    1e38:	fd cf       	rjmp	.-6      	; 0x1e34 <dataflash_erase_all+0x88>
	{
	}
	return SPDR;
    1e3a:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1e3c:	28 9a       	sbi	0x05, 0	; 5
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(10);
#endif

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1e3e:	80 ff       	sbrs	r24, 0
    1e40:	04 c0       	rjmp	.+8      	; 0x1e4a <dataflash_erase_all+0x9e>
    1e42:	cf 01       	movw	r24, r30
    1e44:	01 97       	sbiw	r24, 0x01	; 1
    1e46:	f1 f7       	brne	.-4      	; 0x1e44 <dataflash_erase_all+0x98>
    1e48:	eb cf       	rjmp	.-42     	; 0x1e20 <dataflash_erase_all+0x74>
    1e4a:	20 50       	subi	r18, 0x00	; 0
    1e4c:	30 4f       	sbci	r19, 0xF0	; 240
    1e4e:	4f 4f       	sbci	r20, 0xFF	; 255
    1e50:	5f 4f       	sbci	r21, 0xFF	; 255
//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
	uint16_t i;

	for ( i=0; i<1024; i++ )
    1e52:	20 30       	cpi	r18, 0x00	; 0
    1e54:	80 e0       	ldi	r24, 0x00	; 0
    1e56:	38 07       	cpc	r19, r24
    1e58:	80 e4       	ldi	r24, 0x40	; 64
    1e5a:	48 07       	cpc	r20, r24
    1e5c:	80 e0       	ldi	r24, 0x00	; 0
    1e5e:	58 07       	cpc	r21, r24
    1e60:	09 f0       	breq	.+2      	; 0x1e64 <dataflash_erase_all+0xb8>
    1e62:	b7 cf       	rjmp	.-146    	; 0x1dd2 <dataflash_erase_all+0x26>
//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
	dataflash_unprotect_all ();

	CS_DOWN;
    1e64:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e66:	86 e0       	ldi	r24, 0x06	; 6
    1e68:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e6a:	0d b4       	in	r0, 0x2d	; 45
    1e6c:	07 fe       	sbrs	r0, 7
    1e6e:	fd cf       	rjmp	.-6      	; 0x1e6a <dataflash_erase_all+0xbe>
	{
	}
	return SPDR;
    1e70:	8e b5       	in	r24, 0x2e	; 46
{
	dataflash_unprotect_all ();

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
    1e72:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
    1e74:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e76:	80 e6       	ldi	r24, 0x60	; 96
    1e78:	8e bd       	out	0x2e, r24	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e7a:	0d b4       	in	r0, 0x2d	; 45
    1e7c:	07 fe       	sbrs	r0, 7
    1e7e:	fd cf       	rjmp	.-6      	; 0x1e7a <dataflash_erase_all+0xce>
	{
	}
	return SPDR;
    1e80:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(CHIP_ERASE);     		// Write erase4 opcode

	CS_UP;
    1e82:	28 9a       	sbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e84:	65 e0       	ldi	r22, 0x05	; 5
    1e86:	2b ee       	ldi	r18, 0xEB	; 235
    1e88:	31 e0       	ldi	r19, 0x01	; 1
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
    1e8a:	40 e0       	ldi	r20, 0x00	; 0
    1e8c:	50 e6       	ldi	r21, 0x60	; 96
    1e8e:	28 98       	cbi	0x05, 0	; 5
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1e90:	6e bd       	out	0x2e, r22	; 46
	while (! (SPSR & (1<<SPIF))) 
    1e92:	0d b4       	in	r0, 0x2d	; 45
    1e94:	07 fe       	sbrs	r0, 7
    1e96:	fd cf       	rjmp	.-6      	; 0x1e92 <dataflash_erase_all+0xe6>
	{
	}
	return SPDR;
    1e98:	8e b5       	in	r24, 0x2e	; 46
    1e9a:	c9 01       	movw	r24, r18
    1e9c:	01 97       	sbiw	r24, 0x01	; 1
    1e9e:	f1 f7       	brne	.-4      	; 0x1e9c <dataflash_erase_all+0xf0>
//__________________________________________________________________________________________________
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
#ifndef __NOSLEEP_NOSPI_DEBUG
	SPDR = c;
    1ea0:	1e bc       	out	0x2e, r1	; 46
	while (! (SPSR & (1<<SPIF))) 
    1ea2:	0d b4       	in	r0, 0x2d	; 45
    1ea4:	07 fe       	sbrs	r0, 7
    1ea6:	fd cf       	rjmp	.-6      	; 0x1ea2 <dataflash_erase_all+0xf6>
	{
	}
	return SPDR;
    1ea8:	8e b5       	in	r24, 0x2e	; 46
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_us(100);
#endif

	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
    1eaa:	28 9a       	sbi	0x05, 0	; 5
	spi_transfer(CHIP_ERASE);     		// Write erase4 opcode

	CS_UP;

	// Wait until finished 
	while (dataflash_read_status()&FLASH_READY)
    1eac:	80 ff       	sbrs	r24, 0
    1eae:	04 c0       	rjmp	.+8      	; 0x1eb8 <dataflash_erase_all+0x10c>
    1eb0:	ca 01       	movw	r24, r20
    1eb2:	01 97       	sbiw	r24, 0x01	; 1
    1eb4:	f1 f7       	brne	.-4      	; 0x1eb2 <dataflash_erase_all+0x106>
    1eb6:	eb cf       	rjmp	.-42     	; 0x1e8e <dataflash_erase_all+0xe2>
	{
		_delay_ms(5);
	}
}
    1eb8:	df 91       	pop	r29
    1eba:	cf 91       	pop	r28
    1ebc:	1f 91       	pop	r17
    1ebe:	0f 91       	pop	r16
    1ec0:	ff 90       	pop	r15
    1ec2:	08 95       	ret

00001ec4 <TM_EchoCommand>:
void TM_EchoCommand ( char *sIncomingCommand )
{
	#ifdef  __ENABLE_ECHO_UART
	USARTWriteString ( sIncomingCommand );
	#endif
}
    1ec4:	08 95       	ret

00001ec6 <TM_TransferFileSystem>:
}

//__________________________________________________________________________________________________
// File System - Write blocks to the flash memory
void TM_TransferFileSystem ( void )
{
    1ec6:	8f 92       	push	r8
    1ec8:	9f 92       	push	r9
    1eca:	af 92       	push	r10
    1ecc:	bf 92       	push	r11
    1ece:	df 92       	push	r13
    1ed0:	ef 92       	push	r14
    1ed2:	ff 92       	push	r15
    1ed4:	0f 93       	push	r16
    1ed6:	1f 93       	push	r17
    1ed8:	df 93       	push	r29
    1eda:	cf 93       	push	r28
    1edc:	cd b7       	in	r28, 0x3d	; 61
    1ede:	de b7       	in	r29, 0x3e	; 62
    1ee0:	c4 55       	subi	r28, 0x54	; 84
    1ee2:	d0 40       	sbci	r29, 0x00	; 0
    1ee4:	0f b6       	in	r0, 0x3f	; 63
    1ee6:	f8 94       	cli
    1ee8:	de bf       	out	0x3e, r29	; 62
    1eea:	0f be       	out	0x3f, r0	; 63
    1eec:	cd bf       	out	0x3d, r28	; 61
	FileEntry_ST sCurEntry;
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
    1eee:	80 e0       	ldi	r24, 0x00	; 0
    1ef0:	90 ec       	ldi	r25, 0xC0	; 192
    1ef2:	af e3       	ldi	r26, 0x3F	; 63
    1ef4:	b0 e0       	ldi	r27, 0x00	; 0
    1ef6:	89 83       	std	Y+1, r24	; 0x01
    1ef8:	9a 83       	std	Y+2, r25	; 0x02
    1efa:	ab 83       	std	Y+3, r26	; 0x03
    1efc:	bc 83       	std	Y+4, r27	; 0x04
    1efe:	dd 24       	eor	r13, r13
    1f00:	25 e0       	ldi	r18, 0x05	; 5
    1f02:	a2 2e       	mov	r10, r18
    1f04:	b1 2c       	mov	r11, r1
    1f06:	ac 0e       	add	r10, r28
    1f08:	bd 1e       	adc	r11, r29
    1f0a:	4e 01       	movw	r8, r28
    1f0c:	08 94       	sec
    1f0e:	81 1c       	adc	r8, r1
    1f10:	91 1c       	adc	r9, r1
    1f12:	95 e5       	ldi	r25, 0x55	; 85
    1f14:	e9 2e       	mov	r14, r25
    1f16:	f1 2c       	mov	r15, r1
    1f18:	ec 0e       	add	r14, r28
    1f1a:	fd 1e       	adc	r15, r29
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    1f1c:	c4 01       	movw	r24, r8
    1f1e:	b5 01       	movw	r22, r10
    1f20:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
    1f24:	88 23       	and	r24, r24
    1f26:	89 f0       	breq	.+34     	; 0x1f4a <TM_TransferFileSystem+0x84>
    1f28:	85 01       	movw	r16, r10
	{
		cEntry = (char*)(&sCurEntry);
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			USARTWriteChar( cEntry[itr] );		
    1f2a:	f8 01       	movw	r30, r16
    1f2c:	81 91       	ld	r24, Z+
    1f2e:	8f 01       	movw	r16, r30
    1f30:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
    1f34:	80 e5       	ldi	r24, 0x50	; 80
    1f36:	d8 2e       	mov	r13, r24
	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
	{
		cEntry = (char*)(&sCurEntry);
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
    1f38:	0e 15       	cp	r16, r14
    1f3a:	1f 05       	cpc	r17, r15
    1f3c:	b1 f7       	brne	.-20     	; 0x1f2a <TM_TransferFileSystem+0x64>
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    1f3e:	c4 01       	movw	r24, r8
    1f40:	b5 01       	movw	r22, r10
    1f42:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
    1f46:	88 23       	and	r24, r24
    1f48:	79 f7       	brne	.-34     	; 0x1f28 <TM_TransferFileSystem+0x62>
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			USARTWriteChar( cEntry[itr] );		
	}

	if ( itr == 0 )		// nothing was read then FS empty
    1f4a:	dd 20       	and	r13, r13
    1f4c:	21 f4       	brne	.+8      	; 0x1f56 <TM_TransferFileSystem+0x90>
	{
		USARTWriteString ( (char*)"EMPTY\r\n" );
    1f4e:	89 ea       	ldi	r24, 0xA9	; 169
    1f50:	91 e0       	ldi	r25, 0x01	; 1
    1f52:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	}
}
    1f56:	cc 5a       	subi	r28, 0xAC	; 172
    1f58:	df 4f       	sbci	r29, 0xFF	; 255
    1f5a:	0f b6       	in	r0, 0x3f	; 63
    1f5c:	f8 94       	cli
    1f5e:	de bf       	out	0x3e, r29	; 62
    1f60:	0f be       	out	0x3f, r0	; 63
    1f62:	cd bf       	out	0x3d, r28	; 61
    1f64:	cf 91       	pop	r28
    1f66:	df 91       	pop	r29
    1f68:	1f 91       	pop	r17
    1f6a:	0f 91       	pop	r16
    1f6c:	ff 90       	pop	r15
    1f6e:	ef 90       	pop	r14
    1f70:	df 90       	pop	r13
    1f72:	bf 90       	pop	r11
    1f74:	af 90       	pop	r10
    1f76:	9f 90       	pop	r9
    1f78:	8f 90       	pop	r8
    1f7a:	08 95       	ret

00001f7c <TM_ShowParameters>:
}

//__________________________________________________________________________________________________
// File System - Show Parameters
void TM_ShowParameters ( void )
{
    1f7c:	0f 93       	push	r16
    1f7e:	1f 93       	push	r17
    1f80:	df 93       	push	r29
    1f82:	cf 93       	push	r28
    1f84:	cd b7       	in	r28, 0x3d	; 61
    1f86:	de b7       	in	r29, 0x3e	; 62
    1f88:	c0 54       	subi	r28, 0x40	; 64
    1f8a:	d0 40       	sbci	r29, 0x00	; 0
    1f8c:	0f b6       	in	r0, 0x3f	; 63
    1f8e:	f8 94       	cli
    1f90:	de bf       	out	0x3e, r29	; 62
    1f92:	0f be       	out	0x3f, r0	; 63
    1f94:	cd bf       	out	0x3d, r28	; 61
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "CDEP:%03d;"		//color depth
    1f96:	8d b7       	in	r24, 0x3d	; 61
    1f98:	9e b7       	in	r25, 0x3e	; 62
    1f9a:	08 97       	sbiw	r24, 0x08	; 8
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	9e bf       	out	0x3e, r25	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	8d bf       	out	0x3d, r24	; 61
    1fa6:	ed b7       	in	r30, 0x3d	; 61
    1fa8:	fe b7       	in	r31, 0x3e	; 62
    1faa:	31 96       	adiw	r30, 0x01	; 1
    1fac:	8e 01       	movw	r16, r28
    1fae:	0f 5f       	subi	r16, 0xFF	; 255
    1fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    1fb2:	ad b7       	in	r26, 0x3d	; 61
    1fb4:	be b7       	in	r27, 0x3e	; 62
    1fb6:	12 96       	adiw	r26, 0x02	; 2
    1fb8:	1c 93       	st	X, r17
    1fba:	0e 93       	st	-X, r16
    1fbc:	11 97       	sbiw	r26, 0x01	; 1
    1fbe:	81 eb       	ldi	r24, 0xB1	; 177
    1fc0:	91 e0       	ldi	r25, 0x01	; 1
    1fc2:	93 83       	std	Z+3, r25	; 0x03
    1fc4:	82 83       	std	Z+2, r24	; 0x02
    1fc6:	80 e1       	ldi	r24, 0x10	; 16
    1fc8:	90 e0       	ldi	r25, 0x00	; 0
    1fca:	95 83       	std	Z+5, r25	; 0x05
    1fcc:	84 83       	std	Z+4, r24	; 0x04
    1fce:	88 ec       	ldi	r24, 0xC8	; 200
    1fd0:	90 e0       	ldi	r25, 0x00	; 0
    1fd2:	97 83       	std	Z+7, r25	; 0x07
    1fd4:	86 83       	std	Z+6, r24	; 0x06
    1fd6:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
							"ANG:%03d;\r\n", 		//angular res
							ANIBIKE_COLOR_DEPTH,
							ANGULAR_RESOLUTION );
	USARTWriteString ( sRespondData );
    1fda:	8d b7       	in	r24, 0x3d	; 61
    1fdc:	9e b7       	in	r25, 0x3e	; 62
    1fde:	08 96       	adiw	r24, 0x08	; 8
    1fe0:	0f b6       	in	r0, 0x3f	; 63
    1fe2:	f8 94       	cli
    1fe4:	9e bf       	out	0x3e, r25	; 62
    1fe6:	0f be       	out	0x3f, r0	; 63
    1fe8:	8d bf       	out	0x3d, r24	; 61
    1fea:	c8 01       	movw	r24, r16
    1fec:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
}
    1ff0:	c0 5c       	subi	r28, 0xC0	; 192
    1ff2:	df 4f       	sbci	r29, 0xFF	; 255
    1ff4:	0f b6       	in	r0, 0x3f	; 63
    1ff6:	f8 94       	cli
    1ff8:	de bf       	out	0x3e, r29	; 62
    1ffa:	0f be       	out	0x3f, r0	; 63
    1ffc:	cd bf       	out	0x3d, r28	; 61
    1ffe:	cf 91       	pop	r28
    2000:	df 91       	pop	r29
    2002:	1f 91       	pop	r17
    2004:	0f 91       	pop	r16
    2006:	08 95       	ret

00002008 <TM_MemoryTest>:
}

//__________________________________________________________________________________________________
// File System - Perform memory check
void TM_MemoryTest ( void )
{
    2008:	4f 92       	push	r4
    200a:	5f 92       	push	r5
    200c:	6f 92       	push	r6
    200e:	7f 92       	push	r7
    2010:	9f 92       	push	r9
    2012:	af 92       	push	r10
    2014:	bf 92       	push	r11
    2016:	cf 92       	push	r12
    2018:	df 92       	push	r13
    201a:	ef 92       	push	r14
    201c:	ff 92       	push	r15
    201e:	0f 93       	push	r16
    2020:	1f 93       	push	r17
    2022:	df 93       	push	r29
    2024:	cf 93       	push	r28
    2026:	cd b7       	in	r28, 0x3d	; 61
    2028:	de b7       	in	r29, 0x3e	; 62
    202a:	c6 54       	subi	r28, 0x46	; 70
    202c:	d0 40       	sbci	r29, 0x00	; 0
    202e:	0f b6       	in	r0, 0x3f	; 63
    2030:	f8 94       	cli
    2032:	de bf       	out	0x3e, r29	; 62
    2034:	0f be       	out	0x3f, r0	; 63
    2036:	cd bf       	out	0x3d, r28	; 61
	uint32_t ErrCounter = 0;
	uint32_t pos = 0;	
	uint8_t retVal = 0, Val = 0;

	// Erase memory
	USARTWriteString ( (char*)"Delete\r\n" );
    2038:	87 ec       	ldi	r24, 0xC7	; 199
    203a:	91 e0       	ldi	r25, 0x01	; 1
    203c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	
	dataflash_erase_all ( );
    2040:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <dataflash_erase_all>

	USARTWriteString ( (char*)"Unprotect\r\n" );
    2044:	80 ed       	ldi	r24, 0xD0	; 208
    2046:	91 e0       	ldi	r25, 0x01	; 1
    2048:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	dataflash_unprotect_all ( );
    204c:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <dataflash_unprotect_all>
    2050:	20 e0       	ldi	r18, 0x00	; 0
    2052:	30 e0       	ldi	r19, 0x00	; 0
    2054:	4b ee       	ldi	r20, 0xEB	; 235
    2056:	51 e0       	ldi	r21, 0x01	; 1
    2058:	ca 01       	movw	r24, r20
    205a:	01 97       	sbiw	r24, 0x01	; 1
    205c:	f1 f7       	brne	.-4      	; 0x205a <TM_MemoryTest+0x52>
    205e:	2f 5f       	subi	r18, 0xFF	; 255
    2060:	3f 4f       	sbci	r19, 0xFF	; 255
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2062:	8c e9       	ldi	r24, 0x9C	; 156
    2064:	20 34       	cpi	r18, 0x40	; 64
    2066:	38 07       	cpc	r19, r24
    2068:	b9 f7       	brne	.-18     	; 0x2058 <TM_MemoryTest+0x50>

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	USARTWriteString ( (char*)"Writing\r\n" );
    206a:	8c ed       	ldi	r24, 0xDC	; 220
    206c:	91 e0       	ldi	r25, 0x01	; 1
    206e:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2072:	ee 24       	eor	r14, r14
    2074:	ff 24       	eor	r15, r15
    2076:	87 01       	movw	r16, r14
    2078:	3e 01       	movw	r6, r28
    207a:	08 94       	sec
    207c:	61 1c       	adc	r6, r1
    207e:	71 1c       	adc	r7, r1
	{
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
		{
			sprintf ( Msg, "%lu ", pos);
    2080:	46 ee       	ldi	r20, 0xE6	; 230
    2082:	c4 2e       	mov	r12, r20
    2084:	41 e0       	ldi	r20, 0x01	; 1
    2086:	d4 2e       	mov	r13, r20
    2088:	13 c0       	rjmp	.+38     	; 0x20b0 <TM_MemoryTest+0xa8>
			USARTWriteString ( Msg );
		}

		dataflash_write	( pos, Val );
    208a:	c8 01       	movw	r24, r16
    208c:	b7 01       	movw	r22, r14
    208e:	4e 2d       	mov	r20, r14
    2090:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <dataflash_write>
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	USARTWriteString ( (char*)"Writing\r\n" );
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    2094:	08 94       	sec
    2096:	e1 1c       	adc	r14, r1
    2098:	f1 1c       	adc	r15, r1
    209a:	01 1d       	adc	r16, r1
    209c:	11 1d       	adc	r17, r1
    209e:	90 e0       	ldi	r25, 0x00	; 0
    20a0:	e9 16       	cp	r14, r25
    20a2:	90 e0       	ldi	r25, 0x00	; 0
    20a4:	f9 06       	cpc	r15, r25
    20a6:	90 e4       	ldi	r25, 0x40	; 64
    20a8:	09 07       	cpc	r16, r25
    20aa:	90 e0       	ldi	r25, 0x00	; 0
    20ac:	19 07       	cpc	r17, r25
    20ae:	61 f1       	breq	.+88     	; 0x2108 <TM_MemoryTest+0x100>
	{
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
    20b0:	d8 01       	movw	r26, r16
    20b2:	c7 01       	movw	r24, r14
    20b4:	9f 70       	andi	r25, 0x0F	; 15
    20b6:	a0 70       	andi	r26, 0x00	; 0
    20b8:	b0 70       	andi	r27, 0x00	; 0
    20ba:	00 97       	sbiw	r24, 0x00	; 0
    20bc:	a1 05       	cpc	r26, r1
    20be:	b1 05       	cpc	r27, r1
    20c0:	21 f7       	brne	.-56     	; 0x208a <TM_MemoryTest+0x82>
		{
			sprintf ( Msg, "%lu ", pos);
    20c2:	ad b7       	in	r26, 0x3d	; 61
    20c4:	be b7       	in	r27, 0x3e	; 62
    20c6:	18 97       	sbiw	r26, 0x08	; 8
    20c8:	0f b6       	in	r0, 0x3f	; 63
    20ca:	f8 94       	cli
    20cc:	be bf       	out	0x3e, r27	; 62
    20ce:	0f be       	out	0x3f, r0	; 63
    20d0:	ad bf       	out	0x3d, r26	; 61
    20d2:	ed b7       	in	r30, 0x3d	; 61
    20d4:	fe b7       	in	r31, 0x3e	; 62
    20d6:	31 96       	adiw	r30, 0x01	; 1
    20d8:	12 96       	adiw	r26, 0x02	; 2
    20da:	7c 92       	st	X, r7
    20dc:	6e 92       	st	-X, r6
    20de:	11 97       	sbiw	r26, 0x01	; 1
    20e0:	d3 82       	std	Z+3, r13	; 0x03
    20e2:	c2 82       	std	Z+2, r12	; 0x02
    20e4:	e4 82       	std	Z+4, r14	; 0x04
    20e6:	f5 82       	std	Z+5, r15	; 0x05
    20e8:	06 83       	std	Z+6, r16	; 0x06
    20ea:	17 83       	std	Z+7, r17	; 0x07
    20ec:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
			USARTWriteString ( Msg );
    20f0:	8d b7       	in	r24, 0x3d	; 61
    20f2:	9e b7       	in	r25, 0x3e	; 62
    20f4:	08 96       	adiw	r24, 0x08	; 8
    20f6:	0f b6       	in	r0, 0x3f	; 63
    20f8:	f8 94       	cli
    20fa:	9e bf       	out	0x3e, r25	; 62
    20fc:	0f be       	out	0x3f, r0	; 63
    20fe:	8d bf       	out	0x3d, r24	; 61
    2100:	c3 01       	movw	r24, r6
    2102:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2106:	c1 cf       	rjmp	.-126    	; 0x208a <TM_MemoryTest+0x82>
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(4000);
#endif

	USARTWriteString ( (char*)"Writing\r\n" );
	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    2108:	20 e0       	ldi	r18, 0x00	; 0
    210a:	30 e0       	ldi	r19, 0x00	; 0
    210c:	4b ee       	ldi	r20, 0xEB	; 235
    210e:	51 e0       	ldi	r21, 0x01	; 1
    2110:	ca 01       	movw	r24, r20
    2112:	01 97       	sbiw	r24, 0x01	; 1
    2114:	f1 f7       	brne	.-4      	; 0x2112 <TM_MemoryTest+0x10a>
    2116:	2f 5f       	subi	r18, 0xFF	; 255
    2118:	3f 4f       	sbci	r19, 0xFF	; 255
    211a:	af ef       	ldi	r26, 0xFF	; 255
    211c:	2f 3f       	cpi	r18, 0xFF	; 255
    211e:	3a 07       	cpc	r19, r26
    2120:	b9 f7       	brne	.-18     	; 0x2110 <TM_MemoryTest+0x108>
	}

#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(15000);
#endif
	USARTWriteString ( (char*)"Reading\r\n" );
    2122:	8b ee       	ldi	r24, 0xEB	; 235
    2124:	91 e0       	ldi	r25, 0x01	; 1
    2126:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    212a:	aa 24       	eor	r10, r10
    212c:	bb 24       	eor	r11, r11
    212e:	65 01       	movw	r12, r10
    2130:	ee 24       	eor	r14, r14
    2132:	ff 24       	eor	r15, r15
    2134:	87 01       	movw	r16, r14
		retVal = dataflash_read	( pos );
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
		{
			sprintf ( Msg, "%lu ", pos);
    2136:	36 ee       	ldi	r19, 0xE6	; 230
    2138:	43 2e       	mov	r4, r19
    213a:	31 e0       	ldi	r19, 0x01	; 1
    213c:	53 2e       	mov	r5, r19
    213e:	15 c0       	rjmp	.+42     	; 0x216a <TM_MemoryTest+0x162>
			USARTWriteString ( Msg );
		}

		if (retVal!=Val)
    2140:	9e 14       	cp	r9, r14
    2142:	29 f0       	breq	.+10     	; 0x214e <TM_MemoryTest+0x146>
			ErrCounter ++;
    2144:	08 94       	sec
    2146:	a1 1c       	adc	r10, r1
    2148:	b1 1c       	adc	r11, r1
    214a:	c1 1c       	adc	r12, r1
    214c:	d1 1c       	adc	r13, r1
#ifndef __NOSLEEP_NOSPI_DEBUG
	_delay_ms(15000);
#endif
	USARTWriteString ( (char*)"Reading\r\n" );

	for (pos = 0; pos < FS_MEMORY_SIZE; pos ++)
    214e:	08 94       	sec
    2150:	e1 1c       	adc	r14, r1
    2152:	f1 1c       	adc	r15, r1
    2154:	01 1d       	adc	r16, r1
    2156:	11 1d       	adc	r17, r1
    2158:	90 e0       	ldi	r25, 0x00	; 0
    215a:	e9 16       	cp	r14, r25
    215c:	90 e0       	ldi	r25, 0x00	; 0
    215e:	f9 06       	cpc	r15, r25
    2160:	90 e4       	ldi	r25, 0x40	; 64
    2162:	09 07       	cpc	r16, r25
    2164:	90 e0       	ldi	r25, 0x00	; 0
    2166:	19 07       	cpc	r17, r25
    2168:	99 f1       	breq	.+102    	; 0x21d0 <TM_MemoryTest+0x1c8>
	{
		retVal = dataflash_read	( pos );
    216a:	c8 01       	movw	r24, r16
    216c:	b7 01       	movw	r22, r14
    216e:	0e 94 a8 0c 	call	0x1950	; 0x1950 <dataflash_read>
    2172:	98 2e       	mov	r9, r24
		Val = pos&0xff;

		if ( (pos & 0xFFF) == 0)	// Every 4096
    2174:	d8 01       	movw	r26, r16
    2176:	c7 01       	movw	r24, r14
    2178:	9f 70       	andi	r25, 0x0F	; 15
    217a:	a0 70       	andi	r26, 0x00	; 0
    217c:	b0 70       	andi	r27, 0x00	; 0
    217e:	00 97       	sbiw	r24, 0x00	; 0
    2180:	a1 05       	cpc	r26, r1
    2182:	b1 05       	cpc	r27, r1
    2184:	e9 f6       	brne	.-70     	; 0x2140 <TM_MemoryTest+0x138>
		{
			sprintf ( Msg, "%lu ", pos);
    2186:	8d b7       	in	r24, 0x3d	; 61
    2188:	9e b7       	in	r25, 0x3e	; 62
    218a:	08 97       	sbiw	r24, 0x08	; 8
    218c:	0f b6       	in	r0, 0x3f	; 63
    218e:	f8 94       	cli
    2190:	9e bf       	out	0x3e, r25	; 62
    2192:	0f be       	out	0x3f, r0	; 63
    2194:	8d bf       	out	0x3d, r24	; 61
    2196:	ed b7       	in	r30, 0x3d	; 61
    2198:	fe b7       	in	r31, 0x3e	; 62
    219a:	31 96       	adiw	r30, 0x01	; 1
    219c:	ad b7       	in	r26, 0x3d	; 61
    219e:	be b7       	in	r27, 0x3e	; 62
    21a0:	12 96       	adiw	r26, 0x02	; 2
    21a2:	7c 92       	st	X, r7
    21a4:	6e 92       	st	-X, r6
    21a6:	11 97       	sbiw	r26, 0x01	; 1
    21a8:	53 82       	std	Z+3, r5	; 0x03
    21aa:	42 82       	std	Z+2, r4	; 0x02
    21ac:	e4 82       	std	Z+4, r14	; 0x04
    21ae:	f5 82       	std	Z+5, r15	; 0x05
    21b0:	06 83       	std	Z+6, r16	; 0x06
    21b2:	17 83       	std	Z+7, r17	; 0x07
    21b4:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
			USARTWriteString ( Msg );
    21b8:	8d b7       	in	r24, 0x3d	; 61
    21ba:	9e b7       	in	r25, 0x3e	; 62
    21bc:	08 96       	adiw	r24, 0x08	; 8
    21be:	0f b6       	in	r0, 0x3f	; 63
    21c0:	f8 94       	cli
    21c2:	9e bf       	out	0x3e, r25	; 62
    21c4:	0f be       	out	0x3f, r0	; 63
    21c6:	8d bf       	out	0x3d, r24	; 61
    21c8:	c3 01       	movw	r24, r6
    21ca:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    21ce:	b8 cf       	rjmp	.-144    	; 0x2140 <TM_MemoryTest+0x138>

		if (retVal!=Val)
			ErrCounter ++;
	}

	sprintf (Msg, "#Errors: %lu\r\n", ErrCounter);
    21d0:	ad b7       	in	r26, 0x3d	; 61
    21d2:	be b7       	in	r27, 0x3e	; 62
    21d4:	18 97       	sbiw	r26, 0x08	; 8
    21d6:	0f b6       	in	r0, 0x3f	; 63
    21d8:	f8 94       	cli
    21da:	be bf       	out	0x3e, r27	; 62
    21dc:	0f be       	out	0x3f, r0	; 63
    21de:	ad bf       	out	0x3d, r26	; 61
    21e0:	ed b7       	in	r30, 0x3d	; 61
    21e2:	fe b7       	in	r31, 0x3e	; 62
    21e4:	31 96       	adiw	r30, 0x01	; 1
    21e6:	12 96       	adiw	r26, 0x02	; 2
    21e8:	7c 92       	st	X, r7
    21ea:	6e 92       	st	-X, r6
    21ec:	11 97       	sbiw	r26, 0x01	; 1
    21ee:	85 ef       	ldi	r24, 0xF5	; 245
    21f0:	91 e0       	ldi	r25, 0x01	; 1
    21f2:	93 83       	std	Z+3, r25	; 0x03
    21f4:	82 83       	std	Z+2, r24	; 0x02
    21f6:	a4 82       	std	Z+4, r10	; 0x04
    21f8:	b5 82       	std	Z+5, r11	; 0x05
    21fa:	c6 82       	std	Z+6, r12	; 0x06
    21fc:	d7 82       	std	Z+7, r13	; 0x07
    21fe:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
	USARTWriteString (Msg);
    2202:	8d b7       	in	r24, 0x3d	; 61
    2204:	9e b7       	in	r25, 0x3e	; 62
    2206:	08 96       	adiw	r24, 0x08	; 8
    2208:	0f b6       	in	r0, 0x3f	; 63
    220a:	f8 94       	cli
    220c:	9e bf       	out	0x3e, r25	; 62
    220e:	0f be       	out	0x3f, r0	; 63
    2210:	8d bf       	out	0x3d, r24	; 61
    2212:	c3 01       	movw	r24, r6
    2214:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	
}
    2218:	ca 5b       	subi	r28, 0xBA	; 186
    221a:	df 4f       	sbci	r29, 0xFF	; 255
    221c:	0f b6       	in	r0, 0x3f	; 63
    221e:	f8 94       	cli
    2220:	de bf       	out	0x3e, r29	; 62
    2222:	0f be       	out	0x3f, r0	; 63
    2224:	cd bf       	out	0x3d, r28	; 61
    2226:	cf 91       	pop	r28
    2228:	df 91       	pop	r29
    222a:	1f 91       	pop	r17
    222c:	0f 91       	pop	r16
    222e:	ff 90       	pop	r15
    2230:	ef 90       	pop	r14
    2232:	df 90       	pop	r13
    2234:	cf 90       	pop	r12
    2236:	bf 90       	pop	r11
    2238:	af 90       	pop	r10
    223a:	9f 90       	pop	r9
    223c:	7f 90       	pop	r7
    223e:	6f 90       	pop	r6
    2240:	5f 90       	pop	r5
    2242:	4f 90       	pop	r4
    2244:	08 95       	ret

00002246 <TM_TestLEDs>:
}

//__________________________________________________________________________________________________
// Testing LEDs
void TM_TestLEDs (  char *sIncomingCommand )
{
    2246:	0f 93       	push	r16
    2248:	1f 93       	push	r17
	uint8_t iRowNum = 0;
	uint8_t iLastRowPort = ROW_PORT;
    224a:	02 b1       	in	r16, 0x02	; 2
	uint8_t i;
	char* cTemp;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "WRIT"
    224c:	64 e0       	ldi	r22, 0x04	; 4
    224e:	72 e0       	ldi	r23, 0x02	; 2
    2250:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    2254:	80 e0       	ldi	r24, 0x00	; 0
    2256:	90 e0       	ldi	r25, 0x00	; 0
    2258:	64 e0       	ldi	r22, 0x04	; 4
    225a:	72 e0       	ldi	r23, 0x02	; 2
    225c:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	iRowNum = atoi (cTemp);
    2260:	0e 94 4a 18 	call	0x3094	; 0x3094 <atoi>
    2264:	18 2f       	mov	r17, r24
	cTemp = strtok ( NULL, " " );
    2266:	80 e0       	ldi	r24, 0x00	; 0
    2268:	90 e0       	ldi	r25, 0x00	; 0
    226a:	64 e0       	ldi	r22, 0x04	; 4
    226c:	72 e0       	ldi	r23, 0x02	; 2
    226e:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    2272:	9c 01       	movw	r18, r24
	
	// Now the cTemp contains "RGB" or "RG" or "R" or "G" and so on...

	// Set the row num
	ROW_PORT = (1<<iRowNum);
    2274:	81 e0       	ldi	r24, 0x01	; 1
    2276:	90 e0       	ldi	r25, 0x00	; 0
    2278:	02 c0       	rjmp	.+4      	; 0x227e <TM_TestLEDs+0x38>
    227a:	88 0f       	add	r24, r24
    227c:	99 1f       	adc	r25, r25
    227e:	1a 95       	dec	r17
    2280:	e2 f7       	brpl	.-8      	; 0x227a <TM_TestLEDs+0x34>
    2282:	82 b9       	out	0x02, r24	; 2
}

//__________________________________________________________________________________________________
// Testing LEDs
void TM_TestLEDs (  char *sIncomingCommand )
{
    2284:	d9 01       	movw	r26, r18
    2286:	0d 90       	ld	r0, X+
    2288:	00 20       	and	r0, r0
    228a:	e9 f7       	brne	.-6      	; 0x2286 <TM_TestLEDs+0x40>
    228c:	11 97       	sbiw	r26, 0x01	; 1
    228e:	a2 1b       	sub	r26, r18
    2290:	b3 0b       	sbc	r27, r19
    2292:	90 e0       	ldi	r25, 0x00	; 0
	// Now the cTemp contains "RGB" or "RG" or "R" or "G" and so on...

	// Set the row num
	ROW_PORT = (1<<iRowNum);
	
	for (i = 0; i<strlen(cTemp); i++)
    2294:	e9 2f       	mov	r30, r25
    2296:	f0 e0       	ldi	r31, 0x00	; 0
    2298:	ea 17       	cp	r30, r26
    229a:	fb 07       	cpc	r31, r27
    229c:	a8 f4       	brcc	.+42     	; 0x22c8 <TM_TestLEDs+0x82>
	{
		if (cTemp[i]=='R')
    229e:	e2 0f       	add	r30, r18
    22a0:	f3 1f       	adc	r31, r19
    22a2:	80 81       	ld	r24, Z
    22a4:	82 35       	cpi	r24, 0x52	; 82
    22a6:	89 f1       	breq	.+98     	; 0x230a <TM_TestLEDs+0xc4>
		{
			DDRB |= 0xF0;
			DDRF |= 0xF0;
		}

		if (cTemp[i]=='G')
    22a8:	87 34       	cpi	r24, 0x47	; 71
    22aa:	39 f1       	breq	.+78     	; 0x22fa <TM_TestLEDs+0xb4>
		{
			DDRD |= 0b00111100;
			DDRC |= 0x0F;
		}

		if (cTemp[i]=='B')
    22ac:	82 34       	cpi	r24, 0x42	; 66
    22ae:	31 f4       	brne	.+12     	; 0x22bc <TM_TestLEDs+0x76>
		{
			DDRF |= 0x0F;
    22b0:	80 b3       	in	r24, 0x10	; 16
    22b2:	8f 60       	ori	r24, 0x0F	; 15
    22b4:	80 bb       	out	0x10, r24	; 16
			DDRC |= 0xF0;
    22b6:	87 b1       	in	r24, 0x07	; 7
    22b8:	80 6f       	ori	r24, 0xF0	; 240
    22ba:	87 b9       	out	0x07, r24	; 7
	// Now the cTemp contains "RGB" or "RG" or "R" or "G" and so on...

	// Set the row num
	ROW_PORT = (1<<iRowNum);
	
	for (i = 0; i<strlen(cTemp); i++)
    22bc:	9f 5f       	subi	r25, 0xFF	; 255
    22be:	e9 2f       	mov	r30, r25
    22c0:	f0 e0       	ldi	r31, 0x00	; 0
    22c2:	ea 17       	cp	r30, r26
    22c4:	fb 07       	cpc	r31, r27
    22c6:	58 f3       	brcs	.-42     	; 0x229e <TM_TestLEDs+0x58>
    22c8:	20 e0       	ldi	r18, 0x00	; 0
    22ca:	30 e0       	ldi	r19, 0x00	; 0
    22cc:	4b ee       	ldi	r20, 0xEB	; 235
    22ce:	51 e0       	ldi	r21, 0x01	; 1
    22d0:	ca 01       	movw	r24, r20
    22d2:	01 97       	sbiw	r24, 0x01	; 1
    22d4:	f1 f7       	brne	.-4      	; 0x22d2 <TM_TestLEDs+0x8c>
    22d6:	2f 5f       	subi	r18, 0xFF	; 255
    22d8:	3f 4f       	sbci	r19, 0xFF	; 255
    22da:	8a e3       	ldi	r24, 0x3A	; 58
    22dc:	28 39       	cpi	r18, 0x98	; 152
    22de:	38 07       	cpc	r19, r24
    22e0:	b9 f7       	brne	.-18     	; 0x22d0 <TM_TestLEDs+0x8a>
		}
	}

	_delay_ms(1500);

	DDRB &= 0x0F;
    22e2:	84 b1       	in	r24, 0x04	; 4
    22e4:	8f 70       	andi	r24, 0x0F	; 15
    22e6:	84 b9       	out	0x04, r24	; 4
	DDRC = 0;
    22e8:	17 b8       	out	0x07, r1	; 7
	DDRD &= 0b11000011;
    22ea:	8a b1       	in	r24, 0x0a	; 10
    22ec:	83 7c       	andi	r24, 0xC3	; 195
    22ee:	8a b9       	out	0x0a, r24	; 10
	DDRF = 0;
    22f0:	10 ba       	out	0x10, r1	; 16
	
	// Cleanup
	ROW_PORT = iLastRowPort;
    22f2:	02 b9       	out	0x02, r16	; 2
}
    22f4:	1f 91       	pop	r17
    22f6:	0f 91       	pop	r16
    22f8:	08 95       	ret
			DDRF |= 0xF0;
		}

		if (cTemp[i]=='G')
		{
			DDRD |= 0b00111100;
    22fa:	8a b1       	in	r24, 0x0a	; 10
    22fc:	8c 63       	ori	r24, 0x3C	; 60
    22fe:	8a b9       	out	0x0a, r24	; 10
			DDRC |= 0x0F;
    2300:	87 b1       	in	r24, 0x07	; 7
    2302:	8f 60       	ori	r24, 0x0F	; 15
    2304:	87 b9       	out	0x07, r24	; 7
	// Now the cTemp contains "RGB" or "RG" or "R" or "G" and so on...

	// Set the row num
	ROW_PORT = (1<<iRowNum);
	
	for (i = 0; i<strlen(cTemp); i++)
    2306:	9f 5f       	subi	r25, 0xFF	; 255
    2308:	da cf       	rjmp	.-76     	; 0x22be <TM_TestLEDs+0x78>
	{
		if (cTemp[i]=='R')
		{
			DDRB |= 0xF0;
    230a:	84 b1       	in	r24, 0x04	; 4
    230c:	80 6f       	ori	r24, 0xF0	; 240
    230e:	84 b9       	out	0x04, r24	; 4
			DDRF |= 0xF0;
    2310:	80 b3       	in	r24, 0x10	; 16
    2312:	80 6f       	ori	r24, 0xF0	; 240
    2314:	80 bb       	out	0x10, r24	; 16
	// Now the cTemp contains "RGB" or "RG" or "R" or "G" and so on...

	// Set the row num
	ROW_PORT = (1<<iRowNum);
	
	for (i = 0; i<strlen(cTemp); i++)
    2316:	9f 5f       	subi	r25, 0xFF	; 255
    2318:	d2 cf       	rjmp	.-92     	; 0x22be <TM_TestLEDs+0x78>

0000231a <TM_ReadMemory>:
}

//__________________________________________________________________________________________________
// File System - Read Memory
void TM_ReadMemory ( char *sIncomingCommand )
{
    231a:	2f 92       	push	r2
    231c:	3f 92       	push	r3
    231e:	4f 92       	push	r4
    2320:	5f 92       	push	r5
    2322:	6f 92       	push	r6
    2324:	7f 92       	push	r7
    2326:	8f 92       	push	r8
    2328:	9f 92       	push	r9
    232a:	af 92       	push	r10
    232c:	bf 92       	push	r11
    232e:	cf 92       	push	r12
    2330:	df 92       	push	r13
    2332:	ef 92       	push	r14
    2334:	ff 92       	push	r15
    2336:	0f 93       	push	r16
    2338:	1f 93       	push	r17
    233a:	df 93       	push	r29
    233c:	cf 93       	push	r28
    233e:	cd b7       	in	r28, 0x3d	; 61
    2340:	de b7       	in	r29, 0x3e	; 62
    2342:	c2 57       	subi	r28, 0x72	; 114
    2344:	d0 40       	sbci	r29, 0x00	; 0
    2346:	0f b6       	in	r0, 0x3f	; 63
    2348:	f8 94       	cli
    234a:	de bf       	out	0x3e, r29	; 62
    234c:	0f be       	out	0x3f, r0	; 63
    234e:	cd bf       	out	0x3d, r28	; 61
	char HexaRead[50];
	uint32_t iIterator;
	uint32_t iStart;
	uint32_t iLength;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "READ"
    2350:	64 e0       	ldi	r22, 0x04	; 4
    2352:	72 e0       	ldi	r23, 0x02	; 2
    2354:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    2358:	80 e0       	ldi	r24, 0x00	; 0
    235a:	90 e0       	ldi	r25, 0x00	; 0
    235c:	64 e0       	ldi	r22, 0x04	; 4
    235e:	72 e0       	ldi	r23, 0x02	; 2
    2360:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	iStart = atol (cTemp);
    2364:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    2368:	e6 2e       	mov	r14, r22
    236a:	d7 2e       	mov	r13, r23
    236c:	c8 2e       	mov	r12, r24
    236e:	b9 2e       	mov	r11, r25
	cTemp = strtok ( NULL, " " );
    2370:	80 e0       	ldi	r24, 0x00	; 0
    2372:	90 e0       	ldi	r25, 0x00	; 0
    2374:	64 e0       	ldi	r22, 0x04	; 4
    2376:	72 e0       	ldi	r23, 0x02	; 2
    2378:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    237c:	8c 01       	movw	r16, r24
	iLength = atol (cTemp);
    237e:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>

	if (cTemp!=NULL)
    2382:	01 2b       	or	r16, r17
    2384:	09 f4       	brne	.+2      	; 0x2388 <TM_ReadMemory+0x6e>
    2386:	9d c0       	rjmp	.+314    	; 0x24c2 <TM_ReadMemory+0x1a8>
	uint32_t iStart;
	uint32_t iLength;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "READ"
	cTemp = strtok ( NULL, " " );
	iStart = atol (cTemp);
    2388:	2e 2c       	mov	r2, r14
    238a:	3d 2c       	mov	r3, r13
    238c:	4c 2c       	mov	r4, r12
    238e:	5b 2c       	mov	r5, r11
	cTemp = strtok ( NULL, " " );
	iLength = atol (cTemp);
    2390:	3b 01       	movw	r6, r22
    2392:	4c 01       	movw	r8, r24

	if (cTemp!=NULL)
	{
		sprintf ( sRespondData, "Reading %lu to %lu;\r\n",
    2394:	2d b7       	in	r18, 0x3d	; 61
    2396:	3e b7       	in	r19, 0x3e	; 62
    2398:	2c 50       	subi	r18, 0x0C	; 12
    239a:	30 40       	sbci	r19, 0x00	; 0
    239c:	0f b6       	in	r0, 0x3f	; 63
    239e:	f8 94       	cli
    23a0:	3e bf       	out	0x3e, r19	; 62
    23a2:	0f be       	out	0x3f, r0	; 63
    23a4:	2d bf       	out	0x3d, r18	; 61
    23a6:	ed b7       	in	r30, 0x3d	; 61
    23a8:	fe b7       	in	r31, 0x3e	; 62
    23aa:	31 96       	adiw	r30, 0x01	; 1
    23ac:	8e 01       	movw	r16, r28
    23ae:	0d 5c       	subi	r16, 0xCD	; 205
    23b0:	1f 4f       	sbci	r17, 0xFF	; 255
    23b2:	ad b7       	in	r26, 0x3d	; 61
    23b4:	be b7       	in	r27, 0x3e	; 62
    23b6:	12 96       	adiw	r26, 0x02	; 2
    23b8:	1c 93       	st	X, r17
    23ba:	0e 93       	st	-X, r16
    23bc:	11 97       	sbiw	r26, 0x01	; 1
    23be:	86 e0       	ldi	r24, 0x06	; 6
    23c0:	92 e0       	ldi	r25, 0x02	; 2
    23c2:	93 83       	std	Z+3, r25	; 0x03
    23c4:	82 83       	std	Z+2, r24	; 0x02
    23c6:	24 82       	std	Z+4, r2	; 0x04
    23c8:	35 82       	std	Z+5, r3	; 0x05
    23ca:	46 82       	std	Z+6, r4	; 0x06
    23cc:	57 82       	std	Z+7, r5	; 0x07
    23ce:	d4 01       	movw	r26, r8
    23d0:	c3 01       	movw	r24, r6
    23d2:	82 0d       	add	r24, r2
    23d4:	93 1d       	adc	r25, r3
    23d6:	a4 1d       	adc	r26, r4
    23d8:	b5 1d       	adc	r27, r5
    23da:	80 87       	std	Z+8, r24	; 0x08
    23dc:	91 87       	std	Z+9, r25	; 0x09
    23de:	a2 87       	std	Z+10, r26	; 0x0a
    23e0:	b3 87       	std	Z+11, r27	; 0x0b
    23e2:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
								iStart, iStart+iLength );
		USARTWriteString ( sRespondData );
    23e6:	2d b7       	in	r18, 0x3d	; 61
    23e8:	3e b7       	in	r19, 0x3e	; 62
    23ea:	24 5f       	subi	r18, 0xF4	; 244
    23ec:	3f 4f       	sbci	r19, 0xFF	; 255
    23ee:	0f b6       	in	r0, 0x3f	; 63
    23f0:	f8 94       	cli
    23f2:	3e bf       	out	0x3e, r19	; 62
    23f4:	0f be       	out	0x3f, r0	; 63
    23f6:	2d bf       	out	0x3d, r18	; 61
    23f8:	c8 01       	movw	r24, r16
    23fa:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    23fe:	aa 24       	eor	r10, r10
    2400:	bb 24       	eor	r11, r11
    2402:	65 01       	movw	r12, r10
    2404:	82 01       	movw	r16, r4
    2406:	71 01       	movw	r14, r2
    2408:	ea 0c       	add	r14, r10
    240a:	fb 1c       	adc	r15, r11
    240c:	0c 1d       	adc	r16, r12
    240e:	1d 1d       	adc	r17, r13

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
		{
			sprintf(HexaRead, "A%lu:   0x%x\r\n", (iStart+iIterator), dataflash_read (iStart+iIterator) );
    2410:	c8 01       	movw	r24, r16
    2412:	b7 01       	movw	r22, r14
    2414:	0e 94 a8 0c 	call	0x1950	; 0x1950 <dataflash_read>
    2418:	ad b7       	in	r26, 0x3d	; 61
    241a:	be b7       	in	r27, 0x3e	; 62
    241c:	1a 97       	sbiw	r26, 0x0a	; 10
    241e:	0f b6       	in	r0, 0x3f	; 63
    2420:	f8 94       	cli
    2422:	be bf       	out	0x3e, r27	; 62
    2424:	0f be       	out	0x3f, r0	; 63
    2426:	ad bf       	out	0x3d, r26	; 61
    2428:	ed b7       	in	r30, 0x3d	; 61
    242a:	fe b7       	in	r31, 0x3e	; 62
    242c:	31 96       	adiw	r30, 0x01	; 1
    242e:	21 e0       	ldi	r18, 0x01	; 1
    2430:	30 e0       	ldi	r19, 0x00	; 0
    2432:	2c 0f       	add	r18, r28
    2434:	3d 1f       	adc	r19, r29
    2436:	12 96       	adiw	r26, 0x02	; 2
    2438:	3c 93       	st	X, r19
    243a:	2e 93       	st	-X, r18
    243c:	11 97       	sbiw	r26, 0x01	; 1
    243e:	ac e1       	ldi	r26, 0x1C	; 28
    2440:	b2 e0       	ldi	r27, 0x02	; 2
    2442:	b3 83       	std	Z+3, r27	; 0x03
    2444:	a2 83       	std	Z+2, r26	; 0x02
    2446:	e4 82       	std	Z+4, r14	; 0x04
    2448:	f5 82       	std	Z+5, r15	; 0x05
    244a:	06 83       	std	Z+6, r16	; 0x06
    244c:	17 83       	std	Z+7, r17	; 0x07
    244e:	80 87       	std	Z+8, r24	; 0x08
    2450:	11 86       	std	Z+9, r1	; 0x09
    2452:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
			USARTWriteString ( HexaRead );
    2456:	2d b7       	in	r18, 0x3d	; 61
    2458:	3e b7       	in	r19, 0x3e	; 62
    245a:	26 5f       	subi	r18, 0xF6	; 246
    245c:	3f 4f       	sbci	r19, 0xFF	; 255
    245e:	0f b6       	in	r0, 0x3f	; 63
    2460:	f8 94       	cli
    2462:	3e bf       	out	0x3e, r19	; 62
    2464:	0f be       	out	0x3f, r0	; 63
    2466:	2d bf       	out	0x3d, r18	; 61
    2468:	ce 01       	movw	r24, r28
    246a:	01 96       	adiw	r24, 0x01	; 1
    246c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	{
		sprintf ( sRespondData, "Reading %lu to %lu;\r\n",
								iStart, iStart+iLength );
		USARTWriteString ( sRespondData );

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    2470:	08 94       	sec
    2472:	a1 1c       	adc	r10, r1
    2474:	b1 1c       	adc	r11, r1
    2476:	c1 1c       	adc	r12, r1
    2478:	d1 1c       	adc	r13, r1
    247a:	6a 14       	cp	r6, r10
    247c:	7b 04       	cpc	r7, r11
    247e:	8c 04       	cpc	r8, r12
    2480:	9d 04       	cpc	r9, r13
    2482:	08 f0       	brcs	.+2      	; 0x2486 <TM_ReadMemory+0x16c>
    2484:	bf cf       	rjmp	.-130    	; 0x2404 <TM_ReadMemory+0xea>
		{
			sprintf(HexaRead, "A%lu:   0x%x\r\n", (iStart+iIterator), dataflash_read (iStart+iIterator) );
			USARTWriteString ( HexaRead );
		}

		USARTWriteString ( (char*)"\r\n" );
    2486:	8b e2       	ldi	r24, 0x2B	; 43
    2488:	92 e0       	ldi	r25, 0x02	; 2
    248a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	}
	else USARTWriteString ( (char*)"USAGE:   READ [START ADDRESS] [BYTE COUNT]\r\n" );
}
    248e:	ce 58       	subi	r28, 0x8E	; 142
    2490:	df 4f       	sbci	r29, 0xFF	; 255
    2492:	0f b6       	in	r0, 0x3f	; 63
    2494:	f8 94       	cli
    2496:	de bf       	out	0x3e, r29	; 62
    2498:	0f be       	out	0x3f, r0	; 63
    249a:	cd bf       	out	0x3d, r28	; 61
    249c:	cf 91       	pop	r28
    249e:	df 91       	pop	r29
    24a0:	1f 91       	pop	r17
    24a2:	0f 91       	pop	r16
    24a4:	ff 90       	pop	r15
    24a6:	ef 90       	pop	r14
    24a8:	df 90       	pop	r13
    24aa:	cf 90       	pop	r12
    24ac:	bf 90       	pop	r11
    24ae:	af 90       	pop	r10
    24b0:	9f 90       	pop	r9
    24b2:	8f 90       	pop	r8
    24b4:	7f 90       	pop	r7
    24b6:	6f 90       	pop	r6
    24b8:	5f 90       	pop	r5
    24ba:	4f 90       	pop	r4
    24bc:	3f 90       	pop	r3
    24be:	2f 90       	pop	r2
    24c0:	08 95       	ret
			USARTWriteString ( HexaRead );
		}

		USARTWriteString ( (char*)"\r\n" );
	}
	else USARTWriteString ( (char*)"USAGE:   READ [START ADDRESS] [BYTE COUNT]\r\n" );
    24c2:	8e e2       	ldi	r24, 0x2E	; 46
    24c4:	92 e0       	ldi	r25, 0x02	; 2
    24c6:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    24ca:	e1 cf       	rjmp	.-62     	; 0x248e <TM_ReadMemory+0x174>

000024cc <TM_unprotect>:
}

//__________________________________________________________________________________________________
// File System - Unprotect bocks
void TM_unprotect ( char *sIncomingCommand )
{
    24cc:	cf 93       	push	r28
    24ce:	df 93       	push	r29
	char* cTemp;
	uint32_t iBlock;
	uint32_t iAddress;
//	char HexaRead[40];

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is the command
    24d0:	64 e0       	ldi	r22, 0x04	; 4
    24d2:	72 e0       	ldi	r23, 0x02	; 2
    24d4:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	90 e0       	ldi	r25, 0x00	; 0
    24dc:	64 e0       	ldi	r22, 0x04	; 4
    24de:	72 e0       	ldi	r23, 0x02	; 2
    24e0:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    24e4:	ec 01       	movw	r28, r24

	if ( cTemp != NULL )
    24e6:	00 97       	sbiw	r24, 0x00	; 0
    24e8:	e1 f0       	breq	.+56     	; 0x2522 <TM_unprotect+0x56>
	{
		if ( !strcmp (cTemp, "ALL") )
    24ea:	6b e5       	ldi	r22, 0x5B	; 91
    24ec:	72 e0       	ldi	r23, 0x02	; 2
    24ee:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    24f2:	00 97       	sbiw	r24, 0x00	; 0
    24f4:	89 f0       	breq	.+34     	; 0x2518 <TM_unprotect+0x4c>
		{
			dataflash_unprotect_all (  );
		}
		else
		{
			iBlock = atol (cTemp);						// This is the data
    24f6:	ce 01       	movw	r24, r28
    24f8:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    24fc:	dc 01       	movw	r26, r24
    24fe:	cb 01       	movw	r24, r22
			iAddress = iBlock * (uint32_t)(FLASH_BLOCK4_SIZE);

//			sprintf( HexaRead, "Uprotecting addr:%lu\r\n", iAddress );
//			USARTWriteString ( HexaRead );

			dataflash_unprotect_block4 ( iAddress );
    2500:	5c e0       	ldi	r21, 0x0C	; 12
    2502:	88 0f       	add	r24, r24
    2504:	99 1f       	adc	r25, r25
    2506:	aa 1f       	adc	r26, r26
    2508:	bb 1f       	adc	r27, r27
    250a:	5a 95       	dec	r21
    250c:	d1 f7       	brne	.-12     	; 0x2502 <TM_unprotect+0x36>
    250e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <dataflash_unprotect_block4>
		}
	}
	else USARTWriteString ( (char*)"USAGE:   UPRO [BLOCK# or ALL]\r\n" );


}
    2512:	df 91       	pop	r29
    2514:	cf 91       	pop	r28
    2516:	08 95       	ret

	if ( cTemp != NULL )
	{
		if ( !strcmp (cTemp, "ALL") )
		{
			dataflash_unprotect_all (  );
    2518:	0e 94 18 0e 	call	0x1c30	; 0x1c30 <dataflash_unprotect_all>
		}
	}
	else USARTWriteString ( (char*)"USAGE:   UPRO [BLOCK# or ALL]\r\n" );


}
    251c:	df 91       	pop	r29
    251e:	cf 91       	pop	r28
    2520:	08 95       	ret

			dataflash_unprotect_block4 ( iAddress );

		}
	}
	else USARTWriteString ( (char*)"USAGE:   UPRO [BLOCK# or ALL]\r\n" );
    2522:	8f e5       	ldi	r24, 0x5F	; 95
    2524:	92 e0       	ldi	r25, 0x02	; 2
    2526:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>


}
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	08 95       	ret

00002530 <TM_erase>:
}

//__________________________________________________________________________________________________
// File System - Erase Blocks
void TM_erase ( char *sIncomingCommand )
{
    2530:	ef 92       	push	r14
    2532:	ff 92       	push	r15
    2534:	0f 93       	push	r16
    2536:	1f 93       	push	r17
    2538:	cf 93       	push	r28
    253a:	df 93       	push	r29
	char* cTemp;
	uint32_t iBlock;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is the command
    253c:	64 e0       	ldi	r22, 0x04	; 4
    253e:	72 e0       	ldi	r23, 0x02	; 2
    2540:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    2544:	80 e0       	ldi	r24, 0x00	; 0
    2546:	90 e0       	ldi	r25, 0x00	; 0
    2548:	64 e0       	ldi	r22, 0x04	; 4
    254a:	72 e0       	ldi	r23, 0x02	; 2
    254c:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    2550:	ec 01       	movw	r28, r24

	if ( cTemp != NULL )
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	09 f1       	breq	.+66     	; 0x2598 <TM_erase+0x68>
	{
		if ( !strcmp (cTemp, "ALL") )
    2556:	6b e5       	ldi	r22, 0x5B	; 91
    2558:	72 e0       	ldi	r23, 0x02	; 2
    255a:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    255e:	00 97       	sbiw	r24, 0x00	; 0
    2560:	91 f0       	breq	.+36     	; 0x2586 <TM_erase+0x56>
		{
			dataflash_erase_all ( );
		}
		else
		{
			iBlock = atol (cTemp);						// This is the data
    2562:	ce 01       	movw	r24, r28
    2564:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    2568:	7b 01       	movw	r14, r22
    256a:	8c 01       	movw	r16, r24
			
			dataflash_unprotect_block4 ( (uint16_t)(iBlock) );
    256c:	cb 01       	movw	r24, r22
    256e:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <dataflash_unprotect_block4>

			dataflash_erase_block4 ( (uint16_t)(iBlock) );
    2572:	c7 01       	movw	r24, r14
    2574:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <dataflash_erase_block4>
		}
	}
	else USARTWriteString ( (char*)"USAGE:   FLER [BLOCK# or ALL]\r\n" );

}
    2578:	df 91       	pop	r29
    257a:	cf 91       	pop	r28
    257c:	1f 91       	pop	r17
    257e:	0f 91       	pop	r16
    2580:	ff 90       	pop	r15
    2582:	ef 90       	pop	r14
    2584:	08 95       	ret

	if ( cTemp != NULL )
	{
		if ( !strcmp (cTemp, "ALL") )
		{
			dataflash_erase_all ( );
    2586:	0e 94 d6 0e 	call	0x1dac	; 0x1dac <dataflash_erase_all>
			dataflash_erase_block4 ( (uint16_t)(iBlock) );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   FLER [BLOCK# or ALL]\r\n" );

}
    258a:	df 91       	pop	r29
    258c:	cf 91       	pop	r28
    258e:	1f 91       	pop	r17
    2590:	0f 91       	pop	r16
    2592:	ff 90       	pop	r15
    2594:	ef 90       	pop	r14
    2596:	08 95       	ret
			dataflash_unprotect_block4 ( (uint16_t)(iBlock) );

			dataflash_erase_block4 ( (uint16_t)(iBlock) );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   FLER [BLOCK# or ALL]\r\n" );
    2598:	8f e7       	ldi	r24, 0x7F	; 127
    259a:	92 e0       	ldi	r25, 0x02	; 2
    259c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

}
    25a0:	df 91       	pop	r29
    25a2:	cf 91       	pop	r28
    25a4:	1f 91       	pop	r17
    25a6:	0f 91       	pop	r16
    25a8:	ff 90       	pop	r15
    25aa:	ef 90       	pop	r14
    25ac:	08 95       	ret

000025ae <TM_protect>:
}

//__________________________________________________________________________________________________
// File System - Protect Blocks
void TM_protect ( char *sIncomingCommand )
{
    25ae:	cf 93       	push	r28
    25b0:	df 93       	push	r29
	char* cTemp;
	uint32_t iBlock;
	uint32_t iAddress;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is the command
    25b2:	64 e0       	ldi	r22, 0x04	; 4
    25b4:	72 e0       	ldi	r23, 0x02	; 2
    25b6:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    25ba:	80 e0       	ldi	r24, 0x00	; 0
    25bc:	90 e0       	ldi	r25, 0x00	; 0
    25be:	64 e0       	ldi	r22, 0x04	; 4
    25c0:	72 e0       	ldi	r23, 0x02	; 2
    25c2:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    25c6:	ec 01       	movw	r28, r24

	if ( cTemp != NULL )
    25c8:	00 97       	sbiw	r24, 0x00	; 0
    25ca:	e1 f0       	breq	.+56     	; 0x2604 <TM_protect+0x56>
	{
		if ( !strcmp (cTemp, "ALL") )
    25cc:	6b e5       	ldi	r22, 0x5B	; 91
    25ce:	72 e0       	ldi	r23, 0x02	; 2
    25d0:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    25d4:	00 97       	sbiw	r24, 0x00	; 0
    25d6:	89 f0       	breq	.+34     	; 0x25fa <TM_protect+0x4c>
		{
			dataflash_protect_all (  );
		}
		else
		{
			iBlock = atol (cTemp);						// This is the data
    25d8:	ce 01       	movw	r24, r28
    25da:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    25de:	dc 01       	movw	r26, r24
    25e0:	cb 01       	movw	r24, r22

			// Calculate address
			iAddress = iBlock * (uint32_t)(FLASH_BLOCK4_SIZE);

			dataflash_protect_block4 ( iAddress );
    25e2:	6c e0       	ldi	r22, 0x0C	; 12
    25e4:	88 0f       	add	r24, r24
    25e6:	99 1f       	adc	r25, r25
    25e8:	aa 1f       	adc	r26, r26
    25ea:	bb 1f       	adc	r27, r27
    25ec:	6a 95       	dec	r22
    25ee:	d1 f7       	brne	.-12     	; 0x25e4 <TM_protect+0x36>
    25f0:	0e 94 e0 0c 	call	0x19c0	; 0x19c0 <dataflash_protect_block4>

		}
	}
	else USARTWriteString ( (char*)"USAGE:   PROT [BLOCK# or ALL]\r\n" );

}
    25f4:	df 91       	pop	r29
    25f6:	cf 91       	pop	r28
    25f8:	08 95       	ret

	if ( cTemp != NULL )
	{
		if ( !strcmp (cTemp, "ALL") )
		{
			dataflash_protect_all (  );
    25fa:	0e 94 7a 0e 	call	0x1cf4	; 0x1cf4 <dataflash_protect_all>

		}
	}
	else USARTWriteString ( (char*)"USAGE:   PROT [BLOCK# or ALL]\r\n" );

}
    25fe:	df 91       	pop	r29
    2600:	cf 91       	pop	r28
    2602:	08 95       	ret

			dataflash_protect_block4 ( iAddress );

		}
	}
	else USARTWriteString ( (char*)"USAGE:   PROT [BLOCK# or ALL]\r\n" );
    2604:	8f e9       	ldi	r24, 0x9F	; 159
    2606:	92 e0       	ldi	r25, 0x02	; 2
    2608:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

}
    260c:	df 91       	pop	r29
    260e:	cf 91       	pop	r28
    2610:	08 95       	ret

00002612 <TM_WriteBlocks>:
// This function gets a command as shown below:
// 		WRBL [Starting Block Number - uint16] [number of data-bytes to write]
// The starting address is calculated from the Starting Block. The channel
// is open to reading according to the Number of data-bytes length
void TM_WriteBlocks ( char *sIncomingCommand )
{
    2612:	6f 92       	push	r6
    2614:	7f 92       	push	r7
    2616:	8f 92       	push	r8
    2618:	9f 92       	push	r9
    261a:	af 92       	push	r10
    261c:	bf 92       	push	r11
    261e:	cf 92       	push	r12
    2620:	df 92       	push	r13
    2622:	ef 92       	push	r14
    2624:	ff 92       	push	r15
    2626:	0f 93       	push	r16
    2628:	1f 93       	push	r17
    262a:	cf 93       	push	r28
    262c:	df 93       	push	r29
//	uint32_t iTemp;
	
/////
//char HexaRead[40];

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "WRBL"
    262e:	64 e0       	ldi	r22, 0x04	; 4
    2630:	72 e0       	ldi	r23, 0x02	; 2
    2632:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    2636:	80 e0       	ldi	r24, 0x00	; 0
    2638:	90 e0       	ldi	r25, 0x00	; 0
    263a:	64 e0       	ldi	r22, 0x04	; 4
    263c:	72 e0       	ldi	r23, 0x02	; 2
    263e:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	iStartBlockNumber = atol (cTemp);
    2642:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    2646:	96 2e       	mov	r9, r22
    2648:	87 2e       	mov	r8, r23
    264a:	78 2e       	mov	r7, r24
    264c:	69 2e       	mov	r6, r25
	cTemp = strtok ( NULL, " " );
    264e:	80 e0       	ldi	r24, 0x00	; 0
    2650:	90 e0       	ldi	r25, 0x00	; 0
    2652:	64 e0       	ldi	r22, 0x04	; 4
    2654:	72 e0       	ldi	r23, 0x02	; 2
    2656:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    265a:	8c 01       	movw	r16, r24
	iLengthInBytes = atol (cTemp);
    265c:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    2660:	5b 01       	movw	r10, r22
    2662:	6c 01       	movw	r12, r24

	USARTWriteString ( (char*)"WRBL\r\n" );
    2664:	8f eb       	ldi	r24, 0xBF	; 191
    2666:	92 e0       	ldi	r25, 0x02	; 2
    2668:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if (cTemp!=NULL)
    266c:	01 2b       	or	r16, r17
    266e:	09 f4       	brne	.+2      	; 0x2672 <TM_WriteBlocks+0x60>
    2670:	a5 c0       	rjmp	.+330    	; 0x27bc <TM_WriteBlocks+0x1aa>
/////
//char HexaRead[40];

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "WRBL"
	cTemp = strtok ( NULL, " " );
	iStartBlockNumber = atol (cTemp);
    2672:	e9 2c       	mov	r14, r9
    2674:	f8 2c       	mov	r15, r8
    2676:	07 2d       	mov	r16, r7
    2678:	16 2d       	mov	r17, r6

	if (cTemp!=NULL)
	{
		// Calculate the address - every block is defined as 3 Flash Blocks
		// Which means 3*4KByte*iStart
		iStartAddress = (uint32_t)(FS_FRAME_CAP) * iStartBlockNumber;
    267a:	c8 01       	movw	r24, r16
    267c:	b7 01       	movw	r22, r14
    267e:	20 e0       	ldi	r18, 0x00	; 0
    2680:	30 e3       	ldi	r19, 0x30	; 48
    2682:	40 e0       	ldi	r20, 0x00	; 0
    2684:	50 e0       	ldi	r21, 0x00	; 0
    2686:	0e 94 2b 18 	call	0x3056	; 0x3056 <__mulsi3>
    268a:	3b 01       	movw	r6, r22
    268c:	4c 01       	movw	r8, r24
/////
//sprintf(HexaRead, "A%lu\r\n", iStartAddress );
//USARTWriteString ( HexaRead );

		// Unprotect the appropriate blocks (3 blocks)
		dataflash_unprotect_block4 ( iStartBlockNumber * 3 );
    268e:	d8 01       	movw	r26, r16
    2690:	c7 01       	movw	r24, r14
    2692:	88 0f       	add	r24, r24
    2694:	99 1f       	adc	r25, r25
    2696:	aa 1f       	adc	r26, r26
    2698:	bb 1f       	adc	r27, r27
    269a:	8e 0d       	add	r24, r14
    269c:	9f 1d       	adc	r25, r15
    269e:	a0 1f       	adc	r26, r16
    26a0:	b1 1f       	adc	r27, r17
    26a2:	8c 01       	movw	r16, r24
    26a4:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <dataflash_unprotect_block4>
    26a8:	20 e0       	ldi	r18, 0x00	; 0
    26aa:	30 e0       	ldi	r19, 0x00	; 0
    26ac:	4b ee       	ldi	r20, 0xEB	; 235
    26ae:	51 e0       	ldi	r21, 0x01	; 1
    26b0:	ca 01       	movw	r24, r20
    26b2:	01 97       	sbiw	r24, 0x01	; 1
    26b4:	f1 f7       	brne	.-4      	; 0x26b2 <TM_WriteBlocks+0xa0>
    26b6:	2f 5f       	subi	r18, 0xFF	; 255
    26b8:	3f 4f       	sbci	r19, 0xFF	; 255
    26ba:	83 e0       	ldi	r24, 0x03	; 3
    26bc:	28 3e       	cpi	r18, 0xE8	; 232
    26be:	38 07       	cpc	r19, r24
    26c0:	b9 f7       	brne	.-18     	; 0x26b0 <TM_WriteBlocks+0x9e>
		_delay_ms(100);
		dataflash_unprotect_block4 ( iStartBlockNumber * 3 + 1 );
    26c2:	78 01       	movw	r14, r16
    26c4:	08 94       	sec
    26c6:	e1 1c       	adc	r14, r1
    26c8:	f1 1c       	adc	r15, r1
    26ca:	c7 01       	movw	r24, r14
    26cc:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <dataflash_unprotect_block4>
    26d0:	20 e0       	ldi	r18, 0x00	; 0
    26d2:	30 e0       	ldi	r19, 0x00	; 0
    26d4:	4b ee       	ldi	r20, 0xEB	; 235
    26d6:	51 e0       	ldi	r21, 0x01	; 1
    26d8:	ca 01       	movw	r24, r20
    26da:	01 97       	sbiw	r24, 0x01	; 1
    26dc:	f1 f7       	brne	.-4      	; 0x26da <TM_WriteBlocks+0xc8>
    26de:	2f 5f       	subi	r18, 0xFF	; 255
    26e0:	3f 4f       	sbci	r19, 0xFF	; 255
    26e2:	83 e0       	ldi	r24, 0x03	; 3
    26e4:	28 3e       	cpi	r18, 0xE8	; 232
    26e6:	38 07       	cpc	r19, r24
    26e8:	b9 f7       	brne	.-18     	; 0x26d8 <TM_WriteBlocks+0xc6>
		_delay_ms(100);
		dataflash_unprotect_block4 ( iStartBlockNumber * 3 + 2 );
    26ea:	e8 01       	movw	r28, r16
    26ec:	22 96       	adiw	r28, 0x02	; 2
    26ee:	ce 01       	movw	r24, r28
    26f0:	0e 94 2f 0d 	call	0x1a5e	; 0x1a5e <dataflash_unprotect_block4>
    26f4:	20 e0       	ldi	r18, 0x00	; 0
    26f6:	30 e0       	ldi	r19, 0x00	; 0
    26f8:	4b ee       	ldi	r20, 0xEB	; 235
    26fa:	51 e0       	ldi	r21, 0x01	; 1
    26fc:	ca 01       	movw	r24, r20
    26fe:	01 97       	sbiw	r24, 0x01	; 1
    2700:	f1 f7       	brne	.-4      	; 0x26fe <TM_WriteBlocks+0xec>
    2702:	2f 5f       	subi	r18, 0xFF	; 255
    2704:	3f 4f       	sbci	r19, 0xFF	; 255
    2706:	83 e0       	ldi	r24, 0x03	; 3
    2708:	28 3e       	cpi	r18, 0xE8	; 232
    270a:	38 07       	cpc	r19, r24
    270c:	b9 f7       	brne	.-18     	; 0x26fc <TM_WriteBlocks+0xea>
		_delay_ms(100);

		// Erase the appropriate blocks (3 blocks)
		dataflash_erase_block4 ( iStartBlockNumber * 3 );
    270e:	c8 01       	movw	r24, r16
    2710:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <dataflash_erase_block4>
    2714:	20 e0       	ldi	r18, 0x00	; 0
    2716:	30 e0       	ldi	r19, 0x00	; 0
    2718:	4b ee       	ldi	r20, 0xEB	; 235
    271a:	51 e0       	ldi	r21, 0x01	; 1
    271c:	ca 01       	movw	r24, r20
    271e:	01 97       	sbiw	r24, 0x01	; 1
    2720:	f1 f7       	brne	.-4      	; 0x271e <TM_WriteBlocks+0x10c>
    2722:	2f 5f       	subi	r18, 0xFF	; 255
    2724:	3f 4f       	sbci	r19, 0xFF	; 255
    2726:	83 e0       	ldi	r24, 0x03	; 3
    2728:	28 3e       	cpi	r18, 0xE8	; 232
    272a:	38 07       	cpc	r19, r24
    272c:	b9 f7       	brne	.-18     	; 0x271c <TM_WriteBlocks+0x10a>
		_delay_ms(100);
		dataflash_erase_block4 ( iStartBlockNumber * 3 + 1 );
    272e:	c7 01       	movw	r24, r14
    2730:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <dataflash_erase_block4>
    2734:	20 e0       	ldi	r18, 0x00	; 0
    2736:	30 e0       	ldi	r19, 0x00	; 0
    2738:	4b ee       	ldi	r20, 0xEB	; 235
    273a:	51 e0       	ldi	r21, 0x01	; 1
    273c:	ca 01       	movw	r24, r20
    273e:	01 97       	sbiw	r24, 0x01	; 1
    2740:	f1 f7       	brne	.-4      	; 0x273e <TM_WriteBlocks+0x12c>
    2742:	2f 5f       	subi	r18, 0xFF	; 255
    2744:	3f 4f       	sbci	r19, 0xFF	; 255
    2746:	83 e0       	ldi	r24, 0x03	; 3
    2748:	28 3e       	cpi	r18, 0xE8	; 232
    274a:	38 07       	cpc	r19, r24
    274c:	b9 f7       	brne	.-18     	; 0x273c <TM_WriteBlocks+0x12a>
		_delay_ms(100);
		dataflash_erase_block4 ( iStartBlockNumber * 3 + 2 );
    274e:	ce 01       	movw	r24, r28
    2750:	0e 94 7e 0d 	call	0x1afc	; 0x1afc <dataflash_erase_block4>
    2754:	20 e0       	ldi	r18, 0x00	; 0
    2756:	30 e0       	ldi	r19, 0x00	; 0
    2758:	4b ee       	ldi	r20, 0xEB	; 235
    275a:	51 e0       	ldi	r21, 0x01	; 1
    275c:	ca 01       	movw	r24, r20
    275e:	01 97       	sbiw	r24, 0x01	; 1
    2760:	f1 f7       	brne	.-4      	; 0x275e <TM_WriteBlocks+0x14c>
    2762:	2f 5f       	subi	r18, 0xFF	; 255
    2764:	3f 4f       	sbci	r19, 0xFF	; 255
    2766:	83 e0       	ldi	r24, 0x03	; 3
    2768:	28 3e       	cpi	r18, 0xE8	; 232
    276a:	38 07       	cpc	r19, r24
    276c:	b9 f7       	brne	.-18     	; 0x275c <TM_WriteBlocks+0x14a>
    276e:	ee 24       	eor	r14, r14
    2770:	ff 24       	eor	r15, r15
    2772:	87 01       	movw	r16, r14



		for (iIterator=0; iIterator<=iLengthInBytes; iIterator ++ )
		{
			dataflash_write ( iStartAddress+iIterator, USARTReadChar() );
    2774:	0e 94 36 06 	call	0xc6c	; 0xc6c <USARTReadChar>
    2778:	48 2f       	mov	r20, r24
    277a:	c8 01       	movw	r24, r16
    277c:	b7 01       	movw	r22, r14
    277e:	66 0d       	add	r22, r6
    2780:	77 1d       	adc	r23, r7
    2782:	88 1d       	adc	r24, r8
    2784:	99 1d       	adc	r25, r9
    2786:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <dataflash_write>
		dataflash_erase_block4 ( iStartBlockNumber * 3 + 2 );
		_delay_ms(100);



		for (iIterator=0; iIterator<=iLengthInBytes; iIterator ++ )
    278a:	08 94       	sec
    278c:	e1 1c       	adc	r14, r1
    278e:	f1 1c       	adc	r15, r1
    2790:	01 1d       	adc	r16, r1
    2792:	11 1d       	adc	r17, r1
    2794:	ae 14       	cp	r10, r14
    2796:	bf 04       	cpc	r11, r15
    2798:	c0 06       	cpc	r12, r16
    279a:	d1 06       	cpc	r13, r17
    279c:	58 f7       	brcc	.-42     	; 0x2774 <TM_WriteBlocks+0x162>
			dataflash_write ( iStartAddress+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRBL [START BLOCK] [BYTE COUNT]\r\n" );

}
    279e:	df 91       	pop	r29
    27a0:	cf 91       	pop	r28
    27a2:	1f 91       	pop	r17
    27a4:	0f 91       	pop	r16
    27a6:	ff 90       	pop	r15
    27a8:	ef 90       	pop	r14
    27aa:	df 90       	pop	r13
    27ac:	cf 90       	pop	r12
    27ae:	bf 90       	pop	r11
    27b0:	af 90       	pop	r10
    27b2:	9f 90       	pop	r9
    27b4:	8f 90       	pop	r8
    27b6:	7f 90       	pop	r7
    27b8:	6f 90       	pop	r6
    27ba:	08 95       	ret
		for (iIterator=0; iIterator<=iLengthInBytes; iIterator ++ )
		{
			dataflash_write ( iStartAddress+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRBL [START BLOCK] [BYTE COUNT]\r\n" );
    27bc:	86 ec       	ldi	r24, 0xC6	; 198
    27be:	92 e0       	ldi	r25, 0x02	; 2
    27c0:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    27c4:	ec cf       	rjmp	.-40     	; 0x279e <TM_WriteBlocks+0x18c>

000027c6 <TM_WriteMemory>:


//__________________________________________________________________________________________________
// File System - Write Memory
void TM_WriteMemory ( char *sIncomingCommand )
{
    27c6:	6f 92       	push	r6
    27c8:	7f 92       	push	r7
    27ca:	8f 92       	push	r8
    27cc:	9f 92       	push	r9
    27ce:	af 92       	push	r10
    27d0:	bf 92       	push	r11
    27d2:	cf 92       	push	r12
    27d4:	df 92       	push	r13
    27d6:	ef 92       	push	r14
    27d8:	ff 92       	push	r15
    27da:	0f 93       	push	r16
    27dc:	1f 93       	push	r17
	uint32_t iIterator;
	char* cTemp;
	uint32_t iStart;
	uint32_t iLength;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "WRIT"
    27de:	64 e0       	ldi	r22, 0x04	; 4
    27e0:	72 e0       	ldi	r23, 0x02	; 2
    27e2:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    27e6:	80 e0       	ldi	r24, 0x00	; 0
    27e8:	90 e0       	ldi	r25, 0x00	; 0
    27ea:	64 e0       	ldi	r22, 0x04	; 4
    27ec:	72 e0       	ldi	r23, 0x02	; 2
    27ee:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	iStart = atol (cTemp);
    27f2:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    27f6:	3b 01       	movw	r6, r22
    27f8:	4c 01       	movw	r8, r24
	cTemp = strtok ( NULL, " " );
    27fa:	80 e0       	ldi	r24, 0x00	; 0
    27fc:	90 e0       	ldi	r25, 0x00	; 0
    27fe:	64 e0       	ldi	r22, 0x04	; 4
    2800:	72 e0       	ldi	r23, 0x02	; 2
    2802:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    2806:	8c 01       	movw	r16, r24
	iLength = atol (cTemp);
    2808:	0e 94 68 18 	call	0x30d0	; 0x30d0 <atol>
    280c:	5b 01       	movw	r10, r22
    280e:	6c 01       	movw	r12, r24

	if (cTemp!=NULL)
    2810:	01 2b       	or	r16, r17
    2812:	29 f1       	breq	.+74     	; 0x285e <TM_WriteMemory+0x98>
    2814:	ee 24       	eor	r14, r14
    2816:	ff 24       	eor	r15, r15
    2818:	87 01       	movw	r16, r14
		//						iStart, iStart+iLength );
		//USARTWriteString ( sRespondData );

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
		{
			dataflash_write ( iStart+iIterator, USARTReadChar() );
    281a:	0e 94 36 06 	call	0xc6c	; 0xc6c <USARTReadChar>
    281e:	48 2f       	mov	r20, r24
    2820:	c4 01       	movw	r24, r8
    2822:	b3 01       	movw	r22, r6
    2824:	6e 0d       	add	r22, r14
    2826:	7f 1d       	adc	r23, r15
    2828:	80 1f       	adc	r24, r16
    282a:	91 1f       	adc	r25, r17
    282c:	0e 94 cd 0d 	call	0x1b9a	; 0x1b9a <dataflash_write>
	{
		//sprintf ( sRespondData, "Writing %d-%d",
		//						iStart, iStart+iLength );
		//USARTWriteString ( sRespondData );

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    2830:	08 94       	sec
    2832:	e1 1c       	adc	r14, r1
    2834:	f1 1c       	adc	r15, r1
    2836:	01 1d       	adc	r16, r1
    2838:	11 1d       	adc	r17, r1
    283a:	ae 14       	cp	r10, r14
    283c:	bf 04       	cpc	r11, r15
    283e:	c0 06       	cpc	r12, r16
    2840:	d1 06       	cpc	r13, r17
    2842:	58 f7       	brcc	.-42     	; 0x281a <TM_WriteMemory+0x54>
		{
			dataflash_write ( iStart+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRIT [START ADDRESS] [BYTE COUNT]\r\n" );
}
    2844:	1f 91       	pop	r17
    2846:	0f 91       	pop	r16
    2848:	ff 90       	pop	r15
    284a:	ef 90       	pop	r14
    284c:	df 90       	pop	r13
    284e:	cf 90       	pop	r12
    2850:	bf 90       	pop	r11
    2852:	af 90       	pop	r10
    2854:	9f 90       	pop	r9
    2856:	8f 90       	pop	r8
    2858:	7f 90       	pop	r7
    285a:	6f 90       	pop	r6
    285c:	08 95       	ret
		for (iIterator=0; iIterator<=iLength; iIterator ++ )
		{
			dataflash_write ( iStart+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRIT [START ADDRESS] [BYTE COUNT]\r\n" );
    285e:	81 ef       	ldi	r24, 0xF1	; 241
    2860:	92 e0       	ldi	r25, 0x02	; 2
    2862:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2866:	ee cf       	rjmp	.-36     	; 0x2844 <TM_WriteMemory+0x7e>

00002868 <TM_FetchCommand>:
}

//__________________________________________________________________________________________________
// File System - Fetch New Command
void TM_FetchCommand ( char *sIncomingCommand )
{
    2868:	ef 92       	push	r14
    286a:	ff 92       	push	r15
    286c:	1f 93       	push	r17
    286e:	cf 93       	push	r28
    2870:	df 93       	push	r29
    2872:	7c 01       	movw	r14, r24
	int iPlace;
	char data;

	USARTWriteString ( (char*)">>" );
    2874:	8e e1       	ldi	r24, 0x1E	; 30
    2876:	93 e0       	ldi	r25, 0x03	; 3
    2878:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
    287c:	0e 94 36 06 	call	0xc6c	; 0xc6c <USARTReadChar>
    2880:	90 e0       	ldi	r25, 0x00	; 0
    2882:	0e 94 8f 18 	call	0x311e	; 0x311e <toupper>
    2886:	18 2f       	mov	r17, r24
	USARTWriteChar ( data );
    2888:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    288c:	1a 33       	cpi	r17, 0x3A	; 58
    288e:	31 f1       	breq	.+76     	; 0x28dc <TM_FetchCommand+0x74>
    2890:	c0 e0       	ldi	r28, 0x00	; 0
    2892:	d0 e0       	ldi	r29, 0x00	; 0
    2894:	03 c0       	rjmp	.+6      	; 0x289c <TM_FetchCommand+0x34>
    2896:	cf 33       	cpi	r28, 0x3F	; 63
    2898:	d1 05       	cpc	r29, r1
    289a:	e9 f0       	breq	.+58     	; 0x28d6 <TM_FetchCommand+0x6e>
	{
		sIncomingCommand[iPlace++] = data;
    289c:	f7 01       	movw	r30, r14
    289e:	ec 0f       	add	r30, r28
    28a0:	fd 1f       	adc	r31, r29
    28a2:	10 83       	st	Z, r17
    28a4:	21 96       	adiw	r28, 0x01	; 1
		data=toupper ( USARTReadChar() );
    28a6:	0e 94 36 06 	call	0xc6c	; 0xc6c <USARTReadChar>
    28aa:	90 e0       	ldi	r25, 0x00	; 0
    28ac:	0e 94 8f 18 	call	0x311e	; 0x311e <toupper>
    28b0:	18 2f       	mov	r17, r24
		USARTWriteChar ( data );
    28b2:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    28b6:	1a 33       	cpi	r17, 0x3A	; 58
    28b8:	71 f7       	brne	.-36     	; 0x2896 <TM_FetchCommand+0x2e>
    28ba:	fe 01       	movw	r30, r28
		sIncomingCommand[iPlace++] = data;
		data=toupper ( USARTReadChar() );
		USARTWriteChar ( data );
	}

	sIncomingCommand [iPlace] = '\0';
    28bc:	ee 0d       	add	r30, r14
    28be:	ff 1d       	adc	r31, r15
    28c0:	10 82       	st	Z, r1
	USARTWriteString ( (char*)"\r\n" );
    28c2:	8b e2       	ldi	r24, 0x2B	; 43
    28c4:	92 e0       	ldi	r25, 0x02	; 2
    28c6:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

}
    28ca:	df 91       	pop	r29
    28cc:	cf 91       	pop	r28
    28ce:	1f 91       	pop	r17
    28d0:	ff 90       	pop	r15
    28d2:	ef 90       	pop	r14
    28d4:	08 95       	ret
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    28d6:	ef e3       	ldi	r30, 0x3F	; 63
    28d8:	f0 e0       	ldi	r31, 0x00	; 0
    28da:	f0 cf       	rjmp	.-32     	; 0x28bc <TM_FetchCommand+0x54>
    28dc:	e0 e0       	ldi	r30, 0x00	; 0
    28de:	f0 e0       	ldi	r31, 0x00	; 0
    28e0:	ed cf       	rjmp	.-38     	; 0x28bc <TM_FetchCommand+0x54>

000028e2 <TM_FlashStatus>:
}

//__________________________________________________________________________________________________
// File System - Read flash status
void TM_FlashStatus ( char *sIncomingCommand )
{
    28e2:	1f 93       	push	r17
    28e4:	cf 93       	push	r28
    28e6:	df 93       	push	r29
	uint8_t stat_flash = dataflash_read_status ( );
    28e8:	0e 94 ce 0c 	call	0x199c	; 0x199c <dataflash_read_status>
    28ec:	18 2f       	mov	r17, r24

	if (stat_flash&FLASH_READY)
    28ee:	c8 2f       	mov	r28, r24
    28f0:	d0 e0       	ldi	r29, 0x00	; 0
    28f2:	80 ff       	sbrs	r24, 0
    28f4:	29 c0       	rjmp	.+82     	; 0x2948 <TM_FlashStatus+0x66>
		USARTWriteString ( (char*)"\r\n#0 NOT ready (1)" );
    28f6:	81 e2       	ldi	r24, 0x21	; 33
    28f8:	93 e0       	ldi	r25, 0x03	; 3
    28fa:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#0 ready (0)" );

	if (stat_flash&FLASH_WE)
    28fe:	c1 ff       	sbrs	r28, 1
    2900:	29 c0       	rjmp	.+82     	; 0x2954 <TM_FlashStatus+0x72>
		USARTWriteString ( (char*)"\r\n#1 write enabled (1)" );
    2902:	83 e4       	ldi	r24, 0x43	; 67
    2904:	93 e0       	ldi	r25, 0x03	; 3
    2906:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		USARTWriteString ( (char*)"\r\n#23 write protected (11)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		USARTWriteString ( (char*)"\r\n#23 partly write protected (01)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    290a:	ce 01       	movw	r24, r28
    290c:	8c 70       	andi	r24, 0x0C	; 12
    290e:	90 70       	andi	r25, 0x00	; 0
    2910:	89 2b       	or	r24, r25
    2912:	49 f5       	brne	.+82     	; 0x2966 <TM_FlashStatus+0x84>
		USARTWriteString ( (char*)"\r\n#23 NOT write protected (00)" );
    2914:	85 e7       	ldi	r24, 0x75	; 117
    2916:	93 e0       	ldi	r25, 0x03	; 3
    2918:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#23 protection unknown (10 reserved)" );

	if (stat_flash&FLASH_WP_PIN)
    291c:	c4 ff       	sbrs	r28, 4
    291e:	29 c0       	rjmp	.+82     	; 0x2972 <TM_FlashStatus+0x90>
		USARTWriteString ( (char*)"\r\n#4 NOT write protected (1)" );
    2920:	8b eb       	ldi	r24, 0xBB	; 187
    2922:	93 e0       	ldi	r25, 0x03	; 3
    2924:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#4 write protected (0)" );

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    2928:	c5 ff       	sbrs	r28, 5
    292a:	29 c0       	rjmp	.+82     	; 0x297e <TM_FlashStatus+0x9c>
		USARTWriteString ( (char*)"\r\n#5 failed program (erase) (1)" );
    292c:	81 ef       	ldi	r24, 0xF1	; 241
    292e:	93 e0       	ldi	r25, 0x03	; 3
    2930:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#5 program (erase) was successfull (0)" );

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    2934:	17 fd       	sbrc	r17, 7
    2936:	29 c0       	rjmp	.+82     	; 0x298a <TM_FlashStatus+0xa8>
		USARTWriteString ( (char*)"\r\n#7 sector protection registers LOCKED (1)\r\n\r\n" );
	else
		USARTWriteString ( (char*)"\r\n#7 sector protection registers UNLOCKED (0)\r\n\r\n" );
    2938:	8a e6       	ldi	r24, 0x6A	; 106
    293a:	94 e0       	ldi	r25, 0x04	; 4
    293c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

}
    2940:	df 91       	pop	r29
    2942:	cf 91       	pop	r28
    2944:	1f 91       	pop	r17
    2946:	08 95       	ret
	uint8_t stat_flash = dataflash_read_status ( );

	if (stat_flash&FLASH_READY)
		USARTWriteString ( (char*)"\r\n#0 NOT ready (1)" );
	else
		USARTWriteString ( (char*)"\r\n#0 ready (0)" );
    2948:	84 e3       	ldi	r24, 0x34	; 52
    294a:	93 e0       	ldi	r25, 0x03	; 3
    294c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if (stat_flash&FLASH_WE)
    2950:	c1 fd       	sbrc	r28, 1
    2952:	d7 cf       	rjmp	.-82     	; 0x2902 <TM_FlashStatus+0x20>
		USARTWriteString ( (char*)"\r\n#1 write enabled (1)" );
	else
		USARTWriteString ( (char*)"\r\n#1 NOT write enabled (0)" );
    2954:	8a e5       	ldi	r24, 0x5A	; 90
    2956:	93 e0       	ldi	r25, 0x03	; 3
    2958:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		USARTWriteString ( (char*)"\r\n#23 write protected (11)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		USARTWriteString ( (char*)"\r\n#23 partly write protected (01)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    295c:	ce 01       	movw	r24, r28
    295e:	8c 70       	andi	r24, 0x0C	; 12
    2960:	90 70       	andi	r25, 0x00	; 0
    2962:	89 2b       	or	r24, r25
    2964:	b9 f2       	breq	.-82     	; 0x2914 <TM_FlashStatus+0x32>
		USARTWriteString ( (char*)"\r\n#23 NOT write protected (00)" );
	else
		USARTWriteString ( (char*)"\r\n#23 protection unknown (10 reserved)" );
    2966:	84 e9       	ldi	r24, 0x94	; 148
    2968:	93 e0       	ldi	r25, 0x03	; 3
    296a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if (stat_flash&FLASH_WP_PIN)
    296e:	c4 fd       	sbrc	r28, 4
    2970:	d7 cf       	rjmp	.-82     	; 0x2920 <TM_FlashStatus+0x3e>
		USARTWriteString ( (char*)"\r\n#4 NOT write protected (1)" );
	else
		USARTWriteString ( (char*)"\r\n#4 write protected (0)" );
    2972:	88 ed       	ldi	r24, 0xD8	; 216
    2974:	93 e0       	ldi	r25, 0x03	; 3
    2976:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    297a:	c5 fd       	sbrc	r28, 5
    297c:	d7 cf       	rjmp	.-82     	; 0x292c <TM_FlashStatus+0x4a>
		USARTWriteString ( (char*)"\r\n#5 failed program (erase) (1)" );
	else
		USARTWriteString ( (char*)"\r\n#5 program (erase) was successfull (0)" );
    297e:	81 e1       	ldi	r24, 0x11	; 17
    2980:	94 e0       	ldi	r25, 0x04	; 4
    2982:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    2986:	17 ff       	sbrs	r17, 7
    2988:	d7 cf       	rjmp	.-82     	; 0x2938 <TM_FlashStatus+0x56>
		USARTWriteString ( (char*)"\r\n#7 sector protection registers LOCKED (1)\r\n\r\n" );
    298a:	8a e3       	ldi	r24, 0x3A	; 58
    298c:	94 e0       	ldi	r25, 0x04	; 4
    298e:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#7 sector protection registers UNLOCKED (0)\r\n\r\n" );

}
    2992:	df 91       	pop	r29
    2994:	cf 91       	pop	r28
    2996:	1f 91       	pop	r17
    2998:	08 95       	ret

0000299a <TM_Spi>:
}

//__________________________________________________________________________________________________
// File System - Spi Read/Write
void TM_Spi ( char *sIncomingCommand )
{
    299a:	ff 92       	push	r15
    299c:	0f 93       	push	r16
    299e:	1f 93       	push	r17
    29a0:	df 93       	push	r29
    29a2:	cf 93       	push	r28
    29a4:	cd b7       	in	r28, 0x3d	; 61
    29a6:	de b7       	in	r29, 0x3e	; 62
    29a8:	a8 97       	sbiw	r28, 0x28	; 40
    29aa:	0f b6       	in	r0, 0x3f	; 63
    29ac:	f8 94       	cli
    29ae:	de bf       	out	0x3e, r29	; 62
    29b0:	0f be       	out	0x3f, r0	; 63
    29b2:	cd bf       	out	0x3d, r28	; 61
	char* cTemp;
	uint8_t Spi_t;
	char HexaRead[40];
	char data;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "SPI"
    29b4:	64 e0       	ldi	r22, 0x04	; 4
    29b6:	72 e0       	ldi	r23, 0x02	; 2
    29b8:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
	cTemp = strtok ( NULL, " " );
    29bc:	80 e0       	ldi	r24, 0x00	; 0
    29be:	90 e0       	ldi	r25, 0x00	; 0
    29c0:	64 e0       	ldi	r22, 0x04	; 4
    29c2:	72 e0       	ldi	r23, 0x02	; 2
    29c4:	0e 94 97 18 	call	0x312e	; 0x312e <strtok>
    29c8:	8c 01       	movw	r16, r24
	Spi_t = atoi (cTemp);						// This is the data
    29ca:	0e 94 4a 18 	call	0x3094	; 0x3094 <atoi>
    29ce:	f8 2e       	mov	r15, r24


	if (cTemp!=NULL)
    29d0:	01 2b       	or	r16, r17
    29d2:	09 f4       	brne	.+2      	; 0x29d6 <TM_Spi+0x3c>
    29d4:	50 c0       	rjmp	.+160    	; 0x2a76 <TM_Spi+0xdc>
	{
		sprintf(HexaRead, "\r\nTransferring 0x%x", Spi_t );
    29d6:	00 d0       	rcall	.+0      	; 0x29d8 <TM_Spi+0x3e>
    29d8:	00 d0       	rcall	.+0      	; 0x29da <TM_Spi+0x40>
    29da:	00 d0       	rcall	.+0      	; 0x29dc <TM_Spi+0x42>
    29dc:	ed b7       	in	r30, 0x3d	; 61
    29de:	fe b7       	in	r31, 0x3e	; 62
    29e0:	31 96       	adiw	r30, 0x01	; 1
    29e2:	8e 01       	movw	r16, r28
    29e4:	0f 5f       	subi	r16, 0xFF	; 255
    29e6:	1f 4f       	sbci	r17, 0xFF	; 255
    29e8:	ad b7       	in	r26, 0x3d	; 61
    29ea:	be b7       	in	r27, 0x3e	; 62
    29ec:	12 96       	adiw	r26, 0x02	; 2
    29ee:	1c 93       	st	X, r17
    29f0:	0e 93       	st	-X, r16
    29f2:	11 97       	sbiw	r26, 0x01	; 1
    29f4:	8c e9       	ldi	r24, 0x9C	; 156
    29f6:	94 e0       	ldi	r25, 0x04	; 4
    29f8:	93 83       	std	Z+3, r25	; 0x03
    29fa:	82 83       	std	Z+2, r24	; 0x02
    29fc:	f4 82       	std	Z+4, r15	; 0x04
    29fe:	15 82       	std	Z+5, r1	; 0x05
    2a00:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
		USARTWriteString ( HexaRead );
    2a04:	8d b7       	in	r24, 0x3d	; 61
    2a06:	9e b7       	in	r25, 0x3e	; 62
    2a08:	06 96       	adiw	r24, 0x06	; 6
    2a0a:	0f b6       	in	r0, 0x3f	; 63
    2a0c:	f8 94       	cli
    2a0e:	9e bf       	out	0x3e, r25	; 62
    2a10:	0f be       	out	0x3f, r0	; 63
    2a12:	8d bf       	out	0x3d, r24	; 61
    2a14:	c8 01       	movw	r24, r16
    2a16:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

		data = spi_transfer(Spi_t);
    2a1a:	8f 2d       	mov	r24, r15
    2a1c:	0e 94 79 0c 	call	0x18f2	; 0x18f2 <spi_transfer>

		sprintf(HexaRead, "\r\nRecieved 0x%x\r\n", data );
    2a20:	00 d0       	rcall	.+0      	; 0x2a22 <TM_Spi+0x88>
    2a22:	00 d0       	rcall	.+0      	; 0x2a24 <TM_Spi+0x8a>
    2a24:	00 d0       	rcall	.+0      	; 0x2a26 <TM_Spi+0x8c>
    2a26:	ed b7       	in	r30, 0x3d	; 61
    2a28:	fe b7       	in	r31, 0x3e	; 62
    2a2a:	31 96       	adiw	r30, 0x01	; 1
    2a2c:	ad b7       	in	r26, 0x3d	; 61
    2a2e:	be b7       	in	r27, 0x3e	; 62
    2a30:	12 96       	adiw	r26, 0x02	; 2
    2a32:	1c 93       	st	X, r17
    2a34:	0e 93       	st	-X, r16
    2a36:	11 97       	sbiw	r26, 0x01	; 1
    2a38:	20 eb       	ldi	r18, 0xB0	; 176
    2a3a:	34 e0       	ldi	r19, 0x04	; 4
    2a3c:	33 83       	std	Z+3, r19	; 0x03
    2a3e:	22 83       	std	Z+2, r18	; 0x02
    2a40:	84 83       	std	Z+4, r24	; 0x04
    2a42:	15 82       	std	Z+5, r1	; 0x05
    2a44:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
		USARTWriteString ( HexaRead );
    2a48:	8d b7       	in	r24, 0x3d	; 61
    2a4a:	9e b7       	in	r25, 0x3e	; 62
    2a4c:	06 96       	adiw	r24, 0x06	; 6
    2a4e:	0f b6       	in	r0, 0x3f	; 63
    2a50:	f8 94       	cli
    2a52:	9e bf       	out	0x3e, r25	; 62
    2a54:	0f be       	out	0x3f, r0	; 63
    2a56:	8d bf       	out	0x3d, r24	; 61
    2a58:	c8 01       	movw	r24, r16
    2a5a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	}
	else USARTWriteString ( (char*)"USAGE:   SPI [DATA_8BIT]\r\n" );
}
    2a5e:	a8 96       	adiw	r28, 0x28	; 40
    2a60:	0f b6       	in	r0, 0x3f	; 63
    2a62:	f8 94       	cli
    2a64:	de bf       	out	0x3e, r29	; 62
    2a66:	0f be       	out	0x3f, r0	; 63
    2a68:	cd bf       	out	0x3d, r28	; 61
    2a6a:	cf 91       	pop	r28
    2a6c:	df 91       	pop	r29
    2a6e:	1f 91       	pop	r17
    2a70:	0f 91       	pop	r16
    2a72:	ff 90       	pop	r15
    2a74:	08 95       	ret

		sprintf(HexaRead, "\r\nRecieved 0x%x\r\n", data );
		USARTWriteString ( HexaRead );

	}
	else USARTWriteString ( (char*)"USAGE:   SPI [DATA_8BIT]\r\n" );
    2a76:	82 ec       	ldi	r24, 0xC2	; 194
    2a78:	94 e0       	ldi	r25, 0x04	; 4
    2a7a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2a7e:	ef cf       	rjmp	.-34     	; 0x2a5e <TM_Spi+0xc4>

00002a80 <TM_Identify>:
}

//__________________________________________________________________________________________________
// File System - Stop reading from memory
void TM_Identify ( void )
{
    2a80:	0f 93       	push	r16
    2a82:	1f 93       	push	r17
    2a84:	df 93       	push	r29
    2a86:	cf 93       	push	r28
    2a88:	cd b7       	in	r28, 0x3d	; 61
    2a8a:	de b7       	in	r29, 0x3e	; 62
    2a8c:	c4 54       	subi	r28, 0x44	; 68
    2a8e:	d0 40       	sbci	r29, 0x00	; 0
    2a90:	0f b6       	in	r0, 0x3f	; 63
    2a92:	f8 94       	cli
    2a94:	de bf       	out	0x3e, r29	; 62
    2a96:	0f be       	out	0x3f, r0	; 63
    2a98:	cd bf       	out	0x3d, r28	; 61
	char ManID, DevID1, DevID2, ExData;
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "ANIBIKE VER:%03d.00;"	// The project
    2a9a:	8d b7       	in	r24, 0x3d	; 61
    2a9c:	9e b7       	in	r25, 0x3e	; 62
    2a9e:	0e 97       	sbiw	r24, 0x0e	; 14
    2aa0:	0f b6       	in	r0, 0x3f	; 63
    2aa2:	f8 94       	cli
    2aa4:	9e bf       	out	0x3e, r25	; 62
    2aa6:	0f be       	out	0x3f, r0	; 63
    2aa8:	8d bf       	out	0x3d, r24	; 61
    2aaa:	ed b7       	in	r30, 0x3d	; 61
    2aac:	fe b7       	in	r31, 0x3e	; 62
    2aae:	31 96       	adiw	r30, 0x01	; 1
    2ab0:	8e 01       	movw	r16, r28
    2ab2:	0b 5f       	subi	r16, 0xFB	; 251
    2ab4:	1f 4f       	sbci	r17, 0xFF	; 255
    2ab6:	ad b7       	in	r26, 0x3d	; 61
    2ab8:	be b7       	in	r27, 0x3e	; 62
    2aba:	12 96       	adiw	r26, 0x02	; 2
    2abc:	1c 93       	st	X, r17
    2abe:	0e 93       	st	-X, r16
    2ac0:	11 97       	sbiw	r26, 0x01	; 1
    2ac2:	8d ed       	ldi	r24, 0xDD	; 221
    2ac4:	94 e0       	ldi	r25, 0x04	; 4
    2ac6:	93 83       	std	Z+3, r25	; 0x03
    2ac8:	82 83       	std	Z+2, r24	; 0x02
    2aca:	82 e0       	ldi	r24, 0x02	; 2
    2acc:	90 e0       	ldi	r25, 0x00	; 0
    2ace:	95 83       	std	Z+5, r25	; 0x05
    2ad0:	84 83       	std	Z+4, r24	; 0x04
    2ad2:	20 e2       	ldi	r18, 0x20	; 32
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	37 83       	std	Z+7, r19	; 0x07
    2ad8:	26 83       	std	Z+6, r18	; 0x06
    2ada:	84 ec       	ldi	r24, 0xC4	; 196
    2adc:	90 e0       	ldi	r25, 0x00	; 0
    2ade:	91 87       	std	Z+9, r25	; 0x09
    2ae0:	80 87       	std	Z+8, r24	; 0x08
    2ae2:	33 87       	std	Z+11, r19	; 0x0b
    2ae4:	22 87       	std	Z+10, r18	; 0x0a
    2ae6:	81 e0       	ldi	r24, 0x01	; 1
    2ae8:	90 e0       	ldi	r25, 0x00	; 0
    2aea:	95 87       	std	Z+13, r25	; 0x0d
    2aec:	84 87       	std	Z+12, r24	; 0x0c
    2aee:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
							ANIBIKE_VER,
							ANIBIKE_MEMORY_SIZE,
							ANIBIKE_CPU_SPEED,
							ANIBIKE_NUM_LEDS,
							ANIBIKE_IS_RGB );
	USARTWriteString ( sRespondData );
    2af2:	8d b7       	in	r24, 0x3d	; 61
    2af4:	9e b7       	in	r25, 0x3e	; 62
    2af6:	0e 96       	adiw	r24, 0x0e	; 14
    2af8:	0f b6       	in	r0, 0x3f	; 63
    2afa:	f8 94       	cli
    2afc:	9e bf       	out	0x3e, r25	; 62
    2afe:	0f be       	out	0x3f, r0	; 63
    2b00:	8d bf       	out	0x3d, r24	; 61
    2b02:	c8 01       	movw	r24, r16
    2b04:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	USARTWriteString ( (char*)"\r\nFlashInfo:\r\n" );
    2b08:	81 e2       	ldi	r24, 0x21	; 33
    2b0a:	95 e0       	ldi	r25, 0x05	; 5
    2b0c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    2b10:	ce 01       	movw	r24, r28
    2b12:	01 96       	adiw	r24, 0x01	; 1
    2b14:	be 01       	movw	r22, r28
    2b16:	6e 5f       	subi	r22, 0xFE	; 254
    2b18:	7f 4f       	sbci	r23, 0xFF	; 255
    2b1a:	ae 01       	movw	r20, r28
    2b1c:	4d 5f       	subi	r20, 0xFD	; 253
    2b1e:	5f 4f       	sbci	r21, 0xFF	; 255
    2b20:	9e 01       	movw	r18, r28
    2b22:	2c 5f       	subi	r18, 0xFC	; 252
    2b24:	3f 4f       	sbci	r19, 0xFF	; 255
    2b26:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <dataflash_spi_idn>

	sprintf ( sRespondData, "ManID = 0x%x; DevID1 = 0x%x; DevID2 = 0x%x; ExData = 0x%x\r\n",
    2b2a:	ad b7       	in	r26, 0x3d	; 61
    2b2c:	be b7       	in	r27, 0x3e	; 62
    2b2e:	1c 97       	sbiw	r26, 0x0c	; 12
    2b30:	0f b6       	in	r0, 0x3f	; 63
    2b32:	f8 94       	cli
    2b34:	be bf       	out	0x3e, r27	; 62
    2b36:	0f be       	out	0x3f, r0	; 63
    2b38:	ad bf       	out	0x3d, r26	; 61
    2b3a:	ed b7       	in	r30, 0x3d	; 61
    2b3c:	fe b7       	in	r31, 0x3e	; 62
    2b3e:	31 96       	adiw	r30, 0x01	; 1
    2b40:	12 96       	adiw	r26, 0x02	; 2
    2b42:	1c 93       	st	X, r17
    2b44:	0e 93       	st	-X, r16
    2b46:	11 97       	sbiw	r26, 0x01	; 1
    2b48:	80 e3       	ldi	r24, 0x30	; 48
    2b4a:	95 e0       	ldi	r25, 0x05	; 5
    2b4c:	93 83       	std	Z+3, r25	; 0x03
    2b4e:	82 83       	std	Z+2, r24	; 0x02
    2b50:	89 81       	ldd	r24, Y+1	; 0x01
    2b52:	84 83       	std	Z+4, r24	; 0x04
    2b54:	15 82       	std	Z+5, r1	; 0x05
    2b56:	8a 81       	ldd	r24, Y+2	; 0x02
    2b58:	86 83       	std	Z+6, r24	; 0x06
    2b5a:	17 82       	std	Z+7, r1	; 0x07
    2b5c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b5e:	80 87       	std	Z+8, r24	; 0x08
    2b60:	11 86       	std	Z+9, r1	; 0x09
    2b62:	8c 81       	ldd	r24, Y+4	; 0x04
    2b64:	82 87       	std	Z+10, r24	; 0x0a
    2b66:	13 86       	std	Z+11, r1	; 0x0b
    2b68:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
					ManID, DevID1, DevID2, ExData );
	USARTWriteString ( sRespondData );
    2b6c:	8d b7       	in	r24, 0x3d	; 61
    2b6e:	9e b7       	in	r25, 0x3e	; 62
    2b70:	0c 96       	adiw	r24, 0x0c	; 12
    2b72:	0f b6       	in	r0, 0x3f	; 63
    2b74:	f8 94       	cli
    2b76:	9e bf       	out	0x3e, r25	; 62
    2b78:	0f be       	out	0x3f, r0	; 63
    2b7a:	8d bf       	out	0x3d, r24	; 61
    2b7c:	c8 01       	movw	r24, r16
    2b7e:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	USARTWriteString ( (char*)"\r\n" );
    2b82:	8b e2       	ldi	r24, 0x2B	; 43
    2b84:	92 e0       	ldi	r25, 0x02	; 2
    2b86:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
}
    2b8a:	cc 5b       	subi	r28, 0xBC	; 188
    2b8c:	df 4f       	sbci	r29, 0xFF	; 255
    2b8e:	0f b6       	in	r0, 0x3f	; 63
    2b90:	f8 94       	cli
    2b92:	de bf       	out	0x3e, r29	; 62
    2b94:	0f be       	out	0x3f, r0	; 63
    2b96:	cd bf       	out	0x3d, r28	; 61
    2b98:	cf 91       	pop	r28
    2b9a:	df 91       	pop	r29
    2b9c:	1f 91       	pop	r17
    2b9e:	0f 91       	pop	r16
    2ba0:	08 95       	ret

00002ba2 <DataTransferMode>:
}

//==============================================================================================
// This function is invoked by the USART RX interrupt
void DataTransferMode ( )
{
    2ba2:	2f 92       	push	r2
    2ba4:	3f 92       	push	r3
    2ba6:	4f 92       	push	r4
    2ba8:	5f 92       	push	r5
    2baa:	6f 92       	push	r6
    2bac:	7f 92       	push	r7
    2bae:	8f 92       	push	r8
    2bb0:	9f 92       	push	r9
    2bb2:	af 92       	push	r10
    2bb4:	bf 92       	push	r11
    2bb6:	cf 92       	push	r12
    2bb8:	df 92       	push	r13
    2bba:	ff 92       	push	r15
    2bbc:	0f 93       	push	r16
    2bbe:	1f 93       	push	r17
    2bc0:	df 93       	push	r29
    2bc2:	cf 93       	push	r28
    2bc4:	cd b7       	in	r28, 0x3d	; 61
    2bc6:	de b7       	in	r29, 0x3e	; 62
    2bc8:	c7 5d       	subi	r28, 0xD7	; 215
    2bca:	d0 40       	sbci	r29, 0x00	; 0
    2bcc:	0f b6       	in	r0, 0x3f	; 63
    2bce:	f8 94       	cli
    2bd0:	de bf       	out	0x3e, r29	; 62
    2bd2:	0f be       	out	0x3f, r0	; 63
    2bd4:	cd bf       	out	0x3d, r28	; 61
	char sIncomingCommand[UART_COMMAND_MAX_LENGTH];

	USARTWriteString ( (char*)"ANIBIKE INC. VER. 2.00.\r\n");
    2bd6:	8c e6       	ldi	r24, 0x6C	; 108
    2bd8:	95 e0       	ldi	r25, 0x05	; 5
    2bda:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2bde:	88 e0       	ldi	r24, 0x08	; 8
    2be0:	a8 2e       	mov	r10, r24
    2be2:	b1 2c       	mov	r11, r1
    2be4:	ac 0e       	add	r10, r28
    2be6:	bd 1e       	adc	r11, r29
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    2be8:	0f e3       	ldi	r16, 0x3F	; 63
    2bea:	80 2e       	mov	r8, r16
    2bec:	91 2c       	mov	r9, r1
    2bee:	8a 0c       	add	r8, r10
    2bf0:	9b 1c       	adc	r9, r11
void TM_Identify ( void )
{
	char ManID, DevID1, DevID2, ExData;
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "ANIBIKE VER:%03d.00;"	// The project
    2bf2:	18 e4       	ldi	r17, 0x48	; 72
    2bf4:	61 2e       	mov	r6, r17
    2bf6:	71 2c       	mov	r7, r1
    2bf8:	6c 0e       	add	r6, r28
    2bfa:	7d 1e       	adc	r7, r29
    2bfc:	bd ed       	ldi	r27, 0xDD	; 221
    2bfe:	4b 2e       	mov	r4, r27
    2c00:	b4 e0       	ldi	r27, 0x04	; 4
    2c02:	5b 2e       	mov	r5, r27
							ANIBIKE_NUM_LEDS,
							ANIBIKE_IS_RGB );
	USARTWriteString ( sRespondData );

	USARTWriteString ( (char*)"\r\nFlashInfo:\r\n" );
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    2c04:	a2 e0       	ldi	r26, 0x02	; 2
    2c06:	2a 2e       	mov	r2, r26
    2c08:	31 2c       	mov	r3, r1
    2c0a:	2c 0e       	add	r2, r28
    2c0c:	3d 1e       	adc	r3, r29
    2c0e:	f8 ed       	ldi	r31, 0xD8	; 216
    2c10:	cf 2e       	mov	r12, r31
    2c12:	d1 2c       	mov	r13, r1
    2c14:	cc 0e       	add	r12, r28
    2c16:	dd 1e       	adc	r13, r29
void TM_FetchCommand ( char *sIncomingCommand )
{
	int iPlace;
	char data;

	USARTWriteString ( (char*)">>" );
    2c18:	8e e1       	ldi	r24, 0x1E	; 30
    2c1a:	93 e0       	ldi	r25, 0x03	; 3
    2c1c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
    2c20:	0e 94 36 06 	call	0xc6c	; 0xc6c <USARTReadChar>
    2c24:	90 e0       	ldi	r25, 0x00	; 0
    2c26:	0e 94 8f 18 	call	0x311e	; 0x311e <toupper>
    2c2a:	f8 2e       	mov	r15, r24
	USARTWriteChar ( data );
    2c2c:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    2c30:	8a e3       	ldi	r24, 0x3A	; 58
    2c32:	f8 16       	cp	r15, r24
    2c34:	09 f4       	brne	.+2      	; 0x2c38 <DataTransferMode+0x96>
    2c36:	cd c1       	rjmp	.+922    	; 0x2fd2 <DataTransferMode+0x430>
    2c38:	00 e0       	ldi	r16, 0x00	; 0
    2c3a:	10 e0       	ldi	r17, 0x00	; 0
    2c3c:	04 c0       	rjmp	.+8      	; 0x2c46 <DataTransferMode+0xa4>
    2c3e:	0f 33       	cpi	r16, 0x3F	; 63
    2c40:	11 05       	cpc	r17, r1
    2c42:	09 f4       	brne	.+2      	; 0x2c46 <DataTransferMode+0xa4>
    2c44:	52 c1       	rjmp	.+676    	; 0x2eea <DataTransferMode+0x348>
	{
		sIncomingCommand[iPlace++] = data;
    2c46:	f5 01       	movw	r30, r10
    2c48:	e0 0f       	add	r30, r16
    2c4a:	f1 1f       	adc	r31, r17
    2c4c:	f0 82       	st	Z, r15
    2c4e:	0f 5f       	subi	r16, 0xFF	; 255
    2c50:	1f 4f       	sbci	r17, 0xFF	; 255
		data=toupper ( USARTReadChar() );
    2c52:	0e 94 36 06 	call	0xc6c	; 0xc6c <USARTReadChar>
    2c56:	90 e0       	ldi	r25, 0x00	; 0
    2c58:	0e 94 8f 18 	call	0x311e	; 0x311e <toupper>
    2c5c:	f8 2e       	mov	r15, r24
		USARTWriteChar ( data );
    2c5e:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    2c62:	9a e3       	ldi	r25, 0x3A	; 58
    2c64:	f9 16       	cp	r15, r25
    2c66:	59 f7       	brne	.-42     	; 0x2c3e <DataTransferMode+0x9c>
    2c68:	f5 01       	movw	r30, r10
    2c6a:	e0 0f       	add	r30, r16
    2c6c:	f1 1f       	adc	r31, r17
		sIncomingCommand[iPlace++] = data;
		data=toupper ( USARTReadChar() );
		USARTWriteChar ( data );
	}

	sIncomingCommand [iPlace] = '\0';
    2c6e:	10 82       	st	Z, r1
	USARTWriteString ( (char*)"\r\n" );
    2c70:	8b e2       	ldi	r24, 0x2B	; 43
    2c72:	92 e0       	ldi	r25, 0x02	; 2
    2c74:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

		// _____________________________________________________________
		// Read identification data
		#ifdef  __ENABLE_IDN_UART
		// IDENTIFICATION AND INFORMATION
		if ( strcmp (sIncomingCommand, "IDN?") == 0 )
    2c78:	c5 01       	movw	r24, r10
    2c7a:	66 e8       	ldi	r22, 0x86	; 134
    2c7c:	75 e0       	ldi	r23, 0x05	; 5
    2c7e:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2c82:	00 97       	sbiw	r24, 0x00	; 0
    2c84:	09 f4       	brne	.+2      	; 0x2c88 <DataTransferMode+0xe6>
    2c86:	33 c1       	rjmp	.+614    	; 0x2eee <DataTransferMode+0x34c>

		// _____________________________________________________________
		// READ PARAMETERS
		#ifdef  __ENABLE_READ_PARAM_UART
		// READ THE PARAMETERS FROM MEMORY
		if ( strcmp (sIncomingCommand, "REPA") == 0 )
    2c88:	c5 01       	movw	r24, r10
    2c8a:	6b e8       	ldi	r22, 0x8B	; 139
    2c8c:	75 e0       	ldi	r23, 0x05	; 5
    2c8e:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2c92:	00 97       	sbiw	r24, 0x00	; 0
    2c94:	09 f4       	brne	.+2      	; 0x2c98 <DataTransferMode+0xf6>
    2c96:	db c0       	rjmp	.+438    	; 0x2e4e <DataTransferMode+0x2ac>
		#endif

		// _____________________________________________________________
		// READ MEMORY
		#ifdef  __ENABLE_READ_UART
		if ( sIncomingCommand[0] == 'R' && sIncomingCommand[1] == 'E' &&
    2c98:	88 85       	ldd	r24, Y+8	; 0x08
    2c9a:	18 2f       	mov	r17, r24
    2c9c:	82 35       	cpi	r24, 0x52	; 82
    2c9e:	09 f4       	brne	.+2      	; 0x2ca2 <DataTransferMode+0x100>
    2ca0:	12 c1       	rjmp	.+548    	; 0x2ec6 <DataTransferMode+0x324>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2ca2:	87 35       	cpi	r24, 0x57	; 87
    2ca4:	09 f4       	brne	.+2      	; 0x2ca8 <DataTransferMode+0x106>
    2ca6:	fc c0       	rjmp	.+504    	; 0x2ea0 <DataTransferMode+0x2fe>
			//USARTWriteString ( (char*)"WRBL\r\n" );
			TM_WriteBlocks ( sIncomingCommand );

		// _____________________________________________________________
		// CS LOW
		if ( strcmp (sIncomingCommand, "CSLO") == 0 )
    2ca8:	c5 01       	movw	r24, r10
    2caa:	60 e9       	ldi	r22, 0x90	; 144
    2cac:	75 e0       	ldi	r23, 0x05	; 5
    2cae:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2cb2:	00 97       	sbiw	r24, 0x00	; 0
    2cb4:	09 f4       	brne	.+2      	; 0x2cb8 <DataTransferMode+0x116>
		{	CS_DOWN;	}
    2cb6:	28 98       	cbi	0x05, 0	; 5

		// _____________________________________________________________
		// CS HIGH
		if ( strcmp (sIncomingCommand, "CSHI") == 0 )
    2cb8:	c5 01       	movw	r24, r10
    2cba:	65 e9       	ldi	r22, 0x95	; 149
    2cbc:	75 e0       	ldi	r23, 0x05	; 5
    2cbe:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2cc2:	00 97       	sbiw	r24, 0x00	; 0
    2cc4:	09 f4       	brne	.+2      	; 0x2cc8 <DataTransferMode+0x126>
		{	CS_UP;		}
    2cc6:	28 9a       	sbi	0x05, 0	; 5

		// _____________________________________________________________
		// SPI Transfer
		if ( sIncomingCommand[0] == 'S' && sIncomingCommand[1] == 'P' &&
    2cc8:	13 35       	cpi	r17, 0x53	; 83
    2cca:	09 f4       	brne	.+2      	; 0x2cce <DataTransferMode+0x12c>
    2ccc:	b3 c0       	rjmp	.+358    	; 0x2e34 <DataTransferMode+0x292>
			TM_Spi ( sIncomingCommand );


		// _____________________________________________________________
		// Unprotect flash
		if ( sIncomingCommand[0] == 'U' && sIncomingCommand[1] == 'P' &&
    2cce:	15 35       	cpi	r17, 0x55	; 85
    2cd0:	09 f4       	brne	.+2      	; 0x2cd4 <DataTransferMode+0x132>
    2cd2:	9f c0       	rjmp	.+318    	; 0x2e12 <DataTransferMode+0x270>
			TM_unprotect ( sIncomingCommand );


		// _____________________________________________________________
		// Protect flash
		if ( sIncomingCommand[0] == 'P' && sIncomingCommand[1] == 'R' &&
    2cd4:	10 35       	cpi	r17, 0x50	; 80
    2cd6:	09 f0       	breq	.+2      	; 0x2cda <DataTransferMode+0x138>
    2cd8:	7b c0       	rjmp	.+246    	; 0x2dd0 <DataTransferMode+0x22e>
    2cda:	89 85       	ldd	r24, Y+9	; 0x09
    2cdc:	82 35       	cpi	r24, 0x52	; 82
    2cde:	09 f4       	brne	.+2      	; 0x2ce2 <DataTransferMode+0x140>
    2ce0:	6b c0       	rjmp	.+214    	; 0x2db8 <DataTransferMode+0x216>


		
		// _____________________________________________________________
		// DIR 
		if ( strcmp (sIncomingCommand, "DIR") == 0 )
    2ce2:	c5 01       	movw	r24, r10
    2ce4:	6a e9       	ldi	r22, 0x9A	; 154
    2ce6:	75 e0       	ldi	r23, 0x05	; 5
    2ce8:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2cec:	00 97       	sbiw	r24, 0x00	; 0
    2cee:	09 f4       	brne	.+2      	; 0x2cf2 <DataTransferMode+0x150>
    2cf0:	85 c0       	rjmp	.+266    	; 0x2dfc <DataTransferMode+0x25a>
		{	FS_ShowFileInformation ( );		}

		
		// _____________________________________________________________
		// GET FS 
		if ( strcmp (sIncomingCommand, "GTFS") == 0 )
    2cf2:	c5 01       	movw	r24, r10
    2cf4:	6e e9       	ldi	r22, 0x9E	; 158
    2cf6:	75 e0       	ldi	r23, 0x05	; 5
    2cf8:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2cfc:	00 97       	sbiw	r24, 0x00	; 0
    2cfe:	09 f4       	brne	.+2      	; 0x2d02 <DataTransferMode+0x160>
    2d00:	3b c0       	rjmp	.+118    	; 0x2d78 <DataTransferMode+0x1d6>
		{	TM_TransferFileSystem ( );		}


		// _____________________________________________________________
		// LEDS TEST
		if ( sIncomingCommand[0] == 'T' && sIncomingCommand[1] == 'L' &&
    2d02:	88 85       	ldd	r24, Y+8	; 0x08
    2d04:	84 35       	cpi	r24, 0x54	; 84
    2d06:	59 f1       	breq	.+86     	; 0x2d5e <DataTransferMode+0x1bc>
			TM_TestLEDs ( sIncomingCommand );


		// _____________________________________________________________
		// MTST 
		if ( strcmp (sIncomingCommand, "MTST") == 0 )
    2d08:	c5 01       	movw	r24, r10
    2d0a:	63 ea       	ldi	r22, 0xA3	; 163
    2d0c:	75 e0       	ldi	r23, 0x05	; 5
    2d0e:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2d12:	00 97       	sbiw	r24, 0x00	; 0
    2d14:	e9 f0       	breq	.+58     	; 0x2d50 <DataTransferMode+0x1ae>


		#ifdef  __ENABLE_EXIT_UART
		// _____________________________________________________________
		// EXIT TRANSFER MODE
		if ( strcmp (sIncomingCommand, "EXIT") == 0 )
    2d16:	c5 01       	movw	r24, r10
    2d18:	61 ec       	ldi	r22, 0xC1	; 193
    2d1a:	75 e0       	ldi	r23, 0x05	; 5
    2d1c:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2d20:	00 97       	sbiw	r24, 0x00	; 0
    2d22:	09 f4       	brne	.+2      	; 0x2d26 <DataTransferMode+0x184>
    2d24:	6a c1       	rjmp	.+724    	; 0x2ffa <DataTransferMode+0x458>
			USARTWriteString ( (char*)"ANIBIKE EXITING TRANSFER MODE\r\n" );	
			break;
		}
		#endif

		if ( strcmp (sIncomingCommand, "RST") == 0 ) 
    2d26:	c5 01       	movw	r24, r10
    2d28:	66 ee       	ldi	r22, 0xE6	; 230
    2d2a:	75 e0       	ldi	r23, 0x05	; 5
    2d2c:	0e 94 9c 18 	call	0x3138	; 0x3138 <strcmp>
    2d30:	00 97       	sbiw	r24, 0x00	; 0
    2d32:	09 f0       	breq	.+2      	; 0x2d36 <DataTransferMode+0x194>
    2d34:	71 cf       	rjmp	.-286    	; 0x2c18 <DataTransferMode+0x76>
		{
			cli(); //irq's off 
    2d36:	f8 94       	cli
			wdt_enable(WDTO_15MS); //wd on,15ms 
    2d38:	28 e0       	ldi	r18, 0x08	; 8
    2d3a:	88 e1       	ldi	r24, 0x18	; 24
    2d3c:	90 e0       	ldi	r25, 0x00	; 0
    2d3e:	0f b6       	in	r0, 0x3f	; 63
    2d40:	f8 94       	cli
    2d42:	a8 95       	wdr
    2d44:	80 93 60 00 	sts	0x0060, r24
    2d48:	0f be       	out	0x3f, r0	; 63
    2d4a:	20 93 60 00 	sts	0x0060, r18
    2d4e:	ff cf       	rjmp	.-2      	; 0x2d4e <DataTransferMode+0x1ac>

		// _____________________________________________________________
		// MTST 
		if ( strcmp (sIncomingCommand, "MTST") == 0 )
		{	
			USARTWriteString ( (char*)"Testing Flash Memory: \r\n" );
    2d50:	88 ea       	ldi	r24, 0xA8	; 168
    2d52:	95 e0       	ldi	r25, 0x05	; 5
    2d54:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
			TM_MemoryTest ( );		
    2d58:	0e 94 04 10 	call	0x2008	; 0x2008 <TM_MemoryTest>
    2d5c:	dc cf       	rjmp	.-72     	; 0x2d16 <DataTransferMode+0x174>
		{	TM_TransferFileSystem ( );		}


		// _____________________________________________________________
		// LEDS TEST
		if ( sIncomingCommand[0] == 'T' && sIncomingCommand[1] == 'L' &&
    2d5e:	89 85       	ldd	r24, Y+9	; 0x09
    2d60:	8c 34       	cpi	r24, 0x4C	; 76
    2d62:	91 f6       	brne	.-92     	; 0x2d08 <DataTransferMode+0x166>
    2d64:	8a 85       	ldd	r24, Y+10	; 0x0a
    2d66:	85 34       	cpi	r24, 0x45	; 69
    2d68:	79 f6       	brne	.-98     	; 0x2d08 <DataTransferMode+0x166>
    2d6a:	8b 85       	ldd	r24, Y+11	; 0x0b
    2d6c:	84 34       	cpi	r24, 0x44	; 68
    2d6e:	61 f6       	brne	.-104    	; 0x2d08 <DataTransferMode+0x166>
			 sIncomingCommand[2] == 'E' && sIncomingCommand[3] == 'D' )
			TM_TestLEDs ( sIncomingCommand );
    2d70:	c5 01       	movw	r24, r10
    2d72:	0e 94 23 11 	call	0x2246	; 0x2246 <TM_TestLEDs>
    2d76:	c8 cf       	rjmp	.-112    	; 0x2d08 <DataTransferMode+0x166>
// File System - Write blocks to the flash memory
void TM_TransferFileSystem ( void )
{
	FileEntry_ST sCurEntry;
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
    2d78:	80 e0       	ldi	r24, 0x00	; 0
    2d7a:	90 ec       	ldi	r25, 0xC0	; 192
    2d7c:	af e3       	ldi	r26, 0x3F	; 63
    2d7e:	b0 e0       	ldi	r27, 0x00	; 0
    2d80:	8c 83       	std	Y+4, r24	; 0x04
    2d82:	9d 83       	std	Y+5, r25	; 0x05
    2d84:	ae 83       	std	Y+6, r26	; 0x06
    2d86:	bf 83       	std	Y+7, r27	; 0x07
    2d88:	ff 24       	eor	r15, r15
	uint8_t	itr = 0;

	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
    2d8a:	ce 01       	movw	r24, r28
    2d8c:	04 96       	adiw	r24, 0x04	; 4
    2d8e:	be 01       	movw	r22, r28
    2d90:	68 57       	subi	r22, 0x78	; 120
    2d92:	7f 4f       	sbci	r23, 0xFF	; 255
    2d94:	0e 94 b5 06 	call	0xd6a	; 0xd6a <FS_ReadEntry>
    2d98:	88 23       	and	r24, r24
    2d9a:	99 f1       	breq	.+102    	; 0x2e02 <DataTransferMode+0x260>
// File System - Write blocks to the flash memory
void TM_TransferFileSystem ( void )
{
	FileEntry_ST sCurEntry;
	char *cEntry = NULL;
	uint32_t iAddress = ENTRY_TABLE_ADDR;
    2d9c:	8e 01       	movw	r16, r28
    2d9e:	08 57       	subi	r16, 0x78	; 120
    2da0:	1f 4f       	sbci	r17, 0xFF	; 255
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
	{
		cEntry = (char*)(&sCurEntry);
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			USARTWriteChar( cEntry[itr] );		
    2da2:	f8 01       	movw	r30, r16
    2da4:	81 91       	ld	r24, Z+
    2da6:	8f 01       	movw	r16, r30
    2da8:	0e 94 3d 06 	call	0xc7a	; 0xc7a <USARTWriteChar>
    2dac:	e0 e5       	ldi	r30, 0x50	; 80
    2dae:	fe 2e       	mov	r15, r30
	// Try reading entries until the end
	while ( FS_ReadEntry ( &iAddress, &sCurEntry ) )
	{
		cEntry = (char*)(&sCurEntry);
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
    2db0:	0c 15       	cp	r16, r12
    2db2:	1d 05       	cpc	r17, r13
    2db4:	b1 f7       	brne	.-20     	; 0x2da2 <DataTransferMode+0x200>
    2db6:	e9 cf       	rjmp	.-46     	; 0x2d8a <DataTransferMode+0x1e8>
			TM_unprotect ( sIncomingCommand );


		// _____________________________________________________________
		// Protect flash
		if ( sIncomingCommand[0] == 'P' && sIncomingCommand[1] == 'R' &&
    2db8:	8a 85       	ldd	r24, Y+10	; 0x0a
    2dba:	8f 34       	cpi	r24, 0x4F	; 79
    2dbc:	09 f0       	breq	.+2      	; 0x2dc0 <DataTransferMode+0x21e>
    2dbe:	91 cf       	rjmp	.-222    	; 0x2ce2 <DataTransferMode+0x140>
    2dc0:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dc2:	84 35       	cpi	r24, 0x54	; 84
    2dc4:	09 f0       	breq	.+2      	; 0x2dc8 <DataTransferMode+0x226>
    2dc6:	8d cf       	rjmp	.-230    	; 0x2ce2 <DataTransferMode+0x140>
			 sIncomingCommand[2] == 'O' && sIncomingCommand[3] == 'T')
			TM_protect ( sIncomingCommand );
    2dc8:	c5 01       	movw	r24, r10
    2dca:	0e 94 d7 12 	call	0x25ae	; 0x25ae <TM_protect>
    2dce:	18 85       	ldd	r17, Y+8	; 0x08

		// _____________________________________________________________
		// Erase flash
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    2dd0:	16 34       	cpi	r17, 0x46	; 70
    2dd2:	09 f0       	breq	.+2      	; 0x2dd6 <DataTransferMode+0x234>
    2dd4:	86 cf       	rjmp	.-244    	; 0x2ce2 <DataTransferMode+0x140>
    2dd6:	89 85       	ldd	r24, Y+9	; 0x09
    2dd8:	8c 34       	cpi	r24, 0x4C	; 76
    2dda:	09 f0       	breq	.+2      	; 0x2dde <DataTransferMode+0x23c>
    2ddc:	82 cf       	rjmp	.-252    	; 0x2ce2 <DataTransferMode+0x140>
    2dde:	8a 85       	ldd	r24, Y+10	; 0x0a
    2de0:	85 34       	cpi	r24, 0x45	; 69
    2de2:	09 f4       	brne	.+2      	; 0x2de6 <DataTransferMode+0x244>
    2de4:	27 c1       	rjmp	.+590    	; 0x3034 <DataTransferMode+0x492>
			TM_erase ( sIncomingCommand );


		// _____________________________________________________________
		// Show flash status
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    2de6:	83 35       	cpi	r24, 0x53	; 83
    2de8:	09 f0       	breq	.+2      	; 0x2dec <DataTransferMode+0x24a>
    2dea:	7b cf       	rjmp	.-266    	; 0x2ce2 <DataTransferMode+0x140>
    2dec:	8b 85       	ldd	r24, Y+11	; 0x0b
    2dee:	84 35       	cpi	r24, 0x54	; 84
    2df0:	09 f0       	breq	.+2      	; 0x2df4 <DataTransferMode+0x252>
    2df2:	77 cf       	rjmp	.-274    	; 0x2ce2 <DataTransferMode+0x140>
			 sIncomingCommand[2] == 'S' && sIncomingCommand[3] == 'T')
			TM_FlashStatus ( sIncomingCommand );
    2df4:	c5 01       	movw	r24, r10
    2df6:	0e 94 71 14 	call	0x28e2	; 0x28e2 <TM_FlashStatus>
    2dfa:	73 cf       	rjmp	.-282    	; 0x2ce2 <DataTransferMode+0x140>

		
		// _____________________________________________________________
		// DIR 
		if ( strcmp (sIncomingCommand, "DIR") == 0 )
		{	FS_ShowFileInformation ( );		}
    2dfc:	0e 94 72 07 	call	0xee4	; 0xee4 <FS_ShowFileInformation>
    2e00:	78 cf       	rjmp	.-272    	; 0x2cf2 <DataTransferMode+0x150>
		
		for ( itr = 0; itr < ENTRY_TABLE_EL_SIZE; itr ++ )
			USARTWriteChar( cEntry[itr] );		
	}

	if ( itr == 0 )		// nothing was read then FS empty
    2e02:	ff 20       	and	r15, r15
    2e04:	09 f0       	breq	.+2      	; 0x2e08 <DataTransferMode+0x266>
    2e06:	7d cf       	rjmp	.-262    	; 0x2d02 <DataTransferMode+0x160>
	{
		USARTWriteString ( (char*)"EMPTY\r\n" );
    2e08:	89 ea       	ldi	r24, 0xA9	; 169
    2e0a:	91 e0       	ldi	r25, 0x01	; 1
    2e0c:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2e10:	78 cf       	rjmp	.-272    	; 0x2d02 <DataTransferMode+0x160>
			TM_Spi ( sIncomingCommand );


		// _____________________________________________________________
		// Unprotect flash
		if ( sIncomingCommand[0] == 'U' && sIncomingCommand[1] == 'P' &&
    2e12:	89 85       	ldd	r24, Y+9	; 0x09
    2e14:	80 35       	cpi	r24, 0x50	; 80
    2e16:	09 f0       	breq	.+2      	; 0x2e1a <DataTransferMode+0x278>
    2e18:	64 cf       	rjmp	.-312    	; 0x2ce2 <DataTransferMode+0x140>
    2e1a:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e1c:	82 35       	cpi	r24, 0x52	; 82
    2e1e:	09 f0       	breq	.+2      	; 0x2e22 <DataTransferMode+0x280>
    2e20:	60 cf       	rjmp	.-320    	; 0x2ce2 <DataTransferMode+0x140>
    2e22:	8b 85       	ldd	r24, Y+11	; 0x0b
    2e24:	8f 34       	cpi	r24, 0x4F	; 79
    2e26:	09 f0       	breq	.+2      	; 0x2e2a <DataTransferMode+0x288>
    2e28:	5c cf       	rjmp	.-328    	; 0x2ce2 <DataTransferMode+0x140>
			 sIncomingCommand[2] == 'R' && sIncomingCommand[3] == 'O')
			TM_unprotect ( sIncomingCommand );
    2e2a:	c5 01       	movw	r24, r10
    2e2c:	0e 94 66 12 	call	0x24cc	; 0x24cc <TM_unprotect>
    2e30:	18 85       	ldd	r17, Y+8	; 0x08
    2e32:	50 cf       	rjmp	.-352    	; 0x2cd4 <DataTransferMode+0x132>
		if ( strcmp (sIncomingCommand, "CSHI") == 0 )
		{	CS_UP;		}

		// _____________________________________________________________
		// SPI Transfer
		if ( sIncomingCommand[0] == 'S' && sIncomingCommand[1] == 'P' &&
    2e34:	89 85       	ldd	r24, Y+9	; 0x09
    2e36:	80 35       	cpi	r24, 0x50	; 80
    2e38:	09 f0       	breq	.+2      	; 0x2e3c <DataTransferMode+0x29a>
    2e3a:	53 cf       	rjmp	.-346    	; 0x2ce2 <DataTransferMode+0x140>
    2e3c:	8a 85       	ldd	r24, Y+10	; 0x0a
    2e3e:	89 34       	cpi	r24, 0x49	; 73
    2e40:	09 f0       	breq	.+2      	; 0x2e44 <DataTransferMode+0x2a2>
    2e42:	4f cf       	rjmp	.-354    	; 0x2ce2 <DataTransferMode+0x140>
			 sIncomingCommand[2] == 'I' )
			TM_Spi ( sIncomingCommand );
    2e44:	c5 01       	movw	r24, r10
    2e46:	0e 94 cd 14 	call	0x299a	; 0x299a <TM_Spi>
    2e4a:	18 85       	ldd	r17, Y+8	; 0x08
    2e4c:	40 cf       	rjmp	.-384    	; 0x2cce <DataTransferMode+0x12c>
// File System - Show Parameters
void TM_ShowParameters ( void )
{
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "CDEP:%03d;"		//color depth
    2e4e:	ed b7       	in	r30, 0x3d	; 61
    2e50:	fe b7       	in	r31, 0x3e	; 62
    2e52:	38 97       	sbiw	r30, 0x08	; 8
    2e54:	0f b6       	in	r0, 0x3f	; 63
    2e56:	f8 94       	cli
    2e58:	fe bf       	out	0x3e, r31	; 62
    2e5a:	0f be       	out	0x3f, r0	; 63
    2e5c:	ed bf       	out	0x3d, r30	; 61
    2e5e:	31 96       	adiw	r30, 0x01	; 1
    2e60:	ad b7       	in	r26, 0x3d	; 61
    2e62:	be b7       	in	r27, 0x3e	; 62
    2e64:	12 96       	adiw	r26, 0x02	; 2
    2e66:	7c 92       	st	X, r7
    2e68:	6e 92       	st	-X, r6
    2e6a:	11 97       	sbiw	r26, 0x01	; 1
    2e6c:	81 eb       	ldi	r24, 0xB1	; 177
    2e6e:	91 e0       	ldi	r25, 0x01	; 1
    2e70:	93 83       	std	Z+3, r25	; 0x03
    2e72:	82 83       	std	Z+2, r24	; 0x02
    2e74:	80 e1       	ldi	r24, 0x10	; 16
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	95 83       	std	Z+5, r25	; 0x05
    2e7a:	84 83       	std	Z+4, r24	; 0x04
    2e7c:	88 ec       	ldi	r24, 0xC8	; 200
    2e7e:	90 e0       	ldi	r25, 0x00	; 0
    2e80:	97 83       	std	Z+7, r25	; 0x07
    2e82:	86 83       	std	Z+6, r24	; 0x06
    2e84:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
							"ANG:%03d;\r\n", 		//angular res
							ANIBIKE_COLOR_DEPTH,
							ANGULAR_RESOLUTION );
	USARTWriteString ( sRespondData );
    2e88:	ad b7       	in	r26, 0x3d	; 61
    2e8a:	be b7       	in	r27, 0x3e	; 62
    2e8c:	18 96       	adiw	r26, 0x08	; 8
    2e8e:	0f b6       	in	r0, 0x3f	; 63
    2e90:	f8 94       	cli
    2e92:	be bf       	out	0x3e, r27	; 62
    2e94:	0f be       	out	0x3f, r0	; 63
    2e96:	ad bf       	out	0x3d, r26	; 61
    2e98:	c3 01       	movw	r24, r6
    2e9a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2e9e:	fc ce       	rjmp	.-520    	; 0x2c98 <DataTransferMode+0xf6>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2ea0:	89 85       	ldd	r24, Y+9	; 0x09
    2ea2:	82 35       	cpi	r24, 0x52	; 82
    2ea4:	11 f0       	breq	.+4      	; 0x2eaa <DataTransferMode+0x308>
			TM_WriteMemory ( sIncomingCommand );
		#endif

		// _____________________________________________________________
		// WRITE BLOCKS
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2ea6:	17 e5       	ldi	r17, 0x57	; 87
    2ea8:	ff ce       	rjmp	.-514    	; 0x2ca8 <DataTransferMode+0x106>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2eaa:	8a 85       	ldd	r24, Y+10	; 0x0a
    2eac:	89 34       	cpi	r24, 0x49	; 73
    2eae:	09 f4       	brne	.+2      	; 0x2eb2 <DataTransferMode+0x310>
    2eb0:	92 c0       	rjmp	.+292    	; 0x2fd6 <DataTransferMode+0x434>
			TM_WriteMemory ( sIncomingCommand );
		#endif

		// _____________________________________________________________
		// WRITE BLOCKS
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2eb2:	82 34       	cpi	r24, 0x42	; 66
    2eb4:	c1 f7       	brne	.-16     	; 0x2ea6 <DataTransferMode+0x304>
    2eb6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2eb8:	8c 34       	cpi	r24, 0x4C	; 76
    2eba:	a9 f7       	brne	.-22     	; 0x2ea6 <DataTransferMode+0x304>
			 sIncomingCommand[2] == 'B' && sIncomingCommand[3] == 'L' )
			//USARTWriteString ( (char*)"WRBL\r\n" );
			TM_WriteBlocks ( sIncomingCommand );
    2ebc:	c5 01       	movw	r24, r10
    2ebe:	0e 94 09 13 	call	0x2612	; 0x2612 <TM_WriteBlocks>
    2ec2:	18 85       	ldd	r17, Y+8	; 0x08
    2ec4:	f1 ce       	rjmp	.-542    	; 0x2ca8 <DataTransferMode+0x106>
		#endif

		// _____________________________________________________________
		// READ MEMORY
		#ifdef  __ENABLE_READ_UART
		if ( sIncomingCommand[0] == 'R' && sIncomingCommand[1] == 'E' &&
    2ec6:	89 85       	ldd	r24, Y+9	; 0x09
    2ec8:	85 34       	cpi	r24, 0x45	; 69
    2eca:	09 f0       	breq	.+2      	; 0x2ece <DataTransferMode+0x32c>
    2ecc:	ed ce       	rjmp	.-550    	; 0x2ca8 <DataTransferMode+0x106>
    2ece:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ed0:	81 34       	cpi	r24, 0x41	; 65
    2ed2:	09 f0       	breq	.+2      	; 0x2ed6 <DataTransferMode+0x334>
    2ed4:	e9 ce       	rjmp	.-558    	; 0x2ca8 <DataTransferMode+0x106>
    2ed6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ed8:	84 34       	cpi	r24, 0x44	; 68
    2eda:	09 f0       	breq	.+2      	; 0x2ede <DataTransferMode+0x33c>
    2edc:	e5 ce       	rjmp	.-566    	; 0x2ca8 <DataTransferMode+0x106>
			 sIncomingCommand[2] == 'A' && sIncomingCommand[3] == 'D' )
			TM_ReadMemory ( sIncomingCommand );
    2ede:	c5 01       	movw	r24, r10
    2ee0:	0e 94 8d 11 	call	0x231a	; 0x231a <TM_ReadMemory>
    2ee4:	88 85       	ldd	r24, Y+8	; 0x08
    2ee6:	18 2f       	mov	r17, r24
    2ee8:	dc ce       	rjmp	.-584    	; 0x2ca2 <DataTransferMode+0x100>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    2eea:	f4 01       	movw	r30, r8
    2eec:	c0 ce       	rjmp	.-640    	; 0x2c6e <DataTransferMode+0xcc>
void TM_Identify ( void )
{
	char ManID, DevID1, DevID2, ExData;
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "ANIBIKE VER:%03d.00;"	// The project
    2eee:	ad b7       	in	r26, 0x3d	; 61
    2ef0:	be b7       	in	r27, 0x3e	; 62
    2ef2:	1e 97       	sbiw	r26, 0x0e	; 14
    2ef4:	0f b6       	in	r0, 0x3f	; 63
    2ef6:	f8 94       	cli
    2ef8:	be bf       	out	0x3e, r27	; 62
    2efa:	0f be       	out	0x3f, r0	; 63
    2efc:	ad bf       	out	0x3d, r26	; 61
    2efe:	ed b7       	in	r30, 0x3d	; 61
    2f00:	fe b7       	in	r31, 0x3e	; 62
    2f02:	31 96       	adiw	r30, 0x01	; 1
    2f04:	12 96       	adiw	r26, 0x02	; 2
    2f06:	7c 92       	st	X, r7
    2f08:	6e 92       	st	-X, r6
    2f0a:	11 97       	sbiw	r26, 0x01	; 1
    2f0c:	53 82       	std	Z+3, r5	; 0x03
    2f0e:	42 82       	std	Z+2, r4	; 0x02
    2f10:	82 e0       	ldi	r24, 0x02	; 2
    2f12:	90 e0       	ldi	r25, 0x00	; 0
    2f14:	95 83       	std	Z+5, r25	; 0x05
    2f16:	84 83       	std	Z+4, r24	; 0x04
    2f18:	20 e2       	ldi	r18, 0x20	; 32
    2f1a:	30 e0       	ldi	r19, 0x00	; 0
    2f1c:	37 83       	std	Z+7, r19	; 0x07
    2f1e:	26 83       	std	Z+6, r18	; 0x06
    2f20:	84 ec       	ldi	r24, 0xC4	; 196
    2f22:	90 e0       	ldi	r25, 0x00	; 0
    2f24:	91 87       	std	Z+9, r25	; 0x09
    2f26:	80 87       	std	Z+8, r24	; 0x08
    2f28:	33 87       	std	Z+11, r19	; 0x0b
    2f2a:	22 87       	std	Z+10, r18	; 0x0a
    2f2c:	81 e0       	ldi	r24, 0x01	; 1
    2f2e:	90 e0       	ldi	r25, 0x00	; 0
    2f30:	95 87       	std	Z+13, r25	; 0x0d
    2f32:	84 87       	std	Z+12, r24	; 0x0c
    2f34:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
							ANIBIKE_VER,
							ANIBIKE_MEMORY_SIZE,
							ANIBIKE_CPU_SPEED,
							ANIBIKE_NUM_LEDS,
							ANIBIKE_IS_RGB );
	USARTWriteString ( sRespondData );
    2f38:	ed b7       	in	r30, 0x3d	; 61
    2f3a:	fe b7       	in	r31, 0x3e	; 62
    2f3c:	3e 96       	adiw	r30, 0x0e	; 14
    2f3e:	0f b6       	in	r0, 0x3f	; 63
    2f40:	f8 94       	cli
    2f42:	fe bf       	out	0x3e, r31	; 62
    2f44:	0f be       	out	0x3f, r0	; 63
    2f46:	ed bf       	out	0x3d, r30	; 61
    2f48:	c3 01       	movw	r24, r6
    2f4a:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>

	USARTWriteString ( (char*)"\r\nFlashInfo:\r\n" );
    2f4e:	81 e2       	ldi	r24, 0x21	; 33
    2f50:	95 e0       	ldi	r25, 0x05	; 5
    2f52:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    2f56:	ce 01       	movw	r24, r28
    2f58:	01 96       	adiw	r24, 0x01	; 1
    2f5a:	b1 01       	movw	r22, r2
    2f5c:	ae 01       	movw	r20, r28
    2f5e:	4d 5f       	subi	r20, 0xFD	; 253
    2f60:	5f 4f       	sbci	r21, 0xFF	; 255
    2f62:	9e 01       	movw	r18, r28
    2f64:	2c 5f       	subi	r18, 0xFC	; 252
    2f66:	3f 4f       	sbci	r19, 0xFF	; 255
    2f68:	0e 94 7f 0c 	call	0x18fe	; 0x18fe <dataflash_spi_idn>

	sprintf ( sRespondData, "ManID = 0x%x; DevID1 = 0x%x; DevID2 = 0x%x; ExData = 0x%x\r\n",
    2f6c:	8d b7       	in	r24, 0x3d	; 61
    2f6e:	9e b7       	in	r25, 0x3e	; 62
    2f70:	0c 97       	sbiw	r24, 0x0c	; 12
    2f72:	0f b6       	in	r0, 0x3f	; 63
    2f74:	f8 94       	cli
    2f76:	9e bf       	out	0x3e, r25	; 62
    2f78:	0f be       	out	0x3f, r0	; 63
    2f7a:	8d bf       	out	0x3d, r24	; 61
    2f7c:	ed b7       	in	r30, 0x3d	; 61
    2f7e:	fe b7       	in	r31, 0x3e	; 62
    2f80:	31 96       	adiw	r30, 0x01	; 1
    2f82:	ad b7       	in	r26, 0x3d	; 61
    2f84:	be b7       	in	r27, 0x3e	; 62
    2f86:	12 96       	adiw	r26, 0x02	; 2
    2f88:	7c 92       	st	X, r7
    2f8a:	6e 92       	st	-X, r6
    2f8c:	11 97       	sbiw	r26, 0x01	; 1
    2f8e:	80 e3       	ldi	r24, 0x30	; 48
    2f90:	95 e0       	ldi	r25, 0x05	; 5
    2f92:	93 83       	std	Z+3, r25	; 0x03
    2f94:	82 83       	std	Z+2, r24	; 0x02
    2f96:	89 81       	ldd	r24, Y+1	; 0x01
    2f98:	84 83       	std	Z+4, r24	; 0x04
    2f9a:	15 82       	std	Z+5, r1	; 0x05
    2f9c:	8a 81       	ldd	r24, Y+2	; 0x02
    2f9e:	86 83       	std	Z+6, r24	; 0x06
    2fa0:	17 82       	std	Z+7, r1	; 0x07
    2fa2:	8b 81       	ldd	r24, Y+3	; 0x03
    2fa4:	80 87       	std	Z+8, r24	; 0x08
    2fa6:	11 86       	std	Z+9, r1	; 0x09
    2fa8:	8c 81       	ldd	r24, Y+4	; 0x04
    2faa:	82 87       	std	Z+10, r24	; 0x0a
    2fac:	13 86       	std	Z+11, r1	; 0x0b
    2fae:	0e 94 e9 18 	call	0x31d2	; 0x31d2 <sprintf>
					ManID, DevID1, DevID2, ExData );
	USARTWriteString ( sRespondData );
    2fb2:	ad b7       	in	r26, 0x3d	; 61
    2fb4:	be b7       	in	r27, 0x3e	; 62
    2fb6:	1c 96       	adiw	r26, 0x0c	; 12
    2fb8:	0f b6       	in	r0, 0x3f	; 63
    2fba:	f8 94       	cli
    2fbc:	be bf       	out	0x3e, r27	; 62
    2fbe:	0f be       	out	0x3f, r0	; 63
    2fc0:	ad bf       	out	0x3d, r26	; 61
    2fc2:	c3 01       	movw	r24, r6
    2fc4:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
	USARTWriteString ( (char*)"\r\n" );
    2fc8:	8b e2       	ldi	r24, 0x2B	; 43
    2fca:	92 e0       	ldi	r25, 0x02	; 2
    2fcc:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
    2fd0:	5b ce       	rjmp	.-842    	; 0x2c88 <DataTransferMode+0xe6>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    2fd2:	f5 01       	movw	r30, r10
    2fd4:	4c ce       	rjmp	.-872    	; 0x2c6e <DataTransferMode+0xcc>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2fd6:	8b 85       	ldd	r24, Y+11	; 0x0b
    2fd8:	84 35       	cpi	r24, 0x54	; 84
    2fda:	09 f0       	breq	.+2      	; 0x2fde <DataTransferMode+0x43c>
    2fdc:	64 cf       	rjmp	.-312    	; 0x2ea6 <DataTransferMode+0x304>
			 sIncomingCommand[2] == 'I' && sIncomingCommand[3] == 'T' )
			TM_WriteMemory ( sIncomingCommand );
    2fde:	c5 01       	movw	r24, r10
    2fe0:	0e 94 e3 13 	call	0x27c6	; 0x27c6 <TM_WriteMemory>
		#endif

		// _____________________________________________________________
		// WRITE BLOCKS
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2fe4:	88 85       	ldd	r24, Y+8	; 0x08
    2fe6:	18 2f       	mov	r17, r24
    2fe8:	87 35       	cpi	r24, 0x57	; 87
    2fea:	09 f0       	breq	.+2      	; 0x2fee <DataTransferMode+0x44c>
    2fec:	5d ce       	rjmp	.-838    	; 0x2ca8 <DataTransferMode+0x106>
    2fee:	89 85       	ldd	r24, Y+9	; 0x09
    2ff0:	82 35       	cpi	r24, 0x52	; 82
    2ff2:	09 f0       	breq	.+2      	; 0x2ff6 <DataTransferMode+0x454>
    2ff4:	58 cf       	rjmp	.-336    	; 0x2ea6 <DataTransferMode+0x304>
    2ff6:	8a 85       	ldd	r24, Y+10	; 0x0a
    2ff8:	5c cf       	rjmp	.-328    	; 0x2eb2 <DataTransferMode+0x310>
		#ifdef  __ENABLE_EXIT_UART
		// _____________________________________________________________
		// EXIT TRANSFER MODE
		if ( strcmp (sIncomingCommand, "EXIT") == 0 )
		{ 
			USARTWriteString ( (char*)"ANIBIKE EXITING TRANSFER MODE\r\n" );	
    2ffa:	86 ec       	ldi	r24, 0xC6	; 198
    2ffc:	95 e0       	ldi	r25, 0x05	; 5
    2ffe:	0e 94 45 06 	call	0xc8a	; 0xc8a <USARTWriteString>
		}

	}

	return;
}
    3002:	c9 52       	subi	r28, 0x29	; 41
    3004:	df 4f       	sbci	r29, 0xFF	; 255
    3006:	0f b6       	in	r0, 0x3f	; 63
    3008:	f8 94       	cli
    300a:	de bf       	out	0x3e, r29	; 62
    300c:	0f be       	out	0x3f, r0	; 63
    300e:	cd bf       	out	0x3d, r28	; 61
    3010:	cf 91       	pop	r28
    3012:	df 91       	pop	r29
    3014:	1f 91       	pop	r17
    3016:	0f 91       	pop	r16
    3018:	ff 90       	pop	r15
    301a:	df 90       	pop	r13
    301c:	cf 90       	pop	r12
    301e:	bf 90       	pop	r11
    3020:	af 90       	pop	r10
    3022:	9f 90       	pop	r9
    3024:	8f 90       	pop	r8
    3026:	7f 90       	pop	r7
    3028:	6f 90       	pop	r6
    302a:	5f 90       	pop	r5
    302c:	4f 90       	pop	r4
    302e:	3f 90       	pop	r3
    3030:	2f 90       	pop	r2
    3032:	08 95       	ret
			 sIncomingCommand[2] == 'O' && sIncomingCommand[3] == 'T')
			TM_protect ( sIncomingCommand );

		// _____________________________________________________________
		// Erase flash
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    3034:	8b 85       	ldd	r24, Y+11	; 0x0b
    3036:	82 35       	cpi	r24, 0x52	; 82
    3038:	09 f0       	breq	.+2      	; 0x303c <DataTransferMode+0x49a>
    303a:	53 ce       	rjmp	.-858    	; 0x2ce2 <DataTransferMode+0x140>
			 sIncomingCommand[2] == 'E' && sIncomingCommand[3] == 'R')
			TM_erase ( sIncomingCommand );
    303c:	c5 01       	movw	r24, r10
    303e:	0e 94 98 12 	call	0x2530	; 0x2530 <TM_erase>


		// _____________________________________________________________
		// Show flash status
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    3042:	88 85       	ldd	r24, Y+8	; 0x08
    3044:	86 34       	cpi	r24, 0x46	; 70
    3046:	09 f0       	breq	.+2      	; 0x304a <DataTransferMode+0x4a8>
    3048:	4c ce       	rjmp	.-872    	; 0x2ce2 <DataTransferMode+0x140>
    304a:	89 85       	ldd	r24, Y+9	; 0x09
    304c:	8c 34       	cpi	r24, 0x4C	; 76
    304e:	09 f0       	breq	.+2      	; 0x3052 <DataTransferMode+0x4b0>
    3050:	48 ce       	rjmp	.-880    	; 0x2ce2 <DataTransferMode+0x140>
    3052:	8a 85       	ldd	r24, Y+10	; 0x0a
    3054:	c8 ce       	rjmp	.-624    	; 0x2de6 <DataTransferMode+0x244>

00003056 <__mulsi3>:
    3056:	62 9f       	mul	r22, r18
    3058:	d0 01       	movw	r26, r0
    305a:	73 9f       	mul	r23, r19
    305c:	f0 01       	movw	r30, r0
    305e:	82 9f       	mul	r24, r18
    3060:	e0 0d       	add	r30, r0
    3062:	f1 1d       	adc	r31, r1
    3064:	64 9f       	mul	r22, r20
    3066:	e0 0d       	add	r30, r0
    3068:	f1 1d       	adc	r31, r1
    306a:	92 9f       	mul	r25, r18
    306c:	f0 0d       	add	r31, r0
    306e:	83 9f       	mul	r24, r19
    3070:	f0 0d       	add	r31, r0
    3072:	74 9f       	mul	r23, r20
    3074:	f0 0d       	add	r31, r0
    3076:	65 9f       	mul	r22, r21
    3078:	f0 0d       	add	r31, r0
    307a:	99 27       	eor	r25, r25
    307c:	72 9f       	mul	r23, r18
    307e:	b0 0d       	add	r27, r0
    3080:	e1 1d       	adc	r30, r1
    3082:	f9 1f       	adc	r31, r25
    3084:	63 9f       	mul	r22, r19
    3086:	b0 0d       	add	r27, r0
    3088:	e1 1d       	adc	r30, r1
    308a:	f9 1f       	adc	r31, r25
    308c:	bd 01       	movw	r22, r26
    308e:	cf 01       	movw	r24, r30
    3090:	11 24       	eor	r1, r1
    3092:	08 95       	ret

00003094 <atoi>:
    3094:	fc 01       	movw	r30, r24
    3096:	88 27       	eor	r24, r24
    3098:	99 27       	eor	r25, r25
    309a:	e8 94       	clt
    309c:	21 91       	ld	r18, Z+
    309e:	20 32       	cpi	r18, 0x20	; 32
    30a0:	e9 f3       	breq	.-6      	; 0x309c <atoi+0x8>
    30a2:	29 30       	cpi	r18, 0x09	; 9
    30a4:	10 f0       	brcs	.+4      	; 0x30aa <atoi+0x16>
    30a6:	2e 30       	cpi	r18, 0x0E	; 14
    30a8:	c8 f3       	brcs	.-14     	; 0x309c <atoi+0x8>
    30aa:	2b 32       	cpi	r18, 0x2B	; 43
    30ac:	41 f0       	breq	.+16     	; 0x30be <atoi+0x2a>
    30ae:	2d 32       	cpi	r18, 0x2D	; 45
    30b0:	39 f4       	brne	.+14     	; 0x30c0 <atoi+0x2c>
    30b2:	68 94       	set
    30b4:	04 c0       	rjmp	.+8      	; 0x30be <atoi+0x2a>
    30b6:	0e 94 e1 18 	call	0x31c2	; 0x31c2 <__mulhi_const_10>
    30ba:	82 0f       	add	r24, r18
    30bc:	91 1d       	adc	r25, r1
    30be:	21 91       	ld	r18, Z+
    30c0:	20 53       	subi	r18, 0x30	; 48
    30c2:	2a 30       	cpi	r18, 0x0A	; 10
    30c4:	c0 f3       	brcs	.-16     	; 0x30b6 <atoi+0x22>
    30c6:	1e f4       	brtc	.+6      	; 0x30ce <atoi+0x3a>
    30c8:	90 95       	com	r25
    30ca:	81 95       	neg	r24
    30cc:	9f 4f       	sbci	r25, 0xFF	; 255
    30ce:	08 95       	ret

000030d0 <atol>:
    30d0:	1f 93       	push	r17
    30d2:	fc 01       	movw	r30, r24
    30d4:	99 27       	eor	r25, r25
    30d6:	88 27       	eor	r24, r24
    30d8:	bc 01       	movw	r22, r24
    30da:	e8 94       	clt
    30dc:	11 91       	ld	r17, Z+
    30de:	10 32       	cpi	r17, 0x20	; 32
    30e0:	e9 f3       	breq	.-6      	; 0x30dc <atol+0xc>
    30e2:	19 30       	cpi	r17, 0x09	; 9
    30e4:	10 f0       	brcs	.+4      	; 0x30ea <atol+0x1a>
    30e6:	1e 30       	cpi	r17, 0x0E	; 14
    30e8:	c8 f3       	brcs	.-14     	; 0x30dc <atol+0xc>
    30ea:	1b 32       	cpi	r17, 0x2B	; 43
    30ec:	51 f0       	breq	.+20     	; 0x3102 <atol+0x32>
    30ee:	1d 32       	cpi	r17, 0x2D	; 45
    30f0:	49 f4       	brne	.+18     	; 0x3104 <atol+0x34>
    30f2:	68 94       	set
    30f4:	06 c0       	rjmp	.+12     	; 0x3102 <atol+0x32>
    30f6:	0e 94 cc 18 	call	0x3198	; 0x3198 <__mulsi_const_10>
    30fa:	61 0f       	add	r22, r17
    30fc:	71 1d       	adc	r23, r1
    30fe:	81 1d       	adc	r24, r1
    3100:	91 1d       	adc	r25, r1
    3102:	11 91       	ld	r17, Z+
    3104:	10 53       	subi	r17, 0x30	; 48
    3106:	1a 30       	cpi	r17, 0x0A	; 10
    3108:	b0 f3       	brcs	.-20     	; 0x30f6 <atol+0x26>
    310a:	3e f4       	brtc	.+14     	; 0x311a <atol+0x4a>
    310c:	90 95       	com	r25
    310e:	80 95       	com	r24
    3110:	70 95       	com	r23
    3112:	61 95       	neg	r22
    3114:	7f 4f       	sbci	r23, 0xFF	; 255
    3116:	8f 4f       	sbci	r24, 0xFF	; 255
    3118:	9f 4f       	sbci	r25, 0xFF	; 255
    311a:	1f 91       	pop	r17
    311c:	08 95       	ret

0000311e <toupper>:
    311e:	91 11       	cpse	r25, r1
    3120:	08 95       	ret
    3122:	81 56       	subi	r24, 0x61	; 97
    3124:	8a 51       	subi	r24, 0x1A	; 26
    3126:	08 f4       	brcc	.+2      	; 0x312a <toupper+0xc>
    3128:	80 52       	subi	r24, 0x20	; 32
    312a:	85 58       	subi	r24, 0x85	; 133
    312c:	08 95       	ret

0000312e <strtok>:
    312e:	48 e1       	ldi	r20, 0x18	; 24
    3130:	56 e0       	ldi	r21, 0x06	; 6
    3132:	0e 94 a5 18 	call	0x314a	; 0x314a <strtok_r>
    3136:	08 95       	ret

00003138 <strcmp>:
    3138:	fb 01       	movw	r30, r22
    313a:	dc 01       	movw	r26, r24
    313c:	8d 91       	ld	r24, X+
    313e:	01 90       	ld	r0, Z+
    3140:	80 19       	sub	r24, r0
    3142:	01 10       	cpse	r0, r1
    3144:	d9 f3       	breq	.-10     	; 0x313c <strcmp+0x4>
    3146:	99 0b       	sbc	r25, r25
    3148:	08 95       	ret

0000314a <strtok_r>:
    314a:	fa 01       	movw	r30, r20
    314c:	a1 91       	ld	r26, Z+
    314e:	b0 81       	ld	r27, Z
    3150:	00 97       	sbiw	r24, 0x00	; 0
    3152:	19 f4       	brne	.+6      	; 0x315a <strtok_r+0x10>
    3154:	10 97       	sbiw	r26, 0x00	; 0
    3156:	e1 f0       	breq	.+56     	; 0x3190 <strtok_r+0x46>
    3158:	cd 01       	movw	r24, r26
    315a:	dc 01       	movw	r26, r24
    315c:	cd 01       	movw	r24, r26
    315e:	0d 90       	ld	r0, X+
    3160:	00 20       	and	r0, r0
    3162:	11 f4       	brne	.+4      	; 0x3168 <strtok_r+0x1e>
    3164:	c0 01       	movw	r24, r0
    3166:	13 c0       	rjmp	.+38     	; 0x318e <strtok_r+0x44>
    3168:	fb 01       	movw	r30, r22
    316a:	21 91       	ld	r18, Z+
    316c:	22 23       	and	r18, r18
    316e:	19 f0       	breq	.+6      	; 0x3176 <strtok_r+0x2c>
    3170:	20 15       	cp	r18, r0
    3172:	d9 f7       	brne	.-10     	; 0x316a <strtok_r+0x20>
    3174:	f3 cf       	rjmp	.-26     	; 0x315c <strtok_r+0x12>
    3176:	fb 01       	movw	r30, r22
    3178:	21 91       	ld	r18, Z+
    317a:	20 15       	cp	r18, r0
    317c:	19 f4       	brne	.+6      	; 0x3184 <strtok_r+0x3a>
    317e:	1e 92       	st	-X, r1
    3180:	11 96       	adiw	r26, 0x01	; 1
    3182:	06 c0       	rjmp	.+12     	; 0x3190 <strtok_r+0x46>
    3184:	22 23       	and	r18, r18
    3186:	c1 f7       	brne	.-16     	; 0x3178 <strtok_r+0x2e>
    3188:	0d 90       	ld	r0, X+
    318a:	00 20       	and	r0, r0
    318c:	a1 f7       	brne	.-24     	; 0x3176 <strtok_r+0x2c>
    318e:	d0 01       	movw	r26, r0
    3190:	fa 01       	movw	r30, r20
    3192:	a1 93       	st	Z+, r26
    3194:	b0 83       	st	Z, r27
    3196:	08 95       	ret

00003198 <__mulsi_const_10>:
    3198:	59 2f       	mov	r21, r25
    319a:	48 2f       	mov	r20, r24
    319c:	37 2f       	mov	r19, r23
    319e:	26 2f       	mov	r18, r22
    31a0:	66 0f       	add	r22, r22
    31a2:	77 1f       	adc	r23, r23
    31a4:	88 1f       	adc	r24, r24
    31a6:	99 1f       	adc	r25, r25
    31a8:	66 0f       	add	r22, r22
    31aa:	77 1f       	adc	r23, r23
    31ac:	88 1f       	adc	r24, r24
    31ae:	99 1f       	adc	r25, r25
    31b0:	62 0f       	add	r22, r18
    31b2:	73 1f       	adc	r23, r19
    31b4:	84 1f       	adc	r24, r20
    31b6:	95 1f       	adc	r25, r21
    31b8:	66 0f       	add	r22, r22
    31ba:	77 1f       	adc	r23, r23
    31bc:	88 1f       	adc	r24, r24
    31be:	99 1f       	adc	r25, r25
    31c0:	08 95       	ret

000031c2 <__mulhi_const_10>:
    31c2:	7a e0       	ldi	r23, 0x0A	; 10
    31c4:	97 9f       	mul	r25, r23
    31c6:	90 2d       	mov	r25, r0
    31c8:	87 9f       	mul	r24, r23
    31ca:	80 2d       	mov	r24, r0
    31cc:	91 0d       	add	r25, r1
    31ce:	11 24       	eor	r1, r1
    31d0:	08 95       	ret

000031d2 <sprintf>:
    31d2:	ae e0       	ldi	r26, 0x0E	; 14
    31d4:	b0 e0       	ldi	r27, 0x00	; 0
    31d6:	ef ee       	ldi	r30, 0xEF	; 239
    31d8:	f8 e1       	ldi	r31, 0x18	; 24
    31da:	0c 94 98 1b 	jmp	0x3730	; 0x3730 <__prologue_saves__+0x1c>
    31de:	0d 89       	ldd	r16, Y+21	; 0x15
    31e0:	1e 89       	ldd	r17, Y+22	; 0x16
    31e2:	86 e0       	ldi	r24, 0x06	; 6
    31e4:	8c 83       	std	Y+4, r24	; 0x04
    31e6:	1a 83       	std	Y+2, r17	; 0x02
    31e8:	09 83       	std	Y+1, r16	; 0x01
    31ea:	8f ef       	ldi	r24, 0xFF	; 255
    31ec:	9f e7       	ldi	r25, 0x7F	; 127
    31ee:	9e 83       	std	Y+6, r25	; 0x06
    31f0:	8d 83       	std	Y+5, r24	; 0x05
    31f2:	9e 01       	movw	r18, r28
    31f4:	27 5e       	subi	r18, 0xE7	; 231
    31f6:	3f 4f       	sbci	r19, 0xFF	; 255
    31f8:	ce 01       	movw	r24, r28
    31fa:	01 96       	adiw	r24, 0x01	; 1
    31fc:	6f 89       	ldd	r22, Y+23	; 0x17
    31fe:	78 8d       	ldd	r23, Y+24	; 0x18
    3200:	a9 01       	movw	r20, r18
    3202:	0e 94 0d 19 	call	0x321a	; 0x321a <vfprintf>
    3206:	2f 81       	ldd	r18, Y+7	; 0x07
    3208:	38 85       	ldd	r19, Y+8	; 0x08
    320a:	02 0f       	add	r16, r18
    320c:	13 1f       	adc	r17, r19
    320e:	f8 01       	movw	r30, r16
    3210:	10 82       	st	Z, r1
    3212:	2e 96       	adiw	r28, 0x0e	; 14
    3214:	e4 e0       	ldi	r30, 0x04	; 4
    3216:	0c 94 b4 1b 	jmp	0x3768	; 0x3768 <__epilogue_restores__+0x1c>

0000321a <vfprintf>:
    321a:	ab e0       	ldi	r26, 0x0B	; 11
    321c:	b0 e0       	ldi	r27, 0x00	; 0
    321e:	e3 e1       	ldi	r30, 0x13	; 19
    3220:	f9 e1       	ldi	r31, 0x19	; 25
    3222:	0c 94 8a 1b 	jmp	0x3714	; 0x3714 <__prologue_saves__>
    3226:	3c 01       	movw	r6, r24
    3228:	2b 01       	movw	r4, r22
    322a:	5a 01       	movw	r10, r20
    322c:	fc 01       	movw	r30, r24
    322e:	17 82       	std	Z+7, r1	; 0x07
    3230:	16 82       	std	Z+6, r1	; 0x06
    3232:	83 81       	ldd	r24, Z+3	; 0x03
    3234:	81 fd       	sbrc	r24, 1
    3236:	03 c0       	rjmp	.+6      	; 0x323e <vfprintf+0x24>
    3238:	6f ef       	ldi	r22, 0xFF	; 255
    323a:	7f ef       	ldi	r23, 0xFF	; 255
    323c:	c6 c1       	rjmp	.+908    	; 0x35ca <vfprintf+0x3b0>
    323e:	9a e0       	ldi	r25, 0x0A	; 10
    3240:	89 2e       	mov	r8, r25
    3242:	1e 01       	movw	r2, r28
    3244:	08 94       	sec
    3246:	21 1c       	adc	r2, r1
    3248:	31 1c       	adc	r3, r1
    324a:	f3 01       	movw	r30, r6
    324c:	23 81       	ldd	r18, Z+3	; 0x03
    324e:	f2 01       	movw	r30, r4
    3250:	23 fd       	sbrc	r18, 3
    3252:	85 91       	lpm	r24, Z+
    3254:	23 ff       	sbrs	r18, 3
    3256:	81 91       	ld	r24, Z+
    3258:	2f 01       	movw	r4, r30
    325a:	88 23       	and	r24, r24
    325c:	09 f4       	brne	.+2      	; 0x3260 <vfprintf+0x46>
    325e:	b2 c1       	rjmp	.+868    	; 0x35c4 <vfprintf+0x3aa>
    3260:	85 32       	cpi	r24, 0x25	; 37
    3262:	39 f4       	brne	.+14     	; 0x3272 <vfprintf+0x58>
    3264:	23 fd       	sbrc	r18, 3
    3266:	85 91       	lpm	r24, Z+
    3268:	23 ff       	sbrs	r18, 3
    326a:	81 91       	ld	r24, Z+
    326c:	2f 01       	movw	r4, r30
    326e:	85 32       	cpi	r24, 0x25	; 37
    3270:	29 f4       	brne	.+10     	; 0x327c <vfprintf+0x62>
    3272:	90 e0       	ldi	r25, 0x00	; 0
    3274:	b3 01       	movw	r22, r6
    3276:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    327a:	e7 cf       	rjmp	.-50     	; 0x324a <vfprintf+0x30>
    327c:	98 2f       	mov	r25, r24
    327e:	ff 24       	eor	r15, r15
    3280:	ee 24       	eor	r14, r14
    3282:	99 24       	eor	r9, r9
    3284:	ff e1       	ldi	r31, 0x1F	; 31
    3286:	ff 15       	cp	r31, r15
    3288:	d0 f0       	brcs	.+52     	; 0x32be <vfprintf+0xa4>
    328a:	9b 32       	cpi	r25, 0x2B	; 43
    328c:	69 f0       	breq	.+26     	; 0x32a8 <vfprintf+0x8e>
    328e:	9c 32       	cpi	r25, 0x2C	; 44
    3290:	28 f4       	brcc	.+10     	; 0x329c <vfprintf+0x82>
    3292:	90 32       	cpi	r25, 0x20	; 32
    3294:	59 f0       	breq	.+22     	; 0x32ac <vfprintf+0x92>
    3296:	93 32       	cpi	r25, 0x23	; 35
    3298:	91 f4       	brne	.+36     	; 0x32be <vfprintf+0xa4>
    329a:	0e c0       	rjmp	.+28     	; 0x32b8 <vfprintf+0x9e>
    329c:	9d 32       	cpi	r25, 0x2D	; 45
    329e:	49 f0       	breq	.+18     	; 0x32b2 <vfprintf+0x98>
    32a0:	90 33       	cpi	r25, 0x30	; 48
    32a2:	69 f4       	brne	.+26     	; 0x32be <vfprintf+0xa4>
    32a4:	41 e0       	ldi	r20, 0x01	; 1
    32a6:	24 c0       	rjmp	.+72     	; 0x32f0 <vfprintf+0xd6>
    32a8:	52 e0       	ldi	r21, 0x02	; 2
    32aa:	f5 2a       	or	r15, r21
    32ac:	84 e0       	ldi	r24, 0x04	; 4
    32ae:	f8 2a       	or	r15, r24
    32b0:	28 c0       	rjmp	.+80     	; 0x3302 <vfprintf+0xe8>
    32b2:	98 e0       	ldi	r25, 0x08	; 8
    32b4:	f9 2a       	or	r15, r25
    32b6:	25 c0       	rjmp	.+74     	; 0x3302 <vfprintf+0xe8>
    32b8:	e0 e1       	ldi	r30, 0x10	; 16
    32ba:	fe 2a       	or	r15, r30
    32bc:	22 c0       	rjmp	.+68     	; 0x3302 <vfprintf+0xe8>
    32be:	f7 fc       	sbrc	r15, 7
    32c0:	29 c0       	rjmp	.+82     	; 0x3314 <vfprintf+0xfa>
    32c2:	89 2f       	mov	r24, r25
    32c4:	80 53       	subi	r24, 0x30	; 48
    32c6:	8a 30       	cpi	r24, 0x0A	; 10
    32c8:	70 f4       	brcc	.+28     	; 0x32e6 <vfprintf+0xcc>
    32ca:	f6 fe       	sbrs	r15, 6
    32cc:	05 c0       	rjmp	.+10     	; 0x32d8 <vfprintf+0xbe>
    32ce:	98 9c       	mul	r9, r8
    32d0:	90 2c       	mov	r9, r0
    32d2:	11 24       	eor	r1, r1
    32d4:	98 0e       	add	r9, r24
    32d6:	15 c0       	rjmp	.+42     	; 0x3302 <vfprintf+0xe8>
    32d8:	e8 9c       	mul	r14, r8
    32da:	e0 2c       	mov	r14, r0
    32dc:	11 24       	eor	r1, r1
    32de:	e8 0e       	add	r14, r24
    32e0:	f0 e2       	ldi	r31, 0x20	; 32
    32e2:	ff 2a       	or	r15, r31
    32e4:	0e c0       	rjmp	.+28     	; 0x3302 <vfprintf+0xe8>
    32e6:	9e 32       	cpi	r25, 0x2E	; 46
    32e8:	29 f4       	brne	.+10     	; 0x32f4 <vfprintf+0xda>
    32ea:	f6 fc       	sbrc	r15, 6
    32ec:	6b c1       	rjmp	.+726    	; 0x35c4 <vfprintf+0x3aa>
    32ee:	40 e4       	ldi	r20, 0x40	; 64
    32f0:	f4 2a       	or	r15, r20
    32f2:	07 c0       	rjmp	.+14     	; 0x3302 <vfprintf+0xe8>
    32f4:	9c 36       	cpi	r25, 0x6C	; 108
    32f6:	19 f4       	brne	.+6      	; 0x32fe <vfprintf+0xe4>
    32f8:	50 e8       	ldi	r21, 0x80	; 128
    32fa:	f5 2a       	or	r15, r21
    32fc:	02 c0       	rjmp	.+4      	; 0x3302 <vfprintf+0xe8>
    32fe:	98 36       	cpi	r25, 0x68	; 104
    3300:	49 f4       	brne	.+18     	; 0x3314 <vfprintf+0xfa>
    3302:	f2 01       	movw	r30, r4
    3304:	23 fd       	sbrc	r18, 3
    3306:	95 91       	lpm	r25, Z+
    3308:	23 ff       	sbrs	r18, 3
    330a:	91 91       	ld	r25, Z+
    330c:	2f 01       	movw	r4, r30
    330e:	99 23       	and	r25, r25
    3310:	09 f0       	breq	.+2      	; 0x3314 <vfprintf+0xfa>
    3312:	b8 cf       	rjmp	.-144    	; 0x3284 <vfprintf+0x6a>
    3314:	89 2f       	mov	r24, r25
    3316:	85 54       	subi	r24, 0x45	; 69
    3318:	83 30       	cpi	r24, 0x03	; 3
    331a:	18 f0       	brcs	.+6      	; 0x3322 <vfprintf+0x108>
    331c:	80 52       	subi	r24, 0x20	; 32
    331e:	83 30       	cpi	r24, 0x03	; 3
    3320:	38 f4       	brcc	.+14     	; 0x3330 <vfprintf+0x116>
    3322:	44 e0       	ldi	r20, 0x04	; 4
    3324:	50 e0       	ldi	r21, 0x00	; 0
    3326:	a4 0e       	add	r10, r20
    3328:	b5 1e       	adc	r11, r21
    332a:	5f e3       	ldi	r21, 0x3F	; 63
    332c:	59 83       	std	Y+1, r21	; 0x01
    332e:	0f c0       	rjmp	.+30     	; 0x334e <vfprintf+0x134>
    3330:	93 36       	cpi	r25, 0x63	; 99
    3332:	31 f0       	breq	.+12     	; 0x3340 <vfprintf+0x126>
    3334:	93 37       	cpi	r25, 0x73	; 115
    3336:	79 f0       	breq	.+30     	; 0x3356 <vfprintf+0x13c>
    3338:	93 35       	cpi	r25, 0x53	; 83
    333a:	09 f0       	breq	.+2      	; 0x333e <vfprintf+0x124>
    333c:	56 c0       	rjmp	.+172    	; 0x33ea <vfprintf+0x1d0>
    333e:	20 c0       	rjmp	.+64     	; 0x3380 <vfprintf+0x166>
    3340:	f5 01       	movw	r30, r10
    3342:	80 81       	ld	r24, Z
    3344:	89 83       	std	Y+1, r24	; 0x01
    3346:	42 e0       	ldi	r20, 0x02	; 2
    3348:	50 e0       	ldi	r21, 0x00	; 0
    334a:	a4 0e       	add	r10, r20
    334c:	b5 1e       	adc	r11, r21
    334e:	61 01       	movw	r12, r2
    3350:	01 e0       	ldi	r16, 0x01	; 1
    3352:	10 e0       	ldi	r17, 0x00	; 0
    3354:	12 c0       	rjmp	.+36     	; 0x337a <vfprintf+0x160>
    3356:	f5 01       	movw	r30, r10
    3358:	c0 80       	ld	r12, Z
    335a:	d1 80       	ldd	r13, Z+1	; 0x01
    335c:	f6 fc       	sbrc	r15, 6
    335e:	03 c0       	rjmp	.+6      	; 0x3366 <vfprintf+0x14c>
    3360:	6f ef       	ldi	r22, 0xFF	; 255
    3362:	7f ef       	ldi	r23, 0xFF	; 255
    3364:	02 c0       	rjmp	.+4      	; 0x336a <vfprintf+0x150>
    3366:	69 2d       	mov	r22, r9
    3368:	70 e0       	ldi	r23, 0x00	; 0
    336a:	42 e0       	ldi	r20, 0x02	; 2
    336c:	50 e0       	ldi	r21, 0x00	; 0
    336e:	a4 0e       	add	r10, r20
    3370:	b5 1e       	adc	r11, r21
    3372:	c6 01       	movw	r24, r12
    3374:	0e 94 f5 1a 	call	0x35ea	; 0x35ea <strnlen>
    3378:	8c 01       	movw	r16, r24
    337a:	5f e7       	ldi	r21, 0x7F	; 127
    337c:	f5 22       	and	r15, r21
    337e:	14 c0       	rjmp	.+40     	; 0x33a8 <vfprintf+0x18e>
    3380:	f5 01       	movw	r30, r10
    3382:	c0 80       	ld	r12, Z
    3384:	d1 80       	ldd	r13, Z+1	; 0x01
    3386:	f6 fc       	sbrc	r15, 6
    3388:	03 c0       	rjmp	.+6      	; 0x3390 <vfprintf+0x176>
    338a:	6f ef       	ldi	r22, 0xFF	; 255
    338c:	7f ef       	ldi	r23, 0xFF	; 255
    338e:	02 c0       	rjmp	.+4      	; 0x3394 <vfprintf+0x17a>
    3390:	69 2d       	mov	r22, r9
    3392:	70 e0       	ldi	r23, 0x00	; 0
    3394:	42 e0       	ldi	r20, 0x02	; 2
    3396:	50 e0       	ldi	r21, 0x00	; 0
    3398:	a4 0e       	add	r10, r20
    339a:	b5 1e       	adc	r11, r21
    339c:	c6 01       	movw	r24, r12
    339e:	0e 94 ea 1a 	call	0x35d4	; 0x35d4 <strnlen_P>
    33a2:	8c 01       	movw	r16, r24
    33a4:	50 e8       	ldi	r21, 0x80	; 128
    33a6:	f5 2a       	or	r15, r21
    33a8:	f3 fe       	sbrs	r15, 3
    33aa:	07 c0       	rjmp	.+14     	; 0x33ba <vfprintf+0x1a0>
    33ac:	1a c0       	rjmp	.+52     	; 0x33e2 <vfprintf+0x1c8>
    33ae:	80 e2       	ldi	r24, 0x20	; 32
    33b0:	90 e0       	ldi	r25, 0x00	; 0
    33b2:	b3 01       	movw	r22, r6
    33b4:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    33b8:	ea 94       	dec	r14
    33ba:	8e 2d       	mov	r24, r14
    33bc:	90 e0       	ldi	r25, 0x00	; 0
    33be:	08 17       	cp	r16, r24
    33c0:	19 07       	cpc	r17, r25
    33c2:	a8 f3       	brcs	.-22     	; 0x33ae <vfprintf+0x194>
    33c4:	0e c0       	rjmp	.+28     	; 0x33e2 <vfprintf+0x1c8>
    33c6:	f6 01       	movw	r30, r12
    33c8:	f7 fc       	sbrc	r15, 7
    33ca:	85 91       	lpm	r24, Z+
    33cc:	f7 fe       	sbrs	r15, 7
    33ce:	81 91       	ld	r24, Z+
    33d0:	6f 01       	movw	r12, r30
    33d2:	90 e0       	ldi	r25, 0x00	; 0
    33d4:	b3 01       	movw	r22, r6
    33d6:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    33da:	e1 10       	cpse	r14, r1
    33dc:	ea 94       	dec	r14
    33de:	01 50       	subi	r16, 0x01	; 1
    33e0:	10 40       	sbci	r17, 0x00	; 0
    33e2:	01 15       	cp	r16, r1
    33e4:	11 05       	cpc	r17, r1
    33e6:	79 f7       	brne	.-34     	; 0x33c6 <vfprintf+0x1ac>
    33e8:	ea c0       	rjmp	.+468    	; 0x35be <vfprintf+0x3a4>
    33ea:	94 36       	cpi	r25, 0x64	; 100
    33ec:	11 f0       	breq	.+4      	; 0x33f2 <vfprintf+0x1d8>
    33ee:	99 36       	cpi	r25, 0x69	; 105
    33f0:	69 f5       	brne	.+90     	; 0x344c <vfprintf+0x232>
    33f2:	f7 fe       	sbrs	r15, 7
    33f4:	08 c0       	rjmp	.+16     	; 0x3406 <vfprintf+0x1ec>
    33f6:	f5 01       	movw	r30, r10
    33f8:	20 81       	ld	r18, Z
    33fa:	31 81       	ldd	r19, Z+1	; 0x01
    33fc:	42 81       	ldd	r20, Z+2	; 0x02
    33fe:	53 81       	ldd	r21, Z+3	; 0x03
    3400:	84 e0       	ldi	r24, 0x04	; 4
    3402:	90 e0       	ldi	r25, 0x00	; 0
    3404:	0a c0       	rjmp	.+20     	; 0x341a <vfprintf+0x200>
    3406:	f5 01       	movw	r30, r10
    3408:	80 81       	ld	r24, Z
    340a:	91 81       	ldd	r25, Z+1	; 0x01
    340c:	9c 01       	movw	r18, r24
    340e:	44 27       	eor	r20, r20
    3410:	37 fd       	sbrc	r19, 7
    3412:	40 95       	com	r20
    3414:	54 2f       	mov	r21, r20
    3416:	82 e0       	ldi	r24, 0x02	; 2
    3418:	90 e0       	ldi	r25, 0x00	; 0
    341a:	a8 0e       	add	r10, r24
    341c:	b9 1e       	adc	r11, r25
    341e:	9f e6       	ldi	r25, 0x6F	; 111
    3420:	f9 22       	and	r15, r25
    3422:	57 ff       	sbrs	r21, 7
    3424:	09 c0       	rjmp	.+18     	; 0x3438 <vfprintf+0x21e>
    3426:	50 95       	com	r21
    3428:	40 95       	com	r20
    342a:	30 95       	com	r19
    342c:	21 95       	neg	r18
    342e:	3f 4f       	sbci	r19, 0xFF	; 255
    3430:	4f 4f       	sbci	r20, 0xFF	; 255
    3432:	5f 4f       	sbci	r21, 0xFF	; 255
    3434:	e0 e8       	ldi	r30, 0x80	; 128
    3436:	fe 2a       	or	r15, r30
    3438:	ca 01       	movw	r24, r20
    343a:	b9 01       	movw	r22, r18
    343c:	a1 01       	movw	r20, r2
    343e:	2a e0       	ldi	r18, 0x0A	; 10
    3440:	30 e0       	ldi	r19, 0x00	; 0
    3442:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__ultoa_invert>
    3446:	d8 2e       	mov	r13, r24
    3448:	d2 18       	sub	r13, r2
    344a:	40 c0       	rjmp	.+128    	; 0x34cc <vfprintf+0x2b2>
    344c:	95 37       	cpi	r25, 0x75	; 117
    344e:	29 f4       	brne	.+10     	; 0x345a <vfprintf+0x240>
    3450:	1f 2d       	mov	r17, r15
    3452:	1f 7e       	andi	r17, 0xEF	; 239
    3454:	2a e0       	ldi	r18, 0x0A	; 10
    3456:	30 e0       	ldi	r19, 0x00	; 0
    3458:	1d c0       	rjmp	.+58     	; 0x3494 <vfprintf+0x27a>
    345a:	1f 2d       	mov	r17, r15
    345c:	19 7f       	andi	r17, 0xF9	; 249
    345e:	9f 36       	cpi	r25, 0x6F	; 111
    3460:	61 f0       	breq	.+24     	; 0x347a <vfprintf+0x260>
    3462:	90 37       	cpi	r25, 0x70	; 112
    3464:	20 f4       	brcc	.+8      	; 0x346e <vfprintf+0x254>
    3466:	98 35       	cpi	r25, 0x58	; 88
    3468:	09 f0       	breq	.+2      	; 0x346c <vfprintf+0x252>
    346a:	ac c0       	rjmp	.+344    	; 0x35c4 <vfprintf+0x3aa>
    346c:	0f c0       	rjmp	.+30     	; 0x348c <vfprintf+0x272>
    346e:	90 37       	cpi	r25, 0x70	; 112
    3470:	39 f0       	breq	.+14     	; 0x3480 <vfprintf+0x266>
    3472:	98 37       	cpi	r25, 0x78	; 120
    3474:	09 f0       	breq	.+2      	; 0x3478 <vfprintf+0x25e>
    3476:	a6 c0       	rjmp	.+332    	; 0x35c4 <vfprintf+0x3aa>
    3478:	04 c0       	rjmp	.+8      	; 0x3482 <vfprintf+0x268>
    347a:	28 e0       	ldi	r18, 0x08	; 8
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	0a c0       	rjmp	.+20     	; 0x3494 <vfprintf+0x27a>
    3480:	10 61       	ori	r17, 0x10	; 16
    3482:	14 fd       	sbrc	r17, 4
    3484:	14 60       	ori	r17, 0x04	; 4
    3486:	20 e1       	ldi	r18, 0x10	; 16
    3488:	30 e0       	ldi	r19, 0x00	; 0
    348a:	04 c0       	rjmp	.+8      	; 0x3494 <vfprintf+0x27a>
    348c:	14 fd       	sbrc	r17, 4
    348e:	16 60       	ori	r17, 0x06	; 6
    3490:	20 e1       	ldi	r18, 0x10	; 16
    3492:	32 e0       	ldi	r19, 0x02	; 2
    3494:	17 ff       	sbrs	r17, 7
    3496:	08 c0       	rjmp	.+16     	; 0x34a8 <vfprintf+0x28e>
    3498:	f5 01       	movw	r30, r10
    349a:	60 81       	ld	r22, Z
    349c:	71 81       	ldd	r23, Z+1	; 0x01
    349e:	82 81       	ldd	r24, Z+2	; 0x02
    34a0:	93 81       	ldd	r25, Z+3	; 0x03
    34a2:	44 e0       	ldi	r20, 0x04	; 4
    34a4:	50 e0       	ldi	r21, 0x00	; 0
    34a6:	08 c0       	rjmp	.+16     	; 0x34b8 <vfprintf+0x29e>
    34a8:	f5 01       	movw	r30, r10
    34aa:	80 81       	ld	r24, Z
    34ac:	91 81       	ldd	r25, Z+1	; 0x01
    34ae:	bc 01       	movw	r22, r24
    34b0:	80 e0       	ldi	r24, 0x00	; 0
    34b2:	90 e0       	ldi	r25, 0x00	; 0
    34b4:	42 e0       	ldi	r20, 0x02	; 2
    34b6:	50 e0       	ldi	r21, 0x00	; 0
    34b8:	a4 0e       	add	r10, r20
    34ba:	b5 1e       	adc	r11, r21
    34bc:	a1 01       	movw	r20, r2
    34be:	0e 94 2c 1b 	call	0x3658	; 0x3658 <__ultoa_invert>
    34c2:	d8 2e       	mov	r13, r24
    34c4:	d2 18       	sub	r13, r2
    34c6:	8f e7       	ldi	r24, 0x7F	; 127
    34c8:	f8 2e       	mov	r15, r24
    34ca:	f1 22       	and	r15, r17
    34cc:	f6 fe       	sbrs	r15, 6
    34ce:	0b c0       	rjmp	.+22     	; 0x34e6 <vfprintf+0x2cc>
    34d0:	5e ef       	ldi	r21, 0xFE	; 254
    34d2:	f5 22       	and	r15, r21
    34d4:	d9 14       	cp	r13, r9
    34d6:	38 f4       	brcc	.+14     	; 0x34e6 <vfprintf+0x2cc>
    34d8:	f4 fe       	sbrs	r15, 4
    34da:	07 c0       	rjmp	.+14     	; 0x34ea <vfprintf+0x2d0>
    34dc:	f2 fc       	sbrc	r15, 2
    34de:	05 c0       	rjmp	.+10     	; 0x34ea <vfprintf+0x2d0>
    34e0:	8f ee       	ldi	r24, 0xEF	; 239
    34e2:	f8 22       	and	r15, r24
    34e4:	02 c0       	rjmp	.+4      	; 0x34ea <vfprintf+0x2d0>
    34e6:	1d 2d       	mov	r17, r13
    34e8:	01 c0       	rjmp	.+2      	; 0x34ec <vfprintf+0x2d2>
    34ea:	19 2d       	mov	r17, r9
    34ec:	f4 fe       	sbrs	r15, 4
    34ee:	0d c0       	rjmp	.+26     	; 0x350a <vfprintf+0x2f0>
    34f0:	fe 01       	movw	r30, r28
    34f2:	ed 0d       	add	r30, r13
    34f4:	f1 1d       	adc	r31, r1
    34f6:	80 81       	ld	r24, Z
    34f8:	80 33       	cpi	r24, 0x30	; 48
    34fa:	19 f4       	brne	.+6      	; 0x3502 <vfprintf+0x2e8>
    34fc:	99 ee       	ldi	r25, 0xE9	; 233
    34fe:	f9 22       	and	r15, r25
    3500:	08 c0       	rjmp	.+16     	; 0x3512 <vfprintf+0x2f8>
    3502:	1f 5f       	subi	r17, 0xFF	; 255
    3504:	f2 fe       	sbrs	r15, 2
    3506:	05 c0       	rjmp	.+10     	; 0x3512 <vfprintf+0x2f8>
    3508:	03 c0       	rjmp	.+6      	; 0x3510 <vfprintf+0x2f6>
    350a:	8f 2d       	mov	r24, r15
    350c:	86 78       	andi	r24, 0x86	; 134
    350e:	09 f0       	breq	.+2      	; 0x3512 <vfprintf+0x2f8>
    3510:	1f 5f       	subi	r17, 0xFF	; 255
    3512:	0f 2d       	mov	r16, r15
    3514:	f3 fc       	sbrc	r15, 3
    3516:	14 c0       	rjmp	.+40     	; 0x3540 <vfprintf+0x326>
    3518:	f0 fe       	sbrs	r15, 0
    351a:	0f c0       	rjmp	.+30     	; 0x353a <vfprintf+0x320>
    351c:	1e 15       	cp	r17, r14
    351e:	10 f0       	brcs	.+4      	; 0x3524 <vfprintf+0x30a>
    3520:	9d 2c       	mov	r9, r13
    3522:	0b c0       	rjmp	.+22     	; 0x353a <vfprintf+0x320>
    3524:	9d 2c       	mov	r9, r13
    3526:	9e 0c       	add	r9, r14
    3528:	91 1a       	sub	r9, r17
    352a:	1e 2d       	mov	r17, r14
    352c:	06 c0       	rjmp	.+12     	; 0x353a <vfprintf+0x320>
    352e:	80 e2       	ldi	r24, 0x20	; 32
    3530:	90 e0       	ldi	r25, 0x00	; 0
    3532:	b3 01       	movw	r22, r6
    3534:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3538:	1f 5f       	subi	r17, 0xFF	; 255
    353a:	1e 15       	cp	r17, r14
    353c:	c0 f3       	brcs	.-16     	; 0x352e <vfprintf+0x314>
    353e:	04 c0       	rjmp	.+8      	; 0x3548 <vfprintf+0x32e>
    3540:	1e 15       	cp	r17, r14
    3542:	10 f4       	brcc	.+4      	; 0x3548 <vfprintf+0x32e>
    3544:	e1 1a       	sub	r14, r17
    3546:	01 c0       	rjmp	.+2      	; 0x354a <vfprintf+0x330>
    3548:	ee 24       	eor	r14, r14
    354a:	04 ff       	sbrs	r16, 4
    354c:	0f c0       	rjmp	.+30     	; 0x356c <vfprintf+0x352>
    354e:	80 e3       	ldi	r24, 0x30	; 48
    3550:	90 e0       	ldi	r25, 0x00	; 0
    3552:	b3 01       	movw	r22, r6
    3554:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3558:	02 ff       	sbrs	r16, 2
    355a:	1d c0       	rjmp	.+58     	; 0x3596 <vfprintf+0x37c>
    355c:	01 fd       	sbrc	r16, 1
    355e:	03 c0       	rjmp	.+6      	; 0x3566 <vfprintf+0x34c>
    3560:	88 e7       	ldi	r24, 0x78	; 120
    3562:	90 e0       	ldi	r25, 0x00	; 0
    3564:	0e c0       	rjmp	.+28     	; 0x3582 <vfprintf+0x368>
    3566:	88 e5       	ldi	r24, 0x58	; 88
    3568:	90 e0       	ldi	r25, 0x00	; 0
    356a:	0b c0       	rjmp	.+22     	; 0x3582 <vfprintf+0x368>
    356c:	80 2f       	mov	r24, r16
    356e:	86 78       	andi	r24, 0x86	; 134
    3570:	91 f0       	breq	.+36     	; 0x3596 <vfprintf+0x37c>
    3572:	01 ff       	sbrs	r16, 1
    3574:	02 c0       	rjmp	.+4      	; 0x357a <vfprintf+0x360>
    3576:	8b e2       	ldi	r24, 0x2B	; 43
    3578:	01 c0       	rjmp	.+2      	; 0x357c <vfprintf+0x362>
    357a:	80 e2       	ldi	r24, 0x20	; 32
    357c:	f7 fc       	sbrc	r15, 7
    357e:	8d e2       	ldi	r24, 0x2D	; 45
    3580:	90 e0       	ldi	r25, 0x00	; 0
    3582:	b3 01       	movw	r22, r6
    3584:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3588:	06 c0       	rjmp	.+12     	; 0x3596 <vfprintf+0x37c>
    358a:	80 e3       	ldi	r24, 0x30	; 48
    358c:	90 e0       	ldi	r25, 0x00	; 0
    358e:	b3 01       	movw	r22, r6
    3590:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    3594:	9a 94       	dec	r9
    3596:	d9 14       	cp	r13, r9
    3598:	c0 f3       	brcs	.-16     	; 0x358a <vfprintf+0x370>
    359a:	da 94       	dec	r13
    359c:	f1 01       	movw	r30, r2
    359e:	ed 0d       	add	r30, r13
    35a0:	f1 1d       	adc	r31, r1
    35a2:	80 81       	ld	r24, Z
    35a4:	90 e0       	ldi	r25, 0x00	; 0
    35a6:	b3 01       	movw	r22, r6
    35a8:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    35ac:	dd 20       	and	r13, r13
    35ae:	a9 f7       	brne	.-22     	; 0x359a <vfprintf+0x380>
    35b0:	06 c0       	rjmp	.+12     	; 0x35be <vfprintf+0x3a4>
    35b2:	80 e2       	ldi	r24, 0x20	; 32
    35b4:	90 e0       	ldi	r25, 0x00	; 0
    35b6:	b3 01       	movw	r22, r6
    35b8:	0e 94 00 1b 	call	0x3600	; 0x3600 <fputc>
    35bc:	ea 94       	dec	r14
    35be:	ee 20       	and	r14, r14
    35c0:	c1 f7       	brne	.-16     	; 0x35b2 <vfprintf+0x398>
    35c2:	43 ce       	rjmp	.-890    	; 0x324a <vfprintf+0x30>
    35c4:	f3 01       	movw	r30, r6
    35c6:	66 81       	ldd	r22, Z+6	; 0x06
    35c8:	77 81       	ldd	r23, Z+7	; 0x07
    35ca:	cb 01       	movw	r24, r22
    35cc:	2b 96       	adiw	r28, 0x0b	; 11
    35ce:	e2 e1       	ldi	r30, 0x12	; 18
    35d0:	0c 94 a6 1b 	jmp	0x374c	; 0x374c <__epilogue_restores__>

000035d4 <strnlen_P>:
    35d4:	fc 01       	movw	r30, r24
    35d6:	05 90       	lpm	r0, Z+
    35d8:	61 50       	subi	r22, 0x01	; 1
    35da:	70 40       	sbci	r23, 0x00	; 0
    35dc:	01 10       	cpse	r0, r1
    35de:	d8 f7       	brcc	.-10     	; 0x35d6 <strnlen_P+0x2>
    35e0:	80 95       	com	r24
    35e2:	90 95       	com	r25
    35e4:	8e 0f       	add	r24, r30
    35e6:	9f 1f       	adc	r25, r31
    35e8:	08 95       	ret

000035ea <strnlen>:
    35ea:	fc 01       	movw	r30, r24
    35ec:	61 50       	subi	r22, 0x01	; 1
    35ee:	70 40       	sbci	r23, 0x00	; 0
    35f0:	01 90       	ld	r0, Z+
    35f2:	01 10       	cpse	r0, r1
    35f4:	d8 f7       	brcc	.-10     	; 0x35ec <strnlen+0x2>
    35f6:	80 95       	com	r24
    35f8:	90 95       	com	r25
    35fa:	8e 0f       	add	r24, r30
    35fc:	9f 1f       	adc	r25, r31
    35fe:	08 95       	ret

00003600 <fputc>:
    3600:	0f 93       	push	r16
    3602:	1f 93       	push	r17
    3604:	cf 93       	push	r28
    3606:	df 93       	push	r29
    3608:	8c 01       	movw	r16, r24
    360a:	eb 01       	movw	r28, r22
    360c:	8b 81       	ldd	r24, Y+3	; 0x03
    360e:	81 ff       	sbrs	r24, 1
    3610:	1b c0       	rjmp	.+54     	; 0x3648 <fputc+0x48>
    3612:	82 ff       	sbrs	r24, 2
    3614:	0d c0       	rjmp	.+26     	; 0x3630 <fputc+0x30>
    3616:	2e 81       	ldd	r18, Y+6	; 0x06
    3618:	3f 81       	ldd	r19, Y+7	; 0x07
    361a:	8c 81       	ldd	r24, Y+4	; 0x04
    361c:	9d 81       	ldd	r25, Y+5	; 0x05
    361e:	28 17       	cp	r18, r24
    3620:	39 07       	cpc	r19, r25
    3622:	64 f4       	brge	.+24     	; 0x363c <fputc+0x3c>
    3624:	e8 81       	ld	r30, Y
    3626:	f9 81       	ldd	r31, Y+1	; 0x01
    3628:	01 93       	st	Z+, r16
    362a:	f9 83       	std	Y+1, r31	; 0x01
    362c:	e8 83       	st	Y, r30
    362e:	06 c0       	rjmp	.+12     	; 0x363c <fputc+0x3c>
    3630:	e8 85       	ldd	r30, Y+8	; 0x08
    3632:	f9 85       	ldd	r31, Y+9	; 0x09
    3634:	80 2f       	mov	r24, r16
    3636:	09 95       	icall
    3638:	89 2b       	or	r24, r25
    363a:	31 f4       	brne	.+12     	; 0x3648 <fputc+0x48>
    363c:	8e 81       	ldd	r24, Y+6	; 0x06
    363e:	9f 81       	ldd	r25, Y+7	; 0x07
    3640:	01 96       	adiw	r24, 0x01	; 1
    3642:	9f 83       	std	Y+7, r25	; 0x07
    3644:	8e 83       	std	Y+6, r24	; 0x06
    3646:	02 c0       	rjmp	.+4      	; 0x364c <fputc+0x4c>
    3648:	0f ef       	ldi	r16, 0xFF	; 255
    364a:	1f ef       	ldi	r17, 0xFF	; 255
    364c:	c8 01       	movw	r24, r16
    364e:	df 91       	pop	r29
    3650:	cf 91       	pop	r28
    3652:	1f 91       	pop	r17
    3654:	0f 91       	pop	r16
    3656:	08 95       	ret

00003658 <__ultoa_invert>:
    3658:	fa 01       	movw	r30, r20
    365a:	aa 27       	eor	r26, r26
    365c:	28 30       	cpi	r18, 0x08	; 8
    365e:	51 f1       	breq	.+84     	; 0x36b4 <__ultoa_invert+0x5c>
    3660:	20 31       	cpi	r18, 0x10	; 16
    3662:	81 f1       	breq	.+96     	; 0x36c4 <__ultoa_invert+0x6c>
    3664:	e8 94       	clt
    3666:	6f 93       	push	r22
    3668:	6e 7f       	andi	r22, 0xFE	; 254
    366a:	6e 5f       	subi	r22, 0xFE	; 254
    366c:	7f 4f       	sbci	r23, 0xFF	; 255
    366e:	8f 4f       	sbci	r24, 0xFF	; 255
    3670:	9f 4f       	sbci	r25, 0xFF	; 255
    3672:	af 4f       	sbci	r26, 0xFF	; 255
    3674:	b1 e0       	ldi	r27, 0x01	; 1
    3676:	3e d0       	rcall	.+124    	; 0x36f4 <__ultoa_invert+0x9c>
    3678:	b4 e0       	ldi	r27, 0x04	; 4
    367a:	3c d0       	rcall	.+120    	; 0x36f4 <__ultoa_invert+0x9c>
    367c:	67 0f       	add	r22, r23
    367e:	78 1f       	adc	r23, r24
    3680:	89 1f       	adc	r24, r25
    3682:	9a 1f       	adc	r25, r26
    3684:	a1 1d       	adc	r26, r1
    3686:	68 0f       	add	r22, r24
    3688:	79 1f       	adc	r23, r25
    368a:	8a 1f       	adc	r24, r26
    368c:	91 1d       	adc	r25, r1
    368e:	a1 1d       	adc	r26, r1
    3690:	6a 0f       	add	r22, r26
    3692:	71 1d       	adc	r23, r1
    3694:	81 1d       	adc	r24, r1
    3696:	91 1d       	adc	r25, r1
    3698:	a1 1d       	adc	r26, r1
    369a:	20 d0       	rcall	.+64     	; 0x36dc <__ultoa_invert+0x84>
    369c:	09 f4       	brne	.+2      	; 0x36a0 <__ultoa_invert+0x48>
    369e:	68 94       	set
    36a0:	3f 91       	pop	r19
    36a2:	2a e0       	ldi	r18, 0x0A	; 10
    36a4:	26 9f       	mul	r18, r22
    36a6:	11 24       	eor	r1, r1
    36a8:	30 19       	sub	r19, r0
    36aa:	30 5d       	subi	r19, 0xD0	; 208
    36ac:	31 93       	st	Z+, r19
    36ae:	de f6       	brtc	.-74     	; 0x3666 <__ultoa_invert+0xe>
    36b0:	cf 01       	movw	r24, r30
    36b2:	08 95       	ret
    36b4:	46 2f       	mov	r20, r22
    36b6:	47 70       	andi	r20, 0x07	; 7
    36b8:	40 5d       	subi	r20, 0xD0	; 208
    36ba:	41 93       	st	Z+, r20
    36bc:	b3 e0       	ldi	r27, 0x03	; 3
    36be:	0f d0       	rcall	.+30     	; 0x36de <__ultoa_invert+0x86>
    36c0:	c9 f7       	brne	.-14     	; 0x36b4 <__ultoa_invert+0x5c>
    36c2:	f6 cf       	rjmp	.-20     	; 0x36b0 <__ultoa_invert+0x58>
    36c4:	46 2f       	mov	r20, r22
    36c6:	4f 70       	andi	r20, 0x0F	; 15
    36c8:	40 5d       	subi	r20, 0xD0	; 208
    36ca:	4a 33       	cpi	r20, 0x3A	; 58
    36cc:	18 f0       	brcs	.+6      	; 0x36d4 <__ultoa_invert+0x7c>
    36ce:	49 5d       	subi	r20, 0xD9	; 217
    36d0:	31 fd       	sbrc	r19, 1
    36d2:	40 52       	subi	r20, 0x20	; 32
    36d4:	41 93       	st	Z+, r20
    36d6:	02 d0       	rcall	.+4      	; 0x36dc <__ultoa_invert+0x84>
    36d8:	a9 f7       	brne	.-22     	; 0x36c4 <__ultoa_invert+0x6c>
    36da:	ea cf       	rjmp	.-44     	; 0x36b0 <__ultoa_invert+0x58>
    36dc:	b4 e0       	ldi	r27, 0x04	; 4
    36de:	a6 95       	lsr	r26
    36e0:	97 95       	ror	r25
    36e2:	87 95       	ror	r24
    36e4:	77 95       	ror	r23
    36e6:	67 95       	ror	r22
    36e8:	ba 95       	dec	r27
    36ea:	c9 f7       	brne	.-14     	; 0x36de <__ultoa_invert+0x86>
    36ec:	00 97       	sbiw	r24, 0x00	; 0
    36ee:	61 05       	cpc	r22, r1
    36f0:	71 05       	cpc	r23, r1
    36f2:	08 95       	ret
    36f4:	9b 01       	movw	r18, r22
    36f6:	ac 01       	movw	r20, r24
    36f8:	0a 2e       	mov	r0, r26
    36fa:	06 94       	lsr	r0
    36fc:	57 95       	ror	r21
    36fe:	47 95       	ror	r20
    3700:	37 95       	ror	r19
    3702:	27 95       	ror	r18
    3704:	ba 95       	dec	r27
    3706:	c9 f7       	brne	.-14     	; 0x36fa <__ultoa_invert+0xa2>
    3708:	62 0f       	add	r22, r18
    370a:	73 1f       	adc	r23, r19
    370c:	84 1f       	adc	r24, r20
    370e:	95 1f       	adc	r25, r21
    3710:	a0 1d       	adc	r26, r0
    3712:	08 95       	ret

00003714 <__prologue_saves__>:
    3714:	2f 92       	push	r2
    3716:	3f 92       	push	r3
    3718:	4f 92       	push	r4
    371a:	5f 92       	push	r5
    371c:	6f 92       	push	r6
    371e:	7f 92       	push	r7
    3720:	8f 92       	push	r8
    3722:	9f 92       	push	r9
    3724:	af 92       	push	r10
    3726:	bf 92       	push	r11
    3728:	cf 92       	push	r12
    372a:	df 92       	push	r13
    372c:	ef 92       	push	r14
    372e:	ff 92       	push	r15
    3730:	0f 93       	push	r16
    3732:	1f 93       	push	r17
    3734:	cf 93       	push	r28
    3736:	df 93       	push	r29
    3738:	cd b7       	in	r28, 0x3d	; 61
    373a:	de b7       	in	r29, 0x3e	; 62
    373c:	ca 1b       	sub	r28, r26
    373e:	db 0b       	sbc	r29, r27
    3740:	0f b6       	in	r0, 0x3f	; 63
    3742:	f8 94       	cli
    3744:	de bf       	out	0x3e, r29	; 62
    3746:	0f be       	out	0x3f, r0	; 63
    3748:	cd bf       	out	0x3d, r28	; 61
    374a:	09 94       	ijmp

0000374c <__epilogue_restores__>:
    374c:	2a 88       	ldd	r2, Y+18	; 0x12
    374e:	39 88       	ldd	r3, Y+17	; 0x11
    3750:	48 88       	ldd	r4, Y+16	; 0x10
    3752:	5f 84       	ldd	r5, Y+15	; 0x0f
    3754:	6e 84       	ldd	r6, Y+14	; 0x0e
    3756:	7d 84       	ldd	r7, Y+13	; 0x0d
    3758:	8c 84       	ldd	r8, Y+12	; 0x0c
    375a:	9b 84       	ldd	r9, Y+11	; 0x0b
    375c:	aa 84       	ldd	r10, Y+10	; 0x0a
    375e:	b9 84       	ldd	r11, Y+9	; 0x09
    3760:	c8 84       	ldd	r12, Y+8	; 0x08
    3762:	df 80       	ldd	r13, Y+7	; 0x07
    3764:	ee 80       	ldd	r14, Y+6	; 0x06
    3766:	fd 80       	ldd	r15, Y+5	; 0x05
    3768:	0c 81       	ldd	r16, Y+4	; 0x04
    376a:	1b 81       	ldd	r17, Y+3	; 0x03
    376c:	aa 81       	ldd	r26, Y+2	; 0x02
    376e:	b9 81       	ldd	r27, Y+1	; 0x01
    3770:	ce 0f       	add	r28, r30
    3772:	d1 1d       	adc	r29, r1
    3774:	0f b6       	in	r0, 0x3f	; 63
    3776:	f8 94       	cli
    3778:	de bf       	out	0x3e, r29	; 62
    377a:	0f be       	out	0x3f, r0	; 63
    377c:	cd bf       	out	0x3d, r28	; 61
    377e:	ed 01       	movw	r28, r26
    3780:	08 95       	ret

00003782 <_exit>:
    3782:	f8 94       	cli

00003784 <__stop_program>:
    3784:	ff cf       	rjmp	.-2      	; 0x3784 <__stop_program>
