
AniBike2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000004fc  00800100  000029d2  00002a66  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000029d2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ab  008005fc  008005fc  00002f62  2**0
                  ALLOC
  3 .stab         00003f78  00000000  00000000  00002f64  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000018fb  00000000  00000000  00006edc  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2e 00 	jmp	0x5c	; 0x5c <__ctors_end>
       4:	0c 94 3c 01 	jmp	0x278	; 0x278 <__vector_1>
       8:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
       c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      10:	0c 94 d9 00 	jmp	0x1b2	; 0x1b2 <__vector_4>
      14:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      18:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      1c:	0c 94 8d 00 	jmp	0x11a	; 0x11a <__vector_7>
      20:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      24:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      28:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      2c:	0c 94 05 01 	jmp	0x20a	; 0x20a <__vector_11>
      30:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      34:	0c 94 cc 01 	jmp	0x398	; 0x398 <__vector_13>
      38:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      3c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      40:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      44:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      48:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      4c:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      50:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      54:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>
      58:	0c 94 4b 00 	jmp	0x96	; 0x96 <__bad_interrupt>

0000005c <__ctors_end>:
      5c:	11 24       	eor	r1, r1
      5e:	1f be       	out	0x3f, r1	; 63
      60:	cf ef       	ldi	r28, 0xFF	; 255
      62:	d8 e0       	ldi	r29, 0x08	; 8
      64:	de bf       	out	0x3e, r29	; 62
      66:	cd bf       	out	0x3d, r28	; 61

00000068 <__do_copy_data>:
      68:	15 e0       	ldi	r17, 0x05	; 5
      6a:	a0 e0       	ldi	r26, 0x00	; 0
      6c:	b1 e0       	ldi	r27, 0x01	; 1
      6e:	e2 ed       	ldi	r30, 0xD2	; 210
      70:	f9 e2       	ldi	r31, 0x29	; 41
      72:	02 c0       	rjmp	.+4      	; 0x78 <.do_copy_data_start>

00000074 <.do_copy_data_loop>:
      74:	05 90       	lpm	r0, Z+
      76:	0d 92       	st	X+, r0

00000078 <.do_copy_data_start>:
      78:	ac 3f       	cpi	r26, 0xFC	; 252
      7a:	b1 07       	cpc	r27, r17
      7c:	d9 f7       	brne	.-10     	; 0x74 <.do_copy_data_loop>

0000007e <__do_clear_bss>:
      7e:	17 e0       	ldi	r17, 0x07	; 7
      80:	ac ef       	ldi	r26, 0xFC	; 252
      82:	b5 e0       	ldi	r27, 0x05	; 5
      84:	01 c0       	rjmp	.+2      	; 0x88 <.do_clear_bss_start>

00000086 <.do_clear_bss_loop>:
      86:	1d 92       	st	X+, r1

00000088 <.do_clear_bss_start>:
      88:	a7 3a       	cpi	r26, 0xA7	; 167
      8a:	b1 07       	cpc	r27, r17
      8c:	e1 f7       	brne	.-8      	; 0x86 <.do_clear_bss_loop>
      8e:	0e 94 fd 01 	call	0x3fa	; 0x3fa <main>
      92:	0c 94 e7 14 	jmp	0x29ce	; 0x29ce <_exit>

00000096 <__bad_interrupt>:
      96:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000009a <Anibike_InitLeds>:

//==============================================================================================
void Anibike_InitLeds ( void )
{
	// Direction of rows
	DDRA  = 0b11111111;
      9a:	8f ef       	ldi	r24, 0xFF	; 255
      9c:	81 b9       	out	0x01, r24	; 1
	PORTA = 0b00000000;
      9e:	12 b8       	out	0x02, r1	; 2

	PORTB&= 0b00001111;
      a0:	85 b1       	in	r24, 0x05	; 5
      a2:	8f 70       	andi	r24, 0x0F	; 15
      a4:	85 b9       	out	0x05, r24	; 5
	DDRB &= 0b00001111;
      a6:	84 b1       	in	r24, 0x04	; 4
      a8:	8f 70       	andi	r24, 0x0F	; 15
      aa:	84 b9       	out	0x04, r24	; 4

	PORTC = 0b00000000;
      ac:	18 b8       	out	0x08, r1	; 8
	DDRC  = 0b00000000;
      ae:	17 b8       	out	0x07, r1	; 7

	PORTD&= 0b11000011;
      b0:	8b b1       	in	r24, 0x0b	; 11
      b2:	83 7c       	andi	r24, 0xC3	; 195
      b4:	8b b9       	out	0x0b, r24	; 11
	DDRD &= 0b11000011;
      b6:	8a b1       	in	r24, 0x0a	; 10
      b8:	83 7c       	andi	r24, 0xC3	; 195
      ba:	8a b9       	out	0x0a, r24	; 10

	PORTF = 0b00000000;
      bc:	11 ba       	out	0x11, r1	; 17
	DDRF  = 0b00000000;
      be:	10 ba       	out	0x10, r1	; 16
}
      c0:	08 95       	ret

000000c2 <Anibike_LightLEDs>:

// Low = L1 (0x0F) ; High = L2 (0xF0)
//==============================================================================================
void Anibike_LightLEDs ( uint8_t iR, uint8_t iG, uint8_t iB )
{
	ROW_PORT = (1<<g_iRowNum);
      c2:	90 91 0c 06 	lds	r25, 0x060C
      c6:	21 e0       	ldi	r18, 0x01	; 1
      c8:	30 e0       	ldi	r19, 0x00	; 0
      ca:	02 c0       	rjmp	.+4      	; 0xd0 <Anibike_LightLEDs+0xe>
      cc:	22 0f       	add	r18, r18
      ce:	33 1f       	adc	r19, r19
      d0:	9a 95       	dec	r25
      d2:	e2 f7       	brpl	.-8      	; 0xcc <Anibike_LightLEDs+0xa>
      d4:	22 b9       	out	0x02, r18	; 2

	DDRB &= (0x0F);
      d6:	94 b1       	in	r25, 0x04	; 4
      d8:	9f 70       	andi	r25, 0x0F	; 15
      da:	94 b9       	out	0x04, r25	; 4
	DDRB |= (iR&0x0F)<<4;
      dc:	24 b1       	in	r18, 0x04	; 4
      de:	98 2f       	mov	r25, r24
      e0:	92 95       	swap	r25
      e2:	90 7f       	andi	r25, 0xF0	; 240
      e4:	92 2b       	or	r25, r18
      e6:	94 b9       	out	0x04, r25	; 4

	DDRC = (iB&0xF0)|((iG&0xF0)>>4);
      e8:	94 2f       	mov	r25, r20
      ea:	90 7f       	andi	r25, 0xF0	; 240
      ec:	26 2f       	mov	r18, r22
      ee:	22 95       	swap	r18
      f0:	2f 70       	andi	r18, 0x0F	; 15
      f2:	92 2b       	or	r25, r18
      f4:	97 b9       	out	0x07, r25	; 7
	
	DDRD &= 0b11000011;
      f6:	9a b1       	in	r25, 0x0a	; 10
      f8:	93 7c       	andi	r25, 0xC3	; 195
      fa:	9a b9       	out	0x0a, r25	; 10
	DDRD |= (iG&0x0F)<<2;
      fc:	9a b1       	in	r25, 0x0a	; 10
      fe:	70 e0       	ldi	r23, 0x00	; 0
     100:	6f 70       	andi	r22, 0x0F	; 15
     102:	70 70       	andi	r23, 0x00	; 0
     104:	66 0f       	add	r22, r22
     106:	77 1f       	adc	r23, r23
     108:	66 0f       	add	r22, r22
     10a:	77 1f       	adc	r23, r23
     10c:	96 2b       	or	r25, r22
     10e:	9a b9       	out	0x0a, r25	; 10

	DDRF = (iB&0x0F)|((iR&0xF0));
     110:	4f 70       	andi	r20, 0x0F	; 15
     112:	80 7f       	andi	r24, 0xF0	; 240
     114:	48 2b       	or	r20, r24
     116:	40 bb       	out	0x10, r20	; 16
}
     118:	08 95       	ret

0000011a <__vector_7>:
//==============================================================================================

// Interrupt for changing single angle units
//==============================================================================================
ISR (TIMER1_COMPA_vect/*, ISR_NOBLOCK*/)
{
     11a:	1f 92       	push	r1
     11c:	0f 92       	push	r0
     11e:	0f b6       	in	r0, 0x3f	; 63
     120:	0f 92       	push	r0
     122:	11 24       	eor	r1, r1
     124:	2f 93       	push	r18
     126:	3f 93       	push	r19
     128:	8f 93       	push	r24
     12a:	9f 93       	push	r25
	g_iRow_Offset = 0;
     12c:	10 92 21 06 	sts	0x0621, r1
	g_iRowNum = 0;
     130:	10 92 0c 06 	sts	0x060C, r1
	
	if ( g_bHighSpeedMode )
     134:	80 91 1b 01 	lds	r24, 0x011B
     138:	88 23       	and	r24, r24
     13a:	19 f1       	breq	.+70     	; 0x182 <__vector_7+0x68>
	{
		g_iProcessNeed = 96;	// Processing
     13c:	80 e6       	ldi	r24, 0x60	; 96
     13e:	80 93 02 01 	sts	0x0102, r24
		g_iFlashRead = 48;		// Flash needs reading
     142:	80 e3       	ldi	r24, 0x30	; 48
     144:	80 93 01 01 	sts	0x0101, r24
		g_iProcessNeed = 0;		// Processing
		g_iFlashRead = 96;		// Flash needs reading
	}

	// Switch Buffers
	if ( g_iPWM_Seq_L1_Active == g_iPWM_Seq_L1_Buff1 )
     148:	20 91 a5 07 	lds	r18, 0x07A5
     14c:	30 91 a6 07 	lds	r19, 0x07A6
     150:	86 e0       	ldi	r24, 0x06	; 6
     152:	25 3e       	cpi	r18, 0xE5	; 229
     154:	38 07       	cpc	r19, r24
     156:	11 f1       	breq	.+68     	; 0x19c <__vector_7+0x82>
		g_iPWM_Seq_L1_Active = g_iPWM_Seq_L1_Buff2;
		g_iPWM_Seq_L1_NotActive = g_iPWM_Seq_L1_Buff1;
	}
	else
	{
		g_iPWM_Seq_L1_Active = g_iPWM_Seq_L1_Buff1;
     158:	85 ee       	ldi	r24, 0xE5	; 229
     15a:	96 e0       	ldi	r25, 0x06	; 6
     15c:	90 93 a6 07 	sts	0x07A6, r25
     160:	80 93 a5 07 	sts	0x07A5, r24
		g_iPWM_Seq_L1_NotActive = g_iPWM_Seq_L1_Buff2;
     164:	83 e2       	ldi	r24, 0x23	; 35
     166:	96 e0       	ldi	r25, 0x06	; 6
     168:	90 93 e4 06 	sts	0x06E4, r25
     16c:	80 93 e3 06 	sts	0x06E3, r24
	}

	// Check if needs memory wrap around
	// TBD

}
     170:	9f 91       	pop	r25
     172:	8f 91       	pop	r24
     174:	3f 91       	pop	r19
     176:	2f 91       	pop	r18
     178:	0f 90       	pop	r0
     17a:	0f be       	out	0x3f, r0	; 63
     17c:	0f 90       	pop	r0
     17e:	1f 90       	pop	r1
     180:	18 95       	reti
		g_iProcessNeed = 96;	// Processing
		g_iFlashRead = 48;		// Flash needs reading
	}
	else 
	{
		g_iProcessNeed = 0;		// Processing
     182:	10 92 02 01 	sts	0x0102, r1
		g_iFlashRead = 96;		// Flash needs reading
     186:	80 e6       	ldi	r24, 0x60	; 96
     188:	80 93 01 01 	sts	0x0101, r24
	}

	// Switch Buffers
	if ( g_iPWM_Seq_L1_Active == g_iPWM_Seq_L1_Buff1 )
     18c:	20 91 a5 07 	lds	r18, 0x07A5
     190:	30 91 a6 07 	lds	r19, 0x07A6
     194:	86 e0       	ldi	r24, 0x06	; 6
     196:	25 3e       	cpi	r18, 0xE5	; 229
     198:	38 07       	cpc	r19, r24
     19a:	f1 f6       	brne	.-68     	; 0x158 <__vector_7+0x3e>
	{
		g_iPWM_Seq_L1_Active = g_iPWM_Seq_L1_Buff2;
     19c:	83 e2       	ldi	r24, 0x23	; 35
     19e:	96 e0       	ldi	r25, 0x06	; 6
     1a0:	90 93 a6 07 	sts	0x07A6, r25
     1a4:	80 93 a5 07 	sts	0x07A5, r24
		g_iPWM_Seq_L1_NotActive = g_iPWM_Seq_L1_Buff1;
     1a8:	30 93 e4 06 	sts	0x06E4, r19
     1ac:	20 93 e3 06 	sts	0x06E3, r18
     1b0:	df cf       	rjmp	.-66     	; 0x170 <__vector_7+0x56>

000001b2 <__vector_4>:

// Interrupt for PWM timing
//==============================================================================================
ISR (TIMER2_COMP_vect, ISR_NAKED/*, ISR_NOBLOCK*/)
{
	asm ( "push r24" );	
     1b2:	8f 93       	push	r24
	asm ( "push r25" );
     1b4:	9f 93       	push	r25
	asm ( "push r30" );
     1b6:	ef 93       	push	r30
	asm ( "push r31" );
     1b8:	ff 93       	push	r31


	asm ( "in	r24, 0x04" );			// Load the contants of DDRB
     1ba:	84 b1       	in	r24, 0x04	; 4
	asm ( "andi	r24, 0x0F" );			// Make and with 0x0F
     1bc:	8f 70       	andi	r24, 0x0F	; 15
	asm ( "out	0x04, r24" );			// Update DDRB
     1be:	84 b9       	out	0x04, r24	; 4

	asm ( "out	0x07, r1" );			// Update DDRC to be 0
     1c0:	17 b8       	out	0x07, r1	; 7

	asm ( "in	r24, 0x0A" );			// Load the contants of DDRD
     1c2:	8a b1       	in	r24, 0x0a	; 10
	asm ( "andi	r24, 0xC3" );			// Make and with 0b00111100
     1c4:	83 7c       	andi	r24, 0xC3	; 195
	asm ( "out	0x0A, r24" );			// Update DDRD
     1c6:	8a b9       	out	0x0a, r24	; 10
	
	asm ( "out	0x10, r1" );			// Update DDRF to be 0
     1c8:	10 ba       	out	0x10, r1	; 16

	asm ( "out	0x02, r1" );			// Update PORTA to be 0
     1ca:	12 b8       	out	0x02, r1	; 2

	// Manipulate DDRB
	asm ( "lds	r25, g_iPORTB_Buf" );
     1cc:	90 91 0f 06 	lds	r25, 0x060F
	asm ( "in	r24, 0x04" );
     1d0:	84 b1       	in	r24, 0x04	; 4
	asm ( "or	r24, r25" );
     1d2:	89 2b       	or	r24, r25
	asm ( "out	0x04, r24" );
     1d4:	84 b9       	out	0x04, r24	; 4

	// Manipulate DDRC
	asm ( "lds	r25, g_iPORTC_Buf" );
     1d6:	90 91 10 06 	lds	r25, 0x0610
	asm ( "out	0x07, r25" );
     1da:	97 b9       	out	0x07, r25	; 7

	// Manipulate DDRD
	asm ( "lds	r25, g_iPORTD_Buf" );
     1dc:	90 91 11 06 	lds	r25, 0x0611
	asm ( "in	r24, 0x0A" );
     1e0:	8a b1       	in	r24, 0x0a	; 10
	asm ( "or	r24, r25" );
     1e2:	89 2b       	or	r24, r25
	asm ( "out	0x0A, r24" );
     1e4:	8a b9       	out	0x0a, r24	; 10

	// Manipulate DDRF
	asm ( "lds	r25, g_iPORTF_Buf" );
     1e6:	90 91 12 06 	lds	r25, 0x0612
	asm ( "out	0x10, r25" );
     1ea:	90 bb       	out	0x10, r25	; 16


	// Assign correct Row
	asm ( "ldi	r30, lo8(g_iRowPatterns)" );
     1ec:	e3 e0       	ldi	r30, 0x03	; 3
	asm ( "ldi	r31, hi8(g_iRowPatterns)" );
     1ee:	f1 e0       	ldi	r31, 0x01	; 1
	asm	( "lds	r24, g_iRowNum" );
     1f0:	80 91 0c 06 	lds	r24, 0x060C
	asm ( "add	r30, r24" );
     1f4:	e8 0f       	add	r30, r24
	asm ( "adc	r31, r1" );
     1f6:	f1 1d       	adc	r31, r1
	asm ( "ldd	r24, Z+0" );
     1f8:	80 81       	ld	r24, Z
	asm ( "out	0x02, r24" );
     1fa:	82 b9       	out	0x02, r24	; 2
	
	// Store 0 to g_iBuffersReady
	asm ( "sts	g_iBuffersReady, r1" );
     1fc:	10 92 0e 06 	sts	0x060E, r1

	asm ( "pop r31" );	
     200:	ff 91       	pop	r31
	asm ( "pop r30" );
     202:	ef 91       	pop	r30
	asm ( "pop r25" );
     204:	9f 91       	pop	r25
	asm ( "pop r24" );
     206:	8f 91       	pop	r24

	reti ();
     208:	18 95       	reti

0000020a <__vector_11>:

// Timer0 (8bit) Overflow interrupt
// Usage: for timing wheel cycle
//==============================================================================================
ISR (TIMER0_OVF_vect/*, ISR_NAKED*//*, ISR_NOBLOCK*/)
{
     20a:	1f 92       	push	r1
     20c:	0f 92       	push	r0
     20e:	0f b6       	in	r0, 0x3f	; 63
     210:	0f 92       	push	r0
     212:	11 24       	eor	r1, r1
     214:	2f 93       	push	r18
     216:	8f 93       	push	r24
     218:	9f 93       	push	r25
     21a:	af 93       	push	r26
     21c:	bf 93       	push	r27
	g_iTimer0OvfCounter++;
     21e:	80 91 13 06 	lds	r24, 0x0613
     222:	90 91 14 06 	lds	r25, 0x0614
     226:	a0 91 15 06 	lds	r26, 0x0615
     22a:	b0 91 16 06 	lds	r27, 0x0616
     22e:	01 96       	adiw	r24, 0x01	; 1
     230:	a1 1d       	adc	r26, r1
     232:	b1 1d       	adc	r27, r1
     234:	80 93 13 06 	sts	0x0613, r24
     238:	90 93 14 06 	sts	0x0614, r25
     23c:	a0 93 15 06 	sts	0x0615, r26
     240:	b0 93 16 06 	sts	0x0616, r27

	if ( g_iTimer0OvfCounter > 781250 )		// 10 sec
     244:	80 91 13 06 	lds	r24, 0x0613
     248:	90 91 14 06 	lds	r25, 0x0614
     24c:	a0 91 15 06 	lds	r26, 0x0615
     250:	b0 91 16 06 	lds	r27, 0x0616
     254:	83 5c       	subi	r24, 0xC3	; 195
     256:	9b 4e       	sbci	r25, 0xEB	; 235
     258:	ab 40       	sbci	r26, 0x0B	; 11
     25a:	b0 40       	sbci	r27, 0x00	; 0
     25c:	18 f0       	brcs	.+6      	; 0x264 <__vector_11+0x5a>
		g_bPowerSafeMode = 1;
     25e:	81 e0       	ldi	r24, 0x01	; 1
     260:	80 93 17 06 	sts	0x0617, r24
	asm ( "		lds r16, g_iTimer0OvfCounter" );
	asm ( "		inc r16 " );
	asm ( "		sts g_iTimer0OvfCounter, r16" );
	asm ( "		pop r16" );
	asm ( "		reti" );*/
}
     264:	bf 91       	pop	r27
     266:	af 91       	pop	r26
     268:	9f 91       	pop	r25
     26a:	8f 91       	pop	r24
     26c:	2f 91       	pop	r18
     26e:	0f 90       	pop	r0
     270:	0f be       	out	0x3f, r0	; 63
     272:	0f 90       	pop	r0
     274:	1f 90       	pop	r1
     276:	18 95       	reti

00000278 <__vector_1>:

// Hall Sensor Interrupt
// Each Hall signal we calculate the appropriate timing parameters
//==============================================================================================
ISR (INT0_vect/*, ISR_NOBLOCK*/)
{ 
     278:	1f 92       	push	r1
     27a:	0f 92       	push	r0
     27c:	0f b6       	in	r0, 0x3f	; 63
     27e:	0f 92       	push	r0
     280:	11 24       	eor	r1, r1
     282:	2f 93       	push	r18
     284:	3f 93       	push	r19
     286:	8f 93       	push	r24
     288:	9f 93       	push	r25
     28a:	af 93       	push	r26
     28c:	bf 93       	push	r27
	g_bPowerSafeMode = 0;
     28e:	10 92 17 06 	sts	0x0617, r1
	// Read current counter time
	g_iCurrent = TCNT0;
     292:	86 b5       	in	r24, 0x26	; 38
     294:	80 93 01 06 	sts	0x0601, r24
	
	// Calculate time which passed between two passes over Hall Sensor
	g_iTimeCount = ( g_iTimer0OvfCounter*256 ) + g_iCurrent - g_iLast;
     298:	80 91 13 06 	lds	r24, 0x0613
     29c:	90 91 14 06 	lds	r25, 0x0614
     2a0:	a0 91 15 06 	lds	r26, 0x0615
     2a4:	b0 91 16 06 	lds	r27, 0x0616
     2a8:	20 91 01 06 	lds	r18, 0x0601
     2ac:	30 91 00 06 	lds	r19, 0x0600
     2b0:	ba 2f       	mov	r27, r26
     2b2:	a9 2f       	mov	r26, r25
     2b4:	98 2f       	mov	r25, r24
     2b6:	88 27       	eor	r24, r24
     2b8:	82 0f       	add	r24, r18
     2ba:	91 1d       	adc	r25, r1
     2bc:	a1 1d       	adc	r26, r1
     2be:	b1 1d       	adc	r27, r1
     2c0:	83 1b       	sub	r24, r19
     2c2:	91 09       	sbc	r25, r1
     2c4:	a1 09       	sbc	r26, r1
     2c6:	b1 09       	sbc	r27, r1
     2c8:	80 93 fc 05 	sts	0x05FC, r24
     2cc:	90 93 fd 05 	sts	0x05FD, r25
     2d0:	a0 93 fe 05 	sts	0x05FE, r26
     2d4:	b0 93 ff 05 	sts	0x05FF, r27
	
	// if >440 msec -> low speed
	// if <400 msec -> hi speed
	// Hysteresis
	if (g_iTimeCount>1100000)
     2d8:	80 91 fc 05 	lds	r24, 0x05FC
     2dc:	90 91 fd 05 	lds	r25, 0x05FD
     2e0:	a0 91 fe 05 	lds	r26, 0x05FE
     2e4:	b0 91 ff 05 	lds	r27, 0x05FF
     2e8:	81 5e       	subi	r24, 0xE1	; 225
     2ea:	98 4c       	sbci	r25, 0xC8	; 200
     2ec:	a0 41       	sbci	r26, 0x10	; 16
     2ee:	b0 40       	sbci	r27, 0x00	; 0
     2f0:	08 f0       	brcs	.+2      	; 0x2f4 <__vector_1+0x7c>
     2f2:	49 c0       	rjmp	.+146    	; 0x386 <__vector_1+0x10e>
	{
		OCR2A = 0x44;							// Set 28usec
		TCNT2 = 0xBB;
		g_bHighSpeedMode = 0;
	}
	else if (g_iTimeCount<1000000)
     2f4:	80 91 fc 05 	lds	r24, 0x05FC
     2f8:	90 91 fd 05 	lds	r25, 0x05FD
     2fc:	a0 91 fe 05 	lds	r26, 0x05FE
     300:	b0 91 ff 05 	lds	r27, 0x05FF
     304:	80 54       	subi	r24, 0x40	; 64
     306:	92 44       	sbci	r25, 0x42	; 66
     308:	af 40       	sbci	r26, 0x0F	; 15
     30a:	b0 40       	sbci	r27, 0x00	; 0
     30c:	48 f4       	brcc	.+18     	; 0x320 <__vector_1+0xa8>
	{
		OCR2A = 0x29;							// Set 17usec
     30e:	89 e2       	ldi	r24, 0x29	; 41
     310:	80 93 b3 00 	sts	0x00B3, r24
		TCNT2 = 0xD6;
     314:	86 ed       	ldi	r24, 0xD6	; 214
     316:	80 93 b2 00 	sts	0x00B2, r24
		g_bHighSpeedMode = 1;
     31a:	81 e0       	ldi	r24, 0x01	; 1
     31c:	80 93 1b 01 	sts	0x011B, r24
	}

	g_iTimePerAngleElement = g_iTimer0OvfCounter;	
     320:	80 91 13 06 	lds	r24, 0x0613
     324:	90 91 14 06 	lds	r25, 0x0614
     328:	a0 91 15 06 	lds	r26, 0x0615
     32c:	b0 91 16 06 	lds	r27, 0x0616
     330:	80 93 02 06 	sts	0x0602, r24
     334:	90 93 03 06 	sts	0x0603, r25
     338:	a0 93 04 06 	sts	0x0604, r26
     33c:	b0 93 05 06 	sts	0x0605, r27
				// divide by ANGULAR_RESOLUTION = 256
				// for ANGULAR_RESOLUTION radial pixels 

	g_iTimer0OvfCounter = 0;
     340:	10 92 13 06 	sts	0x0613, r1
     344:	10 92 14 06 	sts	0x0614, r1
     348:	10 92 15 06 	sts	0x0615, r1
     34c:	10 92 16 06 	sts	0x0616, r1
	g_iLast = g_iCurrent;	
     350:	80 91 01 06 	lds	r24, 0x0601
     354:	80 93 00 06 	sts	0x0600, r24

	OCR1A = g_iTimePerAngleElement;
     358:	80 91 02 06 	lds	r24, 0x0602
     35c:	90 91 03 06 	lds	r25, 0x0603
     360:	a0 91 04 06 	lds	r26, 0x0604
     364:	b0 91 05 06 	lds	r27, 0x0605
     368:	90 93 89 00 	sts	0x0089, r25
     36c:	80 93 88 00 	sts	0x0088, r24

	// Check State
	 
//	g_iLineNum_Rad1 = INITIAL_RAD1_LINE_POS;
//	g_iLineNum_Rad2 = INITIAL_RAD2_LINE_POS; 
}
     370:	bf 91       	pop	r27
     372:	af 91       	pop	r26
     374:	9f 91       	pop	r25
     376:	8f 91       	pop	r24
     378:	3f 91       	pop	r19
     37a:	2f 91       	pop	r18
     37c:	0f 90       	pop	r0
     37e:	0f be       	out	0x3f, r0	; 63
     380:	0f 90       	pop	r0
     382:	1f 90       	pop	r1
     384:	18 95       	reti
	// if >440 msec -> low speed
	// if <400 msec -> hi speed
	// Hysteresis
	if (g_iTimeCount>1100000)
	{
		OCR2A = 0x44;							// Set 28usec
     386:	84 e4       	ldi	r24, 0x44	; 68
     388:	80 93 b3 00 	sts	0x00B3, r24
		TCNT2 = 0xBB;
     38c:	8b eb       	ldi	r24, 0xBB	; 187
     38e:	80 93 b2 00 	sts	0x00B2, r24
		g_bHighSpeedMode = 0;
     392:	10 92 1b 01 	sts	0x011B, r1
     396:	c4 cf       	rjmp	.-120    	; 0x320 <__vector_1+0xa8>

00000398 <__vector_13>:


// Uart Communication interrupt
//==============================================================================================
ISR (USART0_RX_vect)
{ 
     398:	1f 92       	push	r1
     39a:	0f 92       	push	r0
     39c:	0f b6       	in	r0, 0x3f	; 63
     39e:	0f 92       	push	r0
     3a0:	11 24       	eor	r1, r1
     3a2:	2f 93       	push	r18
     3a4:	3f 93       	push	r19
     3a6:	4f 93       	push	r20
     3a8:	5f 93       	push	r21
     3aa:	6f 93       	push	r22
     3ac:	7f 93       	push	r23
     3ae:	8f 93       	push	r24
     3b0:	9f 93       	push	r25
     3b2:	af 93       	push	r26
     3b4:	bf 93       	push	r27
     3b6:	ef 93       	push	r30
     3b8:	ff 93       	push	r31
	unsigned char dummy;

	// Shut down all leds
	ROW_PORT = 0x00;
     3ba:	12 b8       	out	0x02, r1	; 2

	// Disable All Interrupts
	cli ( );
     3bc:	f8 94       	cli

	// Run communication function
	DataTransferMode ( );
     3be:	0e 94 31 0f 	call	0x1e62	; 0x1e62 <DataTransferMode>

	// Flush input buffer
	while ( UCSR0A & (1<<RXC0 ) ) dummy = UDR0; 
     3c2:	80 91 c0 00 	lds	r24, 0x00C0
     3c6:	87 ff       	sbrs	r24, 7
     3c8:	06 c0       	rjmp	.+12     	; 0x3d6 <__vector_13+0x3e>
     3ca:	80 91 c6 00 	lds	r24, 0x00C6
     3ce:	80 91 c0 00 	lds	r24, 0x00C0
     3d2:	87 fd       	sbrc	r24, 7
     3d4:	fa cf       	rjmp	.-12     	; 0x3ca <__vector_13+0x32>


	// Enable all interrupts
	sei ( );
     3d6:	78 94       	sei
}
     3d8:	ff 91       	pop	r31
     3da:	ef 91       	pop	r30
     3dc:	bf 91       	pop	r27
     3de:	af 91       	pop	r26
     3e0:	9f 91       	pop	r25
     3e2:	8f 91       	pop	r24
     3e4:	7f 91       	pop	r23
     3e6:	6f 91       	pop	r22
     3e8:	5f 91       	pop	r21
     3ea:	4f 91       	pop	r20
     3ec:	3f 91       	pop	r19
     3ee:	2f 91       	pop	r18
     3f0:	0f 90       	pop	r0
     3f2:	0f be       	out	0x3f, r0	; 63
     3f4:	0f 90       	pop	r0
     3f6:	1f 90       	pop	r1
     3f8:	18 95       	reti

000003fa <main>:


// MAIN THREAD
//==============================================================================================
int main ()
{
     3fa:	7f 92       	push	r7
     3fc:	8f 92       	push	r8
     3fe:	9f 92       	push	r9
     400:	af 92       	push	r10
     402:	bf 92       	push	r11
     404:	cf 92       	push	r12
     406:	df 92       	push	r13
     408:	ef 92       	push	r14
     40a:	ff 92       	push	r15
     40c:	0f 93       	push	r16
     40e:	1f 93       	push	r17
     410:	df 93       	push	r29
     412:	cf 93       	push	r28
     414:	cd b7       	in	r28, 0x3d	; 61
     416:	de b7       	in	r29, 0x3e	; 62
     418:	c0 56       	subi	r28, 0x60	; 96
     41a:	d0 40       	sbci	r29, 0x00	; 0
     41c:	0f b6       	in	r0, 0x3f	; 63
     41e:	f8 94       	cli
     420:	de bf       	out	0x3e, r29	; 62
     422:	0f be       	out	0x3f, r0	; 63
     424:	cd bf       	out	0x3d, r28	; 61
     426:	8e 01       	movw	r16, r28
     428:	0f 5f       	subi	r16, 0xFF	; 255
     42a:	1f 4f       	sbci	r17, 0xFF	; 255
     42c:	de 01       	movw	r26, r28
     42e:	d1 96       	adiw	r26, 0x31	; 49
     430:	f8 01       	movw	r30, r16
     432:	80 e1       	ldi	r24, 0x10	; 16
     434:	e8 2e       	mov	r14, r24
     436:	f1 2c       	mov	r15, r1
     438:	ec 0e       	add	r14, r28
     43a:	fd 1e       	adc	r15, r29
//	uint8_t iTemp;

	for ( i = 0; i < 15; i++ )
	{
		Line.Colors.Red_L2[i] 	= (i/2)|((i/2)<<4);
		Line.Colors.Green_L2[i] = (7-i/2)|((7-i/2)<<4);
     43c:	77 e0       	ldi	r23, 0x07	; 7
     43e:	c7 2e       	mov	r12, r23
     440:	d1 2c       	mov	r13, r1
     442:	77 e0       	ldi	r23, 0x07	; 7


// MAIN THREAD
//==============================================================================================
int main ()
{
     444:	5e 2f       	mov	r21, r30
     446:	50 1b       	sub	r21, r16
	//////////////// TESTING ONLY ////////////////////
//	uint8_t iTemp;

	for ( i = 0; i < 15; i++ )
	{
		Line.Colors.Red_L2[i] 	= (i/2)|((i/2)<<4);
     448:	45 2f       	mov	r20, r21
     44a:	46 95       	lsr	r20
     44c:	24 2f       	mov	r18, r20
     44e:	30 e0       	ldi	r19, 0x00	; 0
     450:	c9 01       	movw	r24, r18
     452:	82 95       	swap	r24
     454:	92 95       	swap	r25
     456:	90 7f       	andi	r25, 0xF0	; 240
     458:	98 27       	eor	r25, r24
     45a:	80 7f       	andi	r24, 0xF0	; 240
     45c:	98 27       	eor	r25, r24
     45e:	64 2f       	mov	r22, r20
     460:	68 2b       	or	r22, r24
     462:	60 a3       	std	Z+32, r22	; 0x20
		Line.Colors.Green_L2[i] = (7-i/2)|((7-i/2)<<4);
     464:	c6 01       	movw	r24, r12
     466:	82 1b       	sub	r24, r18
     468:	93 0b       	sbc	r25, r19
     46a:	82 95       	swap	r24
     46c:	92 95       	swap	r25
     46e:	90 7f       	andi	r25, 0xF0	; 240
     470:	98 27       	eor	r25, r24
     472:	80 7f       	andi	r24, 0xF0	; 240
     474:	98 27       	eor	r25, r24
     476:	27 2f       	mov	r18, r23
     478:	24 1b       	sub	r18, r20
     47a:	28 2b       	or	r18, r24
     47c:	20 8b       	std	Z+16, r18	; 0x10
		Line.Colors.Blue_L2[i] 	= (i/4)|((i/4)<<4);
     47e:	56 95       	lsr	r21
     480:	56 95       	lsr	r21
     482:	85 2f       	mov	r24, r21
     484:	82 95       	swap	r24
     486:	80 7f       	andi	r24, 0xF0	; 240
     488:	85 2b       	or	r24, r21
     48a:	81 93       	st	Z+, r24

		Line.Colors.Red_L1[i] 	= (i/2)|((i/2)<<4);
     48c:	90 96       	adiw	r26, 0x20	; 32
     48e:	6c 93       	st	X, r22
     490:	90 97       	sbiw	r26, 0x20	; 32
		Line.Colors.Green_L1[i] = //(7-i/2)|((7-i/2)<<4);
     492:	2c 93       	st	X, r18
     494:	50 96       	adiw	r26, 0x10	; 16
     496:	2c 93       	st	X, r18
     498:	50 97       	sbiw	r26, 0x10	; 16
     49a:	11 96       	adiw	r26, 0x01	; 1
	uint8_t	c;

	//////////////// TESTING ONLY ////////////////////
//	uint8_t iTemp;

	for ( i = 0; i < 15; i++ )
     49c:	ee 15       	cp	r30, r14
     49e:	ff 05       	cpc	r31, r15
     4a0:	89 f6       	brne	.-94     	; 0x444 <main+0x4a>
		Line.Colors.Green_L1[i] = //(7-i/2)|((7-i/2)<<4);
		Line.Colors.Blue_L1[i] 	= (7-i/2)|((7-i/2)<<4);
	}
	//////////////// END TESTING ONLY ////////////////

	g_iBuffersReady = 0;
     4a2:	10 92 0e 06 	sts	0x060E, r1


	// Command Flow
	// =============
	// Init the SPI device
	dataflash_spi_init(  );
     4a6:	0e 94 bf 03 	call	0x77e	; 0x77e <dataflash_spi_init>

	// Init LEDs
	Anibike_InitLeds ( );
     4aa:	0e 94 4d 00 	call	0x9a	; 0x9a <Anibike_InitLeds>

	// Init usart
	// ==========
	// Initialize the USART with baud rate = 57600bps
	USARTInit(20);
     4ae:	84 e1       	ldi	r24, 0x14	; 20
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	0e 94 81 11 	call	0x2302	; 0x2302 <USARTInit>

	
	EICRA |= (1<<ISC01);	// External Interrupt sense HIGH transit
     4b6:	80 91 69 00 	lds	r24, 0x0069
     4ba:	82 60       	ori	r24, 0x02	; 2
     4bc:	80 93 69 00 	sts	0x0069, r24
	EIMSK |= (1<<INT0);		// External Interrupt Set the Hall Sensor (INT0 pin)
     4c0:	e8 9a       	sbi	0x1d, 0	; 29
	UCSR0B |= (1<<RXCIE0);	// Enable UART RX interrupt
     4c2:	80 91 c1 00 	lds	r24, 0x00C1
     4c6:	80 68       	ori	r24, 0x80	; 128
     4c8:	80 93 c1 00 	sts	0x00C1, r24

	// CTC mode inter radius timer
	// Set Overflow and counting on Timer 1
	TCCR1B |= (1<<CS11)|(1<<WGM12); 		// Prescalar 8 - why?????????????
     4cc:	80 91 81 00 	lds	r24, 0x0081
     4d0:	8a 60       	ori	r24, 0x0A	; 10
     4d2:	80 93 81 00 	sts	0x0081, r24
	TIMSK1 |= (1<<OCIE1A);//(1<<TOIE0); 	// Interrupt
     4d6:	80 91 6f 00 	lds	r24, 0x006F
     4da:	82 60       	ori	r24, 0x02	; 2
     4dc:	80 93 6f 00 	sts	0x006F, r24
	OCR1A = 0xFFFF;
     4e0:	8f ef       	ldi	r24, 0xFF	; 255
     4e2:	9f ef       	ldi	r25, 0xFF	; 255
     4e4:	90 93 89 00 	sts	0x0089, r25
     4e8:	80 93 88 00 	sts	0x0088, r24

	// Between Hall sensor counter
	// Set Timer 0 counting Overflows
	TCCR0A |= (1<<CS01); 					// Prescalar 8
     4ec:	84 b5       	in	r24, 0x24	; 36
     4ee:	82 60       	ori	r24, 0x02	; 2
     4f0:	84 bd       	out	0x24, r24	; 36
	TIMSK0 = (1<<TOIE0); 					// Set Overflow interrupt
     4f2:	81 e0       	ldi	r24, 0x01	; 1
     4f4:	80 93 6e 00 	sts	0x006E, r24
	
	// PWM Timing counter
	// Set Timer 2 counting Overflows
	TCCR2A |= (1<<WGM21)|(1<<CS21); 		// Prescalar 8, Waveform generator form,
     4f8:	80 91 b0 00 	lds	r24, 0x00B0
     4fc:	8a 60       	ori	r24, 0x0A	; 10
     4fe:	80 93 b0 00 	sts	0x00B0, r24
	TIMSK2 |= (1<<OCIE2A); 					// Set Compare interrupt	
     502:	80 91 70 00 	lds	r24, 0x0070
     506:	82 60       	ori	r24, 0x02	; 2
     508:	80 93 70 00 	sts	0x0070, r24
//	OCR2A = 0x44;							// Set 28usec
//	TCNT2 = 0xBB;

	OCR2A = 0x30;							// Set 20usec
     50c:	20 e3       	ldi	r18, 0x30	; 48
     50e:	20 93 b3 00 	sts	0x00B3, r18
	TCNT2 = 0xCF;
     512:	8f ec       	ldi	r24, 0xCF	; 207
     514:	80 93 b2 00 	sts	0x00B2, r24

	
	
	// Define Active and Non-Active Buffers
	g_iPWM_Seq_L1_Active 		= g_iPWM_Seq_L1_Buff1;			// 6cc
     518:	85 ee       	ldi	r24, 0xE5	; 229
     51a:	96 e0       	ldi	r25, 0x06	; 6
     51c:	90 93 a6 07 	sts	0x07A6, r25
     520:	80 93 a5 07 	sts	0x07A5, r24
	g_iPWM_Seq_L1_NotActive 	= g_iPWM_Seq_L1_Buff2;			// 6cc
     524:	83 e2       	ldi	r24, 0x23	; 35
     526:	96 e0       	ldi	r25, 0x06	; 6
     528:	90 93 e4 06 	sts	0x06E4, r25
     52c:	80 93 e3 06 	sts	0x06E3, r24

	
	g_iRow_Offset = 0;
     530:	10 92 21 06 	sts	0x0621, r1
	g_iRowNum = 0;
     534:	10 92 0c 06 	sts	0x060C, r1
	g_iFlashRead = 48;	// Flash needs reading
     538:	20 93 01 01 	sts	0x0101, r18
	g_iProcessNeed = 0;	// Processing
     53c:	10 92 02 01 	sts	0x0102, r1
	i = 0;


	////////////////////////////////////////////////////////////////////////////////
	// DEBUG
	while ( g_iProcessNeed<192)
     540:	80 91 02 01 	lds	r24, 0x0102
     544:	80 3c       	cpi	r24, 0xC0	; 192
     546:	08 f0       	brcs	.+2      	; 0x54a <main+0x150>
     548:	4c c0       	rjmp	.+152    	; 0x5e2 <main+0x1e8>
     54a:	40 e0       	ldi	r20, 0x00	; 0
	{
		iCell1 = Line.Raw[i];
     54c:	f8 01       	movw	r30, r16
     54e:	e4 0f       	add	r30, r20
     550:	f1 1d       	adc	r31, r1
     552:	50 81       	ld	r21, Z
		iCell2 = iCell1;
	
		g_iPWM_Seq_L1_Active[g_iProcessNeed] = LUT[iCell1>>4];
     554:	80 91 02 01 	lds	r24, 0x0102
     558:	e0 91 a5 07 	lds	r30, 0x07A5
     55c:	f0 91 a6 07 	lds	r31, 0x07A6
     560:	e8 0f       	add	r30, r24
     562:	f1 1d       	adc	r31, r1
     564:	85 2f       	mov	r24, r21
     566:	82 95       	swap	r24
     568:	8f 70       	andi	r24, 0x0F	; 15
     56a:	28 2f       	mov	r18, r24
     56c:	30 e0       	ldi	r19, 0x00	; 0
     56e:	2d 5e       	subi	r18, 0xED	; 237
     570:	3e 4f       	sbci	r19, 0xFE	; 254
     572:	d9 01       	movw	r26, r18
     574:	8c 91       	ld	r24, X
     576:	80 83       	st	Z, r24
		g_iPWM_Seq_L1_Active[g_iProcessNeed+1] = LUT[iCell2&0xF];
     578:	80 91 02 01 	lds	r24, 0x0102
     57c:	90 e0       	ldi	r25, 0x00	; 0
     57e:	01 96       	adiw	r24, 0x01	; 1
     580:	e0 91 a5 07 	lds	r30, 0x07A5
     584:	f0 91 a6 07 	lds	r31, 0x07A6
     588:	e8 0f       	add	r30, r24
     58a:	f9 1f       	adc	r31, r25
     58c:	a5 2f       	mov	r26, r21
     58e:	b0 e0       	ldi	r27, 0x00	; 0
     590:	af 70       	andi	r26, 0x0F	; 15
     592:	b0 70       	andi	r27, 0x00	; 0
     594:	ad 5e       	subi	r26, 0xED	; 237
     596:	be 4f       	sbci	r27, 0xFE	; 254
     598:	8c 91       	ld	r24, X
     59a:	80 83       	st	Z, r24
		g_iPWM_Seq_L1_NotActive[g_iProcessNeed] = LUT[iCell1>>4];
     59c:	80 91 02 01 	lds	r24, 0x0102
     5a0:	60 91 e3 06 	lds	r22, 0x06E3
     5a4:	70 91 e4 06 	lds	r23, 0x06E4
     5a8:	68 0f       	add	r22, r24
     5aa:	71 1d       	adc	r23, r1
     5ac:	f9 01       	movw	r30, r18
     5ae:	80 81       	ld	r24, Z
     5b0:	fb 01       	movw	r30, r22
     5b2:	80 83       	st	Z, r24
		g_iPWM_Seq_L1_NotActive[g_iProcessNeed+1] = LUT[iCell2&0xF];
     5b4:	80 91 02 01 	lds	r24, 0x0102
     5b8:	90 e0       	ldi	r25, 0x00	; 0
     5ba:	01 96       	adiw	r24, 0x01	; 1
     5bc:	e0 91 e3 06 	lds	r30, 0x06E3
     5c0:	f0 91 e4 06 	lds	r31, 0x06E4
     5c4:	e8 0f       	add	r30, r24
     5c6:	f9 1f       	adc	r31, r25
     5c8:	8c 91       	ld	r24, X
     5ca:	80 83       	st	Z, r24
		

		i++;
     5cc:	4f 5f       	subi	r20, 0xFF	; 255
		g_iProcessNeed+=2;
     5ce:	80 91 02 01 	lds	r24, 0x0102
     5d2:	8e 5f       	subi	r24, 0xFE	; 254
     5d4:	80 93 02 01 	sts	0x0102, r24
	i = 0;


	////////////////////////////////////////////////////////////////////////////////
	// DEBUG
	while ( g_iProcessNeed<192)
     5d8:	80 91 02 01 	lds	r24, 0x0102
     5dc:	80 3c       	cpi	r24, 0xC0	; 192
     5de:	08 f4       	brcc	.+2      	; 0x5e2 <main+0x1e8>
     5e0:	b5 cf       	rjmp	.-150    	; 0x54c <main+0x152>

		i++;
		g_iProcessNeed+=2;
	}

	g_iProcessNeed = 0;	// Processing
     5e2:	10 92 02 01 	sts	0x0102, r1
	////////////////////////////////////////////////////////////////////////////////


	// Start All
	// ==========
	sei ();  
     5e6:	78 94       	sei
     5e8:	ee 24       	eor	r14, r14
     5ea:	ff 24       	eor	r15, r15


		asm ( "call PrepareBuffers" );
		
		// Buffers Ready flag
		g_iBuffersReady = 1;					// 2cc
     5ec:	77 24       	eor	r7, r7
     5ee:	73 94       	inc	r7
				//SPDR = 0;
				//while (! (SPSR & (1<<SPIF))) {}		
				c = spi_transfer (0);
						
				if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
					Line.Raw[48-g_iFlashRead] = c;	// L2
     5f0:	20 e3       	ldi	r18, 0x30	; 48
     5f2:	82 2e       	mov	r8, r18
     5f4:	91 2c       	mov	r9, r1
				else
					Line.Raw[96-g_iFlashRead] = c;
     5f6:	90 e6       	ldi	r25, 0x60	; 96
     5f8:	c9 2e       	mov	r12, r25
     5fa:	d1 2c       	mov	r13, r1
				// Read next memory slots
				SPDR = 0;
				while (! (SPSR & (1<<SPIF))) {}		
						
				if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
					Line.Raw[144-g_iFlashRead] = SPDR;	// L2
     5fc:	80 e9       	ldi	r24, 0x90	; 144
     5fe:	a8 2e       	mov	r10, r24
     600:	b1 2c       	mov	r11, r1
	// ==========
	sei ();  

	while (1)
	{	
		if ( g_bPowerSafeMode ) continue;		// 4cc
     602:	80 91 17 06 	lds	r24, 0x0617
     606:	88 23       	and	r24, r24
     608:	e1 f7       	brne	.-8      	; 0x602 <main+0x208>

		// The PWM column modification
		if (iPWM_Part>=8) iPWM_Part=0;			// 3cc
     60a:	f7 e0       	ldi	r31, 0x07	; 7
     60c:	fe 15       	cp	r31, r14
     60e:	08 f0       	brcs	.+2      	; 0x612 <main+0x218>
     610:	b3 c0       	rjmp	.+358    	; 0x778 <main+0x37e>
     612:	ee 24       	eor	r14, r14
     614:	e0 e0       	ldi	r30, 0x00	; 0
     616:	f0 e0       	ldi	r31, 0x00	; 0
		g_iRow_Offset = g_iRowNum<<2;			// 6cc
     618:	80 91 0c 06 	lds	r24, 0x060C
     61c:	88 0f       	add	r24, r24
     61e:	88 0f       	add	r24, r24
     620:	80 93 21 06 	sts	0x0621, r24
		g_iPWM_Line_MASK = g_iPWM_Mask[iPWM_Part];	// 7cc Masking single bit
     624:	e5 5f       	subi	r30, 0xF5	; 245
     626:	fe 4f       	sbci	r31, 0xFE	; 254
     628:	80 81       	ld	r24, Z
     62a:	80 93 00 01 	sts	0x0100, r24


		asm ( "call PrepareBuffers" );
     62e:	0e 94 b8 0a 	call	0x1570	; 0x1570 <PrepareBuffers>
		
		// Buffers Ready flag
		g_iBuffersReady = 1;					// 2cc
     632:	70 92 0e 06 	sts	0x060E, r7
		
		// Next Memory Lines Read
		if ( g_iFlashRead > 48 )
     636:	80 91 01 01 	lds	r24, 0x0101
     63a:	81 33       	cpi	r24, 0x31	; 49
     63c:	08 f0       	brcs	.+2      	; 0x640 <main+0x246>
     63e:	85 c0       	rjmp	.+266    	; 0x74a <main+0x350>
				// PUSH information to Line2

				g_iFlashRead --;
			}
		}
		else if (g_iFlashRead)
     640:	80 91 01 01 	lds	r24, 0x0101
     644:	88 23       	and	r24, r24
     646:	71 f4       	brne	.+28     	; 0x664 <main+0x26a>
     648:	58 c0       	rjmp	.+176    	; 0x6fa <main+0x300>
				//SPDR = 0;
				//while (! (SPSR & (1<<SPIF))) {}		
				c = spi_transfer (0);
						
				if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
					Line.Raw[48-g_iFlashRead] = c;	// L2
     64a:	80 91 01 01 	lds	r24, 0x0101
     64e:	f4 01       	movw	r30, r8
     650:	e8 1b       	sub	r30, r24
     652:	f1 09       	sbc	r31, r1
     654:	e0 0f       	add	r30, r16
     656:	f1 1f       	adc	r31, r17
     658:	90 83       	st	Z, r25
				else
					Line.Raw[96-g_iFlashRead] = c;
				// PUSH information to Line2

				g_iFlashRead --;
     65a:	80 91 01 01 	lds	r24, 0x0101
     65e:	81 50       	subi	r24, 0x01	; 1
     660:	80 93 01 01 	sts	0x0101, r24
				g_iFlashRead --;
			}
		}
		else if (g_iFlashRead)
		{
			while ( g_iBuffersReady && g_iFlashRead)
     664:	80 91 0e 06 	lds	r24, 0x060E
     668:	88 23       	and	r24, r24
     66a:	09 f4       	brne	.+2      	; 0x66e <main+0x274>
     66c:	4a c0       	rjmp	.+148    	; 0x702 <main+0x308>
     66e:	80 91 01 01 	lds	r24, 0x0101
     672:	88 23       	and	r24, r24
     674:	09 f4       	brne	.+2      	; 0x678 <main+0x27e>
     676:	45 c0       	rjmp	.+138    	; 0x702 <main+0x308>
			{
				// Read next memory slots
				//SPDR = 0;
				//while (! (SPSR & (1<<SPIF))) {}		
				c = spi_transfer (0);
     678:	80 e0       	ldi	r24, 0x00	; 0
     67a:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     67e:	98 2f       	mov	r25, r24
						
				if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
     680:	80 91 1b 06 	lds	r24, 0x061B
     684:	88 23       	and	r24, r24
     686:	09 f3       	breq	.-62     	; 0x64a <main+0x250>
					Line.Raw[48-g_iFlashRead] = c;	// L2
				else
					Line.Raw[96-g_iFlashRead] = c;
     688:	80 91 01 01 	lds	r24, 0x0101
     68c:	f6 01       	movw	r30, r12
     68e:	e8 1b       	sub	r30, r24
     690:	f1 09       	sbc	r31, r1
     692:	e0 0f       	add	r30, r16
     694:	f1 1f       	adc	r31, r17
     696:	90 83       	st	Z, r25
     698:	e0 cf       	rjmp	.-64     	; 0x65a <main+0x260>
				g_iFlashRead --;
			}
		}
		else
		{
			while ( g_iBuffersReady && g_iProcessNeed<192)
     69a:	80 91 02 01 	lds	r24, 0x0102
     69e:	80 3c       	cpi	r24, 0xC0	; 192
     6a0:	80 f5       	brcc	.+96     	; 0x702 <main+0x308>
			{
				iCell1 = Line.Raw[i];
     6a2:	f8 01       	movw	r30, r16
     6a4:	ef 0d       	add	r30, r15
     6a6:	f1 1d       	adc	r31, r1
     6a8:	a0 81       	ld	r26, Z
				iCell2 = iCell1;
			
				g_iPWM_Seq_L1_NotActive[g_iProcessNeed] = LUT[iCell1>>4];
     6aa:	20 91 02 01 	lds	r18, 0x0102
     6ae:	80 91 e3 06 	lds	r24, 0x06E3
     6b2:	90 91 e4 06 	lds	r25, 0x06E4
     6b6:	82 0f       	add	r24, r18
     6b8:	91 1d       	adc	r25, r1
     6ba:	ea 2f       	mov	r30, r26
     6bc:	e2 95       	swap	r30
     6be:	ef 70       	andi	r30, 0x0F	; 15
     6c0:	f0 e0       	ldi	r31, 0x00	; 0
     6c2:	ed 5e       	subi	r30, 0xED	; 237
     6c4:	fe 4f       	sbci	r31, 0xFE	; 254
     6c6:	20 81       	ld	r18, Z
     6c8:	fc 01       	movw	r30, r24
     6ca:	20 83       	st	Z, r18
				g_iPWM_Seq_L1_NotActive[g_iProcessNeed+1] = LUT[iCell2&0xF];
     6cc:	80 91 02 01 	lds	r24, 0x0102
     6d0:	90 e0       	ldi	r25, 0x00	; 0
     6d2:	01 96       	adiw	r24, 0x01	; 1
     6d4:	e0 91 e3 06 	lds	r30, 0x06E3
     6d8:	f0 91 e4 06 	lds	r31, 0x06E4
     6dc:	e8 0f       	add	r30, r24
     6de:	f9 1f       	adc	r31, r25
     6e0:	b0 e0       	ldi	r27, 0x00	; 0
     6e2:	af 70       	andi	r26, 0x0F	; 15
     6e4:	b0 70       	andi	r27, 0x00	; 0
     6e6:	ad 5e       	subi	r26, 0xED	; 237
     6e8:	be 4f       	sbci	r27, 0xFE	; 254
     6ea:	8c 91       	ld	r24, X
     6ec:	80 83       	st	Z, r24

				i++;
     6ee:	f3 94       	inc	r15
				g_iProcessNeed+=2;
     6f0:	80 91 02 01 	lds	r24, 0x0102
     6f4:	8e 5f       	subi	r24, 0xFE	; 254
     6f6:	80 93 02 01 	sts	0x0102, r24
				g_iFlashRead --;
			}
		}
		else
		{
			while ( g_iBuffersReady && g_iProcessNeed<192)
     6fa:	80 91 0e 06 	lds	r24, 0x060E
     6fe:	88 23       	and	r24, r24
     700:	61 f6       	brne	.-104    	; 0x69a <main+0x2a0>
				g_iProcessNeed+=2;
			}
		}


		while ( g_iBuffersReady )
     702:	80 91 0e 06 	lds	r24, 0x060E
     706:	88 23       	and	r24, r24
     708:	e1 f7       	brne	.-8      	; 0x702 <main+0x308>
		{
		}
		// Finished Single Cycle

		// Advance Row Number
		g_iRowNum ++;					// 5cc
     70a:	80 91 0c 06 	lds	r24, 0x060C
     70e:	8f 5f       	subi	r24, 0xFF	; 255
     710:	80 93 0c 06 	sts	0x060C, r24
		if (g_iRowNum==8) 				// 5cc
     714:	80 91 0c 06 	lds	r24, 0x060C
     718:	88 30       	cpi	r24, 0x08	; 8
     71a:	09 f0       	breq	.+2      	; 0x71e <main+0x324>
     71c:	72 cf       	rjmp	.-284    	; 0x602 <main+0x208>
		{
			g_iRowNum = 0;
     71e:	10 92 0c 06 	sts	0x060C, r1
			iPWM_Part ++;
     722:	e3 94       	inc	r14
     724:	6e cf       	rjmp	.-292    	; 0x602 <main+0x208>
			{
				// Read next memory slots
				SPDR = 0;
				while (! (SPSR & (1<<SPIF))) {}		
						
				if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
     726:	80 91 1b 06 	lds	r24, 0x061B
     72a:	88 23       	and	r24, r24
     72c:	d9 f4       	brne	.+54     	; 0x764 <main+0x36a>
					Line.Raw[144-g_iFlashRead] = SPDR;	// L2
     72e:	80 91 01 01 	lds	r24, 0x0101
     732:	9e b5       	in	r25, 0x2e	; 46
     734:	f5 01       	movw	r30, r10
     736:	e8 1b       	sub	r30, r24
     738:	f1 09       	sbc	r31, r1
     73a:	e0 0f       	add	r30, r16
     73c:	f1 1f       	adc	r31, r17
     73e:	90 83       	st	Z, r25
				else
					Line.Raw[96-g_iFlashRead] = SPDR;
				// PUSH information to Line2

				g_iFlashRead --;
     740:	80 91 01 01 	lds	r24, 0x0101
     744:	81 50       	subi	r24, 0x01	; 1
     746:	80 93 01 01 	sts	0x0101, r24
		g_iBuffersReady = 1;					// 2cc
		
		// Next Memory Lines Read
		if ( g_iFlashRead > 48 )
		{
			while ( g_iBuffersReady && g_iFlashRead > 48)
     74a:	80 91 0e 06 	lds	r24, 0x060E
     74e:	88 23       	and	r24, r24
     750:	c1 f2       	breq	.-80     	; 0x702 <main+0x308>
     752:	80 91 01 01 	lds	r24, 0x0101
     756:	81 33       	cpi	r24, 0x31	; 49
     758:	a0 f2       	brcs	.-88     	; 0x702 <main+0x308>
			{
				// Read next memory slots
				SPDR = 0;
     75a:	1e bc       	out	0x2e, r1	; 46
				while (! (SPSR & (1<<SPIF))) {}		
     75c:	0d b4       	in	r0, 0x2d	; 45
     75e:	07 fe       	sbrs	r0, 7
     760:	fd cf       	rjmp	.-6      	; 0x75c <main+0x362>
     762:	e1 cf       	rjmp	.-62     	; 0x726 <main+0x32c>
						
				if ( g_iCurrentPolarity == 0 )	// First is L2 and second is L1
					Line.Raw[144-g_iFlashRead] = SPDR;	// L2
				else
					Line.Raw[96-g_iFlashRead] = SPDR;
     764:	80 91 01 01 	lds	r24, 0x0101
     768:	9e b5       	in	r25, 0x2e	; 46
     76a:	f6 01       	movw	r30, r12
     76c:	e8 1b       	sub	r30, r24
     76e:	f1 09       	sbc	r31, r1
     770:	e0 0f       	add	r30, r16
     772:	f1 1f       	adc	r31, r17
     774:	90 83       	st	Z, r25
     776:	e4 cf       	rjmp	.-56     	; 0x740 <main+0x346>
	while (1)
	{	
		if ( g_bPowerSafeMode ) continue;		// 4cc

		// The PWM column modification
		if (iPWM_Part>=8) iPWM_Part=0;			// 3cc
     778:	ee 2d       	mov	r30, r14
     77a:	f0 e0       	ldi	r31, 0x00	; 0
     77c:	4d cf       	rjmp	.-358    	; 0x618 <main+0x21e>

0000077e <dataflash_spi_init>:

//__________________________________________________________________________________________________
void dataflash_spi_init(void)
{
	// Set SS,MOSI and SCK output, MISO input
	DDR_SPI |= (1<<DD_MOSI)|(1<<DD_SCK)|(1<<DD_SS);
     77e:	84 b1       	in	r24, 0x04	; 4
     780:	87 60       	ori	r24, 0x07	; 7
     782:	84 b9       	out	0x04, r24	; 4
//	DDR_SPI &= ~(1<<DD_MISO);	// No need to set - we are on MASTER mode
//	DD_PORT |= (1<<DD_MISO);		// Set internal pullup on MISO

	// Set CS
	CS_UP;
     784:	28 9a       	sbi	0x05, 0	; 5

	/* Enable SPI, Master, set clock rate fck/4 */
	SPCR = (1<<SPE)|(1<<MSTR);
     786:	80 e5       	ldi	r24, 0x50	; 80
     788:	8c bd       	out	0x2c, r24	; 44
	SPSR = (1<<SPIF)/*|(1<<SPI2X)*/;
     78a:	80 e8       	ldi	r24, 0x80	; 128
     78c:	8d bd       	out	0x2d, r24	; 45
}
     78e:	08 95       	ret

00000790 <spi_transfer>:
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     790:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     792:	0d b4       	in	r0, 0x2d	; 45
     794:	07 fe       	sbrs	r0, 7
     796:	fd cf       	rjmp	.-6      	; 0x792 <spi_transfer+0x2>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     798:	8e b5       	in	r24, 0x2e	; 46
}
     79a:	08 95       	ret

0000079c <dataflash_spi_idn>:

//__________________________________________________________________________________________________
void dataflash_spi_idn ( char *ManID, char* DevID1, char* DevID2, char* ExData )
{
     79c:	cf 93       	push	r28
     79e:	df 93       	push	r29
     7a0:	fc 01       	movw	r30, r24
     7a2:	db 01       	movw	r26, r22
     7a4:	ea 01       	movw	r28, r20
	CS_DOWN;
     7a6:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     7a8:	8f e9       	ldi	r24, 0x9F	; 159
     7aa:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     7ac:	0d b4       	in	r0, 0x2d	; 45
     7ae:	07 fe       	sbrs	r0, 7
     7b0:	fd cf       	rjmp	.-6      	; 0x7ac <dataflash_spi_idn+0x10>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     7b2:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     7b4:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     7b6:	0d b4       	in	r0, 0x2d	; 45
     7b8:	07 fe       	sbrs	r0, 7
     7ba:	fd cf       	rjmp	.-6      	; 0x7b6 <dataflash_spi_idn+0x1a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     7bc:	8e b5       	in	r24, 0x2e	; 46
{
	CS_DOWN;

	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
     7be:	80 83       	st	Z, r24
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     7c0:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     7c2:	0d b4       	in	r0, 0x2d	; 45
     7c4:	07 fe       	sbrs	r0, 7
     7c6:	fd cf       	rjmp	.-6      	; 0x7c2 <dataflash_spi_idn+0x26>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     7c8:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
	*DevID1 = spi_transfer(0);
     7ca:	8c 93       	st	X, r24
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     7cc:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     7ce:	0d b4       	in	r0, 0x2d	; 45
     7d0:	07 fe       	sbrs	r0, 7
     7d2:	fd cf       	rjmp	.-6      	; 0x7ce <dataflash_spi_idn+0x32>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     7d4:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
	*DevID1 = spi_transfer(0);
	*DevID2 = spi_transfer(0);
     7d6:	88 83       	st	Y, r24
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     7d8:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     7da:	0d b4       	in	r0, 0x2d	; 45
     7dc:	07 fe       	sbrs	r0, 7
     7de:	fd cf       	rjmp	.-6      	; 0x7da <dataflash_spi_idn+0x3e>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     7e0:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(IDN);				// Write IDN? command

	*ManID = spi_transfer(0);
	*DevID1 = spi_transfer(0);
	*DevID2 = spi_transfer(0);
	*ExData = spi_transfer(0);
     7e2:	f9 01       	movw	r30, r18
     7e4:	80 83       	st	Z, r24

	CS_UP;
     7e6:	28 9a       	sbi	0x05, 0	; 5
}
     7e8:	df 91       	pop	r29
     7ea:	cf 91       	pop	r28
     7ec:	08 95       	ret

000007ee <dataflash_write>:

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
     7ee:	0f 93       	push	r16
     7f0:	1f 93       	push	r17
     7f2:	8b 01       	movw	r16, r22
     7f4:	9c 01       	movw	r18, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
	      
	CS_DOWN;
     7f6:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     7f8:	86 e0       	ldi	r24, 0x06	; 6
     7fa:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     7fc:	0d b4       	in	r0, 0x2d	; 45
     7fe:	07 fe       	sbrs	r0, 7
     800:	fd cf       	rjmp	.-6      	; 0x7fc <dataflash_write+0xe>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     802:	8e b5       	in	r24, 0x2e	; 46
	      
	CS_DOWN;

	spi_transfer(WRITE_ENABLE);				// Write enable command

	CS_UP;
     804:	28 9a       	sbi	0x05, 0	; 5
	CS_DOWN;
     806:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     808:	82 e0       	ldi	r24, 0x02	; 2
     80a:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     80c:	0d b4       	in	r0, 0x2d	; 45
     80e:	07 fe       	sbrs	r0, 7
     810:	fd cf       	rjmp	.-6      	; 0x80c <dataflash_write+0x1e>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     812:	8e b5       	in	r24, 0x2e	; 46

//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
     814:	c9 01       	movw	r24, r18
     816:	aa 27       	eor	r26, r26
     818:	bb 27       	eor	r27, r27
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     81a:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     81c:	0d b4       	in	r0, 0x2d	; 45
     81e:	07 fe       	sbrs	r0, 7
     820:	fd cf       	rjmp	.-6      	; 0x81c <dataflash_write+0x2e>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     822:	8e b5       	in	r24, 0x2e	; 46
//__________________________________________________________________________________________________
void dataflash_write( uint32_t addr,char Wrdat)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
     824:	bb 27       	eor	r27, r27
     826:	a3 2f       	mov	r26, r19
     828:	92 2f       	mov	r25, r18
     82a:	81 2f       	mov	r24, r17
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     82c:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     82e:	0d b4       	in	r0, 0x2d	; 45
     830:	07 fe       	sbrs	r0, 7
     832:	fd cf       	rjmp	.-6      	; 0x82e <dataflash_write+0x40>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     834:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     836:	0e bd       	out	0x2e, r16	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     838:	0d b4       	in	r0, 0x2d	; 45
     83a:	07 fe       	sbrs	r0, 7
     83c:	fd cf       	rjmp	.-6      	; 0x838 <dataflash_write+0x4a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     83e:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     840:	4e bd       	out	0x2e, r20	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     842:	0d b4       	in	r0, 0x2d	; 45
     844:	07 fe       	sbrs	r0, 7
     846:	fd cf       	rjmp	.-6      	; 0x842 <dataflash_write+0x54>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     848:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);
	spi_transfer(Wrdat);   					// Send data byte

	CS_UP;      
     84a:	28 9a       	sbi	0x05, 0	; 5
}
     84c:	1f 91       	pop	r17
     84e:	0f 91       	pop	r16
     850:	08 95       	ret

00000852 <dataflash_read>:

//__________________________________________________________________________________________________
char dataflash_read(uint32_t addr)
{
     852:	9b 01       	movw	r18, r22
     854:	ac 01       	movw	r20, r24

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
	adrByte3 = addr&0xff;     
   
	CS_DOWN;
     856:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     858:	83 e0       	ldi	r24, 0x03	; 3
     85a:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     85c:	0d b4       	in	r0, 0x2d	; 45
     85e:	07 fe       	sbrs	r0, 7
     860:	fd cf       	rjmp	.-6      	; 0x85c <dataflash_read+0xa>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     862:	8e b5       	in	r24, 0x2e	; 46
char dataflash_read(uint32_t addr)
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
     864:	ca 01       	movw	r24, r20
     866:	aa 27       	eor	r26, r26
     868:	bb 27       	eor	r27, r27
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     86a:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     86c:	0d b4       	in	r0, 0x2d	; 45
     86e:	07 fe       	sbrs	r0, 7
     870:	fd cf       	rjmp	.-6      	; 0x86c <dataflash_read+0x1a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     872:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	char data;	

	adrByte1 = (addr>>16)&0xff;
	adrByte2 = (addr>>8)&0xff;
     874:	bb 27       	eor	r27, r27
     876:	a5 2f       	mov	r26, r21
     878:	94 2f       	mov	r25, r20
     87a:	83 2f       	mov	r24, r19
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     87c:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     87e:	0d b4       	in	r0, 0x2d	; 45
     880:	07 fe       	sbrs	r0, 7
     882:	fd cf       	rjmp	.-6      	; 0x87e <dataflash_read+0x2c>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     884:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     886:	2e bd       	out	0x2e, r18	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     888:	0d b4       	in	r0, 0x2d	; 45
     88a:	07 fe       	sbrs	r0, 7
     88c:	fd cf       	rjmp	.-6      	; 0x888 <dataflash_read+0x36>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     88e:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     890:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     892:	0d b4       	in	r0, 0x2d	; 45
     894:	07 fe       	sbrs	r0, 7
     896:	fd cf       	rjmp	.-6      	; 0x892 <dataflash_read+0x40>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     898:	8e b5       	in	r24, 0x2e	; 46
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	data = spi_transfer(0);	
	CS_UP;      
     89a:	28 9a       	sbi	0x05, 0	; 5

	return data;
}
     89c:	08 95       	ret

0000089e <dataflash_erase_all>:
	}
}

//__________________________________________________________________________________________________
void dataflash_erase_all ( void )
{
     89e:	1f 93       	push	r17
     8a0:	21 e0       	ldi	r18, 0x01	; 1
     8a2:	30 e0       	ldi	r19, 0x00	; 0
     8a4:	40 e0       	ldi	r20, 0x00	; 0
     8a6:	50 e0       	ldi	r21, 0x00	; 0
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     8a8:	16 e0       	ldi	r17, 0x06	; 6
     8aa:	f8 ed       	ldi	r31, 0xD8	; 216
     8ac:	e1 e0       	ldi	r30, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     8ae:	63 e3       	ldi	r22, 0x33	; 51
     8b0:	73 e1       	ldi	r23, 0x13	; 19
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	unsigned int i;

	for ( i=0; i<64; i++ )
	{
		CS_DOWN;
     8b2:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     8b4:	1e bd       	out	0x2e, r17	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     8b6:	0d b4       	in	r0, 0x2d	; 45
     8b8:	07 fe       	sbrs	r0, 7
     8ba:	fd cf       	rjmp	.-6      	; 0x8b6 <dataflash_erase_all+0x18>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     8bc:	8e b5       	in	r24, 0x2e	; 46

	for ( i=0; i<64; i++ )
	{
		CS_DOWN;
		spi_transfer(WRITE_ENABLE);				// Write enable command
		CS_UP;
     8be:	28 9a       	sbi	0x05, 0	; 5

		CS_DOWN;
     8c0:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     8c2:	fe bd       	out	0x2e, r31	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     8c4:	0d b4       	in	r0, 0x2d	; 45
     8c6:	07 fe       	sbrs	r0, 7
     8c8:	fd cf       	rjmp	.-6      	; 0x8c4 <dataflash_erase_all+0x26>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     8ca:	8e b5       	in	r24, 0x2e	; 46

		CS_DOWN;

		spi_transfer(BLOCK_ERASE_64K);     		// Write erase64 opcode

		adrByte1 = (address>>16)&0xff;
     8cc:	ca 01       	movw	r24, r20
     8ce:	aa 27       	eor	r26, r26
     8d0:	bb 27       	eor	r27, r27
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     8d2:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     8d4:	0d b4       	in	r0, 0x2d	; 45
     8d6:	07 fe       	sbrs	r0, 7
     8d8:	fd cf       	rjmp	.-6      	; 0x8d4 <dataflash_erase_all+0x36>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     8da:	8e b5       	in	r24, 0x2e	; 46
		CS_DOWN;

		spi_transfer(BLOCK_ERASE_64K);     		// Write erase64 opcode

		adrByte1 = (address>>16)&0xff;
		adrByte2 = (address>>8)&0xff;
     8dc:	bb 27       	eor	r27, r27
     8de:	a5 2f       	mov	r26, r21
     8e0:	94 2f       	mov	r25, r20
     8e2:	83 2f       	mov	r24, r19
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     8e4:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     8e6:	0d b4       	in	r0, 0x2d	; 45
     8e8:	07 fe       	sbrs	r0, 7
     8ea:	fd cf       	rjmp	.-6      	; 0x8e6 <dataflash_erase_all+0x48>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     8ec:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     8ee:	ee bd       	out	0x2e, r30	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     8f0:	0d b4       	in	r0, 0x2d	; 45
     8f2:	07 fe       	sbrs	r0, 7
     8f4:	fd cf       	rjmp	.-6      	; 0x8f0 <dataflash_erase_all+0x52>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     8f6:	8e b5       	in	r24, 0x2e	; 46

		spi_transfer(adrByte1);					// Send address - 24 bits
		spi_transfer(adrByte2);					// starting from MSB
		spi_transfer(adrByte3);

		CS_UP;
     8f8:	28 9a       	sbi	0x05, 0	; 5
     8fa:	cb 01       	movw	r24, r22
     8fc:	01 97       	sbiw	r24, 0x01	; 1
     8fe:	f1 f7       	brne	.-4      	; 0x8fc <dataflash_erase_all+0x5e>
{
	uint32_t address = 0x01;
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	unsigned int i;

	for ( i=0; i<64; i++ )
     900:	21 30       	cpi	r18, 0x01	; 1
     902:	80 e0       	ldi	r24, 0x00	; 0
     904:	38 07       	cpc	r19, r24
     906:	8f e3       	ldi	r24, 0x3F	; 63
     908:	48 07       	cpc	r20, r24
     90a:	80 e0       	ldi	r24, 0x00	; 0
     90c:	58 07       	cpc	r21, r24
     90e:	29 f0       	breq	.+10     	; 0x91a <__stack+0x1b>
		spi_transfer(adrByte2);					// starting from MSB
		spi_transfer(adrByte3);

		CS_UP;

		address += 0x10000;						// Addvance to next sector (+64 KByte)
     910:	20 50       	subi	r18, 0x00	; 0
     912:	30 40       	sbci	r19, 0x00	; 0
     914:	4f 4f       	sbci	r20, 0xFF	; 255
     916:	5f 4f       	sbci	r21, 0xFF	; 255
     918:	cc cf       	rjmp	.-104    	; 0x8b2 <dataflash_erase_all+0x14>
		_delay_ms(1);
	}
}
     91a:	1f 91       	pop	r17
     91c:	08 95       	ret

0000091e <dataflash_erase_block4>:

//__________________________________________________________________________________________________
void		dataflash_erase_block4		( uint32_t iAddress )
{
     91e:	9b 01       	movw	r18, r22
     920:	ac 01       	movw	r20, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
     922:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     924:	86 e0       	ldi	r24, 0x06	; 6
     926:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     928:	0d b4       	in	r0, 0x2d	; 45
     92a:	07 fe       	sbrs	r0, 7
     92c:	fd cf       	rjmp	.-6      	; 0x928 <dataflash_erase_block4+0xa>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     92e:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
     930:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
     932:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     934:	80 e2       	ldi	r24, 0x20	; 32
     936:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     938:	0d b4       	in	r0, 0x2d	; 45
     93a:	07 fe       	sbrs	r0, 7
     93c:	fd cf       	rjmp	.-6      	; 0x938 <dataflash_erase_block4+0x1a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     93e:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(BLOCK_ERASE_4K);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
     940:	ca 01       	movw	r24, r20
     942:	aa 27       	eor	r26, r26
     944:	bb 27       	eor	r27, r27
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     946:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     948:	0d b4       	in	r0, 0x2d	; 45
     94a:	07 fe       	sbrs	r0, 7
     94c:	fd cf       	rjmp	.-6      	; 0x948 <dataflash_erase_block4+0x2a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     94e:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(BLOCK_ERASE_4K);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
     950:	bb 27       	eor	r27, r27
     952:	a5 2f       	mov	r26, r21
     954:	94 2f       	mov	r25, r20
     956:	83 2f       	mov	r24, r19
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     958:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     95a:	0d b4       	in	r0, 0x2d	; 45
     95c:	07 fe       	sbrs	r0, 7
     95e:	fd cf       	rjmp	.-6      	; 0x95a <dataflash_erase_block4+0x3c>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     960:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     962:	2e bd       	out	0x2e, r18	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     964:	0d b4       	in	r0, 0x2d	; 45
     966:	07 fe       	sbrs	r0, 7
     968:	fd cf       	rjmp	.-6      	; 0x964 <dataflash_erase_block4+0x46>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     96a:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
     96c:	28 9a       	sbi	0x05, 0	; 5
     96e:	83 e3       	ldi	r24, 0x33	; 51
     970:	93 e1       	ldi	r25, 0x13	; 19
     972:	01 97       	sbiw	r24, 0x01	; 1
     974:	f1 f7       	brne	.-4      	; 0x972 <dataflash_erase_block4+0x54>

	_delay_ms(1);
}
     976:	08 95       	ret

00000978 <dataflash_unprotect_block4>:

//__________________________________________________________________________________________________
void		dataflash_unprotect_block4	( uint32_t iAddress )
{
     978:	9b 01       	movw	r18, r22
     97a:	ac 01       	movw	r20, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
     97c:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     97e:	86 e0       	ldi	r24, 0x06	; 6
     980:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     982:	0d b4       	in	r0, 0x2d	; 45
     984:	07 fe       	sbrs	r0, 7
     986:	fd cf       	rjmp	.-6      	; 0x982 <dataflash_unprotect_block4+0xa>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     988:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
     98a:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
     98c:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     98e:	89 e3       	ldi	r24, 0x39	; 57
     990:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     992:	0d b4       	in	r0, 0x2d	; 45
     994:	07 fe       	sbrs	r0, 7
     996:	fd cf       	rjmp	.-6      	; 0x992 <dataflash_unprotect_block4+0x1a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     998:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
     99a:	ca 01       	movw	r24, r20
     99c:	aa 27       	eor	r26, r26
     99e:	bb 27       	eor	r27, r27
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     9a0:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     9a2:	0d b4       	in	r0, 0x2d	; 45
     9a4:	07 fe       	sbrs	r0, 7
     9a6:	fd cf       	rjmp	.-6      	; 0x9a2 <dataflash_unprotect_block4+0x2a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     9a8:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(UNPROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
     9aa:	bb 27       	eor	r27, r27
     9ac:	a5 2f       	mov	r26, r21
     9ae:	94 2f       	mov	r25, r20
     9b0:	83 2f       	mov	r24, r19
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     9b2:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     9b4:	0d b4       	in	r0, 0x2d	; 45
     9b6:	07 fe       	sbrs	r0, 7
     9b8:	fd cf       	rjmp	.-6      	; 0x9b4 <dataflash_unprotect_block4+0x3c>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     9ba:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     9bc:	2e bd       	out	0x2e, r18	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     9be:	0d b4       	in	r0, 0x2d	; 45
     9c0:	07 fe       	sbrs	r0, 7
     9c2:	fd cf       	rjmp	.-6      	; 0x9be <dataflash_unprotect_block4+0x46>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     9c4:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
     9c6:	28 9a       	sbi	0x05, 0	; 5
     9c8:	83 e3       	ldi	r24, 0x33	; 51
     9ca:	93 e1       	ldi	r25, 0x13	; 19
     9cc:	01 97       	sbiw	r24, 0x01	; 1
     9ce:	f1 f7       	brne	.-4      	; 0x9cc <dataflash_unprotect_block4+0x54>

	_delay_ms(1);
}
     9d0:	08 95       	ret

000009d2 <dataflash_protect_block4>:

//__________________________________________________________________________________________________
void		dataflash_protect_block4	( uint32_t iAddress )
{
     9d2:	9b 01       	movw	r18, r22
     9d4:	ac 01       	movw	r20, r24
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
     9d6:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     9d8:	86 e0       	ldi	r24, 0x06	; 6
     9da:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     9dc:	0d b4       	in	r0, 0x2d	; 45
     9de:	07 fe       	sbrs	r0, 7
     9e0:	fd cf       	rjmp	.-6      	; 0x9dc <dataflash_protect_block4+0xa>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     9e2:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
     9e4:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
     9e6:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     9e8:	86 e3       	ldi	r24, 0x36	; 54
     9ea:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     9ec:	0d b4       	in	r0, 0x2d	; 45
     9ee:	07 fe       	sbrs	r0, 7
     9f0:	fd cf       	rjmp	.-6      	; 0x9ec <dataflash_protect_block4+0x1a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     9f2:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;

	spi_transfer(PROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
     9f4:	ca 01       	movw	r24, r20
     9f6:	aa 27       	eor	r26, r26
     9f8:	bb 27       	eor	r27, r27
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     9fa:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     9fc:	0d b4       	in	r0, 0x2d	; 45
     9fe:	07 fe       	sbrs	r0, 7
     a00:	fd cf       	rjmp	.-6      	; 0x9fc <dataflash_protect_block4+0x2a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a02:	8e b5       	in	r24, 0x2e	; 46
	CS_DOWN;

	spi_transfer(PROTECT_SECTOR);     		// Write erase64 opcode

	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
     a04:	bb 27       	eor	r27, r27
     a06:	a5 2f       	mov	r26, r21
     a08:	94 2f       	mov	r25, r20
     a0a:	83 2f       	mov	r24, r19
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a0c:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a0e:	0d b4       	in	r0, 0x2d	; 45
     a10:	07 fe       	sbrs	r0, 7
     a12:	fd cf       	rjmp	.-6      	; 0xa0e <dataflash_protect_block4+0x3c>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a14:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a16:	2e bd       	out	0x2e, r18	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a18:	0d b4       	in	r0, 0x2d	; 45
     a1a:	07 fe       	sbrs	r0, 7
     a1c:	fd cf       	rjmp	.-6      	; 0xa18 <dataflash_protect_block4+0x46>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a1e:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
     a20:	28 9a       	sbi	0x05, 0	; 5
     a22:	83 e3       	ldi	r24, 0x33	; 51
     a24:	93 e1       	ldi	r25, 0x13	; 19
     a26:	01 97       	sbiw	r24, 0x01	; 1
     a28:	f1 f7       	brne	.-4      	; 0xa26 <dataflash_protect_block4+0x54>

	_delay_ms(1);

}
     a2a:	08 95       	ret

00000a2c <dataflash_read_status>:
//__________________________________________________________________________________________________
uint8_t dataflash_read_status ( void )
{
	uint8_t data;

	CS_DOWN;
     a2c:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a2e:	85 e0       	ldi	r24, 0x05	; 5
     a30:	8e bd       	out	0x2e, r24	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a32:	0d b4       	in	r0, 0x2d	; 45
     a34:	07 fe       	sbrs	r0, 7
     a36:	fd cf       	rjmp	.-6      	; 0xa32 <dataflash_read_status+0x6>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a38:	8e b5       	in	r24, 0x2e	; 46
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     a3a:	81 e4       	ldi	r24, 0x41	; 65
     a3c:	8a 95       	dec	r24
     a3e:	f1 f7       	brne	.-4      	; 0xa3c <dataflash_read_status+0x10>
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a40:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a42:	0d b4       	in	r0, 0x2d	; 45
     a44:	07 fe       	sbrs	r0, 7
     a46:	fd cf       	rjmp	.-6      	; 0xa42 <dataflash_read_status+0x16>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a48:	8e b5       	in	r24, 0x2e	; 46

	CS_DOWN;
	spi_transfer(READ_STATUS_REG);     		// Read status   
	_delay_us(10);
	data = spi_transfer(0); 				// Send data byte
	CS_UP;      
     a4a:	28 9a       	sbi	0x05, 0	; 5

	return data;
}
     a4c:	08 95       	ret

00000a4e <dataflash_protect_all>:
	}
}

//__________________________________________________________________________________________________
void dataflash_protect_all ( void )
{
     a4e:	20 e0       	ldi	r18, 0x00	; 0
     a50:	30 e0       	ldi	r19, 0x00	; 0
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a52:	e6 e0       	ldi	r30, 0x06	; 6
     a54:	76 e3       	ldi	r23, 0x36	; 54
     a56:	61 e0       	ldi	r22, 0x01	; 1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     a58:	43 e3       	ldi	r20, 0x33	; 51
     a5a:	53 e1       	ldi	r21, 0x13	; 19
//__________________________________________________________________________________________________
void		dataflash_protect_block4	( uint32_t iAddress )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
     a5c:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a5e:	ee bd       	out	0x2e, r30	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a60:	0d b4       	in	r0, 0x2d	; 45
     a62:	07 fe       	sbrs	r0, 7
     a64:	fd cf       	rjmp	.-6      	; 0xa60 <dataflash_protect_all+0x12>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a66:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
     a68:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
     a6a:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a6c:	7e bd       	out	0x2e, r23	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a6e:	0d b4       	in	r0, 0x2d	; 45
     a70:	07 fe       	sbrs	r0, 7
     a72:	fd cf       	rjmp	.-6      	; 0xa6e <dataflash_protect_all+0x20>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a74:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a76:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a78:	0d b4       	in	r0, 0x2d	; 45
     a7a:	07 fe       	sbrs	r0, 7
     a7c:	fd cf       	rjmp	.-6      	; 0xa78 <dataflash_protect_all+0x2a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a7e:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a80:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a82:	0d b4       	in	r0, 0x2d	; 45
     a84:	07 fe       	sbrs	r0, 7
     a86:	fd cf       	rjmp	.-6      	; 0xa82 <dataflash_protect_all+0x34>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a88:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     a8a:	6e bd       	out	0x2e, r22	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     a8c:	0d b4       	in	r0, 0x2d	; 45
     a8e:	07 fe       	sbrs	r0, 7
     a90:	fd cf       	rjmp	.-6      	; 0xa8c <dataflash_protect_all+0x3e>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     a92:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
     a94:	28 9a       	sbi	0x05, 0	; 5
     a96:	ca 01       	movw	r24, r20
     a98:	01 97       	sbiw	r24, 0x01	; 1
     a9a:	f1 f7       	brne	.-4      	; 0xa98 <dataflash_protect_all+0x4a>
     a9c:	ca 01       	movw	r24, r20
     a9e:	01 97       	sbiw	r24, 0x01	; 1
     aa0:	f1 f7       	brne	.-4      	; 0xa9e <dataflash_protect_all+0x50>
     aa2:	2f 5f       	subi	r18, 0xFF	; 255
     aa4:	3f 4f       	sbci	r19, 0xFF	; 255
void dataflash_protect_all ( void )
{
	unsigned int address = 0x01;
	unsigned int i;

	for ( i=0; i<64; i++ )
     aa6:	20 34       	cpi	r18, 0x40	; 64
     aa8:	31 05       	cpc	r19, r1
     aaa:	c1 f6       	brne	.-80     	; 0xa5c <dataflash_protect_all+0xe>
	{
		dataflash_protect_block4 (address);
		address += 0x10000;						// Addvance to next sector (+64 KByte)
		_delay_ms(1);
	}
}
     aac:	08 95       	ret

00000aae <dataflash_unprotect_all>:
	return data;
}

//__________________________________________________________________________________________________
void dataflash_unprotect_all (void)
{
     aae:	20 e0       	ldi	r18, 0x00	; 0
     ab0:	30 e0       	ldi	r19, 0x00	; 0
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     ab2:	e6 e0       	ldi	r30, 0x06	; 6
     ab4:	79 e3       	ldi	r23, 0x39	; 57
     ab6:	61 e0       	ldi	r22, 0x01	; 1
     ab8:	43 e3       	ldi	r20, 0x33	; 51
     aba:	53 e1       	ldi	r21, 0x13	; 19
//__________________________________________________________________________________________________
void		dataflash_unprotect_block4	( uint32_t iAddress )
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
     abc:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     abe:	ee bd       	out	0x2e, r30	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     ac0:	0d b4       	in	r0, 0x2d	; 45
     ac2:	07 fe       	sbrs	r0, 7
     ac4:	fd cf       	rjmp	.-6      	; 0xac0 <dataflash_unprotect_all+0x12>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     ac6:	8e b5       	in	r24, 0x2e	; 46
{
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB

	CS_DOWN;
	spi_transfer(WRITE_ENABLE);				// Write enable command
	CS_UP;
     ac8:	28 9a       	sbi	0x05, 0	; 5

	CS_DOWN;
     aca:	28 98       	cbi	0x05, 0	; 5
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     acc:	7e bd       	out	0x2e, r23	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     ace:	0d b4       	in	r0, 0x2d	; 45
     ad0:	07 fe       	sbrs	r0, 7
     ad2:	fd cf       	rjmp	.-6      	; 0xace <dataflash_unprotect_all+0x20>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     ad4:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     ad6:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     ad8:	0d b4       	in	r0, 0x2d	; 45
     ada:	07 fe       	sbrs	r0, 7
     adc:	fd cf       	rjmp	.-6      	; 0xad8 <dataflash_unprotect_all+0x2a>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     ade:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     ae0:	1e bc       	out	0x2e, r1	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     ae2:	0d b4       	in	r0, 0x2d	; 45
     ae4:	07 fe       	sbrs	r0, 7
     ae6:	fd cf       	rjmp	.-6      	; 0xae2 <dataflash_unprotect_all+0x34>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     ae8:	8e b5       	in	r24, 0x2e	; 46
// Transfer the data to the data-flash using SPI
uint8_t spi_transfer (uint8_t c)
{
//	char indata;

	SPDR = c;
     aea:	6e bd       	out	0x2e, r22	; 46

//	SPSR = (1<<SPIF)|(1<<SPI2X);
	while (! (SPSR & (1<<SPIF))) 
     aec:	0d b4       	in	r0, 0x2d	; 45
     aee:	07 fe       	sbrs	r0, 7
     af0:	fd cf       	rjmp	.-6      	; 0xaec <dataflash_unprotect_all+0x3e>
	{
	}

//	indata = SPDR;
//	return indata;
	return SPDR;
     af2:	8e b5       	in	r24, 0x2e	; 46

	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	CS_UP;
     af4:	28 9a       	sbi	0x05, 0	; 5
     af6:	ca 01       	movw	r24, r20
     af8:	01 97       	sbiw	r24, 0x01	; 1
     afa:	f1 f7       	brne	.-4      	; 0xaf8 <dataflash_unprotect_all+0x4a>
     afc:	ca 01       	movw	r24, r20
     afe:	01 97       	sbiw	r24, 0x01	; 1
     b00:	f1 f7       	brne	.-4      	; 0xafe <dataflash_unprotect_all+0x50>
     b02:	2f 5f       	subi	r18, 0xFF	; 255
     b04:	3f 4f       	sbci	r19, 0xFF	; 255
void dataflash_unprotect_all (void)
{
	unsigned int address = 0x01;
	unsigned int i;

	for ( i=0; i<64; i++ )
     b06:	20 34       	cpi	r18, 0x40	; 64
     b08:	31 05       	cpc	r19, r1
     b0a:	c1 f6       	brne	.-80     	; 0xabc <dataflash_unprotect_all+0xe>
	{
		dataflash_unprotect_block4 (address);
		address += 0x10000;						// Addvance to next sector (+64 KByte)
		_delay_ms(1);
	}
}
     b0c:	08 95       	ret

00000b0e <FS_StopReadingFrame>:

//__________________________________________________________________________________________________
// File System - Stop reading from memory
void FS_StopReadingFrame ( void )
{
	CS_UP;
     b0e:	28 9a       	sbi	0x05, 0	; 5
}
     b10:	08 95       	ret

00000b12 <FS_WriteNewEntryTable>:
//__________________________________________________________________________________________________
// File System - Get new entry table
void FS_WriteNewEntryTable ( void )
{

}
     b12:	08 95       	ret

00000b14 <transfer_word>:


//__________________________________________________________________________________________________
// Transfer two bytes to and from spi recipient
uint16_t transfer_word ( uint16_t w )
{
     b14:	1f 93       	push	r17
     b16:	cf 93       	push	r28
     b18:	df 93       	push	r29
	uint16_t msb;
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
     b1a:	00 97       	sbiw	r24, 0x00	; 0
     b1c:	91 f0       	breq	.+36     	; 0xb42 <transfer_word+0x2e>
		msb = spi_transfer ( 0 );
		lsb = spi_transfer ( 0 );
	}
	else
	{
		lsb = w & 0xff;
     b1e:	ec 01       	movw	r28, r24
     b20:	d0 70       	andi	r29, 0x00	; 0
		msb = w >> 8;
     b22:	19 2f       	mov	r17, r25
		spi_transfer ( msb );
     b24:	89 2f       	mov	r24, r25
     b26:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
		spi_transfer ( lsb );
     b2a:	8c 2f       	mov	r24, r28
     b2c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     b30:	31 2f       	mov	r19, r17
     b32:	20 e0       	ldi	r18, 0x00	; 0
     b34:	2c 2b       	or	r18, r28
     b36:	3d 2b       	or	r19, r29
	}

	ret_val = lsb | (msb<<8);

	return ret_val;
}
     b38:	c9 01       	movw	r24, r18
     b3a:	df 91       	pop	r29
     b3c:	cf 91       	pop	r28
     b3e:	1f 91       	pop	r17
     b40:	08 95       	ret
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     b42:	80 e0       	ldi	r24, 0x00	; 0
     b44:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     b48:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     b4a:	80 e0       	ldi	r24, 0x00	; 0
     b4c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     b50:	c8 2f       	mov	r28, r24
     b52:	d0 e0       	ldi	r29, 0x00	; 0
     b54:	ed cf       	rjmp	.-38     	; 0xb30 <transfer_word+0x1c>

00000b56 <FS_ReadFrame>:
}

//__________________________________________________________________________________________________
// Read Out Frame Information
void FS_ReadFrame (uint16_t iBlock)
{
     b56:	ef 92       	push	r14
     b58:	ff 92       	push	r15
     b5a:	0f 93       	push	r16
     b5c:	1f 93       	push	r17
     b5e:	cf 93       	push	r28
     b60:	df 93       	push	r29
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	// Calculate first address
	iAddress = FS_FRAME_CAP * iBlock;
     b62:	20 e0       	ldi	r18, 0x00	; 0
     b64:	30 e3       	ldi	r19, 0x30	; 48
     b66:	82 9f       	mul	r24, r18
     b68:	70 01       	movw	r14, r0
     b6a:	83 9f       	mul	r24, r19
     b6c:	f0 0c       	add	r15, r0
     b6e:	92 9f       	mul	r25, r18
     b70:	f0 0c       	add	r15, r0
     b72:	11 24       	eor	r1, r1
     b74:	00 e0       	ldi	r16, 0x00	; 0
     b76:	10 e0       	ldi	r17, 0x00	; 0
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
     b78:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
     b7a:	83 e0       	ldi	r24, 0x03	; 3
     b7c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
     b80:	80 e0       	ldi	r24, 0x00	; 0
     b82:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
     b86:	bb 27       	eor	r27, r27
     b88:	a1 2f       	mov	r26, r17
     b8a:	90 2f       	mov	r25, r16
     b8c:	8f 2d       	mov	r24, r15
     b8e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte3);
     b92:	8e 2d       	mov	r24, r14
     b94:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     b98:	c0 e0       	ldi	r28, 0x00	; 0
     b9a:	d0 e0       	ldi	r29, 0x00	; 0

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
     b9c:	80 e0       	ldi	r24, 0x00	; 0
     b9e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     ba2:	0e 94 95 11 	call	0x232a	; 0x232a <USARTWriteChar>
     ba6:	21 96       	adiw	r28, 0x01	; 1
	spi_transfer(READ_ARRAY);      			// Read command
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
     ba8:	85 e2       	ldi	r24, 0x25	; 37
     baa:	c0 38       	cpi	r28, 0x80	; 128
     bac:	d8 07       	cpc	r29, r24
     bae:	b1 f7       	brne	.-20     	; 0xb9c <FS_ReadFrame+0x46>
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
	}

	CS_UP;
     bb0:	28 9a       	sbi	0x05, 0	; 5
}
     bb2:	df 91       	pop	r29
     bb4:	cf 91       	pop	r28
     bb6:	1f 91       	pop	r17
     bb8:	0f 91       	pop	r16
     bba:	ff 90       	pop	r15
     bbc:	ef 90       	pop	r14
     bbe:	08 95       	ret

00000bc0 <FS_ReadEntry_FileMatch>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - Only if filename matches
// Returns success (1) or fail (0) of no match (2)
uint8_t FS_ReadEntry_FileMatch ( uint32_t *pAddress, FileEntry_ST* pEntry, char* FileName )
{
     bc0:	8f 92       	push	r8
     bc2:	9f 92       	push	r9
     bc4:	bf 92       	push	r11
     bc6:	cf 92       	push	r12
     bc8:	df 92       	push	r13
     bca:	ef 92       	push	r14
     bcc:	ff 92       	push	r15
     bce:	0f 93       	push	r16
     bd0:	1f 93       	push	r17
     bd2:	cf 93       	push	r28
     bd4:	df 93       	push	r29
     bd6:	4c 01       	movw	r8, r24
     bd8:	6b 01       	movw	r12, r22
     bda:	ea 01       	movw	r28, r20
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
     bdc:	fc 01       	movw	r30, r24
     bde:	e0 80       	ld	r14, Z
     be0:	f1 80       	ldd	r15, Z+1	; 0x01
     be2:	02 81       	ldd	r16, Z+2	; 0x02
     be4:	13 81       	ldd	r17, Z+3	; 0x03
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
     be6:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
     be8:	83 e0       	ldi	r24, 0x03	; 3
     bea:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
     bee:	c8 01       	movw	r24, r16
     bf0:	aa 27       	eor	r26, r26
     bf2:	bb 27       	eor	r27, r27
     bf4:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
     bf8:	bb 27       	eor	r27, r27
     bfa:	a1 2f       	mov	r26, r17
     bfc:	90 2f       	mov	r25, r16
     bfe:	8f 2d       	mov	r24, r15
     c00:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte3);
     c04:	8e 2d       	mov	r24, r14
     c06:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     c0a:	80 e0       	ldi	r24, 0x00	; 0
     c0c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c10:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     c12:	80 e0       	ldi	r24, 0x00	; 0
     c14:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
		msb = w >> 8;
		spi_transfer ( msb );
		spi_transfer ( lsb );
	}

	ret_val = lsb | (msb<<8);
     c18:	31 2f       	mov	r19, r17
     c1a:	20 e0       	ldi	r18, 0x00	; 0
     c1c:	e8 2e       	mov	r14, r24
     c1e:	ff 24       	eor	r15, r15
     c20:	e2 2a       	or	r14, r18
     c22:	f3 2a       	or	r15, r19
	// Read the number of frames
	iNumFrames = transfer_word ( 0 );

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
     c24:	f1 e2       	ldi	r31, 0x21	; 33
     c26:	ef 16       	cp	r14, r31
     c28:	f1 04       	cpc	r15, r1
     c2a:	08 f0       	brcs	.+2      	; 0xc2e <FS_ReadEntry_FileMatch+0x6e>
     c2c:	66 c0       	rjmp	.+204    	; 0xcfa <FS_ReadEntry_FileMatch+0x13a>
		return 0;
	}

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);
     c2e:	80 e0       	ldi	r24, 0x00	; 0
     c30:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c34:	f6 01       	movw	r30, r12
     c36:	82 83       	std	Z+2, r24	; 0x02
     c38:	80 e0       	ldi	r24, 0x00	; 0
     c3a:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c3e:	f6 01       	movw	r30, r12
     c40:	83 83       	std	Z+3, r24	; 0x03
     c42:	80 e0       	ldi	r24, 0x00	; 0
     c44:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c48:	f6 01       	movw	r30, r12
     c4a:	84 83       	std	Z+4, r24	; 0x04
     c4c:	80 e0       	ldi	r24, 0x00	; 0
     c4e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c52:	f6 01       	movw	r30, r12
     c54:	85 83       	std	Z+5, r24	; 0x05
     c56:	80 e0       	ldi	r24, 0x00	; 0
     c58:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c5c:	f6 01       	movw	r30, r12
     c5e:	86 83       	std	Z+6, r24	; 0x06
     c60:	80 e0       	ldi	r24, 0x00	; 0
     c62:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c66:	f6 01       	movw	r30, r12
     c68:	87 83       	std	Z+7, r24	; 0x07
     c6a:	80 e0       	ldi	r24, 0x00	; 0
     c6c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c70:	f6 01       	movw	r30, r12
     c72:	80 87       	std	Z+8, r24	; 0x08
     c74:	80 e0       	ldi	r24, 0x00	; 0
     c76:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c7a:	f6 01       	movw	r30, r12
     c7c:	81 87       	std	Z+9, r24	; 0x09
     c7e:	80 e0       	ldi	r24, 0x00	; 0
     c80:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c84:	f6 01       	movw	r30, r12
     c86:	82 87       	std	Z+10, r24	; 0x0a
     c88:	80 e0       	ldi	r24, 0x00	; 0
     c8a:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c8e:	f6 01       	movw	r30, r12
     c90:	83 87       	std	Z+11, r24	; 0x0b
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     c98:	f6 01       	movw	r30, r12
     c9a:	84 87       	std	Z+12, r24	; 0x0c
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     ca2:	f6 01       	movw	r30, r12
     ca4:	85 87       	std	Z+13, r24	; 0x0d

	if ( strcmp(pEntry->sFileName, FileName) != 0 )		// No match
     ca6:	c6 01       	movw	r24, r12
     ca8:	02 96       	adiw	r24, 0x02	; 2
     caa:	be 01       	movw	r22, r28
     cac:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
     cb0:	00 97       	sbiw	r24, 0x00	; 0
     cb2:	29 f1       	breq	.+74     	; 0xcfe <FS_ReadEntry_FileMatch+0x13e>
	{
		*pAddress += 16+2*iNumFrames;	// Advance to next entry
     cb4:	28 e0       	ldi	r18, 0x08	; 8
     cb6:	30 e0       	ldi	r19, 0x00	; 0
     cb8:	e2 0e       	add	r14, r18
     cba:	f3 1e       	adc	r15, r19
     cbc:	ee 0c       	add	r14, r14
     cbe:	ff 1c       	adc	r15, r15
     cc0:	97 01       	movw	r18, r14
     cc2:	40 e0       	ldi	r20, 0x00	; 0
     cc4:	50 e0       	ldi	r21, 0x00	; 0
     cc6:	f4 01       	movw	r30, r8
     cc8:	80 81       	ld	r24, Z
     cca:	91 81       	ldd	r25, Z+1	; 0x01
     ccc:	a2 81       	ldd	r26, Z+2	; 0x02
     cce:	b3 81       	ldd	r27, Z+3	; 0x03
     cd0:	82 0f       	add	r24, r18
     cd2:	93 1f       	adc	r25, r19
     cd4:	a4 1f       	adc	r26, r20
     cd6:	b5 1f       	adc	r27, r21
     cd8:	80 83       	st	Z, r24
     cda:	91 83       	std	Z+1, r25	; 0x01
     cdc:	a2 83       	std	Z+2, r26	; 0x02
     cde:	b3 83       	std	Z+3, r27	; 0x03
     ce0:	82 e0       	ldi	r24, 0x02	; 2

	// Advance the address
	*pAddress += 16+2*iNumFrames;

	return 1;	// Success
}
     ce2:	df 91       	pop	r29
     ce4:	cf 91       	pop	r28
     ce6:	1f 91       	pop	r17
     ce8:	0f 91       	pop	r16
     cea:	ff 90       	pop	r15
     cec:	ef 90       	pop	r14
     cee:	df 90       	pop	r13
     cf0:	cf 90       	pop	r12
     cf2:	bf 90       	pop	r11
     cf4:	9f 90       	pop	r9
     cf6:	8f 90       	pop	r8
     cf8:	08 95       	ret
	// Read the number of frames
	iNumFrames = transfer_word ( 0 );

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
     cfa:	80 e0       	ldi	r24, 0x00	; 0
     cfc:	f2 cf       	rjmp	.-28     	; 0xce2 <FS_ReadEntry_FileMatch+0x122>
		*pAddress += 16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
     cfe:	e1 14       	cp	r14, r1
     d00:	f1 04       	cpc	r15, r1
     d02:	d9 f0       	breq	.+54     	; 0xd3a <FS_ReadEntry_FileMatch+0x17a>
		pEntry->sFileName[itr] = spi_transfer(0);

	if ( strcmp(pEntry->sFileName, FileName) != 0 )		// No match
	{
		*pAddress += 16+2*iNumFrames;	// Advance to next entry
		return 2;
     d04:	bb 24       	eor	r11, r11
     d06:	c0 e0       	ldi	r28, 0x00	; 0
     d08:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     d0a:	80 e0       	ldi	r24, 0x00	; 0
     d0c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     d10:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
     d18:	27 96       	adiw	r28, 0x07	; 7
     d1a:	cc 0f       	add	r28, r28
     d1c:	dd 1f       	adc	r29, r29
     d1e:	cc 0d       	add	r28, r12
     d20:	dd 1d       	adc	r29, r13
     d22:	00 e0       	ldi	r16, 0x00	; 0
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	80 2b       	or	r24, r16
     d28:	91 2b       	or	r25, r17
     d2a:	99 83       	std	Y+1, r25	; 0x01
     d2c:	88 83       	st	Y, r24
		*pAddress += 16+2*iNumFrames;	// Advance to next entry
		return 2;
	}

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
     d2e:	b3 94       	inc	r11
     d30:	cb 2d       	mov	r28, r11
     d32:	d0 e0       	ldi	r29, 0x00	; 0
     d34:	ce 15       	cp	r28, r14
     d36:	df 05       	cpc	r29, r15
     d38:	40 f3       	brcs	.-48     	; 0xd0a <FS_ReadEntry_FileMatch+0x14a>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->iAngleOffset = spi_transfer(0);;
     d3a:	80 e0       	ldi	r24, 0x00	; 0
     d3c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     d40:	2e e4       	ldi	r18, 0x4E	; 78
     d42:	30 e0       	ldi	r19, 0x00	; 0
     d44:	c2 0e       	add	r12, r18
     d46:	d3 1e       	adc	r13, r19
     d48:	f6 01       	movw	r30, r12
     d4a:	81 93       	st	Z+, r24
     d4c:	6f 01       	movw	r12, r30
	pEntry->iFileType = spi_transfer(0);
     d4e:	80 e0       	ldi	r24, 0x00	; 0
     d50:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     d54:	f6 01       	movw	r30, r12
     d56:	80 83       	st	Z, r24

	CS_UP;
     d58:	28 9a       	sbi	0x05, 0	; 5

	// Advance the address
	*pAddress += 16+2*iNumFrames;
     d5a:	28 e0       	ldi	r18, 0x08	; 8
     d5c:	30 e0       	ldi	r19, 0x00	; 0
     d5e:	e2 0e       	add	r14, r18
     d60:	f3 1e       	adc	r15, r19
     d62:	ee 0c       	add	r14, r14
     d64:	ff 1c       	adc	r15, r15
     d66:	97 01       	movw	r18, r14
     d68:	40 e0       	ldi	r20, 0x00	; 0
     d6a:	50 e0       	ldi	r21, 0x00	; 0
     d6c:	f4 01       	movw	r30, r8
     d6e:	80 81       	ld	r24, Z
     d70:	91 81       	ldd	r25, Z+1	; 0x01
     d72:	a2 81       	ldd	r26, Z+2	; 0x02
     d74:	b3 81       	ldd	r27, Z+3	; 0x03
     d76:	82 0f       	add	r24, r18
     d78:	93 1f       	adc	r25, r19
     d7a:	a4 1f       	adc	r26, r20
     d7c:	b5 1f       	adc	r27, r21
     d7e:	80 83       	st	Z, r24
     d80:	91 83       	std	Z+1, r25	; 0x01
     d82:	a2 83       	std	Z+2, r26	; 0x02
     d84:	b3 83       	std	Z+3, r27	; 0x03
     d86:	81 e0       	ldi	r24, 0x01	; 1
     d88:	ac cf       	rjmp	.-168    	; 0xce2 <FS_ReadEntry_FileMatch+0x122>

00000d8a <FS_SearchFile>:

//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
     d8a:	2f 92       	push	r2
     d8c:	3f 92       	push	r3
     d8e:	4f 92       	push	r4
     d90:	5f 92       	push	r5
     d92:	6f 92       	push	r6
     d94:	7f 92       	push	r7
     d96:	8f 92       	push	r8
     d98:	9f 92       	push	r9
     d9a:	af 92       	push	r10
     d9c:	bf 92       	push	r11
     d9e:	cf 92       	push	r12
     da0:	df 92       	push	r13
     da2:	ef 92       	push	r14
     da4:	ff 92       	push	r15
     da6:	0f 93       	push	r16
     da8:	1f 93       	push	r17
     daa:	df 93       	push	r29
     dac:	cf 93       	push	r28
     dae:	cd b7       	in	r28, 0x3d	; 61
     db0:	de b7       	in	r29, 0x3e	; 62
     db2:	c6 56       	subi	r28, 0x66	; 102
     db4:	d0 40       	sbci	r29, 0x00	; 0
     db6:	0f b6       	in	r0, 0x3f	; 63
     db8:	f8 94       	cli
     dba:	de bf       	out	0x3e, r29	; 62
     dbc:	0f be       	out	0x3f, r0	; 63
     dbe:	cd bf       	out	0x3d, r28	; 61
     dc0:	3c 01       	movw	r6, r24
     dc2:	6b 01       	movw	r12, r22
	uint32_t 				Address = ENTRY_TABLE_ADDR;
     dc4:	80 e0       	ldi	r24, 0x00	; 0
     dc6:	90 ec       	ldi	r25, 0xC0	; 192
     dc8:	af e3       	ldi	r26, 0x3F	; 63
     dca:	b0 e0       	ldi	r27, 0x00	; 0
     dcc:	89 83       	std	Y+1, r24	; 0x01
     dce:	9a 83       	std	Y+2, r25	; 0x02
     dd0:	ab 83       	std	Y+3, r26	; 0x03
     dd2:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
     dd4:	2e 01       	movw	r4, r28
     dd6:	08 94       	sec
     dd8:	41 1c       	adc	r4, r1
     dda:	51 1c       	adc	r5, r1
     ddc:	c2 01       	movw	r24, r4
     dde:	a3 01       	movw	r20, r6
     de0:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
     de4:	88 23       	and	r24, r24
     de6:	09 f4       	brne	.+2      	; 0xdea <FS_SearchFile+0x60>
     de8:	ba c0       	rjmp	.+372    	; 0xf5e <FS_SearchFile+0x1d4>
	{
		if ( iSucc == 1 )	// Success
		{
			USARTWriteString ( (char*)"\r\nFound File: \r\n" );
			sprintf(Text, "File Name: %s\r\nAngle Offset: %d\r\nNum Of Frames: %d\r\n",
     dea:	96 01       	movw	r18, r12
     dec:	2e 5f       	subi	r18, 0xFE	; 254
     dee:	3f 4f       	sbci	r19, 0xFF	; 255
     df0:	a7 96       	adiw	r28, 0x27	; 39
     df2:	3f af       	std	Y+63, r19	; 0x3f
     df4:	2e af       	std	Y+62, r18	; 0x3e
     df6:	a7 97       	sbiw	r28, 0x27	; 39
     df8:	10 e0       	ldi	r17, 0x00	; 0
     dfa:	e5 e0       	ldi	r30, 0x05	; 5
     dfc:	ae 2e       	mov	r10, r30
     dfe:	b1 2c       	mov	r11, r1
     e00:	ac 0e       	add	r10, r28
     e02:	bd 1e       	adc	r11, r29
     e04:	7e e4       	ldi	r23, 0x4E	; 78
     e06:	27 2e       	mov	r2, r23
     e08:	31 2c       	mov	r3, r1
     e0a:	2c 0c       	add	r2, r12
     e0c:	3d 1c       	adc	r3, r13
     e0e:	6f e6       	ldi	r22, 0x6F	; 111
     e10:	86 2e       	mov	r8, r22
     e12:	61 e0       	ldi	r22, 0x01	; 1
     e14:	96 2e       	mov	r9, r22
     e16:	08 c0       	rjmp	.+16     	; 0xe28 <FS_SearchFile+0x9e>

			USARTWriteString ( (char*)"\r\n\r\n" );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
     e18:	c2 01       	movw	r24, r4
     e1a:	b6 01       	movw	r22, r12
     e1c:	a3 01       	movw	r20, r6
     e1e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
     e22:	88 23       	and	r24, r24
     e24:	09 f4       	brne	.+2      	; 0xe28 <FS_SearchFile+0x9e>
     e26:	7e c0       	rjmp	.+252    	; 0xf24 <FS_SearchFile+0x19a>
	{
		if ( iSucc == 1 )	// Success
     e28:	81 30       	cpi	r24, 0x01	; 1
     e2a:	b1 f7       	brne	.-20     	; 0xe18 <FS_SearchFile+0x8e>
		{
			USARTWriteString ( (char*)"\r\nFound File: \r\n" );
     e2c:	8c e1       	ldi	r24, 0x1C	; 28
     e2e:	91 e0       	ldi	r25, 0x01	; 1
     e30:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
			sprintf(Text, "File Name: %s\r\nAngle Offset: %d\r\nNum Of Frames: %d\r\n",
     e34:	8d b7       	in	r24, 0x3d	; 61
     e36:	9e b7       	in	r25, 0x3e	; 62
     e38:	0a 97       	sbiw	r24, 0x0a	; 10
     e3a:	0f b6       	in	r0, 0x3f	; 63
     e3c:	f8 94       	cli
     e3e:	9e bf       	out	0x3e, r25	; 62
     e40:	0f be       	out	0x3f, r0	; 63
     e42:	8d bf       	out	0x3d, r24	; 61
     e44:	ed b7       	in	r30, 0x3d	; 61
     e46:	fe b7       	in	r31, 0x3e	; 62
     e48:	31 96       	adiw	r30, 0x01	; 1
     e4a:	ad b7       	in	r26, 0x3d	; 61
     e4c:	be b7       	in	r27, 0x3e	; 62
     e4e:	12 96       	adiw	r26, 0x02	; 2
     e50:	bc 92       	st	X, r11
     e52:	ae 92       	st	-X, r10
     e54:	11 97       	sbiw	r26, 0x01	; 1
     e56:	2d e2       	ldi	r18, 0x2D	; 45
     e58:	31 e0       	ldi	r19, 0x01	; 1
     e5a:	33 83       	std	Z+3, r19	; 0x03
     e5c:	22 83       	std	Z+2, r18	; 0x02
     e5e:	a7 96       	adiw	r28, 0x27	; 39
     e60:	8e ad       	ldd	r24, Y+62	; 0x3e
     e62:	9f ad       	ldd	r25, Y+63	; 0x3f
     e64:	a7 97       	sbiw	r28, 0x27	; 39
     e66:	95 83       	std	Z+5, r25	; 0x05
     e68:	84 83       	std	Z+4, r24	; 0x04
     e6a:	d1 01       	movw	r26, r2
     e6c:	8c 91       	ld	r24, X
     e6e:	86 83       	std	Z+6, r24	; 0x06
     e70:	17 82       	std	Z+7, r1	; 0x07
     e72:	d6 01       	movw	r26, r12
     e74:	8d 91       	ld	r24, X+
     e76:	9c 91       	ld	r25, X
     e78:	91 87       	std	Z+9, r25	; 0x09
     e7a:	80 87       	std	Z+8, r24	; 0x08
     e7c:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
																sFileEntry->sFileName,
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
     e80:	ed b7       	in	r30, 0x3d	; 61
     e82:	fe b7       	in	r31, 0x3e	; 62
     e84:	3a 96       	adiw	r30, 0x0a	; 10
     e86:	0f b6       	in	r0, 0x3f	; 63
     e88:	f8 94       	cli
     e8a:	fe bf       	out	0x3e, r31	; 62
     e8c:	0f be       	out	0x3f, r0	; 63
     e8e:	ed bf       	out	0x3d, r30	; 61
     e90:	c5 01       	movw	r24, r10
     e92:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
			USARTWriteString ( (char*)"Frame List: " );
     e96:	82 e6       	ldi	r24, 0x62	; 98
     e98:	91 e0       	ldi	r25, 0x01	; 1
     e9a:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
     e9e:	d6 01       	movw	r26, r12
     ea0:	8d 91       	ld	r24, X+
     ea2:	9c 91       	ld	r25, X
     ea4:	89 2b       	or	r24, r25
     ea6:	89 f1       	breq	.+98     	; 0xf0a <FS_SearchFile+0x180>
     ea8:	76 01       	movw	r14, r12
     eaa:	00 e0       	ldi	r16, 0x00	; 0
     eac:	10 e0       	ldi	r17, 0x00	; 0
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
     eae:	00 d0       	rcall	.+0      	; 0xeb0 <FS_SearchFile+0x126>
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <FS_SearchFile+0x128>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <FS_SearchFile+0x12a>
     eb4:	ed b7       	in	r30, 0x3d	; 61
     eb6:	fe b7       	in	r31, 0x3e	; 62
     eb8:	31 96       	adiw	r30, 0x01	; 1
     eba:	ad b7       	in	r26, 0x3d	; 61
     ebc:	be b7       	in	r27, 0x3e	; 62
     ebe:	12 96       	adiw	r26, 0x02	; 2
     ec0:	bc 92       	st	X, r11
     ec2:	ae 92       	st	-X, r10
     ec4:	11 97       	sbiw	r26, 0x01	; 1
     ec6:	93 82       	std	Z+3, r9	; 0x03
     ec8:	82 82       	std	Z+2, r8	; 0x02
     eca:	d7 01       	movw	r26, r14
     ecc:	1e 96       	adiw	r26, 0x0e	; 14
     ece:	8d 91       	ld	r24, X+
     ed0:	9c 91       	ld	r25, X
     ed2:	1f 97       	sbiw	r26, 0x0f	; 15
     ed4:	95 83       	std	Z+5, r25	; 0x05
     ed6:	84 83       	std	Z+4, r24	; 0x04
     ed8:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
				USARTWriteString (Text);
     edc:	ed b7       	in	r30, 0x3d	; 61
     ede:	fe b7       	in	r31, 0x3e	; 62
     ee0:	36 96       	adiw	r30, 0x06	; 6
     ee2:	0f b6       	in	r0, 0x3f	; 63
     ee4:	f8 94       	cli
     ee6:	fe bf       	out	0x3e, r31	; 62
     ee8:	0f be       	out	0x3f, r0	; 63
     eea:	ed bf       	out	0x3d, r30	; 61
     eec:	c5 01       	movw	r24, r10
     eee:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
			USARTWriteString ( (char*)"Frame List: " );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
     ef2:	0f 5f       	subi	r16, 0xFF	; 255
     ef4:	1f 4f       	sbci	r17, 0xFF	; 255
     ef6:	22 e0       	ldi	r18, 0x02	; 2
     ef8:	30 e0       	ldi	r19, 0x00	; 0
     efa:	e2 0e       	add	r14, r18
     efc:	f3 1e       	adc	r15, r19
     efe:	d6 01       	movw	r26, r12
     f00:	8d 91       	ld	r24, X+
     f02:	9c 91       	ld	r25, X
     f04:	08 17       	cp	r16, r24
     f06:	19 07       	cpc	r17, r25
     f08:	90 f2       	brcs	.-92     	; 0xeae <FS_SearchFile+0x124>
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
				USARTWriteString (Text);
			}

			USARTWriteString ( (char*)"\r\n\r\n" );
     f0a:	83 e7       	ldi	r24, 0x73	; 115
     f0c:	91 e0       	ldi	r25, 0x01	; 1
     f0e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
     f12:	11 e0       	ldi	r17, 0x01	; 1
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
     f14:	c2 01       	movw	r24, r4
     f16:	b6 01       	movw	r22, r12
     f18:	a3 01       	movw	r20, r6
     f1a:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
     f1e:	88 23       	and	r24, r24
     f20:	09 f0       	breq	.+2      	; 0xf24 <FS_SearchFile+0x19a>
     f22:	82 cf       	rjmp	.-252    	; 0xe28 <FS_SearchFile+0x9e>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
     f24:	11 23       	and	r17, r17
     f26:	d9 f0       	breq	.+54     	; 0xf5e <FS_SearchFile+0x1d4>
     f28:	81 e0       	ldi	r24, 0x01	; 1
		return 0;	// Fail
	}

	return 1; 		// Success

}
     f2a:	ca 59       	subi	r28, 0x9A	; 154
     f2c:	df 4f       	sbci	r29, 0xFF	; 255
     f2e:	0f b6       	in	r0, 0x3f	; 63
     f30:	f8 94       	cli
     f32:	de bf       	out	0x3e, r29	; 62
     f34:	0f be       	out	0x3f, r0	; 63
     f36:	cd bf       	out	0x3d, r28	; 61
     f38:	cf 91       	pop	r28
     f3a:	df 91       	pop	r29
     f3c:	1f 91       	pop	r17
     f3e:	0f 91       	pop	r16
     f40:	ff 90       	pop	r15
     f42:	ef 90       	pop	r14
     f44:	df 90       	pop	r13
     f46:	cf 90       	pop	r12
     f48:	bf 90       	pop	r11
     f4a:	af 90       	pop	r10
     f4c:	9f 90       	pop	r9
     f4e:	8f 90       	pop	r8
     f50:	7f 90       	pop	r7
     f52:	6f 90       	pop	r6
     f54:	5f 90       	pop	r5
     f56:	4f 90       	pop	r4
     f58:	3f 90       	pop	r3
     f5a:	2f 90       	pop	r2
     f5c:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		USARTWriteString ( (char*)"\r\nFile not found!\r\n" );
     f5e:	88 e7       	ldi	r24, 0x78	; 120
     f60:	91 e0       	ldi	r25, 0x01	; 1
     f62:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
     f66:	80 e0       	ldi	r24, 0x00	; 0
     f68:	e0 cf       	rjmp	.-64     	; 0xf2a <FS_SearchFile+0x1a0>

00000f6a <FS_ReadEntry>:

//__________________________________________________________________________________________________
// Reads an entry from the FS table into pEntry - preallocated FileEntry_ST
// Returns success (1) or fail (0)
uint8_t FS_ReadEntry ( uint32_t *pAddress, FileEntry_ST* pEntry )
{
     f6a:	8f 92       	push	r8
     f6c:	9f 92       	push	r9
     f6e:	af 92       	push	r10
     f70:	bf 92       	push	r11
     f72:	cf 92       	push	r12
     f74:	df 92       	push	r13
     f76:	ef 92       	push	r14
     f78:	ff 92       	push	r15
     f7a:	0f 93       	push	r16
     f7c:	1f 93       	push	r17
     f7e:	cf 93       	push	r28
     f80:	df 93       	push	r29
     f82:	4c 01       	movw	r8, r24
     f84:	6b 01       	movw	r12, r22
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t Address = *pAddress;
     f86:	fc 01       	movw	r30, r24
     f88:	e0 80       	ld	r14, Z
     f8a:	f1 80       	ldd	r15, Z+1	; 0x01
     f8c:	02 81       	ldd	r16, Z+2	; 0x02
     f8e:	13 81       	ldd	r17, Z+3	; 0x03
	// Read next file entry
	adrByte1 = (Address>>16)&0xff;
	adrByte2 = (Address>>8)&0xff;
	adrByte3 = Address&0xff;

	CS_DOWN;
     f90:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
     f92:	83 e0       	ldi	r24, 0x03	; 3
     f94:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
     f98:	c8 01       	movw	r24, r16
     f9a:	aa 27       	eor	r26, r26
     f9c:	bb 27       	eor	r27, r27
     f9e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
     fa2:	bb 27       	eor	r27, r27
     fa4:	a1 2f       	mov	r26, r17
     fa6:	90 2f       	mov	r25, r16
     fa8:	8f 2d       	mov	r24, r15
     faa:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte3);
     fae:	8e 2d       	mov	r24, r14
     fb0:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
     fb4:	80 e0       	ldi	r24, 0x00	; 0
     fb6:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     fba:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
     fbc:	80 e0       	ldi	r24, 0x00	; 0
     fbe:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
		msb = w >> 8;
		spi_transfer ( msb );
		spi_transfer ( lsb );
	}

	ret_val = lsb | (msb<<8);
     fc2:	31 2f       	mov	r19, r17
     fc4:	20 e0       	ldi	r18, 0x00	; 0
     fc6:	a8 2e       	mov	r10, r24
     fc8:	bb 24       	eor	r11, r11
     fca:	a2 2a       	or	r10, r18
     fcc:	b3 2a       	or	r11, r19
	// Read the number of frames
	iNumFrames = transfer_word ( 0 );

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
     fce:	f1 e2       	ldi	r31, 0x21	; 33
     fd0:	af 16       	cp	r10, r31
     fd2:	b1 04       	cpc	r11, r1
     fd4:	08 f0       	brcs	.+2      	; 0xfd8 <FS_ReadEntry+0x6e>
     fd6:	8e c0       	rjmp	.+284    	; 0x10f4 <FS_ReadEntry+0x18a>
		return 0;
	}

	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     fde:	f6 01       	movw	r30, r12
     fe0:	82 83       	std	Z+2, r24	; 0x02
     fe2:	80 e0       	ldi	r24, 0x00	; 0
     fe4:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     fe8:	f6 01       	movw	r30, r12
     fea:	83 83       	std	Z+3, r24	; 0x03
     fec:	80 e0       	ldi	r24, 0x00	; 0
     fee:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     ff2:	f6 01       	movw	r30, r12
     ff4:	84 83       	std	Z+4, r24	; 0x04
     ff6:	80 e0       	ldi	r24, 0x00	; 0
     ff8:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
     ffc:	f6 01       	movw	r30, r12
     ffe:	85 83       	std	Z+5, r24	; 0x05
    1000:	80 e0       	ldi	r24, 0x00	; 0
    1002:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1006:	f6 01       	movw	r30, r12
    1008:	86 83       	std	Z+6, r24	; 0x06
    100a:	80 e0       	ldi	r24, 0x00	; 0
    100c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1010:	f6 01       	movw	r30, r12
    1012:	87 83       	std	Z+7, r24	; 0x07
    1014:	80 e0       	ldi	r24, 0x00	; 0
    1016:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    101a:	f6 01       	movw	r30, r12
    101c:	80 87       	std	Z+8, r24	; 0x08
    101e:	80 e0       	ldi	r24, 0x00	; 0
    1020:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1024:	f6 01       	movw	r30, r12
    1026:	81 87       	std	Z+9, r24	; 0x09
    1028:	80 e0       	ldi	r24, 0x00	; 0
    102a:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    102e:	f6 01       	movw	r30, r12
    1030:	82 87       	std	Z+10, r24	; 0x0a
    1032:	80 e0       	ldi	r24, 0x00	; 0
    1034:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1038:	f6 01       	movw	r30, r12
    103a:	83 87       	std	Z+11, r24	; 0x0b
    103c:	80 e0       	ldi	r24, 0x00	; 0
    103e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1042:	f6 01       	movw	r30, r12
    1044:	84 87       	std	Z+12, r24	; 0x0c
    1046:	80 e0       	ldi	r24, 0x00	; 0
    1048:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    104c:	f6 01       	movw	r30, r12
    104e:	85 87       	std	Z+13, r24	; 0x0d

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1050:	a1 14       	cp	r10, r1
    1052:	b1 04       	cpc	r11, r1
    1054:	d9 f0       	breq	.+54     	; 0x108c <FS_ReadEntry+0x122>
    1056:	ee 24       	eor	r14, r14
    1058:	c0 e0       	ldi	r28, 0x00	; 0
    105a:	d0 e0       	ldi	r29, 0x00	; 0
	uint16_t lsb;
	uint16_t ret_val;

	if (w==0)
	{
		msb = spi_transfer ( 0 );
    105c:	80 e0       	ldi	r24, 0x00	; 0
    105e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1062:	18 2f       	mov	r17, r24
		lsb = spi_transfer ( 0 );
    1064:	80 e0       	ldi	r24, 0x00	; 0
    1066:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
		pEntry->iBlockList[itr] = transfer_word (0);
    106a:	27 96       	adiw	r28, 0x07	; 7
    106c:	cc 0f       	add	r28, r28
    106e:	dd 1f       	adc	r29, r29
    1070:	cc 0d       	add	r28, r12
    1072:	dd 1d       	adc	r29, r13
    1074:	00 e0       	ldi	r16, 0x00	; 0
    1076:	90 e0       	ldi	r25, 0x00	; 0
    1078:	80 2b       	or	r24, r16
    107a:	91 2b       	or	r25, r17
    107c:	99 83       	std	Y+1, r25	; 0x01
    107e:	88 83       	st	Y, r24
	// Read the name of the file
	for (itr = 0; itr<FS_FILENAME_LENGTH; itr ++)
		pEntry->sFileName[itr] = spi_transfer(0);

	// Read the block addresses
	for (itr = 0; itr<iNumFrames; itr ++)
    1080:	e3 94       	inc	r14
    1082:	ce 2d       	mov	r28, r14
    1084:	d0 e0       	ldi	r29, 0x00	; 0
    1086:	ca 15       	cp	r28, r10
    1088:	db 05       	cpc	r29, r11
    108a:	40 f3       	brcs	.-48     	; 0x105c <FS_ReadEntry+0xf2>
		pEntry->iBlockList[itr] = transfer_word (0);

	// Read other information
	pEntry->iAngleOffset = spi_transfer(0);;
    108c:	80 e0       	ldi	r24, 0x00	; 0
    108e:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    1092:	2e e4       	ldi	r18, 0x4E	; 78
    1094:	30 e0       	ldi	r19, 0x00	; 0
    1096:	c2 0e       	add	r12, r18
    1098:	d3 1e       	adc	r13, r19
    109a:	f6 01       	movw	r30, r12
    109c:	81 93       	st	Z+, r24
    109e:	6f 01       	movw	r12, r30
	pEntry->iFileType = spi_transfer(0);
    10a0:	80 e0       	ldi	r24, 0x00	; 0
    10a2:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    10a6:	f6 01       	movw	r30, r12
    10a8:	80 83       	st	Z, r24

	CS_UP;
    10aa:	28 9a       	sbi	0x05, 0	; 5

	// Advance the address
	*pAddress += 16+2*iNumFrames;
    10ac:	28 e0       	ldi	r18, 0x08	; 8
    10ae:	30 e0       	ldi	r19, 0x00	; 0
    10b0:	a2 0e       	add	r10, r18
    10b2:	b3 1e       	adc	r11, r19
    10b4:	aa 0c       	add	r10, r10
    10b6:	bb 1c       	adc	r11, r11
    10b8:	95 01       	movw	r18, r10
    10ba:	40 e0       	ldi	r20, 0x00	; 0
    10bc:	50 e0       	ldi	r21, 0x00	; 0
    10be:	f4 01       	movw	r30, r8
    10c0:	80 81       	ld	r24, Z
    10c2:	91 81       	ldd	r25, Z+1	; 0x01
    10c4:	a2 81       	ldd	r26, Z+2	; 0x02
    10c6:	b3 81       	ldd	r27, Z+3	; 0x03
    10c8:	82 0f       	add	r24, r18
    10ca:	93 1f       	adc	r25, r19
    10cc:	a4 1f       	adc	r26, r20
    10ce:	b5 1f       	adc	r27, r21
    10d0:	80 83       	st	Z, r24
    10d2:	91 83       	std	Z+1, r25	; 0x01
    10d4:	a2 83       	std	Z+2, r26	; 0x02
    10d6:	b3 83       	std	Z+3, r27	; 0x03
    10d8:	81 e0       	ldi	r24, 0x01	; 1

	return 1;	// Success
}
    10da:	df 91       	pop	r29
    10dc:	cf 91       	pop	r28
    10de:	1f 91       	pop	r17
    10e0:	0f 91       	pop	r16
    10e2:	ff 90       	pop	r15
    10e4:	ef 90       	pop	r14
    10e6:	df 90       	pop	r13
    10e8:	cf 90       	pop	r12
    10ea:	bf 90       	pop	r11
    10ec:	af 90       	pop	r10
    10ee:	9f 90       	pop	r9
    10f0:	8f 90       	pop	r8
    10f2:	08 95       	ret
	// Read the number of frames
	iNumFrames = transfer_word ( 0 );

	// Check if the list has finished (reading empty from flash
	// should be 0xffff word
	if (iNumFrames > FS_FILE_MAX_FRAMES)
    10f4:	80 e0       	ldi	r24, 0x00	; 0
    10f6:	f1 cf       	rjmp	.-30     	; 0x10da <FS_ReadEntry+0x170>

000010f8 <FS_ShowFileInformation>:


//__________________________________________________________________________________________________
// File System - Show on uart the file system contents
void FS_ShowFileInformation ( void )
{
    10f8:	4f 92       	push	r4
    10fa:	5f 92       	push	r5
    10fc:	6f 92       	push	r6
    10fe:	7f 92       	push	r7
    1100:	8f 92       	push	r8
    1102:	9f 92       	push	r9
    1104:	af 92       	push	r10
    1106:	bf 92       	push	r11
    1108:	cf 92       	push	r12
    110a:	df 92       	push	r13
    110c:	ef 92       	push	r14
    110e:	ff 92       	push	r15
    1110:	0f 93       	push	r16
    1112:	1f 93       	push	r17
    1114:	df 93       	push	r29
    1116:	cf 93       	push	r28
    1118:	cd b7       	in	r28, 0x3d	; 61
    111a:	de b7       	in	r29, 0x3e	; 62
    111c:	c4 5b       	subi	r28, 0xB4	; 180
    111e:	d0 40       	sbci	r29, 0x00	; 0
    1120:	0f b6       	in	r0, 0x3f	; 63
    1122:	f8 94       	cli
    1124:	de bf       	out	0x3e, r29	; 62
    1126:	0f be       	out	0x3f, r0	; 63
    1128:	cd bf       	out	0x3d, r28	; 61
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    112a:	80 e0       	ldi	r24, 0x00	; 0
    112c:	90 ec       	ldi	r25, 0xC0	; 192
    112e:	af e3       	ldi	r26, 0x3F	; 63
    1130:	b0 e0       	ldi	r27, 0x00	; 0
    1132:	89 83       	std	Y+1, r24	; 0x01
    1134:	9a 83       	std	Y+2, r25	; 0x02
    1136:	ab 83       	std	Y+3, r26	; 0x03
    1138:	bc 83       	std	Y+4, r27	; 0x04
	FileEntry_ST			sFileEntry;
	uint16_t				iCount = 0;
	char Text[96];

	USARTWriteString ( (char*)"\r\nFlash Contents: \r\n" );
    113a:	8c e8       	ldi	r24, 0x8C	; 140
    113c:	91 e0       	ldi	r25, 0x01	; 1
    113e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	USARTWriteString ( (char*)"\r\n#		File Name		Block	Offset	File Size (Blocks)\r\n");
    1142:	81 ea       	ldi	r24, 0xA1	; 161
    1144:	91 e0       	ldi	r25, 0x01	; 1
    1146:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	USARTWriteString (     (char*)"----		--------------		------	------	------------------\r\n");
    114a:	83 ed       	ldi	r24, 0xD3	; 211
    114c:	91 e0       	ldi	r25, 0x01	; 1
    114e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1152:	00 e0       	ldi	r16, 0x00	; 0
    1154:	10 e0       	ldi	r17, 0x00	; 0
    1156:	55 e0       	ldi	r21, 0x05	; 5
    1158:	45 2e       	mov	r4, r21
    115a:	51 2c       	mov	r5, r1
    115c:	4c 0e       	add	r4, r28
    115e:	5d 1e       	adc	r5, r29
    1160:	4e 01       	movw	r8, r28
    1162:	08 94       	sec
    1164:	81 1c       	adc	r8, r1
    1166:	91 1c       	adc	r9, r1

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
	{
		iCount ++;
		sprintf(Text, "%d		%s		%d	%d	%d\r\n", 	iCount,
    1168:	45 e5       	ldi	r20, 0x55	; 85
    116a:	e4 2e       	mov	r14, r20
    116c:	f1 2c       	mov	r15, r1
    116e:	ec 0e       	add	r14, r28
    1170:	fd 1e       	adc	r15, r29
    1172:	3c e0       	ldi	r19, 0x0C	; 12
    1174:	63 2e       	mov	r6, r19
    1176:	32 e0       	ldi	r19, 0x02	; 2
    1178:	73 2e       	mov	r7, r19
    117a:	27 e0       	ldi	r18, 0x07	; 7
    117c:	a2 2e       	mov	r10, r18
    117e:	b1 2c       	mov	r11, r1
    1180:	ac 0e       	add	r10, r28
    1182:	bd 1e       	adc	r11, r29
    1184:	93 e5       	ldi	r25, 0x53	; 83
    1186:	c9 2e       	mov	r12, r25
    1188:	d1 2c       	mov	r13, r1
    118a:	cc 0e       	add	r12, r28
    118c:	dd 1e       	adc	r13, r29
    118e:	36 c0       	rjmp	.+108    	; 0x11fc <FS_ShowFileInformation+0x104>
	USARTWriteString ( (char*)"\r\n#		File Name		Block	Offset	File Size (Blocks)\r\n");
	USARTWriteString (     (char*)"----		--------------		------	------	------------------\r\n");

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
	{
		iCount ++;
    1190:	0f 5f       	subi	r16, 0xFF	; 255
    1192:	1f 4f       	sbci	r17, 0xFF	; 255
		sprintf(Text, "%d		%s		%d	%d	%d\r\n", 	iCount,
    1194:	8d b7       	in	r24, 0x3d	; 61
    1196:	9e b7       	in	r25, 0x3e	; 62
    1198:	0e 97       	sbiw	r24, 0x0e	; 14
    119a:	0f b6       	in	r0, 0x3f	; 63
    119c:	f8 94       	cli
    119e:	9e bf       	out	0x3e, r25	; 62
    11a0:	0f be       	out	0x3f, r0	; 63
    11a2:	8d bf       	out	0x3d, r24	; 61
    11a4:	ed b7       	in	r30, 0x3d	; 61
    11a6:	fe b7       	in	r31, 0x3e	; 62
    11a8:	31 96       	adiw	r30, 0x01	; 1
    11aa:	ad b7       	in	r26, 0x3d	; 61
    11ac:	be b7       	in	r27, 0x3e	; 62
    11ae:	12 96       	adiw	r26, 0x02	; 2
    11b0:	fc 92       	st	X, r15
    11b2:	ee 92       	st	-X, r14
    11b4:	11 97       	sbiw	r26, 0x01	; 1
    11b6:	73 82       	std	Z+3, r7	; 0x03
    11b8:	62 82       	std	Z+2, r6	; 0x02
    11ba:	15 83       	std	Z+5, r17	; 0x05
    11bc:	04 83       	std	Z+4, r16	; 0x04
    11be:	b7 82       	std	Z+7, r11	; 0x07
    11c0:	a6 82       	std	Z+6, r10	; 0x06
    11c2:	8b 89       	ldd	r24, Y+19	; 0x13
    11c4:	9c 89       	ldd	r25, Y+20	; 0x14
    11c6:	91 87       	std	Z+9, r25	; 0x09
    11c8:	80 87       	std	Z+8, r24	; 0x08
    11ca:	d6 01       	movw	r26, r12
    11cc:	8c 91       	ld	r24, X
    11ce:	82 87       	std	Z+10, r24	; 0x0a
    11d0:	13 86       	std	Z+11, r1	; 0x0b
    11d2:	8d 81       	ldd	r24, Y+5	; 0x05
    11d4:	9e 81       	ldd	r25, Y+6	; 0x06
    11d6:	95 87       	std	Z+13, r25	; 0x0d
    11d8:	84 87       	std	Z+12, r24	; 0x0c
    11da:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
															sFileEntry.sFileName,
															sFileEntry.iBlockList[0],
															sFileEntry.iAngleOffset,
															sFileEntry.iNumFrames );
		USARTWriteString (Text);
    11de:	8d b7       	in	r24, 0x3d	; 61
    11e0:	9e b7       	in	r25, 0x3e	; 62
    11e2:	0e 96       	adiw	r24, 0x0e	; 14
    11e4:	0f b6       	in	r0, 0x3f	; 63
    11e6:	f8 94       	cli
    11e8:	9e bf       	out	0x3e, r25	; 62
    11ea:	0f be       	out	0x3f, r0	; 63
    11ec:	8d bf       	out	0x3d, r24	; 61
    11ee:	c7 01       	movw	r24, r14
    11f0:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
		iNumOfFiles = iCount;
    11f4:	10 93 3d 02 	sts	0x023D, r17
    11f8:	00 93 3c 02 	sts	0x023C, r16

	USARTWriteString ( (char*)"\r\nFlash Contents: \r\n" );
	USARTWriteString ( (char*)"\r\n#		File Name		Block	Offset	File Size (Blocks)\r\n");
	USARTWriteString (     (char*)"----		--------------		------	------	------------------\r\n");

	while ( FS_ReadEntry ( &Address, &sFileEntry ) )
    11fc:	c4 01       	movw	r24, r8
    11fe:	b2 01       	movw	r22, r4
    1200:	0e 94 b5 07 	call	0xf6a	; 0xf6a <FS_ReadEntry>
    1204:	88 23       	and	r24, r24
    1206:	21 f6       	brne	.-120    	; 0x1190 <FS_ShowFileInformation+0x98>
															sFileEntry.iNumFrames );
		USARTWriteString (Text);
		iNumOfFiles = iCount;
	}

	if (iCount)
    1208:	01 2b       	or	r16, r17
    120a:	d9 f4       	brne	.+54     	; 0x1242 <FS_ShowFileInformation+0x14a>
		bFS_Empty = 0;
	else
		bFS_Empty = 1;
    120c:	81 e0       	ldi	r24, 0x01	; 1
    120e:	80 93 1e 06 	sts	0x061E, r24
}
    1212:	cc 54       	subi	r28, 0x4C	; 76
    1214:	df 4f       	sbci	r29, 0xFF	; 255
    1216:	0f b6       	in	r0, 0x3f	; 63
    1218:	f8 94       	cli
    121a:	de bf       	out	0x3e, r29	; 62
    121c:	0f be       	out	0x3f, r0	; 63
    121e:	cd bf       	out	0x3d, r28	; 61
    1220:	cf 91       	pop	r28
    1222:	df 91       	pop	r29
    1224:	1f 91       	pop	r17
    1226:	0f 91       	pop	r16
    1228:	ff 90       	pop	r15
    122a:	ef 90       	pop	r14
    122c:	df 90       	pop	r13
    122e:	cf 90       	pop	r12
    1230:	bf 90       	pop	r11
    1232:	af 90       	pop	r10
    1234:	9f 90       	pop	r9
    1236:	8f 90       	pop	r8
    1238:	7f 90       	pop	r7
    123a:	6f 90       	pop	r6
    123c:	5f 90       	pop	r5
    123e:	4f 90       	pop	r4
    1240:	08 95       	ret
		USARTWriteString (Text);
		iNumOfFiles = iCount;
	}

	if (iCount)
		bFS_Empty = 0;
    1242:	10 92 1e 06 	sts	0x061E, r1
    1246:	e5 cf       	rjmp	.-54     	; 0x1212 <FS_ShowFileInformation+0x11a>

00001248 <FS_ReadNextEntry>:
}

//__________________________________________________________________________________________________
// Reads the next file entry and updates the global variables
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
    1248:	cf 93       	push	r28
    124a:	df 93       	push	r29
    124c:	ec 01       	movw	r28, r24
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
    124e:	88 e3       	ldi	r24, 0x38	; 56
    1250:	92 e0       	ldi	r25, 0x02	; 2
    1252:	be 01       	movw	r22, r28
    1254:	0e 94 b5 07 	call	0xf6a	; 0xf6a <FS_ReadEntry>
    1258:	88 23       	and	r24, r24
    125a:	21 f0       	breq	.+8      	; 0x1264 <FS_ReadNextEntry+0x1c>
			bFS_Empty = 1;
			return 0;	// Fail
		}
		else
		{
			bFS_Empty = 0;
    125c:	81 e0       	ldi	r24, 0x01	; 1
		}
	}
	return 1;		// Success
}
    125e:	df 91       	pop	r29
    1260:	cf 91       	pop	r28
    1262:	08 95       	ret
uint8_t FS_ReadNextEntry ( FileEntry_ST* pEntry )
{
	if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// if couldn't read anymore
	{
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	90 ec       	ldi	r25, 0xC0	; 192
    1268:	af e3       	ldi	r26, 0x3F	; 63
    126a:	b0 e0       	ldi	r27, 0x00	; 0
    126c:	80 93 38 02 	sts	0x0238, r24
    1270:	90 93 39 02 	sts	0x0239, r25
    1274:	a0 93 3a 02 	sts	0x023A, r26
    1278:	b0 93 3b 02 	sts	0x023B, r27

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
    127c:	88 e3       	ldi	r24, 0x38	; 56
    127e:	92 e0       	ldi	r25, 0x02	; 2
    1280:	be 01       	movw	r22, r28
    1282:	0e 94 b5 07 	call	0xf6a	; 0xf6a <FS_ReadEntry>
    1286:	88 23       	and	r24, r24
    1288:	19 f0       	breq	.+6      	; 0x1290 <FS_ReadNextEntry+0x48>
			bFS_Empty = 1;
			return 0;	// Fail
		}
		else
		{
			bFS_Empty = 0;
    128a:	10 92 1e 06 	sts	0x061E, r1
    128e:	e6 cf       	rjmp	.-52     	; 0x125c <FS_ReadNextEntry+0x14>
		// Start again from the first entry
		iCurrentAddress = ENTRY_TABLE_ADDR;

		if ( FS_ReadEntry ( (uint32_t*)(&iCurrentAddress), pEntry ) == 0 )	// Try again
		{
			bFS_Empty = 1;
    1290:	81 e0       	ldi	r24, 0x01	; 1
    1292:	80 93 1e 06 	sts	0x061E, r24
    1296:	80 e0       	ldi	r24, 0x00	; 0
		{
			bFS_Empty = 0;
		}
	}
	return 1;		// Success
}
    1298:	df 91       	pop	r29
    129a:	cf 91       	pop	r28
    129c:	08 95       	ret

0000129e <FS_ReadFileContents>:
}

//__________________________________________________________________________________________________
// Reads out the contents of a file. Finds the file by its name
uint8_t FS_ReadFileContents( char* FileName )
{
    129e:	2f 92       	push	r2
    12a0:	3f 92       	push	r3
    12a2:	4f 92       	push	r4
    12a4:	5f 92       	push	r5
    12a6:	6f 92       	push	r6
    12a8:	7f 92       	push	r7
    12aa:	8f 92       	push	r8
    12ac:	9f 92       	push	r9
    12ae:	af 92       	push	r10
    12b0:	bf 92       	push	r11
    12b2:	cf 92       	push	r12
    12b4:	df 92       	push	r13
    12b6:	ef 92       	push	r14
    12b8:	ff 92       	push	r15
    12ba:	0f 93       	push	r16
    12bc:	1f 93       	push	r17
    12be:	df 93       	push	r29
    12c0:	cf 93       	push	r28
    12c2:	cd b7       	in	r28, 0x3d	; 61
    12c4:	de b7       	in	r29, 0x3e	; 62
    12c6:	cc 5c       	subi	r28, 0xCC	; 204
    12c8:	d0 40       	sbci	r29, 0x00	; 0
    12ca:	0f b6       	in	r0, 0x3f	; 63
    12cc:	f8 94       	cli
    12ce:	de bf       	out	0x3e, r29	; 62
    12d0:	0f be       	out	0x3f, r0	; 63
    12d2:	cd bf       	out	0x3d, r28	; 61
    12d4:	4c 01       	movw	r8, r24
//__________________________________________________________________________________________________
// File System - Search for a file by name
// Returns success (1) or fail (0)
uint8_t FS_SearchFile (char *FileName, FileEntry_ST	*sFileEntry )
{
	uint32_t 				Address = ENTRY_TABLE_ADDR;
    12d6:	80 e0       	ldi	r24, 0x00	; 0
    12d8:	90 ec       	ldi	r25, 0xC0	; 192
    12da:	af e3       	ldi	r26, 0x3F	; 63
    12dc:	b0 e0       	ldi	r27, 0x00	; 0
    12de:	89 83       	std	Y+1, r24	; 0x01
    12e0:	9a 83       	std	Y+2, r25	; 0x02
    12e2:	ab 83       	std	Y+3, r26	; 0x03
    12e4:	bc 83       	std	Y+4, r27	; 0x04
	uint16_t				itr;
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    12e6:	3d e1       	ldi	r19, 0x1D	; 29
    12e8:	63 2e       	mov	r6, r19
    12ea:	71 2c       	mov	r7, r1
    12ec:	6c 0e       	add	r6, r28
    12ee:	7d 1e       	adc	r7, r29
    12f0:	2e 01       	movw	r4, r28
    12f2:	08 94       	sec
    12f4:	41 1c       	adc	r4, r1
    12f6:	51 1c       	adc	r5, r1
    12f8:	c2 01       	movw	r24, r4
    12fa:	b3 01       	movw	r22, r6
    12fc:	a4 01       	movw	r20, r8
    12fe:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <FS_ReadEntry_FileMatch>
	while ( iSucc != 0 )
    1302:	88 23       	and	r24, r24
    1304:	09 f4       	brne	.+2      	; 0x1308 <FS_ReadFileContents+0x6a>
    1306:	24 c1       	rjmp	.+584    	; 0x1550 <FS_ReadFileContents+0x2b2>
    1308:	10 e0       	ldi	r17, 0x00	; 0
	{
		if ( iSucc == 1 )	// Success
		{
			USARTWriteString ( (char*)"\r\nFound File: \r\n" );
			sprintf(Text, "File Name: %s\r\nAngle Offset: %d\r\nNum Of Frames: %d\r\n",
    130a:	2d e6       	ldi	r18, 0x6D	; 109
    130c:	c2 2e       	mov	r12, r18
    130e:	d1 2c       	mov	r13, r1
    1310:	cc 0e       	add	r12, r28
    1312:	dd 1e       	adc	r13, r29
    1314:	9d e2       	ldi	r25, 0x2D	; 45
    1316:	29 2e       	mov	r2, r25
    1318:	91 e0       	ldi	r25, 0x01	; 1
    131a:	39 2e       	mov	r3, r25
    131c:	0f e6       	ldi	r16, 0x6F	; 111
    131e:	a0 2e       	mov	r10, r16
    1320:	01 e0       	ldi	r16, 0x01	; 1
    1322:	b0 2e       	mov	r11, r16
    1324:	08 c0       	rjmp	.+16     	; 0x1336 <FS_ReadFileContents+0x98>

			USARTWriteString ( (char*)"\r\n\r\n" );
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1326:	c2 01       	movw	r24, r4
    1328:	b3 01       	movw	r22, r6
    132a:	a4 01       	movw	r20, r8
    132c:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1330:	88 23       	and	r24, r24
    1332:	09 f4       	brne	.+2      	; 0x1336 <FS_ReadFileContents+0x98>
    1334:	79 c0       	rjmp	.+242    	; 0x1428 <FS_ReadFileContents+0x18a>
	{
		if ( iSucc == 1 )	// Success
    1336:	81 30       	cpi	r24, 0x01	; 1
    1338:	b1 f7       	brne	.-20     	; 0x1326 <FS_ReadFileContents+0x88>
		{
			USARTWriteString ( (char*)"\r\nFound File: \r\n" );
    133a:	8c e1       	ldi	r24, 0x1C	; 28
    133c:	91 e0       	ldi	r25, 0x01	; 1
    133e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
			sprintf(Text, "File Name: %s\r\nAngle Offset: %d\r\nNum Of Frames: %d\r\n",
    1342:	8d b7       	in	r24, 0x3d	; 61
    1344:	9e b7       	in	r25, 0x3e	; 62
    1346:	0a 97       	sbiw	r24, 0x0a	; 10
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	9e bf       	out	0x3e, r25	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	8d bf       	out	0x3d, r24	; 61
    1352:	ed b7       	in	r30, 0x3d	; 61
    1354:	fe b7       	in	r31, 0x3e	; 62
    1356:	31 96       	adiw	r30, 0x01	; 1
    1358:	ad b7       	in	r26, 0x3d	; 61
    135a:	be b7       	in	r27, 0x3e	; 62
    135c:	12 96       	adiw	r26, 0x02	; 2
    135e:	dc 92       	st	X, r13
    1360:	ce 92       	st	-X, r12
    1362:	11 97       	sbiw	r26, 0x01	; 1
    1364:	33 82       	std	Z+3, r3	; 0x03
    1366:	22 82       	std	Z+2, r2	; 0x02
    1368:	8f e1       	ldi	r24, 0x1F	; 31
    136a:	90 e0       	ldi	r25, 0x00	; 0
    136c:	8c 0f       	add	r24, r28
    136e:	9d 1f       	adc	r25, r29
    1370:	95 83       	std	Z+5, r25	; 0x05
    1372:	84 83       	std	Z+4, r24	; 0x04
    1374:	ac 96       	adiw	r28, 0x2c	; 44
    1376:	8f ad       	ldd	r24, Y+63	; 0x3f
    1378:	ac 97       	sbiw	r28, 0x2c	; 44
    137a:	86 83       	std	Z+6, r24	; 0x06
    137c:	17 82       	std	Z+7, r1	; 0x07
    137e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1380:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1382:	91 87       	std	Z+9, r25	; 0x09
    1384:	80 87       	std	Z+8, r24	; 0x08
    1386:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
																sFileEntry->sFileName,
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
    138a:	ad b7       	in	r26, 0x3d	; 61
    138c:	be b7       	in	r27, 0x3e	; 62
    138e:	1a 96       	adiw	r26, 0x0a	; 10
    1390:	0f b6       	in	r0, 0x3f	; 63
    1392:	f8 94       	cli
    1394:	be bf       	out	0x3e, r27	; 62
    1396:	0f be       	out	0x3f, r0	; 63
    1398:	ad bf       	out	0x3d, r26	; 61
    139a:	c6 01       	movw	r24, r12
    139c:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
			USARTWriteString ( (char*)"Frame List: " );
    13a0:	82 e6       	ldi	r24, 0x62	; 98
    13a2:	91 e0       	ldi	r25, 0x01	; 1
    13a4:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    13a8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    13aa:	9e 8d       	ldd	r25, Y+30	; 0x1e
    13ac:	89 2b       	or	r24, r25
    13ae:	79 f1       	breq	.+94     	; 0x140e <FS_ReadFileContents+0x170>
    13b0:	bb e2       	ldi	r27, 0x2B	; 43
    13b2:	eb 2e       	mov	r14, r27
    13b4:	f1 2c       	mov	r15, r1
    13b6:	ec 0e       	add	r14, r28
    13b8:	fd 1e       	adc	r15, r29
    13ba:	00 e0       	ldi	r16, 0x00	; 0
    13bc:	10 e0       	ldi	r17, 0x00	; 0
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
    13be:	00 d0       	rcall	.+0      	; 0x13c0 <FS_ReadFileContents+0x122>
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <FS_ReadFileContents+0x124>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <FS_ReadFileContents+0x126>
    13c4:	ed b7       	in	r30, 0x3d	; 61
    13c6:	fe b7       	in	r31, 0x3e	; 62
    13c8:	31 96       	adiw	r30, 0x01	; 1
    13ca:	ad b7       	in	r26, 0x3d	; 61
    13cc:	be b7       	in	r27, 0x3e	; 62
    13ce:	12 96       	adiw	r26, 0x02	; 2
    13d0:	dc 92       	st	X, r13
    13d2:	ce 92       	st	-X, r12
    13d4:	11 97       	sbiw	r26, 0x01	; 1
    13d6:	b3 82       	std	Z+3, r11	; 0x03
    13d8:	a2 82       	std	Z+2, r10	; 0x02
    13da:	d7 01       	movw	r26, r14
    13dc:	8d 91       	ld	r24, X+
    13de:	9d 91       	ld	r25, X+
    13e0:	7d 01       	movw	r14, r26
    13e2:	95 83       	std	Z+5, r25	; 0x05
    13e4:	84 83       	std	Z+4, r24	; 0x04
    13e6:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
				USARTWriteString (Text);
    13ea:	ed b7       	in	r30, 0x3d	; 61
    13ec:	fe b7       	in	r31, 0x3e	; 62
    13ee:	36 96       	adiw	r30, 0x06	; 6
    13f0:	0f b6       	in	r0, 0x3f	; 63
    13f2:	f8 94       	cli
    13f4:	fe bf       	out	0x3e, r31	; 62
    13f6:	0f be       	out	0x3f, r0	; 63
    13f8:	ed bf       	out	0x3d, r30	; 61
    13fa:	c6 01       	movw	r24, r12
    13fc:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
																sFileEntry->iAngleOffset,
																sFileEntry->iNumFrames );
			USARTWriteString (Text);
			USARTWriteString ( (char*)"Frame List: " );

			for ( itr = 0; itr < sFileEntry->iNumFrames; itr ++)
    1400:	0f 5f       	subi	r16, 0xFF	; 255
    1402:	1f 4f       	sbci	r17, 0xFF	; 255
    1404:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1406:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1408:	08 17       	cp	r16, r24
    140a:	19 07       	cpc	r17, r25
    140c:	c0 f2       	brcs	.-80     	; 0x13be <FS_ReadFileContents+0x120>
			{
				sprintf(Text, "%d ", sFileEntry->iBlockList[itr] );
				USARTWriteString (Text);
			}

			USARTWriteString ( (char*)"\r\n\r\n" );
    140e:	83 e7       	ldi	r24, 0x73	; 115
    1410:	91 e0       	ldi	r25, 0x01	; 1
    1412:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1416:	11 e0       	ldi	r17, 0x01	; 1
			bFound = 1;
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
    1418:	c2 01       	movw	r24, r4
    141a:	b3 01       	movw	r22, r6
    141c:	a4 01       	movw	r20, r8
    141e:	0e 94 e0 05 	call	0xbc0	; 0xbc0 <FS_ReadEntry_FileMatch>
	uint8_t					bFound = 0;
	uint8_t					iSucc = 0;
	char Text[96];

	iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	while ( iSucc != 0 )
    1422:	88 23       	and	r24, r24
    1424:	09 f0       	breq	.+2      	; 0x1428 <FS_ReadFileContents+0x18a>
    1426:	87 cf       	rjmp	.-242    	; 0x1336 <FS_ReadFileContents+0x98>
		}

		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
    1428:	11 23       	and	r17, r17
    142a:	09 f4       	brne	.+2      	; 0x142e <FS_ReadFileContents+0x190>
    142c:	91 c0       	rjmp	.+290    	; 0x1550 <FS_ReadFileContents+0x2b2>

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    142e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1430:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1432:	89 2b       	or	r24, r25
    1434:	09 f4       	brne	.+2      	; 0x1438 <FS_ReadFileContents+0x19a>
    1436:	71 c0       	rjmp	.+226    	; 0x151a <FS_ReadFileContents+0x27c>
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		USARTWriteString ( (char*)"\r\nFile not found!\r\n" );
    1438:	ab e2       	ldi	r26, 0x2B	; 43
    143a:	aa 2e       	mov	r10, r26
    143c:	b1 2c       	mov	r11, r1
    143e:	ac 0e       	add	r10, r28
    1440:	bd 1e       	adc	r11, r29
    1442:	cc 24       	eor	r12, r12
    1444:	dd 24       	eor	r13, r13
    1446:	f5 e0       	ldi	r31, 0x05	; 5
    1448:	8f 2e       	mov	r8, r31
    144a:	91 2c       	mov	r9, r1
    144c:	8c 0e       	add	r8, r28
    144e:	9d 1e       	adc	r9, r29
    1450:	ef e1       	ldi	r30, 0x1F	; 31
    1452:	6e 2e       	mov	r6, r30
    1454:	e2 e0       	ldi	r30, 0x02	; 2
    1456:	7e 2e       	mov	r7, r30
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	// Calculate first address
	iAddress = FS_FRAME_CAP * iBlock;
    1458:	41 2c       	mov	r4, r1
    145a:	70 e3       	ldi	r23, 0x30	; 48
    145c:	57 2e       	mov	r5, r23
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
		{
			sprintf( Text, "\r\nFrame #%d Block #%d:\r\n", itr, sFileEntry.iBlockList[itr]);
    145e:	8d b7       	in	r24, 0x3d	; 61
    1460:	9e b7       	in	r25, 0x3e	; 62
    1462:	08 97       	sbiw	r24, 0x08	; 8
    1464:	0f b6       	in	r0, 0x3f	; 63
    1466:	f8 94       	cli
    1468:	9e bf       	out	0x3e, r25	; 62
    146a:	0f be       	out	0x3f, r0	; 63
    146c:	8d bf       	out	0x3d, r24	; 61
    146e:	ed b7       	in	r30, 0x3d	; 61
    1470:	fe b7       	in	r31, 0x3e	; 62
    1472:	31 96       	adiw	r30, 0x01	; 1
    1474:	ad b7       	in	r26, 0x3d	; 61
    1476:	be b7       	in	r27, 0x3e	; 62
    1478:	12 96       	adiw	r26, 0x02	; 2
    147a:	9c 92       	st	X, r9
    147c:	8e 92       	st	-X, r8
    147e:	11 97       	sbiw	r26, 0x01	; 1
    1480:	73 82       	std	Z+3, r7	; 0x03
    1482:	62 82       	std	Z+2, r6	; 0x02
    1484:	d5 82       	std	Z+5, r13	; 0x05
    1486:	c4 82       	std	Z+4, r12	; 0x04
    1488:	d5 01       	movw	r26, r10
    148a:	8d 91       	ld	r24, X+
    148c:	9c 91       	ld	r25, X
    148e:	97 83       	std	Z+7, r25	; 0x07
    1490:	86 83       	std	Z+6, r24	; 0x06
    1492:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
			USARTWriteString (Text);
    1496:	ed b7       	in	r30, 0x3d	; 61
    1498:	fe b7       	in	r31, 0x3e	; 62
    149a:	38 96       	adiw	r30, 0x08	; 8
    149c:	0f b6       	in	r0, 0x3f	; 63
    149e:	f8 94       	cli
    14a0:	fe bf       	out	0x3e, r31	; 62
    14a2:	0f be       	out	0x3f, r0	; 63
    14a4:	ed bf       	out	0x3d, r30	; 61
    14a6:	c4 01       	movw	r24, r8
    14a8:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	unsigned char adrByte1, adrByte2, adrByte3;		// adrByte1 = MSB
	uint32_t				iAddress = 0;
	uint16_t				inner_itr = 0;

	// Calculate first address
	iAddress = FS_FRAME_CAP * iBlock;
    14ac:	d5 01       	movw	r26, r10
    14ae:	8d 91       	ld	r24, X+
    14b0:	9c 91       	ld	r25, X
    14b2:	84 9d       	mul	r24, r4
    14b4:	70 01       	movw	r14, r0
    14b6:	85 9d       	mul	r24, r5
    14b8:	f0 0c       	add	r15, r0
    14ba:	94 9d       	mul	r25, r4
    14bc:	f0 0c       	add	r15, r0
    14be:	11 24       	eor	r1, r1
    14c0:	00 e0       	ldi	r16, 0x00	; 0
    14c2:	10 e0       	ldi	r17, 0x00	; 0
	// Prepare transfer information
	adrByte1 = (iAddress>>16)&0xff;
	adrByte2 = (iAddress>>8)&0xff;
	adrByte3 = iAddress&0xff;

	CS_DOWN;
    14c4:	28 98       	cbi	0x05, 0	; 5
	spi_transfer(READ_ARRAY);      			// Read command
    14c6:	83 e0       	ldi	r24, 0x03	; 3
    14c8:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte1);					// Send address - 24 bits
    14cc:	80 e0       	ldi	r24, 0x00	; 0
    14ce:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte2);					// starting from MSB
    14d2:	bb 27       	eor	r27, r27
    14d4:	a1 2f       	mov	r26, r17
    14d6:	90 2f       	mov	r25, r16
    14d8:	8f 2d       	mov	r24, r15
    14da:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
	spi_transfer(adrByte3);
    14de:	8e 2d       	mov	r24, r14
    14e0:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    14e4:	00 e0       	ldi	r16, 0x00	; 0
    14e6:	10 e0       	ldi	r17, 0x00	; 0

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
    14e8:	80 e0       	ldi	r24, 0x00	; 0
    14ea:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>
    14ee:	0e 94 95 11 	call	0x232a	; 0x232a <USARTWriteChar>
    14f2:	0f 5f       	subi	r16, 0xFF	; 255
    14f4:	1f 4f       	sbci	r17, 0xFF	; 255
	spi_transfer(READ_ARRAY);      			// Read command
	spi_transfer(adrByte1);					// Send address - 24 bits
	spi_transfer(adrByte2);					// starting from MSB
	spi_transfer(adrByte3);

	for (inner_itr = 0; inner_itr < FS_FRAME_SIZE; inner_itr ++)
    14f6:	b5 e2       	ldi	r27, 0x25	; 37
    14f8:	00 38       	cpi	r16, 0x80	; 128
    14fa:	1b 07       	cpc	r17, r27
    14fc:	a9 f7       	brne	.-22     	; 0x14e8 <FS_ReadFileContents+0x24a>
	{
		USARTWriteChar( spi_transfer(0) );	// Send next char
	}

	CS_UP;
    14fe:	28 9a       	sbi	0x05, 0	; 5

	// Search for this particular file
	if ( FS_SearchFile (FileName, &sFileEntry ) )	// Found
	{
		// Read out the information
		for (itr = 0; itr < sFileEntry.iNumFrames; itr ++)
    1500:	08 94       	sec
    1502:	c1 1c       	adc	r12, r1
    1504:	d1 1c       	adc	r13, r1
    1506:	e2 e0       	ldi	r30, 0x02	; 2
    1508:	f0 e0       	ldi	r31, 0x00	; 0
    150a:	ae 0e       	add	r10, r30
    150c:	bf 1e       	adc	r11, r31
    150e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1510:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1512:	c8 16       	cp	r12, r24
    1514:	d9 06       	cpc	r13, r25
    1516:	08 f4       	brcc	.+2      	; 0x151a <FS_ReadFileContents+0x27c>
    1518:	a2 cf       	rjmp	.-188    	; 0x145e <FS_ReadFileContents+0x1c0>
	{

	}

	return 1;		// Success
}
    151a:	81 e0       	ldi	r24, 0x01	; 1
    151c:	c4 53       	subi	r28, 0x34	; 52
    151e:	df 4f       	sbci	r29, 0xFF	; 255
    1520:	0f b6       	in	r0, 0x3f	; 63
    1522:	f8 94       	cli
    1524:	de bf       	out	0x3e, r29	; 62
    1526:	0f be       	out	0x3f, r0	; 63
    1528:	cd bf       	out	0x3d, r28	; 61
    152a:	cf 91       	pop	r28
    152c:	df 91       	pop	r29
    152e:	1f 91       	pop	r17
    1530:	0f 91       	pop	r16
    1532:	ff 90       	pop	r15
    1534:	ef 90       	pop	r14
    1536:	df 90       	pop	r13
    1538:	cf 90       	pop	r12
    153a:	bf 90       	pop	r11
    153c:	af 90       	pop	r10
    153e:	9f 90       	pop	r9
    1540:	8f 90       	pop	r8
    1542:	7f 90       	pop	r7
    1544:	6f 90       	pop	r6
    1546:	5f 90       	pop	r5
    1548:	4f 90       	pop	r4
    154a:	3f 90       	pop	r3
    154c:	2f 90       	pop	r2
    154e:	08 95       	ret
		iSucc = FS_ReadEntry_FileMatch ( &Address, sFileEntry, FileName );
	}

	if (!bFound)
	{
		USARTWriteString ( (char*)"\r\nFile not found!\r\n" );
    1550:	88 e7       	ldi	r24, 0x78	; 120
    1552:	91 e0       	ldi	r25, 0x01	; 1
    1554:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1558:	e0 cf       	rjmp	.-64     	; 0x151a <FS_ReadFileContents+0x27c>

0000155a <hiSpeedMode>:
    155a:	a5 ea       	ldi	r26, 0xA5	; 165
    155c:	b7 e0       	ldi	r27, 0x07	; 7
    155e:	a1 0f       	add	r26, r17
    1560:	b1 1d       	adc	r27, r1
    1562:	df 96       	adiw	r26, 0x3f	; 63
    1564:	91 96       	adiw	r26, 0x21	; 33
    1566:	00 27       	eor	r16, r16
    1568:	00 93 10 06 	sts	0x0610, r16
    156c:	0c 94 0c 0b 	jmp	0x1618	; 0x1618 <L1_starts_here>

00001570 <PrepareBuffers>:
    1570:	bf 93       	push	r27
    1572:	af 93       	push	r26
    1574:	0f 93       	push	r16
    1576:	1f 93       	push	r17
    1578:	3f 93       	push	r19
    157a:	4f 93       	push	r20
    157c:	30 91 00 01 	lds	r19, 0x0100
    1580:	10 91 21 06 	lds	r17, 0x0621
    1584:	00 91 1b 01 	lds	r16, 0x011B
    1588:	01 30       	cpi	r16, 0x01	; 1
    158a:	39 f3       	breq	.-50     	; 0x155a <hiSpeedMode>
    158c:	a5 ea       	ldi	r26, 0xA5	; 165
    158e:	b7 e0       	ldi	r27, 0x07	; 7
    1590:	a1 0f       	add	r26, r17
    1592:	b1 1d       	adc	r27, r1
    1594:	00 27       	eor	r16, r16
    1596:	4d 91       	ld	r20, X+
    1598:	43 23       	and	r20, r19
    159a:	09 f0       	breq	.+2      	; 0x159e <b1_l2>
    159c:	01 60       	ori	r16, 0x01	; 1

0000159e <b1_l2>:
    159e:	00 0f       	add	r16, r16
    15a0:	4d 91       	ld	r20, X+
    15a2:	43 23       	and	r20, r19
    15a4:	09 f0       	breq	.+2      	; 0x15a8 <b2_l2>
    15a6:	01 60       	ori	r16, 0x01	; 1

000015a8 <b2_l2>:
    15a8:	00 0f       	add	r16, r16
    15aa:	4d 91       	ld	r20, X+
    15ac:	43 23       	and	r20, r19
    15ae:	09 f0       	breq	.+2      	; 0x15b2 <b3_l2>
    15b0:	01 60       	ori	r16, 0x01	; 1

000015b2 <b3_l2>:
    15b2:	00 0f       	add	r16, r16
    15b4:	4d 91       	ld	r20, X+
    15b6:	43 23       	and	r20, r19
    15b8:	09 f0       	breq	.+2      	; 0x15bc <b4_l2>
    15ba:	01 60       	ori	r16, 0x01	; 1

000015bc <b4_l2>:
    15bc:	00 0f       	add	r16, r16
    15be:	5c 96       	adiw	r26, 0x1c	; 28
    15c0:	4d 91       	ld	r20, X+
    15c2:	43 23       	and	r20, r19
    15c4:	09 f0       	breq	.+2      	; 0x15c8 <g1_l2>
    15c6:	01 60       	ori	r16, 0x01	; 1

000015c8 <g1_l2>:
    15c8:	00 0f       	add	r16, r16
    15ca:	4d 91       	ld	r20, X+
    15cc:	43 23       	and	r20, r19
    15ce:	09 f0       	breq	.+2      	; 0x15d2 <g2_l2>
    15d0:	01 60       	ori	r16, 0x01	; 1

000015d2 <g2_l2>:
    15d2:	00 0f       	add	r16, r16
    15d4:	4d 91       	ld	r20, X+
    15d6:	43 23       	and	r20, r19
    15d8:	09 f0       	breq	.+2      	; 0x15dc <g3_l2>
    15da:	01 60       	ori	r16, 0x01	; 1

000015dc <g3_l2>:
    15dc:	00 0f       	add	r16, r16
    15de:	4d 91       	ld	r20, X+
    15e0:	43 23       	and	r20, r19
    15e2:	09 f0       	breq	.+2      	; 0x15e6 <g4_l2>
    15e4:	01 60       	ori	r16, 0x01	; 1

000015e6 <g4_l2>:
    15e6:	00 93 10 06 	sts	0x0610, r16
    15ea:	5c 96       	adiw	r26, 0x1c	; 28
    15ec:	00 27       	eor	r16, r16
    15ee:	4d 91       	ld	r20, X+
    15f0:	43 23       	and	r20, r19
    15f2:	09 f0       	breq	.+2      	; 0x15f6 <r1_l2>
    15f4:	01 60       	ori	r16, 0x01	; 1

000015f6 <r1_l2>:
    15f6:	00 0f       	add	r16, r16
    15f8:	4d 91       	ld	r20, X+
    15fa:	43 23       	and	r20, r19
    15fc:	09 f0       	breq	.+2      	; 0x1600 <r2_l2>
    15fe:	01 60       	ori	r16, 0x01	; 1

00001600 <r2_l2>:
    1600:	00 0f       	add	r16, r16
    1602:	4d 91       	ld	r20, X+
    1604:	43 23       	and	r20, r19
    1606:	09 f0       	breq	.+2      	; 0x160a <r3_l2>
    1608:	01 60       	ori	r16, 0x01	; 1

0000160a <r3_l2>:
    160a:	00 0f       	add	r16, r16
    160c:	4d 91       	ld	r20, X+
    160e:	43 23       	and	r20, r19
    1610:	09 f0       	breq	.+2      	; 0x1614 <r4_l2>
    1612:	01 60       	ori	r16, 0x01	; 1

00001614 <r4_l2>:
    1614:	00 0f       	add	r16, r16
    1616:	5c 96       	adiw	r26, 0x1c	; 28

00001618 <L1_starts_here>:
    1618:	4d 91       	ld	r20, X+
    161a:	43 23       	and	r20, r19
    161c:	09 f0       	breq	.+2      	; 0x1620 <b1_l1>
    161e:	01 60       	ori	r16, 0x01	; 1

00001620 <b1_l1>:
    1620:	00 0f       	add	r16, r16
    1622:	4d 91       	ld	r20, X+
    1624:	43 23       	and	r20, r19
    1626:	09 f0       	breq	.+2      	; 0x162a <b2_l1>
    1628:	01 60       	ori	r16, 0x01	; 1

0000162a <b2_l1>:
    162a:	00 0f       	add	r16, r16
    162c:	4d 91       	ld	r20, X+
    162e:	43 23       	and	r20, r19
    1630:	09 f0       	breq	.+2      	; 0x1634 <b3_l1>
    1632:	01 60       	ori	r16, 0x01	; 1

00001634 <b3_l1>:
    1634:	00 0f       	add	r16, r16
    1636:	4d 91       	ld	r20, X+
    1638:	43 23       	and	r20, r19
    163a:	09 f0       	breq	.+2      	; 0x163e <b4_l1>
    163c:	01 60       	ori	r16, 0x01	; 1

0000163e <b4_l1>:
    163e:	00 93 12 06 	sts	0x0612, r16
    1642:	5c 96       	adiw	r26, 0x1c	; 28
    1644:	00 27       	eor	r16, r16
    1646:	4d 91       	ld	r20, X+
    1648:	43 23       	and	r20, r19
    164a:	09 f0       	breq	.+2      	; 0x164e <g1_l1>
    164c:	01 60       	ori	r16, 0x01	; 1

0000164e <g1_l1>:
    164e:	00 0f       	add	r16, r16
    1650:	4d 91       	ld	r20, X+
    1652:	43 23       	and	r20, r19
    1654:	09 f0       	breq	.+2      	; 0x1658 <g2_l1>
    1656:	01 60       	ori	r16, 0x01	; 1

00001658 <g2_l1>:
    1658:	00 0f       	add	r16, r16
    165a:	4d 91       	ld	r20, X+
    165c:	43 23       	and	r20, r19
    165e:	09 f0       	breq	.+2      	; 0x1662 <g3_l1>
    1660:	01 60       	ori	r16, 0x01	; 1

00001662 <g3_l1>:
    1662:	00 0f       	add	r16, r16
    1664:	4d 91       	ld	r20, X+
    1666:	43 23       	and	r20, r19
    1668:	09 f0       	breq	.+2      	; 0x166c <g4_l1>
    166a:	01 60       	ori	r16, 0x01	; 1

0000166c <g4_l1>:
    166c:	00 0f       	add	r16, r16
    166e:	00 0f       	add	r16, r16
    1670:	00 93 11 06 	sts	0x0611, r16
    1674:	5c 96       	adiw	r26, 0x1c	; 28
    1676:	00 27       	eor	r16, r16
    1678:	4d 91       	ld	r20, X+
    167a:	43 23       	and	r20, r19
    167c:	09 f0       	breq	.+2      	; 0x1680 <r1_l1>
    167e:	01 60       	ori	r16, 0x01	; 1

00001680 <r1_l1>:
    1680:	00 0f       	add	r16, r16
    1682:	4d 91       	ld	r20, X+
    1684:	43 23       	and	r20, r19
    1686:	09 f0       	breq	.+2      	; 0x168a <r2_l1>
    1688:	01 60       	ori	r16, 0x01	; 1

0000168a <r2_l1>:
    168a:	00 0f       	add	r16, r16
    168c:	4d 91       	ld	r20, X+
    168e:	43 23       	and	r20, r19
    1690:	09 f0       	breq	.+2      	; 0x1694 <r3_l1>
    1692:	01 60       	ori	r16, 0x01	; 1

00001694 <r3_l1>:
    1694:	00 0f       	add	r16, r16
    1696:	4d 91       	ld	r20, X+
    1698:	43 23       	and	r20, r19
    169a:	09 f0       	breq	.+2      	; 0x169e <r4_l1>
    169c:	01 60       	ori	r16, 0x01	; 1

0000169e <r4_l1>:
    169e:	02 95       	swap	r16
    16a0:	00 93 0f 06 	sts	0x060F, r16
    16a4:	4f 91       	pop	r20
    16a6:	3f 91       	pop	r19
    16a8:	1f 91       	pop	r17
    16aa:	0f 91       	pop	r16
    16ac:	af 91       	pop	r26
    16ae:	bf 91       	pop	r27
    16b0:	08 95       	ret

000016b2 <ProcessNewLine>:
    16b2:	1f 93       	push	r17
    16b4:	2f 93       	push	r18
    16b6:	af 93       	push	r26
    16b8:	cf 93       	push	r28
    16ba:	10 91 02 01 	lds	r17, 0x0102
    16be:	d7 e0       	ldi	r29, 0x07	; 7
    16c0:	c5 ea       	ldi	r28, 0xA5	; 165
    16c2:	c1 0f       	add	r28, r17
    16c4:	d1 1d       	adc	r29, r1
    16c6:	b1 e0       	ldi	r27, 0x01	; 1
    16c8:	a3 e1       	ldi	r26, 0x13	; 19
    16ca:	20 2f       	mov	r18, r16
    16cc:	22 95       	swap	r18
    16ce:	2f 70       	andi	r18, 0x0F	; 15
    16d0:	a2 0f       	add	r26, r18
    16d2:	b1 1d       	adc	r27, r1
    16d4:	1c 91       	ld	r17, X
    16d6:	19 93       	st	Y+, r17
    16d8:	b1 e0       	ldi	r27, 0x01	; 1
    16da:	a3 e1       	ldi	r26, 0x13	; 19
    16dc:	0f 70       	andi	r16, 0x0F	; 15
    16de:	a0 0f       	add	r26, r16
    16e0:	b1 1d       	adc	r27, r1
    16e2:	1c 91       	ld	r17, X
    16e4:	19 93       	st	Y+, r17
    16e6:	cf 91       	pop	r28
    16e8:	af 91       	pop	r26
    16ea:	2f 91       	pop	r18
    16ec:	1f 91       	pop	r17
    16ee:	08 95       	ret

000016f0 <TM_EchoCommand>:
void TM_EchoCommand ( char *sIncomingCommand )
{
	#ifdef  __ENABLE_ECHO_UART
	USARTWriteString ( sIncomingCommand );
	#endif
}
    16f0:	08 95       	ret

000016f2 <TM_WriteBlocks>:
// This function gets a command as shown below:
// 		WRBL [Starting Block Number - uint16] [number of data-bytes to write]
// The starting address is calculated from the Starting Block. The channel
// is open to reading according to the Number of data-bytes length
void TM_WriteBlocks ( char *sIncomingCommand )
{
    16f2:	2f 92       	push	r2
    16f4:	3f 92       	push	r3
    16f6:	4f 92       	push	r4
    16f8:	5f 92       	push	r5
    16fa:	6f 92       	push	r6
    16fc:	7f 92       	push	r7
    16fe:	8f 92       	push	r8
    1700:	9f 92       	push	r9
    1702:	af 92       	push	r10
    1704:	bf 92       	push	r11
    1706:	cf 92       	push	r12
    1708:	df 92       	push	r13
    170a:	ef 92       	push	r14
    170c:	ff 92       	push	r15
    170e:	0f 93       	push	r16
    1710:	1f 93       	push	r17
    1712:	df 93       	push	r29
    1714:	cf 93       	push	r28
    1716:	00 d0       	rcall	.+0      	; 0x1718 <TM_WriteBlocks+0x26>
    1718:	00 d0       	rcall	.+0      	; 0x171a <TM_WriteBlocks+0x28>
    171a:	cd b7       	in	r28, 0x3d	; 61
    171c:	de b7       	in	r29, 0x3e	; 62
	char* cTemp;
	uint16_t iStartBlockNumber;
	uint32_t iLengthInBytes;
	uint32_t iStartAddress = 0;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "WRBL"
    171e:	6e e3       	ldi	r22, 0x3E	; 62
    1720:	72 e0       	ldi	r23, 0x02	; 2
    1722:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	cTemp = strtok ( NULL, " " );
    1726:	80 e0       	ldi	r24, 0x00	; 0
    1728:	90 e0       	ldi	r25, 0x00	; 0
    172a:	6e e3       	ldi	r22, 0x3E	; 62
    172c:	72 e0       	ldi	r23, 0x02	; 2
    172e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	iStartBlockNumber = atoi (cTemp);
    1732:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>
    1736:	7c 01       	movw	r14, r24
	cTemp = strtok ( NULL, " " );
    1738:	80 e0       	ldi	r24, 0x00	; 0
    173a:	90 e0       	ldi	r25, 0x00	; 0
    173c:	6e e3       	ldi	r22, 0x3E	; 62
    173e:	72 e0       	ldi	r23, 0x02	; 2
    1740:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
    1744:	8c 01       	movw	r16, r24
	iLengthInBytes = atoi (cTemp);
    1746:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>
    174a:	9c 01       	movw	r18, r24
    174c:	44 27       	eor	r20, r20
    174e:	37 fd       	sbrc	r19, 7
    1750:	40 95       	com	r20
    1752:	54 2f       	mov	r21, r20
    1754:	29 83       	std	Y+1, r18	; 0x01
    1756:	3a 83       	std	Y+2, r19	; 0x02
    1758:	4b 83       	std	Y+3, r20	; 0x03
    175a:	5c 83       	std	Y+4, r21	; 0x04

	if (cTemp!=NULL)
    175c:	01 2b       	or	r16, r17
    175e:	09 f4       	brne	.+2      	; 0x1762 <TM_WriteBlocks+0x70>
    1760:	77 c0       	rjmp	.+238    	; 0x1850 <TM_WriteBlocks+0x15e>
	{
		// Calculate the address - every block is defined as 3 Flash Blocks
		// Which means 3*4KByte*iStart
		iStartAddress = FS_FRAME_CAP * iStartBlockNumber;
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e3       	ldi	r25, 0x30	; 48
    1766:	ac 01       	movw	r20, r24
    1768:	e4 9e       	mul	r14, r20
    176a:	c0 01       	movw	r24, r0
    176c:	e5 9e       	mul	r14, r21
    176e:	90 0d       	add	r25, r0
    1770:	f4 9e       	mul	r15, r20
    1772:	90 0d       	add	r25, r0
    1774:	11 24       	eor	r1, r1
    1776:	1c 01       	movw	r2, r24
    1778:	44 24       	eor	r4, r4
    177a:	55 24       	eor	r5, r5

		// Erase the appropriate blocks (3 blocks)
		dataflash_erase_block4 ( 1 + iStartAddress );
    177c:	42 01       	movw	r8, r4
    177e:	31 01       	movw	r6, r2
    1780:	08 94       	sec
    1782:	61 1c       	adc	r6, r1
    1784:	71 1c       	adc	r7, r1
    1786:	81 1c       	adc	r8, r1
    1788:	91 1c       	adc	r9, r1
    178a:	c4 01       	movw	r24, r8
    178c:	b3 01       	movw	r22, r6
    178e:	0e 94 8f 04 	call	0x91e	; 0x91e <dataflash_erase_block4>
		dataflash_erase_block4 ( 1 + iStartAddress + FLASH_BLOCK4_SIZE );
    1792:	91 e0       	ldi	r25, 0x01	; 1
    1794:	a9 2e       	mov	r10, r25
    1796:	90 e1       	ldi	r25, 0x10	; 16
    1798:	b9 2e       	mov	r11, r25
    179a:	c1 2c       	mov	r12, r1
    179c:	d1 2c       	mov	r13, r1
    179e:	a2 0c       	add	r10, r2
    17a0:	b3 1c       	adc	r11, r3
    17a2:	c4 1c       	adc	r12, r4
    17a4:	d5 1c       	adc	r13, r5
    17a6:	c6 01       	movw	r24, r12
    17a8:	b5 01       	movw	r22, r10
    17aa:	0e 94 8f 04 	call	0x91e	; 0x91e <dataflash_erase_block4>
		dataflash_erase_block4 ( 1 + iStartAddress + FLASH_BLOCK4_SIZE * 2 );
    17ae:	81 e0       	ldi	r24, 0x01	; 1
    17b0:	e8 2e       	mov	r14, r24
    17b2:	80 e2       	ldi	r24, 0x20	; 32
    17b4:	f8 2e       	mov	r15, r24
    17b6:	01 2d       	mov	r16, r1
    17b8:	11 2d       	mov	r17, r1
    17ba:	e2 0c       	add	r14, r2
    17bc:	f3 1c       	adc	r15, r3
    17be:	04 1d       	adc	r16, r4
    17c0:	15 1d       	adc	r17, r5
    17c2:	c8 01       	movw	r24, r16
    17c4:	b7 01       	movw	r22, r14
    17c6:	0e 94 8f 04 	call	0x91e	; 0x91e <dataflash_erase_block4>

		// Unprotect the appropriate blocks (3 blocks)
		dataflash_unprotect_block4 ( 1 + iStartAddress );
    17ca:	c4 01       	movw	r24, r8
    17cc:	b3 01       	movw	r22, r6
    17ce:	0e 94 bc 04 	call	0x978	; 0x978 <dataflash_unprotect_block4>
		dataflash_unprotect_block4 ( 1 + iStartAddress + FLASH_BLOCK4_SIZE );
    17d2:	c6 01       	movw	r24, r12
    17d4:	b5 01       	movw	r22, r10
    17d6:	0e 94 bc 04 	call	0x978	; 0x978 <dataflash_unprotect_block4>
		dataflash_unprotect_block4 ( 1 + iStartAddress + FLASH_BLOCK4_SIZE * 2 );
    17da:	c8 01       	movw	r24, r16
    17dc:	b7 01       	movw	r22, r14
    17de:	0e 94 bc 04 	call	0x978	; 0x978 <dataflash_unprotect_block4>
    17e2:	ee 24       	eor	r14, r14
    17e4:	ff 24       	eor	r15, r15
    17e6:	87 01       	movw	r16, r14
    17e8:	05 c0       	rjmp	.+10     	; 0x17f4 <TM_WriteBlocks+0x102>
    17ea:	08 94       	sec
    17ec:	61 1c       	adc	r6, r1
    17ee:	71 1c       	adc	r7, r1
    17f0:	81 1c       	adc	r8, r1
    17f2:	91 1c       	adc	r9, r1

		for (iIterator=0; iIterator<=iLengthInBytes; iIterator ++ )
		{
			dataflash_write ( iStartAddress+iIterator, USARTReadChar() );
    17f4:	0e 94 8e 11 	call	0x231c	; 0x231c <USARTReadChar>
    17f8:	48 2f       	mov	r20, r24
    17fa:	c2 01       	movw	r24, r4
    17fc:	b1 01       	movw	r22, r2
    17fe:	0e 94 f7 03 	call	0x7ee	; 0x7ee <dataflash_write>
		// Unprotect the appropriate blocks (3 blocks)
		dataflash_unprotect_block4 ( 1 + iStartAddress );
		dataflash_unprotect_block4 ( 1 + iStartAddress + FLASH_BLOCK4_SIZE );
		dataflash_unprotect_block4 ( 1 + iStartAddress + FLASH_BLOCK4_SIZE * 2 );

		for (iIterator=0; iIterator<=iLengthInBytes; iIterator ++ )
    1802:	08 94       	sec
    1804:	e1 1c       	adc	r14, r1
    1806:	f1 1c       	adc	r15, r1
    1808:	01 1d       	adc	r16, r1
    180a:	11 1d       	adc	r17, r1
    180c:	13 01       	movw	r2, r6
    180e:	24 01       	movw	r4, r8
    1810:	89 81       	ldd	r24, Y+1	; 0x01
    1812:	9a 81       	ldd	r25, Y+2	; 0x02
    1814:	ab 81       	ldd	r26, Y+3	; 0x03
    1816:	bc 81       	ldd	r27, Y+4	; 0x04
    1818:	8e 15       	cp	r24, r14
    181a:	9f 05       	cpc	r25, r15
    181c:	a0 07       	cpc	r26, r16
    181e:	b1 07       	cpc	r27, r17
    1820:	20 f7       	brcc	.-56     	; 0x17ea <TM_WriteBlocks+0xf8>
			dataflash_write ( iStartAddress+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRBL [START BLOCK] [BYTE COUNT]\r\n" );

}
    1822:	0f 90       	pop	r0
    1824:	0f 90       	pop	r0
    1826:	0f 90       	pop	r0
    1828:	0f 90       	pop	r0
    182a:	cf 91       	pop	r28
    182c:	df 91       	pop	r29
    182e:	1f 91       	pop	r17
    1830:	0f 91       	pop	r16
    1832:	ff 90       	pop	r15
    1834:	ef 90       	pop	r14
    1836:	df 90       	pop	r13
    1838:	cf 90       	pop	r12
    183a:	bf 90       	pop	r11
    183c:	af 90       	pop	r10
    183e:	9f 90       	pop	r9
    1840:	8f 90       	pop	r8
    1842:	7f 90       	pop	r7
    1844:	6f 90       	pop	r6
    1846:	5f 90       	pop	r5
    1848:	4f 90       	pop	r4
    184a:	3f 90       	pop	r3
    184c:	2f 90       	pop	r2
    184e:	08 95       	ret
		for (iIterator=0; iIterator<=iLengthInBytes; iIterator ++ )
		{
			dataflash_write ( iStartAddress+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRBL [START BLOCK] [BYTE COUNT]\r\n" );
    1850:	80 e4       	ldi	r24, 0x40	; 64
    1852:	92 e0       	ldi	r25, 0x02	; 2
    1854:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1858:	e4 cf       	rjmp	.-56     	; 0x1822 <TM_WriteBlocks+0x130>

0000185a <TM_WriteMemory>:


//__________________________________________________________________________________________________
// File System - Write Memory
void TM_WriteMemory ( char *sIncomingCommand )
{
    185a:	6f 92       	push	r6
    185c:	7f 92       	push	r7
    185e:	8f 92       	push	r8
    1860:	9f 92       	push	r9
    1862:	af 92       	push	r10
    1864:	bf 92       	push	r11
    1866:	cf 92       	push	r12
    1868:	df 92       	push	r13
    186a:	ef 92       	push	r14
    186c:	ff 92       	push	r15
    186e:	0f 93       	push	r16
    1870:	1f 93       	push	r17
	uint32_t iIterator;
	char* cTemp;
	uint16_t iStart;
	uint16_t iLength;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "WRIT"
    1872:	6e e3       	ldi	r22, 0x3E	; 62
    1874:	72 e0       	ldi	r23, 0x02	; 2
    1876:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	cTemp = strtok ( NULL, " " );
    187a:	80 e0       	ldi	r24, 0x00	; 0
    187c:	90 e0       	ldi	r25, 0x00	; 0
    187e:	6e e3       	ldi	r22, 0x3E	; 62
    1880:	72 e0       	ldi	r23, 0x02	; 2
    1882:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	iStart = atoi (cTemp);
    1886:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>
    188a:	7c 01       	movw	r14, r24
	cTemp = strtok ( NULL, " " );
    188c:	80 e0       	ldi	r24, 0x00	; 0
    188e:	90 e0       	ldi	r25, 0x00	; 0
    1890:	6e e3       	ldi	r22, 0x3E	; 62
    1892:	72 e0       	ldi	r23, 0x02	; 2
    1894:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
    1898:	8c 01       	movw	r16, r24
	iLength = atoi (cTemp);
    189a:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>

	if (cTemp!=NULL)
    189e:	01 2b       	or	r16, r17
    18a0:	61 f1       	breq	.+88     	; 0x18fa <TM_WriteMemory+0xa0>
	{
		//sprintf ( sRespondData, "Writing %d-%d",
		//						iStart, iStart+iLength );
		//USARTWriteString ( sRespondData );

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    18a2:	3c 01       	movw	r6, r24
    18a4:	88 24       	eor	r8, r8
    18a6:	99 24       	eor	r9, r9
    18a8:	57 01       	movw	r10, r14
    18aa:	cc 24       	eor	r12, r12
    18ac:	dd 24       	eor	r13, r13
    18ae:	ee 24       	eor	r14, r14
    18b0:	ff 24       	eor	r15, r15
    18b2:	87 01       	movw	r16, r14
		{
			dataflash_write ( iStart+iIterator, USARTReadChar() );
    18b4:	0e 94 8e 11 	call	0x231c	; 0x231c <USARTReadChar>
    18b8:	48 2f       	mov	r20, r24
    18ba:	c6 01       	movw	r24, r12
    18bc:	b5 01       	movw	r22, r10
    18be:	0e 94 f7 03 	call	0x7ee	; 0x7ee <dataflash_write>
	{
		//sprintf ( sRespondData, "Writing %d-%d",
		//						iStart, iStart+iLength );
		//USARTWriteString ( sRespondData );

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    18c2:	08 94       	sec
    18c4:	e1 1c       	adc	r14, r1
    18c6:	f1 1c       	adc	r15, r1
    18c8:	01 1d       	adc	r16, r1
    18ca:	11 1d       	adc	r17, r1
    18cc:	08 94       	sec
    18ce:	a1 1c       	adc	r10, r1
    18d0:	b1 1c       	adc	r11, r1
    18d2:	c1 1c       	adc	r12, r1
    18d4:	d1 1c       	adc	r13, r1
    18d6:	6e 14       	cp	r6, r14
    18d8:	7f 04       	cpc	r7, r15
    18da:	80 06       	cpc	r8, r16
    18dc:	91 06       	cpc	r9, r17
    18de:	50 f7       	brcc	.-44     	; 0x18b4 <TM_WriteMemory+0x5a>
		{
			dataflash_write ( iStart+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRIT [START ADDRESS] [BYTE COUNT]\r\n" );
}
    18e0:	1f 91       	pop	r17
    18e2:	0f 91       	pop	r16
    18e4:	ff 90       	pop	r15
    18e6:	ef 90       	pop	r14
    18e8:	df 90       	pop	r13
    18ea:	cf 90       	pop	r12
    18ec:	bf 90       	pop	r11
    18ee:	af 90       	pop	r10
    18f0:	9f 90       	pop	r9
    18f2:	8f 90       	pop	r8
    18f4:	7f 90       	pop	r7
    18f6:	6f 90       	pop	r6
    18f8:	08 95       	ret
		for (iIterator=0; iIterator<=iLength; iIterator ++ )
		{
			dataflash_write ( iStart+iIterator, USARTReadChar() );
		}
	}
	else USARTWriteString ( (char*)"USAGE:   WRIT [START ADDRESS] [BYTE COUNT]\r\n" );
    18fa:	8b e6       	ldi	r24, 0x6B	; 107
    18fc:	92 e0       	ldi	r25, 0x02	; 2
    18fe:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1902:	ee cf       	rjmp	.-36     	; 0x18e0 <TM_WriteMemory+0x86>

00001904 <TM_FetchCommand>:
}

//__________________________________________________________________________________________________
// File System - Fetch New Command
void TM_FetchCommand ( char *sIncomingCommand )
{
    1904:	ef 92       	push	r14
    1906:	ff 92       	push	r15
    1908:	1f 93       	push	r17
    190a:	cf 93       	push	r28
    190c:	df 93       	push	r29
    190e:	7c 01       	movw	r14, r24
	int iPlace;
	char data;

	USARTWriteString ( (char*)">>" );
    1910:	88 e9       	ldi	r24, 0x98	; 152
    1912:	92 e0       	ldi	r25, 0x02	; 2
    1914:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
    1918:	0e 94 8e 11 	call	0x231c	; 0x231c <USARTReadChar>
    191c:	90 e0       	ldi	r25, 0x00	; 0
    191e:	0e 94 ca 11 	call	0x2394	; 0x2394 <toupper>
    1922:	18 2f       	mov	r17, r24
	USARTWriteChar ( data );
    1924:	0e 94 95 11 	call	0x232a	; 0x232a <USARTWriteChar>
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    1928:	1a 33       	cpi	r17, 0x3A	; 58
    192a:	31 f1       	breq	.+76     	; 0x1978 <TM_FetchCommand+0x74>
    192c:	c0 e0       	ldi	r28, 0x00	; 0
    192e:	d0 e0       	ldi	r29, 0x00	; 0
    1930:	03 c0       	rjmp	.+6      	; 0x1938 <TM_FetchCommand+0x34>
    1932:	cf 33       	cpi	r28, 0x3F	; 63
    1934:	d1 05       	cpc	r29, r1
    1936:	e9 f0       	breq	.+58     	; 0x1972 <TM_FetchCommand+0x6e>
	{
		sIncomingCommand[iPlace++] = data;
    1938:	f7 01       	movw	r30, r14
    193a:	ec 0f       	add	r30, r28
    193c:	fd 1f       	adc	r31, r29
    193e:	10 83       	st	Z, r17
    1940:	21 96       	adiw	r28, 0x01	; 1
		data=toupper ( USARTReadChar() );
    1942:	0e 94 8e 11 	call	0x231c	; 0x231c <USARTReadChar>
    1946:	90 e0       	ldi	r25, 0x00	; 0
    1948:	0e 94 ca 11 	call	0x2394	; 0x2394 <toupper>
    194c:	18 2f       	mov	r17, r24
		USARTWriteChar ( data );
    194e:	0e 94 95 11 	call	0x232a	; 0x232a <USARTWriteChar>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    1952:	1a 33       	cpi	r17, 0x3A	; 58
    1954:	71 f7       	brne	.-36     	; 0x1932 <TM_FetchCommand+0x2e>
    1956:	fe 01       	movw	r30, r28
		sIncomingCommand[iPlace++] = data;
		data=toupper ( USARTReadChar() );
		USARTWriteChar ( data );
	}

	sIncomingCommand [iPlace] = '\0';
    1958:	ee 0d       	add	r30, r14
    195a:	ff 1d       	adc	r31, r15
    195c:	10 82       	st	Z, r1
	USARTWriteString ( (char*)"\r\n" );
    195e:	8b e9       	ldi	r24, 0x9B	; 155
    1960:	92 e0       	ldi	r25, 0x02	; 2
    1962:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

}
    1966:	df 91       	pop	r29
    1968:	cf 91       	pop	r28
    196a:	1f 91       	pop	r17
    196c:	ff 90       	pop	r15
    196e:	ef 90       	pop	r14
    1970:	08 95       	ret
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    1972:	ef e3       	ldi	r30, 0x3F	; 63
    1974:	f0 e0       	ldi	r31, 0x00	; 0
    1976:	f0 cf       	rjmp	.-32     	; 0x1958 <TM_FetchCommand+0x54>
    1978:	e0 e0       	ldi	r30, 0x00	; 0
    197a:	f0 e0       	ldi	r31, 0x00	; 0
    197c:	ed cf       	rjmp	.-38     	; 0x1958 <TM_FetchCommand+0x54>

0000197e <TM_FlashStatus>:
}

//__________________________________________________________________________________________________
// File System - Read flash status
void TM_FlashStatus ( char *sIncomingCommand )
{
    197e:	1f 93       	push	r17
    1980:	cf 93       	push	r28
    1982:	df 93       	push	r29
	uint8_t stat_flash = dataflash_read_status ( );
    1984:	0e 94 16 05 	call	0xa2c	; 0xa2c <dataflash_read_status>
    1988:	18 2f       	mov	r17, r24

	if (stat_flash&FLASH_READY)
    198a:	c8 2f       	mov	r28, r24
    198c:	d0 e0       	ldi	r29, 0x00	; 0
    198e:	80 ff       	sbrs	r24, 0
    1990:	29 c0       	rjmp	.+82     	; 0x19e4 <TM_FlashStatus+0x66>
		USARTWriteString ( (char*)"\r\n#0 Flash NOT ready (1)" );
    1992:	8e e9       	ldi	r24, 0x9E	; 158
    1994:	92 e0       	ldi	r25, 0x02	; 2
    1996:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#0 Flash ready (0)" );

	if (stat_flash&FLASH_WE)
    199a:	c1 ff       	sbrs	r28, 1
    199c:	29 c0       	rjmp	.+82     	; 0x19f0 <TM_FlashStatus+0x72>
		USARTWriteString ( (char*)"\r\n#1 Flash write enabled (1)" );
    199e:	8c ec       	ldi	r24, 0xCC	; 204
    19a0:	92 e0       	ldi	r25, 0x02	; 2
    19a2:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		USARTWriteString ( (char*)"\r\n#23 Flash write protected (11)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		USARTWriteString ( (char*)"\r\n#23 Flash partly write protected (01)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    19a6:	ce 01       	movw	r24, r28
    19a8:	8c 70       	andi	r24, 0x0C	; 12
    19aa:	90 70       	andi	r25, 0x00	; 0
    19ac:	89 2b       	or	r24, r25
    19ae:	49 f5       	brne	.+82     	; 0x1a02 <TM_FlashStatus+0x84>
		USARTWriteString ( (char*)"\r\n#23 Flash NOT write protected (00)" );
    19b0:	8a e0       	ldi	r24, 0x0A	; 10
    19b2:	93 e0       	ldi	r25, 0x03	; 3
    19b4:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#23 Flash protection unknown (10 reserved)" );

	if (stat_flash&FLASH_WP_PIN)
    19b8:	c4 ff       	sbrs	r28, 4
    19ba:	29 c0       	rjmp	.+82     	; 0x1a0e <TM_FlashStatus+0x90>
		USARTWriteString ( (char*)"\r\n#4 Flash NOT write protected (1)" );
    19bc:	8c e5       	ldi	r24, 0x5C	; 92
    19be:	93 e0       	ldi	r25, 0x03	; 3
    19c0:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#4 Flash write protected (0)" );

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    19c4:	c5 ff       	sbrs	r28, 5
    19c6:	29 c0       	rjmp	.+82     	; 0x1a1a <TM_FlashStatus+0x9c>
		USARTWriteString ( (char*)"\r\n#5 Flash failed program (erase) (1)" );
    19c8:	8e e9       	ldi	r24, 0x9E	; 158
    19ca:	93 e0       	ldi	r25, 0x03	; 3
    19cc:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#5 Flash program (erase) was successfull (0)" );

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    19d0:	17 fd       	sbrc	r17, 7
    19d2:	29 c0       	rjmp	.+82     	; 0x1a26 <TM_FlashStatus+0xa8>
		USARTWriteString ( (char*)"\r\n#7 Flash sector protection registers LOCKED (1)\r\n\r\n" );
	else
		USARTWriteString ( (char*)"\r\n#7 Flash sector protection registers UNLOCKED (0)\r\n\r\n" );
    19d4:	89 e2       	ldi	r24, 0x29	; 41
    19d6:	94 e0       	ldi	r25, 0x04	; 4
    19d8:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

}
    19dc:	df 91       	pop	r29
    19de:	cf 91       	pop	r28
    19e0:	1f 91       	pop	r17
    19e2:	08 95       	ret
	uint8_t stat_flash = dataflash_read_status ( );

	if (stat_flash&FLASH_READY)
		USARTWriteString ( (char*)"\r\n#0 Flash NOT ready (1)" );
	else
		USARTWriteString ( (char*)"\r\n#0 Flash ready (0)" );
    19e4:	87 eb       	ldi	r24, 0xB7	; 183
    19e6:	92 e0       	ldi	r25, 0x02	; 2
    19e8:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	if (stat_flash&FLASH_WE)
    19ec:	c1 fd       	sbrc	r28, 1
    19ee:	d7 cf       	rjmp	.-82     	; 0x199e <TM_FlashStatus+0x20>
		USARTWriteString ( (char*)"\r\n#1 Flash write enabled (1)" );
	else
		USARTWriteString ( (char*)"\r\n#1 Flash NOT write enabled (0)" );
    19f0:	89 ee       	ldi	r24, 0xE9	; 233
    19f2:	92 e0       	ldi	r25, 0x02	; 2
    19f4:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x1100)
		USARTWriteString ( (char*)"\r\n#23 Flash write protected (11)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0100)
		USARTWriteString ( (char*)"\r\n#23 Flash partly write protected (01)" );
	else if ((stat_flash&FLASH_SOFTWARE_PROTECT)==0x0000)
    19f8:	ce 01       	movw	r24, r28
    19fa:	8c 70       	andi	r24, 0x0C	; 12
    19fc:	90 70       	andi	r25, 0x00	; 0
    19fe:	89 2b       	or	r24, r25
    1a00:	b9 f2       	breq	.-82     	; 0x19b0 <TM_FlashStatus+0x32>
		USARTWriteString ( (char*)"\r\n#23 Flash NOT write protected (00)" );
	else
		USARTWriteString ( (char*)"\r\n#23 Flash protection unknown (10 reserved)" );
    1a02:	8f e2       	ldi	r24, 0x2F	; 47
    1a04:	93 e0       	ldi	r25, 0x03	; 3
    1a06:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	if (stat_flash&FLASH_WP_PIN)
    1a0a:	c4 fd       	sbrc	r28, 4
    1a0c:	d7 cf       	rjmp	.-82     	; 0x19bc <TM_FlashStatus+0x3e>
		USARTWriteString ( (char*)"\r\n#4 Flash NOT write protected (1)" );
	else
		USARTWriteString ( (char*)"\r\n#4 Flash write protected (0)" );
    1a0e:	8f e7       	ldi	r24, 0x7F	; 127
    1a10:	93 e0       	ldi	r25, 0x03	; 3
    1a12:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	if (stat_flash&FLASH_ERASE_WRITE_ERR)
    1a16:	c5 fd       	sbrc	r28, 5
    1a18:	d7 cf       	rjmp	.-82     	; 0x19c8 <TM_FlashStatus+0x4a>
		USARTWriteString ( (char*)"\r\n#5 Flash failed program (erase) (1)" );
	else
		USARTWriteString ( (char*)"\r\n#5 Flash program (erase) was successfull (0)" );
    1a1a:	84 ec       	ldi	r24, 0xC4	; 196
    1a1c:	93 e0       	ldi	r25, 0x03	; 3
    1a1e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	if (stat_flash&FLASH_SEC_PROTECT_VEC_LOCK)
    1a22:	17 ff       	sbrs	r17, 7
    1a24:	d7 cf       	rjmp	.-82     	; 0x19d4 <TM_FlashStatus+0x56>
		USARTWriteString ( (char*)"\r\n#7 Flash sector protection registers LOCKED (1)\r\n\r\n" );
    1a26:	83 ef       	ldi	r24, 0xF3	; 243
    1a28:	93 e0       	ldi	r25, 0x03	; 3
    1a2a:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	else
		USARTWriteString ( (char*)"\r\n#7 Flash sector protection registers UNLOCKED (0)\r\n\r\n" );

}
    1a2e:	df 91       	pop	r29
    1a30:	cf 91       	pop	r28
    1a32:	1f 91       	pop	r17
    1a34:	08 95       	ret

00001a36 <TM_ShowParameters>:
}

//__________________________________________________________________________________________________
// File System - Show Parameters
void TM_ShowParameters ( void )
{
    1a36:	0f 93       	push	r16
    1a38:	1f 93       	push	r17
    1a3a:	df 93       	push	r29
    1a3c:	cf 93       	push	r28
    1a3e:	cd b7       	in	r28, 0x3d	; 61
    1a40:	de b7       	in	r29, 0x3e	; 62
    1a42:	c0 54       	subi	r28, 0x40	; 64
    1a44:	d0 40       	sbci	r29, 0x00	; 0
    1a46:	0f b6       	in	r0, 0x3f	; 63
    1a48:	f8 94       	cli
    1a4a:	de bf       	out	0x3e, r29	; 62
    1a4c:	0f be       	out	0x3f, r0	; 63
    1a4e:	cd bf       	out	0x3d, r28	; 61
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "CDEP:%03d;"		//color depth
    1a50:	8d b7       	in	r24, 0x3d	; 61
    1a52:	9e b7       	in	r25, 0x3e	; 62
    1a54:	08 97       	sbiw	r24, 0x08	; 8
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	9e bf       	out	0x3e, r25	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	8d bf       	out	0x3d, r24	; 61
    1a60:	ed b7       	in	r30, 0x3d	; 61
    1a62:	fe b7       	in	r31, 0x3e	; 62
    1a64:	31 96       	adiw	r30, 0x01	; 1
    1a66:	8e 01       	movw	r16, r28
    1a68:	0f 5f       	subi	r16, 0xFF	; 255
    1a6a:	1f 4f       	sbci	r17, 0xFF	; 255
    1a6c:	ad b7       	in	r26, 0x3d	; 61
    1a6e:	be b7       	in	r27, 0x3e	; 62
    1a70:	12 96       	adiw	r26, 0x02	; 2
    1a72:	1c 93       	st	X, r17
    1a74:	0e 93       	st	-X, r16
    1a76:	11 97       	sbiw	r26, 0x01	; 1
    1a78:	81 e6       	ldi	r24, 0x61	; 97
    1a7a:	94 e0       	ldi	r25, 0x04	; 4
    1a7c:	93 83       	std	Z+3, r25	; 0x03
    1a7e:	82 83       	std	Z+2, r24	; 0x02
    1a80:	89 e1       	ldi	r24, 0x19	; 25
    1a82:	90 e0       	ldi	r25, 0x00	; 0
    1a84:	95 83       	std	Z+5, r25	; 0x05
    1a86:	84 83       	std	Z+4, r24	; 0x04
    1a88:	88 ec       	ldi	r24, 0xC8	; 200
    1a8a:	90 e0       	ldi	r25, 0x00	; 0
    1a8c:	97 83       	std	Z+7, r25	; 0x07
    1a8e:	86 83       	std	Z+6, r24	; 0x06
    1a90:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
							"ANG:%03d;\r\n", 		//angular res
							ANIBIKE_COLOR_DEPTH,
							ANGULAR_RESOLUTION );
	USARTWriteString ( sRespondData );
    1a94:	8d b7       	in	r24, 0x3d	; 61
    1a96:	9e b7       	in	r25, 0x3e	; 62
    1a98:	08 96       	adiw	r24, 0x08	; 8
    1a9a:	0f b6       	in	r0, 0x3f	; 63
    1a9c:	f8 94       	cli
    1a9e:	9e bf       	out	0x3e, r25	; 62
    1aa0:	0f be       	out	0x3f, r0	; 63
    1aa2:	8d bf       	out	0x3d, r24	; 61
    1aa4:	c8 01       	movw	r24, r16
    1aa6:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
}
    1aaa:	c0 5c       	subi	r28, 0xC0	; 192
    1aac:	df 4f       	sbci	r29, 0xFF	; 255
    1aae:	0f b6       	in	r0, 0x3f	; 63
    1ab0:	f8 94       	cli
    1ab2:	de bf       	out	0x3e, r29	; 62
    1ab4:	0f be       	out	0x3f, r0	; 63
    1ab6:	cd bf       	out	0x3d, r28	; 61
    1ab8:	cf 91       	pop	r28
    1aba:	df 91       	pop	r29
    1abc:	1f 91       	pop	r17
    1abe:	0f 91       	pop	r16
    1ac0:	08 95       	ret

00001ac2 <TM_Spi>:
}

//__________________________________________________________________________________________________
// File System - Spi Read/Write
void TM_Spi ( char *sIncomingCommand )
{
    1ac2:	ff 92       	push	r15
    1ac4:	0f 93       	push	r16
    1ac6:	1f 93       	push	r17
    1ac8:	df 93       	push	r29
    1aca:	cf 93       	push	r28
    1acc:	00 d0       	rcall	.+0      	; 0x1ace <TM_Spi+0xc>
    1ace:	00 d0       	rcall	.+0      	; 0x1ad0 <TM_Spi+0xe>
    1ad0:	cd b7       	in	r28, 0x3d	; 61
    1ad2:	de b7       	in	r29, 0x3e	; 62
	char* cTemp;
	uint8_t Spi_t;
	char HexaRead[4];
	char data;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "SPI"
    1ad4:	6e e3       	ldi	r22, 0x3E	; 62
    1ad6:	72 e0       	ldi	r23, 0x02	; 2
    1ad8:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	cTemp = strtok ( NULL, " " );
    1adc:	80 e0       	ldi	r24, 0x00	; 0
    1ade:	90 e0       	ldi	r25, 0x00	; 0
    1ae0:	6e e3       	ldi	r22, 0x3E	; 62
    1ae2:	72 e0       	ldi	r23, 0x02	; 2
    1ae4:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
    1ae8:	8c 01       	movw	r16, r24
	Spi_t = atoi (cTemp);						// This is the data
    1aea:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>
    1aee:	f8 2e       	mov	r15, r24


	if (cTemp!=NULL)
    1af0:	01 2b       	or	r16, r17
    1af2:	09 f4       	brne	.+2      	; 0x1af6 <TM_Spi+0x34>
    1af4:	4e c0       	rjmp	.+156    	; 0x1b92 <TM_Spi+0xd0>
	{
		sprintf(HexaRead, "\r\nTransferring 0x%x", Spi_t );
    1af6:	00 d0       	rcall	.+0      	; 0x1af8 <TM_Spi+0x36>
    1af8:	00 d0       	rcall	.+0      	; 0x1afa <TM_Spi+0x38>
    1afa:	00 d0       	rcall	.+0      	; 0x1afc <TM_Spi+0x3a>
    1afc:	ed b7       	in	r30, 0x3d	; 61
    1afe:	fe b7       	in	r31, 0x3e	; 62
    1b00:	31 96       	adiw	r30, 0x01	; 1
    1b02:	8e 01       	movw	r16, r28
    1b04:	0f 5f       	subi	r16, 0xFF	; 255
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	ad b7       	in	r26, 0x3d	; 61
    1b0a:	be b7       	in	r27, 0x3e	; 62
    1b0c:	12 96       	adiw	r26, 0x02	; 2
    1b0e:	1c 93       	st	X, r17
    1b10:	0e 93       	st	-X, r16
    1b12:	11 97       	sbiw	r26, 0x01	; 1
    1b14:	87 e7       	ldi	r24, 0x77	; 119
    1b16:	94 e0       	ldi	r25, 0x04	; 4
    1b18:	93 83       	std	Z+3, r25	; 0x03
    1b1a:	82 83       	std	Z+2, r24	; 0x02
    1b1c:	f4 82       	std	Z+4, r15	; 0x04
    1b1e:	15 82       	std	Z+5, r1	; 0x05
    1b20:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
		USARTWriteString ( HexaRead );
    1b24:	8d b7       	in	r24, 0x3d	; 61
    1b26:	9e b7       	in	r25, 0x3e	; 62
    1b28:	06 96       	adiw	r24, 0x06	; 6
    1b2a:	0f b6       	in	r0, 0x3f	; 63
    1b2c:	f8 94       	cli
    1b2e:	9e bf       	out	0x3e, r25	; 62
    1b30:	0f be       	out	0x3f, r0	; 63
    1b32:	8d bf       	out	0x3d, r24	; 61
    1b34:	c8 01       	movw	r24, r16
    1b36:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

		data = spi_transfer(Spi_t);
    1b3a:	8f 2d       	mov	r24, r15
    1b3c:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>

		sprintf(HexaRead, "\r\nRecieved 0x%x\r\n", data );
    1b40:	00 d0       	rcall	.+0      	; 0x1b42 <TM_Spi+0x80>
    1b42:	00 d0       	rcall	.+0      	; 0x1b44 <TM_Spi+0x82>
    1b44:	00 d0       	rcall	.+0      	; 0x1b46 <TM_Spi+0x84>
    1b46:	ed b7       	in	r30, 0x3d	; 61
    1b48:	fe b7       	in	r31, 0x3e	; 62
    1b4a:	31 96       	adiw	r30, 0x01	; 1
    1b4c:	ad b7       	in	r26, 0x3d	; 61
    1b4e:	be b7       	in	r27, 0x3e	; 62
    1b50:	12 96       	adiw	r26, 0x02	; 2
    1b52:	1c 93       	st	X, r17
    1b54:	0e 93       	st	-X, r16
    1b56:	11 97       	sbiw	r26, 0x01	; 1
    1b58:	2b e8       	ldi	r18, 0x8B	; 139
    1b5a:	34 e0       	ldi	r19, 0x04	; 4
    1b5c:	33 83       	std	Z+3, r19	; 0x03
    1b5e:	22 83       	std	Z+2, r18	; 0x02
    1b60:	84 83       	std	Z+4, r24	; 0x04
    1b62:	15 82       	std	Z+5, r1	; 0x05
    1b64:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
		USARTWriteString ( HexaRead );
    1b68:	8d b7       	in	r24, 0x3d	; 61
    1b6a:	9e b7       	in	r25, 0x3e	; 62
    1b6c:	06 96       	adiw	r24, 0x06	; 6
    1b6e:	0f b6       	in	r0, 0x3f	; 63
    1b70:	f8 94       	cli
    1b72:	9e bf       	out	0x3e, r25	; 62
    1b74:	0f be       	out	0x3f, r0	; 63
    1b76:	8d bf       	out	0x3d, r24	; 61
    1b78:	c8 01       	movw	r24, r16
    1b7a:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	}
	else USARTWriteString ( (char*)"USAGE:   SPI [DATA_8BIT]\r\n" );
}
    1b7e:	0f 90       	pop	r0
    1b80:	0f 90       	pop	r0
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	cf 91       	pop	r28
    1b88:	df 91       	pop	r29
    1b8a:	1f 91       	pop	r17
    1b8c:	0f 91       	pop	r16
    1b8e:	ff 90       	pop	r15
    1b90:	08 95       	ret

		sprintf(HexaRead, "\r\nRecieved 0x%x\r\n", data );
		USARTWriteString ( HexaRead );

	}
	else USARTWriteString ( (char*)"USAGE:   SPI [DATA_8BIT]\r\n" );
    1b92:	8d e9       	ldi	r24, 0x9D	; 157
    1b94:	94 e0       	ldi	r25, 0x04	; 4
    1b96:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1b9a:	f1 cf       	rjmp	.-30     	; 0x1b7e <TM_Spi+0xbc>

00001b9c <TM_ReadMemory>:
}

//__________________________________________________________________________________________________
// File System - Read Memory
void TM_ReadMemory ( char *sIncomingCommand )
{
    1b9c:	2f 92       	push	r2
    1b9e:	3f 92       	push	r3
    1ba0:	4f 92       	push	r4
    1ba2:	5f 92       	push	r5
    1ba4:	6f 92       	push	r6
    1ba6:	7f 92       	push	r7
    1ba8:	8f 92       	push	r8
    1baa:	9f 92       	push	r9
    1bac:	af 92       	push	r10
    1bae:	bf 92       	push	r11
    1bb0:	cf 92       	push	r12
    1bb2:	df 92       	push	r13
    1bb4:	ef 92       	push	r14
    1bb6:	ff 92       	push	r15
    1bb8:	0f 93       	push	r16
    1bba:	1f 93       	push	r17
    1bbc:	df 93       	push	r29
    1bbe:	cf 93       	push	r28
    1bc0:	cd b7       	in	r28, 0x3d	; 61
    1bc2:	de b7       	in	r29, 0x3e	; 62
    1bc4:	c4 54       	subi	r28, 0x44	; 68
    1bc6:	d0 40       	sbci	r29, 0x00	; 0
    1bc8:	0f b6       	in	r0, 0x3f	; 63
    1bca:	f8 94       	cli
    1bcc:	de bf       	out	0x3e, r29	; 62
    1bce:	0f be       	out	0x3f, r0	; 63
    1bd0:	cd bf       	out	0x3d, r28	; 61
	char HexaRead[4];
	uint32_t iIterator;
	uint16_t iStart;
	uint16_t iLength;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "READ"
    1bd2:	6e e3       	ldi	r22, 0x3E	; 62
    1bd4:	72 e0       	ldi	r23, 0x02	; 2
    1bd6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	cTemp = strtok ( NULL, " " );
    1bda:	80 e0       	ldi	r24, 0x00	; 0
    1bdc:	90 e0       	ldi	r25, 0x00	; 0
    1bde:	6e e3       	ldi	r22, 0x3E	; 62
    1be0:	72 e0       	ldi	r23, 0x02	; 2
    1be2:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	iStart = atoi (cTemp);
    1be6:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>
    1bea:	f8 2e       	mov	r15, r24
    1bec:	e9 2e       	mov	r14, r25
	cTemp = strtok ( NULL, " " );
    1bee:	80 e0       	ldi	r24, 0x00	; 0
    1bf0:	90 e0       	ldi	r25, 0x00	; 0
    1bf2:	6e e3       	ldi	r22, 0x3E	; 62
    1bf4:	72 e0       	ldi	r23, 0x02	; 2
    1bf6:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
    1bfa:	8c 01       	movw	r16, r24
	iLength = atoi (cTemp);
    1bfc:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>

	if (cTemp!=NULL)
    1c00:	01 2b       	or	r16, r17
    1c02:	09 f4       	brne	.+2      	; 0x1c06 <TM_ReadMemory+0x6a>
    1c04:	98 c0       	rjmp	.+304    	; 0x1d36 <TM_ReadMemory+0x19a>
	uint16_t iStart;
	uint16_t iLength;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "READ"
	cTemp = strtok ( NULL, " " );
	iStart = atoi (cTemp);
    1c06:	0f 2d       	mov	r16, r15
    1c08:	1e 2d       	mov	r17, r14
	cTemp = strtok ( NULL, " " );
	iLength = atoi (cTemp);
    1c0a:	7c 01       	movw	r14, r24

	if (cTemp!=NULL)
	{
		sprintf ( sRespondData, "Reading %d to %d;\r\n",
    1c0c:	2d b7       	in	r18, 0x3d	; 61
    1c0e:	3e b7       	in	r19, 0x3e	; 62
    1c10:	28 50       	subi	r18, 0x08	; 8
    1c12:	30 40       	sbci	r19, 0x00	; 0
    1c14:	0f b6       	in	r0, 0x3f	; 63
    1c16:	f8 94       	cli
    1c18:	3e bf       	out	0x3e, r19	; 62
    1c1a:	0f be       	out	0x3f, r0	; 63
    1c1c:	2d bf       	out	0x3d, r18	; 61
    1c1e:	ed b7       	in	r30, 0x3d	; 61
    1c20:	fe b7       	in	r31, 0x3e	; 62
    1c22:	31 96       	adiw	r30, 0x01	; 1
    1c24:	35 e0       	ldi	r19, 0x05	; 5
    1c26:	c3 2e       	mov	r12, r19
    1c28:	d1 2c       	mov	r13, r1
    1c2a:	cc 0e       	add	r12, r28
    1c2c:	dd 1e       	adc	r13, r29
    1c2e:	ad b7       	in	r26, 0x3d	; 61
    1c30:	be b7       	in	r27, 0x3e	; 62
    1c32:	12 96       	adiw	r26, 0x02	; 2
    1c34:	dc 92       	st	X, r13
    1c36:	ce 92       	st	-X, r12
    1c38:	11 97       	sbiw	r26, 0x01	; 1
    1c3a:	88 eb       	ldi	r24, 0xB8	; 184
    1c3c:	94 e0       	ldi	r25, 0x04	; 4
    1c3e:	93 83       	std	Z+3, r25	; 0x03
    1c40:	82 83       	std	Z+2, r24	; 0x02
    1c42:	15 83       	std	Z+5, r17	; 0x05
    1c44:	04 83       	std	Z+4, r16	; 0x04
    1c46:	c7 01       	movw	r24, r14
    1c48:	80 0f       	add	r24, r16
    1c4a:	91 1f       	adc	r25, r17
    1c4c:	97 83       	std	Z+7, r25	; 0x07
    1c4e:	86 83       	std	Z+6, r24	; 0x06
    1c50:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
								iStart, iStart+iLength );
		USARTWriteString ( sRespondData );
    1c54:	2d b7       	in	r18, 0x3d	; 61
    1c56:	3e b7       	in	r19, 0x3e	; 62
    1c58:	28 5f       	subi	r18, 0xF8	; 248
    1c5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c5c:	0f b6       	in	r0, 0x3f	; 63
    1c5e:	f8 94       	cli
    1c60:	3e bf       	out	0x3e, r19	; 62
    1c62:	0f be       	out	0x3f, r0	; 63
    1c64:	2d bf       	out	0x3d, r18	; 61
    1c66:	c6 01       	movw	r24, r12
    1c68:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    1c6c:	37 01       	movw	r6, r14
    1c6e:	88 24       	eor	r8, r8
    1c70:	99 24       	eor	r9, r9
    1c72:	78 01       	movw	r14, r16
    1c74:	00 e0       	ldi	r16, 0x00	; 0
    1c76:	10 e0       	ldi	r17, 0x00	; 0
    1c78:	aa 24       	eor	r10, r10
    1c7a:	bb 24       	eor	r11, r11
    1c7c:	65 01       	movw	r12, r10
    1c7e:	2e 01       	movw	r4, r28
    1c80:	08 94       	sec
    1c82:	41 1c       	adc	r4, r1
    1c84:	51 1c       	adc	r5, r1
    1c86:	2c ec       	ldi	r18, 0xCC	; 204
    1c88:	22 2e       	mov	r2, r18
    1c8a:	24 e0       	ldi	r18, 0x04	; 4
    1c8c:	32 2e       	mov	r3, r18
		{
			sprintf(HexaRead, "A%d:   0x%x\r\n", (int)(iStart+iIterator), dataflash_read (iStart+iIterator) );
    1c8e:	c8 01       	movw	r24, r16
    1c90:	b7 01       	movw	r22, r14
    1c92:	0e 94 29 04 	call	0x852	; 0x852 <dataflash_read>
    1c96:	ad b7       	in	r26, 0x3d	; 61
    1c98:	be b7       	in	r27, 0x3e	; 62
    1c9a:	18 97       	sbiw	r26, 0x08	; 8
    1c9c:	0f b6       	in	r0, 0x3f	; 63
    1c9e:	f8 94       	cli
    1ca0:	be bf       	out	0x3e, r27	; 62
    1ca2:	0f be       	out	0x3f, r0	; 63
    1ca4:	ad bf       	out	0x3d, r26	; 61
    1ca6:	ed b7       	in	r30, 0x3d	; 61
    1ca8:	fe b7       	in	r31, 0x3e	; 62
    1caa:	31 96       	adiw	r30, 0x01	; 1
    1cac:	12 96       	adiw	r26, 0x02	; 2
    1cae:	5c 92       	st	X, r5
    1cb0:	4e 92       	st	-X, r4
    1cb2:	11 97       	sbiw	r26, 0x01	; 1
    1cb4:	33 82       	std	Z+3, r3	; 0x03
    1cb6:	22 82       	std	Z+2, r2	; 0x02
    1cb8:	f5 82       	std	Z+5, r15	; 0x05
    1cba:	e4 82       	std	Z+4, r14	; 0x04
    1cbc:	86 83       	std	Z+6, r24	; 0x06
    1cbe:	17 82       	std	Z+7, r1	; 0x07
    1cc0:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
			USARTWriteString ( HexaRead );
    1cc4:	2d b7       	in	r18, 0x3d	; 61
    1cc6:	3e b7       	in	r19, 0x3e	; 62
    1cc8:	28 5f       	subi	r18, 0xF8	; 248
    1cca:	3f 4f       	sbci	r19, 0xFF	; 255
    1ccc:	0f b6       	in	r0, 0x3f	; 63
    1cce:	f8 94       	cli
    1cd0:	3e bf       	out	0x3e, r19	; 62
    1cd2:	0f be       	out	0x3f, r0	; 63
    1cd4:	2d bf       	out	0x3d, r18	; 61
    1cd6:	c2 01       	movw	r24, r4
    1cd8:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	{
		sprintf ( sRespondData, "Reading %d to %d;\r\n",
								iStart, iStart+iLength );
		USARTWriteString ( sRespondData );

		for (iIterator=0; iIterator<=iLength; iIterator ++ )
    1cdc:	08 94       	sec
    1cde:	a1 1c       	adc	r10, r1
    1ce0:	b1 1c       	adc	r11, r1
    1ce2:	c1 1c       	adc	r12, r1
    1ce4:	d1 1c       	adc	r13, r1
    1ce6:	08 94       	sec
    1ce8:	e1 1c       	adc	r14, r1
    1cea:	f1 1c       	adc	r15, r1
    1cec:	01 1d       	adc	r16, r1
    1cee:	11 1d       	adc	r17, r1
    1cf0:	6a 14       	cp	r6, r10
    1cf2:	7b 04       	cpc	r7, r11
    1cf4:	8c 04       	cpc	r8, r12
    1cf6:	9d 04       	cpc	r9, r13
    1cf8:	50 f6       	brcc	.-108    	; 0x1c8e <TM_ReadMemory+0xf2>
		{
			sprintf(HexaRead, "A%d:   0x%x\r\n", (int)(iStart+iIterator), dataflash_read (iStart+iIterator) );
			USARTWriteString ( HexaRead );
		}

		USARTWriteString ( (char*)"\r\n" );
    1cfa:	8b e9       	ldi	r24, 0x9B	; 155
    1cfc:	92 e0       	ldi	r25, 0x02	; 2
    1cfe:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	}
	else USARTWriteString ( (char*)"USAGE:   READ [START ADDRESS] [BYTE COUNT]\r\n" );
}
    1d02:	cc 5b       	subi	r28, 0xBC	; 188
    1d04:	df 4f       	sbci	r29, 0xFF	; 255
    1d06:	0f b6       	in	r0, 0x3f	; 63
    1d08:	f8 94       	cli
    1d0a:	de bf       	out	0x3e, r29	; 62
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	cd bf       	out	0x3d, r28	; 61
    1d10:	cf 91       	pop	r28
    1d12:	df 91       	pop	r29
    1d14:	1f 91       	pop	r17
    1d16:	0f 91       	pop	r16
    1d18:	ff 90       	pop	r15
    1d1a:	ef 90       	pop	r14
    1d1c:	df 90       	pop	r13
    1d1e:	cf 90       	pop	r12
    1d20:	bf 90       	pop	r11
    1d22:	af 90       	pop	r10
    1d24:	9f 90       	pop	r9
    1d26:	8f 90       	pop	r8
    1d28:	7f 90       	pop	r7
    1d2a:	6f 90       	pop	r6
    1d2c:	5f 90       	pop	r5
    1d2e:	4f 90       	pop	r4
    1d30:	3f 90       	pop	r3
    1d32:	2f 90       	pop	r2
    1d34:	08 95       	ret
			USARTWriteString ( HexaRead );
		}

		USARTWriteString ( (char*)"\r\n" );
	}
	else USARTWriteString ( (char*)"USAGE:   READ [START ADDRESS] [BYTE COUNT]\r\n" );
    1d36:	8a ed       	ldi	r24, 0xDA	; 218
    1d38:	94 e0       	ldi	r25, 0x04	; 4
    1d3a:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1d3e:	e1 cf       	rjmp	.-62     	; 0x1d02 <TM_ReadMemory+0x166>

00001d40 <TM_Identify>:
}

//__________________________________________________________________________________________________
// File System - Stop reading from memory
void TM_Identify ( void )
{
    1d40:	0f 93       	push	r16
    1d42:	1f 93       	push	r17
    1d44:	df 93       	push	r29
    1d46:	cf 93       	push	r28
    1d48:	cd b7       	in	r28, 0x3d	; 61
    1d4a:	de b7       	in	r29, 0x3e	; 62
    1d4c:	c4 54       	subi	r28, 0x44	; 68
    1d4e:	d0 40       	sbci	r29, 0x00	; 0
    1d50:	0f b6       	in	r0, 0x3f	; 63
    1d52:	f8 94       	cli
    1d54:	de bf       	out	0x3e, r29	; 62
    1d56:	0f be       	out	0x3f, r0	; 63
    1d58:	cd bf       	out	0x3d, r28	; 61
	char ManID, DevID1, DevID2, ExData;
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "ANIBIKE VER:%03d.00;"	// The project
    1d5a:	8d b7       	in	r24, 0x3d	; 61
    1d5c:	9e b7       	in	r25, 0x3e	; 62
    1d5e:	0e 97       	sbiw	r24, 0x0e	; 14
    1d60:	0f b6       	in	r0, 0x3f	; 63
    1d62:	f8 94       	cli
    1d64:	9e bf       	out	0x3e, r25	; 62
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	8d bf       	out	0x3d, r24	; 61
    1d6a:	ed b7       	in	r30, 0x3d	; 61
    1d6c:	fe b7       	in	r31, 0x3e	; 62
    1d6e:	31 96       	adiw	r30, 0x01	; 1
    1d70:	8e 01       	movw	r16, r28
    1d72:	0b 5f       	subi	r16, 0xFB	; 251
    1d74:	1f 4f       	sbci	r17, 0xFF	; 255
    1d76:	ad b7       	in	r26, 0x3d	; 61
    1d78:	be b7       	in	r27, 0x3e	; 62
    1d7a:	12 96       	adiw	r26, 0x02	; 2
    1d7c:	1c 93       	st	X, r17
    1d7e:	0e 93       	st	-X, r16
    1d80:	11 97       	sbiw	r26, 0x01	; 1
    1d82:	87 e0       	ldi	r24, 0x07	; 7
    1d84:	95 e0       	ldi	r25, 0x05	; 5
    1d86:	93 83       	std	Z+3, r25	; 0x03
    1d88:	82 83       	std	Z+2, r24	; 0x02
    1d8a:	82 e0       	ldi	r24, 0x02	; 2
    1d8c:	90 e0       	ldi	r25, 0x00	; 0
    1d8e:	95 83       	std	Z+5, r25	; 0x05
    1d90:	84 83       	std	Z+4, r24	; 0x04
    1d92:	20 e2       	ldi	r18, 0x20	; 32
    1d94:	30 e0       	ldi	r19, 0x00	; 0
    1d96:	37 83       	std	Z+7, r19	; 0x07
    1d98:	26 83       	std	Z+6, r18	; 0x06
    1d9a:	84 ec       	ldi	r24, 0xC4	; 196
    1d9c:	90 e0       	ldi	r25, 0x00	; 0
    1d9e:	91 87       	std	Z+9, r25	; 0x09
    1da0:	80 87       	std	Z+8, r24	; 0x08
    1da2:	33 87       	std	Z+11, r19	; 0x0b
    1da4:	22 87       	std	Z+10, r18	; 0x0a
    1da6:	81 e0       	ldi	r24, 0x01	; 1
    1da8:	90 e0       	ldi	r25, 0x00	; 0
    1daa:	95 87       	std	Z+13, r25	; 0x0d
    1dac:	84 87       	std	Z+12, r24	; 0x0c
    1dae:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
							ANIBIKE_VER,
							ANIBIKE_MEMORY_SIZE,
							ANIBIKE_CPU_SPEED,
							ANIBIKE_NUM_LEDS,
							ANIBIKE_IS_RGB );
	USARTWriteString ( sRespondData );
    1db2:	8d b7       	in	r24, 0x3d	; 61
    1db4:	9e b7       	in	r25, 0x3e	; 62
    1db6:	0e 96       	adiw	r24, 0x0e	; 14
    1db8:	0f b6       	in	r0, 0x3f	; 63
    1dba:	f8 94       	cli
    1dbc:	9e bf       	out	0x3e, r25	; 62
    1dbe:	0f be       	out	0x3f, r0	; 63
    1dc0:	8d bf       	out	0x3d, r24	; 61
    1dc2:	c8 01       	movw	r24, r16
    1dc4:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	USARTWriteString ( (char*)"\r\n\r\nDataflash information:\r\n" );
    1dc8:	8b e4       	ldi	r24, 0x4B	; 75
    1dca:	95 e0       	ldi	r25, 0x05	; 5
    1dcc:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    1dd0:	ce 01       	movw	r24, r28
    1dd2:	01 96       	adiw	r24, 0x01	; 1
    1dd4:	be 01       	movw	r22, r28
    1dd6:	6e 5f       	subi	r22, 0xFE	; 254
    1dd8:	7f 4f       	sbci	r23, 0xFF	; 255
    1dda:	ae 01       	movw	r20, r28
    1ddc:	4d 5f       	subi	r20, 0xFD	; 253
    1dde:	5f 4f       	sbci	r21, 0xFF	; 255
    1de0:	9e 01       	movw	r18, r28
    1de2:	2c 5f       	subi	r18, 0xFC	; 252
    1de4:	3f 4f       	sbci	r19, 0xFF	; 255
    1de6:	0e 94 ce 03 	call	0x79c	; 0x79c <dataflash_spi_idn>

	sprintf ( sRespondData, "ManID = 0x%x; DevID1 = 0x%x; DevID2 = 0x%x; ExData = 0x%x\r\n",
    1dea:	ad b7       	in	r26, 0x3d	; 61
    1dec:	be b7       	in	r27, 0x3e	; 62
    1dee:	1c 97       	sbiw	r26, 0x0c	; 12
    1df0:	0f b6       	in	r0, 0x3f	; 63
    1df2:	f8 94       	cli
    1df4:	be bf       	out	0x3e, r27	; 62
    1df6:	0f be       	out	0x3f, r0	; 63
    1df8:	ad bf       	out	0x3d, r26	; 61
    1dfa:	ed b7       	in	r30, 0x3d	; 61
    1dfc:	fe b7       	in	r31, 0x3e	; 62
    1dfe:	31 96       	adiw	r30, 0x01	; 1
    1e00:	12 96       	adiw	r26, 0x02	; 2
    1e02:	1c 93       	st	X, r17
    1e04:	0e 93       	st	-X, r16
    1e06:	11 97       	sbiw	r26, 0x01	; 1
    1e08:	88 e6       	ldi	r24, 0x68	; 104
    1e0a:	95 e0       	ldi	r25, 0x05	; 5
    1e0c:	93 83       	std	Z+3, r25	; 0x03
    1e0e:	82 83       	std	Z+2, r24	; 0x02
    1e10:	89 81       	ldd	r24, Y+1	; 0x01
    1e12:	84 83       	std	Z+4, r24	; 0x04
    1e14:	15 82       	std	Z+5, r1	; 0x05
    1e16:	8a 81       	ldd	r24, Y+2	; 0x02
    1e18:	86 83       	std	Z+6, r24	; 0x06
    1e1a:	17 82       	std	Z+7, r1	; 0x07
    1e1c:	8b 81       	ldd	r24, Y+3	; 0x03
    1e1e:	80 87       	std	Z+8, r24	; 0x08
    1e20:	11 86       	std	Z+9, r1	; 0x09
    1e22:	8c 81       	ldd	r24, Y+4	; 0x04
    1e24:	82 87       	std	Z+10, r24	; 0x0a
    1e26:	13 86       	std	Z+11, r1	; 0x0b
    1e28:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
					ManID, DevID1, DevID2, ExData );
	USARTWriteString ( sRespondData );
    1e2c:	8d b7       	in	r24, 0x3d	; 61
    1e2e:	9e b7       	in	r25, 0x3e	; 62
    1e30:	0c 96       	adiw	r24, 0x0c	; 12
    1e32:	0f b6       	in	r0, 0x3f	; 63
    1e34:	f8 94       	cli
    1e36:	9e bf       	out	0x3e, r25	; 62
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	8d bf       	out	0x3d, r24	; 61
    1e3c:	c8 01       	movw	r24, r16
    1e3e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	USARTWriteString ( (char*)"\r\n" );
    1e42:	8b e9       	ldi	r24, 0x9B	; 155
    1e44:	92 e0       	ldi	r25, 0x02	; 2
    1e46:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
}
    1e4a:	cc 5b       	subi	r28, 0xBC	; 188
    1e4c:	df 4f       	sbci	r29, 0xFF	; 255
    1e4e:	0f b6       	in	r0, 0x3f	; 63
    1e50:	f8 94       	cli
    1e52:	de bf       	out	0x3e, r29	; 62
    1e54:	0f be       	out	0x3f, r0	; 63
    1e56:	cd bf       	out	0x3d, r28	; 61
    1e58:	cf 91       	pop	r28
    1e5a:	df 91       	pop	r29
    1e5c:	1f 91       	pop	r17
    1e5e:	0f 91       	pop	r16
    1e60:	08 95       	ret

00001e62 <DataTransferMode>:
}

//==============================================================================================
// This function is invoked by the USART RX interrupt
void DataTransferMode ( )
{
    1e62:	2f 92       	push	r2
    1e64:	3f 92       	push	r3
    1e66:	4f 92       	push	r4
    1e68:	5f 92       	push	r5
    1e6a:	6f 92       	push	r6
    1e6c:	7f 92       	push	r7
    1e6e:	8f 92       	push	r8
    1e70:	9f 92       	push	r9
    1e72:	af 92       	push	r10
    1e74:	bf 92       	push	r11
    1e76:	cf 92       	push	r12
    1e78:	df 92       	push	r13
    1e7a:	ff 92       	push	r15
    1e7c:	0f 93       	push	r16
    1e7e:	1f 93       	push	r17
    1e80:	df 93       	push	r29
    1e82:	cf 93       	push	r28
    1e84:	cd b7       	in	r28, 0x3d	; 61
    1e86:	de b7       	in	r29, 0x3e	; 62
    1e88:	c8 58       	subi	r28, 0x88	; 136
    1e8a:	d0 40       	sbci	r29, 0x00	; 0
    1e8c:	0f b6       	in	r0, 0x3f	; 63
    1e8e:	f8 94       	cli
    1e90:	de bf       	out	0x3e, r29	; 62
    1e92:	0f be       	out	0x3f, r0	; 63
    1e94:	cd bf       	out	0x3d, r28	; 61
	char sIncomingCommand[UART_COMMAND_MAX_LENGTH];

	USARTWriteString ( (char*)"ANIBIKE INC. VER. 2.00.\r\n");
    1e96:	84 ea       	ldi	r24, 0xA4	; 164
    1e98:	95 e0       	ldi	r25, 0x05	; 5
    1e9a:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    1e9e:	f9 e0       	ldi	r31, 0x09	; 9
    1ea0:	cf 2e       	mov	r12, r31
    1ea2:	d1 2c       	mov	r13, r1
    1ea4:	cc 0e       	add	r12, r28
    1ea6:	dd 1e       	adc	r13, r29
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    1ea8:	ef e3       	ldi	r30, 0x3F	; 63
    1eaa:	8e 2e       	mov	r8, r30
    1eac:	91 2c       	mov	r9, r1
    1eae:	8c 0c       	add	r8, r12
    1eb0:	9d 1c       	adc	r9, r13
void TM_Identify ( void )
{
	char ManID, DevID1, DevID2, ExData;
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "ANIBIKE VER:%03d.00;"	// The project
    1eb2:	79 e4       	ldi	r23, 0x49	; 73
    1eb4:	a7 2e       	mov	r10, r23
    1eb6:	b1 2c       	mov	r11, r1
    1eb8:	ac 0e       	add	r10, r28
    1eba:	bd 1e       	adc	r11, r29
    1ebc:	67 e0       	ldi	r22, 0x07	; 7
    1ebe:	66 2e       	mov	r6, r22
    1ec0:	65 e0       	ldi	r22, 0x05	; 5
    1ec2:	76 2e       	mov	r7, r22
							ANIBIKE_NUM_LEDS,
							ANIBIKE_IS_RGB );
	USARTWriteString ( sRespondData );

	USARTWriteString ( (char*)"\r\n\r\nDataflash information:\r\n" );
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    1ec4:	52 e0       	ldi	r21, 0x02	; 2
    1ec6:	45 2e       	mov	r4, r21
    1ec8:	51 2c       	mov	r5, r1
    1eca:	4c 0e       	add	r4, r28
    1ecc:	5d 1e       	adc	r5, r29
    1ece:	43 e0       	ldi	r20, 0x03	; 3
    1ed0:	24 2e       	mov	r2, r20
    1ed2:	31 2c       	mov	r3, r1
    1ed4:	2c 0e       	add	r2, r28
    1ed6:	3d 1e       	adc	r3, r29
void TM_FetchCommand ( char *sIncomingCommand )
{
	int iPlace;
	char data;

	USARTWriteString ( (char*)">>" );
    1ed8:	88 e9       	ldi	r24, 0x98	; 152
    1eda:	92 e0       	ldi	r25, 0x02	; 2
    1edc:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
    1ee0:	0e 94 8e 11 	call	0x231c	; 0x231c <USARTReadChar>
    1ee4:	90 e0       	ldi	r25, 0x00	; 0
    1ee6:	0e 94 ca 11 	call	0x2394	; 0x2394 <toupper>
    1eea:	f8 2e       	mov	r15, r24
	USARTWriteChar ( data );
    1eec:	0e 94 95 11 	call	0x232a	; 0x232a <USARTWriteChar>
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    1ef0:	2a e3       	ldi	r18, 0x3A	; 58
    1ef2:	f2 16       	cp	r15, r18
    1ef4:	09 f4       	brne	.+2      	; 0x1ef8 <DataTransferMode+0x96>
    1ef6:	fd c1       	rjmp	.+1018   	; 0x22f2 <DataTransferMode+0x490>
    1ef8:	00 e0       	ldi	r16, 0x00	; 0
    1efa:	10 e0       	ldi	r17, 0x00	; 0
    1efc:	04 c0       	rjmp	.+8      	; 0x1f06 <DataTransferMode+0xa4>
    1efe:	0f 33       	cpi	r16, 0x3F	; 63
    1f00:	11 05       	cpc	r17, r1
    1f02:	09 f4       	brne	.+2      	; 0x1f06 <DataTransferMode+0xa4>
    1f04:	d2 c1       	rjmp	.+932    	; 0x22aa <DataTransferMode+0x448>
	{
		sIncomingCommand[iPlace++] = data;
    1f06:	f6 01       	movw	r30, r12
    1f08:	e0 0f       	add	r30, r16
    1f0a:	f1 1f       	adc	r31, r17
    1f0c:	f0 82       	st	Z, r15
    1f0e:	0f 5f       	subi	r16, 0xFF	; 255
    1f10:	1f 4f       	sbci	r17, 0xFF	; 255
		data=toupper ( USARTReadChar() );
    1f12:	0e 94 8e 11 	call	0x231c	; 0x231c <USARTReadChar>
    1f16:	90 e0       	ldi	r25, 0x00	; 0
    1f18:	0e 94 ca 11 	call	0x2394	; 0x2394 <toupper>
    1f1c:	f8 2e       	mov	r15, r24
		USARTWriteChar ( data );
    1f1e:	0e 94 95 11 	call	0x232a	; 0x232a <USARTWriteChar>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    1f22:	3a e3       	ldi	r19, 0x3A	; 58
    1f24:	f3 16       	cp	r15, r19
    1f26:	59 f7       	brne	.-42     	; 0x1efe <DataTransferMode+0x9c>
    1f28:	f6 01       	movw	r30, r12
    1f2a:	e0 0f       	add	r30, r16
    1f2c:	f1 1f       	adc	r31, r17
		sIncomingCommand[iPlace++] = data;
		data=toupper ( USARTReadChar() );
		USARTWriteChar ( data );
	}

	sIncomingCommand [iPlace] = '\0';
    1f2e:	10 82       	st	Z, r1
	USARTWriteString ( (char*)"\r\n" );
    1f30:	8b e9       	ldi	r24, 0x9B	; 155
    1f32:	92 e0       	ldi	r25, 0x02	; 2
    1f34:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

		// _____________________________________________________________
		// Read identification data
		#ifdef  __ENABLE_IDN_UART
		// IDENTIFICATION AND INFORMATION
		if ( strcmp (sIncomingCommand, "IDN?") == 0 )
    1f38:	c6 01       	movw	r24, r12
    1f3a:	6e eb       	ldi	r22, 0xBE	; 190
    1f3c:	75 e0       	ldi	r23, 0x05	; 5
    1f3e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
    1f42:	00 97       	sbiw	r24, 0x00	; 0
    1f44:	09 f4       	brne	.+2      	; 0x1f48 <DataTransferMode+0xe6>
    1f46:	3e c1       	rjmp	.+636    	; 0x21c4 <DataTransferMode+0x362>

		// _____________________________________________________________
		// READ PARAMETERS
		#ifdef  __ENABLE_READ_PARAM_UART
		// READ THE PARAMETERS FROM MEMORY
		if ( strcmp (sIncomingCommand, "REPA") == 0 )
    1f48:	c6 01       	movw	r24, r12
    1f4a:	63 ec       	ldi	r22, 0xC3	; 195
    1f4c:	75 e0       	ldi	r23, 0x05	; 5
    1f4e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	09 f4       	brne	.+2      	; 0x1f58 <DataTransferMode+0xf6>
    1f56:	0d c1       	rjmp	.+538    	; 0x2172 <DataTransferMode+0x310>
		#endif

		// _____________________________________________________________
		// READ MEMORY
		#ifdef  __ENABLE_READ_UART
		if ( sIncomingCommand[0] == 'R' && sIncomingCommand[1] == 'E' &&
    1f58:	89 85       	ldd	r24, Y+9	; 0x09
    1f5a:	18 2f       	mov	r17, r24
    1f5c:	82 35       	cpi	r24, 0x52	; 82
    1f5e:	09 f4       	brne	.+2      	; 0x1f62 <DataTransferMode+0x100>
    1f60:	f6 c0       	rjmp	.+492    	; 0x214e <DataTransferMode+0x2ec>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    1f62:	87 35       	cpi	r24, 0x57	; 87
    1f64:	09 f4       	brne	.+2      	; 0x1f68 <DataTransferMode+0x106>
    1f66:	e0 c0       	rjmp	.+448    	; 0x2128 <DataTransferMode+0x2c6>
			 sIncomingCommand[2] == 'B' && sIncomingCommand[3] == 'L' )
			TM_WriteBlocks ( sIncomingCommand );

		// _____________________________________________________________
		// CS LOW
		if ( strcmp (sIncomingCommand, "CSLO") == 0 )
    1f68:	c6 01       	movw	r24, r12
    1f6a:	68 ec       	ldi	r22, 0xC8	; 200
    1f6c:	75 e0       	ldi	r23, 0x05	; 5
    1f6e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
    1f72:	00 97       	sbiw	r24, 0x00	; 0
    1f74:	09 f4       	brne	.+2      	; 0x1f78 <DataTransferMode+0x116>
		{	CS_DOWN;	}
    1f76:	28 98       	cbi	0x05, 0	; 5

		// _____________________________________________________________
		// CS HIGH
		if ( strcmp (sIncomingCommand, "CSHI") == 0 )
    1f78:	c6 01       	movw	r24, r12
    1f7a:	6d ec       	ldi	r22, 0xCD	; 205
    1f7c:	75 e0       	ldi	r23, 0x05	; 5
    1f7e:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
    1f82:	00 97       	sbiw	r24, 0x00	; 0
    1f84:	09 f4       	brne	.+2      	; 0x1f88 <DataTransferMode+0x126>
		{	CS_UP;		}
    1f86:	28 9a       	sbi	0x05, 0	; 5

		// _____________________________________________________________
		// SPI Transfer
		if ( sIncomingCommand[0] == 'S' && sIncomingCommand[1] == 'P' &&
    1f88:	13 35       	cpi	r17, 0x53	; 83
    1f8a:	09 f4       	brne	.+2      	; 0x1f8e <DataTransferMode+0x12c>
    1f8c:	65 c0       	rjmp	.+202    	; 0x2058 <DataTransferMode+0x1f6>
			TM_Spi ( sIncomingCommand );


		// _____________________________________________________________
		// Unprotect flash
		if ( sIncomingCommand[0] == 'U' && sIncomingCommand[1] == 'P' &&
    1f8e:	15 35       	cpi	r17, 0x55	; 85
    1f90:	09 f4       	brne	.+2      	; 0x1f94 <DataTransferMode+0x132>
    1f92:	4f c0       	rjmp	.+158    	; 0x2032 <DataTransferMode+0x1d0>
			dataflash_unprotect_all ( );


		// _____________________________________________________________
		// Protect flash
		if ( sIncomingCommand[0] == 'P' && sIncomingCommand[1] == 'R' &&
    1f94:	10 35       	cpi	r17, 0x50	; 80
    1f96:	c9 f5       	brne	.+114    	; 0x200a <DataTransferMode+0x1a8>
    1f98:	8a 85       	ldd	r24, Y+10	; 0x0a
    1f9a:	82 35       	cpi	r24, 0x52	; 82
    1f9c:	69 f1       	breq	.+90     	; 0x1ff8 <DataTransferMode+0x196>
			TM_FlashStatus ( sIncomingCommand );

		
		// _____________________________________________________________
		// DIR HIGH
		if ( strcmp (sIncomingCommand, "DIR") == 0 )
    1f9e:	c6 01       	movw	r24, r12
    1fa0:	62 ed       	ldi	r22, 0xD2	; 210
    1fa2:	75 e0       	ldi	r23, 0x05	; 5
    1fa4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
    1fa8:	00 97       	sbiw	r24, 0x00	; 0
    1faa:	09 f4       	brne	.+2      	; 0x1fae <DataTransferMode+0x14c>
    1fac:	52 c0       	rjmp	.+164    	; 0x2052 <DataTransferMode+0x1f0>


		#ifdef  __ENABLE_EXIT_UART
		// _____________________________________________________________
		// EXIT TRANSFER MODE
		if ( strcmp (sIncomingCommand, "EXIT") == 0 )
    1fae:	c6 01       	movw	r24, r12
    1fb0:	66 ed       	ldi	r22, 0xD6	; 214
    1fb2:	75 e0       	ldi	r23, 0x05	; 5
    1fb4:	0e 94 d7 11 	call	0x23ae	; 0x23ae <strcmp>
    1fb8:	00 97       	sbiw	r24, 0x00	; 0
    1fba:	09 f0       	breq	.+2      	; 0x1fbe <DataTransferMode+0x15c>
    1fbc:	8d cf       	rjmp	.-230    	; 0x1ed8 <DataTransferMode+0x76>
		{ 
			USARTWriteString ( (char*)"ANIBIKE EXITING TRANSFER MODE\r\n" );	
    1fbe:	8b ed       	ldi	r24, 0xDB	; 219
    1fc0:	95 e0       	ldi	r25, 0x05	; 5
    1fc2:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
		#endif

	}

	return;
}
    1fc6:	c8 57       	subi	r28, 0x78	; 120
    1fc8:	df 4f       	sbci	r29, 0xFF	; 255
    1fca:	0f b6       	in	r0, 0x3f	; 63
    1fcc:	f8 94       	cli
    1fce:	de bf       	out	0x3e, r29	; 62
    1fd0:	0f be       	out	0x3f, r0	; 63
    1fd2:	cd bf       	out	0x3d, r28	; 61
    1fd4:	cf 91       	pop	r28
    1fd6:	df 91       	pop	r29
    1fd8:	1f 91       	pop	r17
    1fda:	0f 91       	pop	r16
    1fdc:	ff 90       	pop	r15
    1fde:	df 90       	pop	r13
    1fe0:	cf 90       	pop	r12
    1fe2:	bf 90       	pop	r11
    1fe4:	af 90       	pop	r10
    1fe6:	9f 90       	pop	r9
    1fe8:	8f 90       	pop	r8
    1fea:	7f 90       	pop	r7
    1fec:	6f 90       	pop	r6
    1fee:	5f 90       	pop	r5
    1ff0:	4f 90       	pop	r4
    1ff2:	3f 90       	pop	r3
    1ff4:	2f 90       	pop	r2
    1ff6:	08 95       	ret
			dataflash_unprotect_all ( );


		// _____________________________________________________________
		// Protect flash
		if ( sIncomingCommand[0] == 'P' && sIncomingCommand[1] == 'R' &&
    1ff8:	8b 85       	ldd	r24, Y+11	; 0x0b
    1ffa:	8f 34       	cpi	r24, 0x4F	; 79
    1ffc:	81 f6       	brne	.-96     	; 0x1f9e <DataTransferMode+0x13c>
    1ffe:	8c 85       	ldd	r24, Y+12	; 0x0c
    2000:	84 35       	cpi	r24, 0x54	; 84
    2002:	69 f6       	brne	.-102    	; 0x1f9e <DataTransferMode+0x13c>
			 sIncomingCommand[2] == 'O' && sIncomingCommand[3] == 'T')
			dataflash_protect_all ( );
    2004:	0e 94 27 05 	call	0xa4e	; 0xa4e <dataflash_protect_all>
    2008:	19 85       	ldd	r17, Y+9	; 0x09

		// _____________________________________________________________
		// Protect flash
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    200a:	16 34       	cpi	r17, 0x46	; 70
    200c:	41 f6       	brne	.-112    	; 0x1f9e <DataTransferMode+0x13c>
    200e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2010:	8c 34       	cpi	r24, 0x4C	; 76
    2012:	29 f6       	brne	.-118    	; 0x1f9e <DataTransferMode+0x13c>
    2014:	8b 85       	ldd	r24, Y+11	; 0x0b
    2016:	85 34       	cpi	r24, 0x45	; 69
    2018:	09 f4       	brne	.+2      	; 0x201c <DataTransferMode+0x1ba>
    201a:	5b c1       	rjmp	.+694    	; 0x22d2 <DataTransferMode+0x470>
			dataflash_erase_all ( );


		// _____________________________________________________________
		// Show flash status
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    201c:	83 35       	cpi	r24, 0x53	; 83
    201e:	09 f0       	breq	.+2      	; 0x2022 <DataTransferMode+0x1c0>
    2020:	be cf       	rjmp	.-132    	; 0x1f9e <DataTransferMode+0x13c>
    2022:	8c 85       	ldd	r24, Y+12	; 0x0c
    2024:	84 35       	cpi	r24, 0x54	; 84
    2026:	09 f0       	breq	.+2      	; 0x202a <DataTransferMode+0x1c8>
    2028:	ba cf       	rjmp	.-140    	; 0x1f9e <DataTransferMode+0x13c>
			 sIncomingCommand[2] == 'S' && sIncomingCommand[3] == 'T')
			TM_FlashStatus ( sIncomingCommand );
    202a:	c6 01       	movw	r24, r12
    202c:	0e 94 bf 0c 	call	0x197e	; 0x197e <TM_FlashStatus>
    2030:	b6 cf       	rjmp	.-148    	; 0x1f9e <DataTransferMode+0x13c>
			TM_Spi ( sIncomingCommand );


		// _____________________________________________________________
		// Unprotect flash
		if ( sIncomingCommand[0] == 'U' && sIncomingCommand[1] == 'P' &&
    2032:	8a 85       	ldd	r24, Y+10	; 0x0a
    2034:	80 35       	cpi	r24, 0x50	; 80
    2036:	09 f0       	breq	.+2      	; 0x203a <DataTransferMode+0x1d8>
    2038:	b2 cf       	rjmp	.-156    	; 0x1f9e <DataTransferMode+0x13c>
    203a:	8b 85       	ldd	r24, Y+11	; 0x0b
    203c:	82 35       	cpi	r24, 0x52	; 82
    203e:	09 f0       	breq	.+2      	; 0x2042 <DataTransferMode+0x1e0>
    2040:	ae cf       	rjmp	.-164    	; 0x1f9e <DataTransferMode+0x13c>
    2042:	8c 85       	ldd	r24, Y+12	; 0x0c
    2044:	8f 34       	cpi	r24, 0x4F	; 79
    2046:	09 f0       	breq	.+2      	; 0x204a <DataTransferMode+0x1e8>
    2048:	aa cf       	rjmp	.-172    	; 0x1f9e <DataTransferMode+0x13c>
			 sIncomingCommand[2] == 'R' && sIncomingCommand[3] == 'O')
			dataflash_unprotect_all ( );
    204a:	0e 94 57 05 	call	0xaae	; 0xaae <dataflash_unprotect_all>
    204e:	19 85       	ldd	r17, Y+9	; 0x09
    2050:	a1 cf       	rjmp	.-190    	; 0x1f94 <DataTransferMode+0x132>

		
		// _____________________________________________________________
		// DIR HIGH
		if ( strcmp (sIncomingCommand, "DIR") == 0 )
		{	FS_ShowFileInformation ( );		}
    2052:	0e 94 7c 08 	call	0x10f8	; 0x10f8 <FS_ShowFileInformation>
    2056:	ab cf       	rjmp	.-170    	; 0x1fae <DataTransferMode+0x14c>
		if ( strcmp (sIncomingCommand, "CSHI") == 0 )
		{	CS_UP;		}

		// _____________________________________________________________
		// SPI Transfer
		if ( sIncomingCommand[0] == 'S' && sIncomingCommand[1] == 'P' &&
    2058:	8a 85       	ldd	r24, Y+10	; 0x0a
    205a:	80 35       	cpi	r24, 0x50	; 80
    205c:	09 f0       	breq	.+2      	; 0x2060 <DataTransferMode+0x1fe>
    205e:	9f cf       	rjmp	.-194    	; 0x1f9e <DataTransferMode+0x13c>
    2060:	8b 85       	ldd	r24, Y+11	; 0x0b
    2062:	89 34       	cpi	r24, 0x49	; 73
    2064:	09 f0       	breq	.+2      	; 0x2068 <DataTransferMode+0x206>
    2066:	9b cf       	rjmp	.-202    	; 0x1f9e <DataTransferMode+0x13c>
	char* cTemp;
	uint8_t Spi_t;
	char HexaRead[4];
	char data;

	cTemp = strtok ( sIncomingCommand, " " ); // The first one is "SPI"
    2068:	c6 01       	movw	r24, r12
    206a:	6e e3       	ldi	r22, 0x3E	; 62
    206c:	72 e0       	ldi	r23, 0x02	; 2
    206e:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
	cTemp = strtok ( NULL, " " );
    2072:	80 e0       	ldi	r24, 0x00	; 0
    2074:	90 e0       	ldi	r25, 0x00	; 0
    2076:	6e e3       	ldi	r22, 0x3E	; 62
    2078:	72 e0       	ldi	r23, 0x02	; 2
    207a:	0e 94 d2 11 	call	0x23a4	; 0x23a4 <strtok>
    207e:	8c 01       	movw	r16, r24
	Spi_t = atoi (cTemp);						// This is the data
    2080:	0e 94 ac 11 	call	0x2358	; 0x2358 <atoi>
    2084:	f8 2e       	mov	r15, r24


	if (cTemp!=NULL)
    2086:	01 2b       	or	r16, r17
    2088:	09 f4       	brne	.+2      	; 0x208c <DataTransferMode+0x22a>
    208a:	35 c1       	rjmp	.+618    	; 0x22f6 <DataTransferMode+0x494>
	{
		sprintf(HexaRead, "\r\nTransferring 0x%x", Spi_t );
    208c:	00 d0       	rcall	.+0      	; 0x208e <DataTransferMode+0x22c>
    208e:	00 d0       	rcall	.+0      	; 0x2090 <DataTransferMode+0x22e>
    2090:	00 d0       	rcall	.+0      	; 0x2092 <DataTransferMode+0x230>
    2092:	ed b7       	in	r30, 0x3d	; 61
    2094:	fe b7       	in	r31, 0x3e	; 62
    2096:	31 96       	adiw	r30, 0x01	; 1
    2098:	25 e0       	ldi	r18, 0x05	; 5
    209a:	30 e0       	ldi	r19, 0x00	; 0
    209c:	2c 0f       	add	r18, r28
    209e:	3d 1f       	adc	r19, r29
    20a0:	ad b7       	in	r26, 0x3d	; 61
    20a2:	be b7       	in	r27, 0x3e	; 62
    20a4:	12 96       	adiw	r26, 0x02	; 2
    20a6:	3c 93       	st	X, r19
    20a8:	2e 93       	st	-X, r18
    20aa:	11 97       	sbiw	r26, 0x01	; 1
    20ac:	87 e7       	ldi	r24, 0x77	; 119
    20ae:	94 e0       	ldi	r25, 0x04	; 4
    20b0:	93 83       	std	Z+3, r25	; 0x03
    20b2:	82 83       	std	Z+2, r24	; 0x02
    20b4:	f4 82       	std	Z+4, r15	; 0x04
    20b6:	15 82       	std	Z+5, r1	; 0x05
    20b8:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
		USARTWriteString ( HexaRead );
    20bc:	ad b7       	in	r26, 0x3d	; 61
    20be:	be b7       	in	r27, 0x3e	; 62
    20c0:	16 96       	adiw	r26, 0x06	; 6
    20c2:	0f b6       	in	r0, 0x3f	; 63
    20c4:	f8 94       	cli
    20c6:	be bf       	out	0x3e, r27	; 62
    20c8:	0f be       	out	0x3f, r0	; 63
    20ca:	ad bf       	out	0x3d, r26	; 61
    20cc:	ce 01       	movw	r24, r28
    20ce:	05 96       	adiw	r24, 0x05	; 5
    20d0:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

		data = spi_transfer(Spi_t);
    20d4:	8f 2d       	mov	r24, r15
    20d6:	0e 94 c8 03 	call	0x790	; 0x790 <spi_transfer>

		sprintf(HexaRead, "\r\nRecieved 0x%x\r\n", data );
    20da:	00 d0       	rcall	.+0      	; 0x20dc <DataTransferMode+0x27a>
    20dc:	00 d0       	rcall	.+0      	; 0x20de <DataTransferMode+0x27c>
    20de:	00 d0       	rcall	.+0      	; 0x20e0 <DataTransferMode+0x27e>
    20e0:	ed b7       	in	r30, 0x3d	; 61
    20e2:	fe b7       	in	r31, 0x3e	; 62
    20e4:	31 96       	adiw	r30, 0x01	; 1
    20e6:	25 e0       	ldi	r18, 0x05	; 5
    20e8:	30 e0       	ldi	r19, 0x00	; 0
    20ea:	2c 0f       	add	r18, r28
    20ec:	3d 1f       	adc	r19, r29
    20ee:	ad b7       	in	r26, 0x3d	; 61
    20f0:	be b7       	in	r27, 0x3e	; 62
    20f2:	12 96       	adiw	r26, 0x02	; 2
    20f4:	3c 93       	st	X, r19
    20f6:	2e 93       	st	-X, r18
    20f8:	11 97       	sbiw	r26, 0x01	; 1
    20fa:	ab e8       	ldi	r26, 0x8B	; 139
    20fc:	b4 e0       	ldi	r27, 0x04	; 4
    20fe:	b3 83       	std	Z+3, r27	; 0x03
    2100:	a2 83       	std	Z+2, r26	; 0x02
    2102:	84 83       	std	Z+4, r24	; 0x04
    2104:	15 82       	std	Z+5, r1	; 0x05
    2106:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
		USARTWriteString ( HexaRead );
    210a:	2d b7       	in	r18, 0x3d	; 61
    210c:	3e b7       	in	r19, 0x3e	; 62
    210e:	2a 5f       	subi	r18, 0xFA	; 250
    2110:	3f 4f       	sbci	r19, 0xFF	; 255
    2112:	0f b6       	in	r0, 0x3f	; 63
    2114:	f8 94       	cli
    2116:	3e bf       	out	0x3e, r19	; 62
    2118:	0f be       	out	0x3f, r0	; 63
    211a:	2d bf       	out	0x3d, r18	; 61
    211c:	ce 01       	movw	r24, r28
    211e:	05 96       	adiw	r24, 0x05	; 5
    2120:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    2124:	19 85       	ldd	r17, Y+9	; 0x09
    2126:	33 cf       	rjmp	.-410    	; 0x1f8e <DataTransferMode+0x12c>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2128:	8a 85       	ldd	r24, Y+10	; 0x0a
    212a:	82 35       	cpi	r24, 0x52	; 82
    212c:	11 f0       	breq	.+4      	; 0x2132 <DataTransferMode+0x2d0>
			TM_WriteMemory ( sIncomingCommand );
		#endif

		// _____________________________________________________________
		// WRITE BLOCKS
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    212e:	17 e5       	ldi	r17, 0x57	; 87
    2130:	1b cf       	rjmp	.-458    	; 0x1f68 <DataTransferMode+0x106>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    2132:	8b 85       	ldd	r24, Y+11	; 0x0b
    2134:	89 34       	cpi	r24, 0x49	; 73
    2136:	09 f4       	brne	.+2      	; 0x213a <DataTransferMode+0x2d8>
    2138:	ba c0       	rjmp	.+372    	; 0x22ae <DataTransferMode+0x44c>
			TM_WriteMemory ( sIncomingCommand );
		#endif

		// _____________________________________________________________
		// WRITE BLOCKS
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    213a:	82 34       	cpi	r24, 0x42	; 66
    213c:	c1 f7       	brne	.-16     	; 0x212e <DataTransferMode+0x2cc>
    213e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2140:	8c 34       	cpi	r24, 0x4C	; 76
    2142:	a9 f7       	brne	.-22     	; 0x212e <DataTransferMode+0x2cc>
			 sIncomingCommand[2] == 'B' && sIncomingCommand[3] == 'L' )
			TM_WriteBlocks ( sIncomingCommand );
    2144:	c6 01       	movw	r24, r12
    2146:	0e 94 79 0b 	call	0x16f2	; 0x16f2 <TM_WriteBlocks>
    214a:	19 85       	ldd	r17, Y+9	; 0x09
    214c:	0d cf       	rjmp	.-486    	; 0x1f68 <DataTransferMode+0x106>
		#endif

		// _____________________________________________________________
		// READ MEMORY
		#ifdef  __ENABLE_READ_UART
		if ( sIncomingCommand[0] == 'R' && sIncomingCommand[1] == 'E' &&
    214e:	8a 85       	ldd	r24, Y+10	; 0x0a
    2150:	85 34       	cpi	r24, 0x45	; 69
    2152:	09 f0       	breq	.+2      	; 0x2156 <DataTransferMode+0x2f4>
    2154:	09 cf       	rjmp	.-494    	; 0x1f68 <DataTransferMode+0x106>
    2156:	8b 85       	ldd	r24, Y+11	; 0x0b
    2158:	81 34       	cpi	r24, 0x41	; 65
    215a:	09 f0       	breq	.+2      	; 0x215e <DataTransferMode+0x2fc>
    215c:	05 cf       	rjmp	.-502    	; 0x1f68 <DataTransferMode+0x106>
    215e:	8c 85       	ldd	r24, Y+12	; 0x0c
    2160:	84 34       	cpi	r24, 0x44	; 68
    2162:	09 f0       	breq	.+2      	; 0x2166 <DataTransferMode+0x304>
    2164:	01 cf       	rjmp	.-510    	; 0x1f68 <DataTransferMode+0x106>
			 sIncomingCommand[2] == 'A' && sIncomingCommand[3] == 'D' )
			TM_ReadMemory ( sIncomingCommand );
    2166:	c6 01       	movw	r24, r12
    2168:	0e 94 ce 0d 	call	0x1b9c	; 0x1b9c <TM_ReadMemory>
    216c:	89 85       	ldd	r24, Y+9	; 0x09
    216e:	18 2f       	mov	r17, r24
    2170:	f8 ce       	rjmp	.-528    	; 0x1f62 <DataTransferMode+0x100>
// File System - Show Parameters
void TM_ShowParameters ( void )
{
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "CDEP:%03d;"		//color depth
    2172:	ad b7       	in	r26, 0x3d	; 61
    2174:	be b7       	in	r27, 0x3e	; 62
    2176:	18 97       	sbiw	r26, 0x08	; 8
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	be bf       	out	0x3e, r27	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	ad bf       	out	0x3d, r26	; 61
    2182:	ed b7       	in	r30, 0x3d	; 61
    2184:	fe b7       	in	r31, 0x3e	; 62
    2186:	31 96       	adiw	r30, 0x01	; 1
    2188:	12 96       	adiw	r26, 0x02	; 2
    218a:	bc 92       	st	X, r11
    218c:	ae 92       	st	-X, r10
    218e:	11 97       	sbiw	r26, 0x01	; 1
    2190:	21 e6       	ldi	r18, 0x61	; 97
    2192:	34 e0       	ldi	r19, 0x04	; 4
    2194:	33 83       	std	Z+3, r19	; 0x03
    2196:	22 83       	std	Z+2, r18	; 0x02
    2198:	89 e1       	ldi	r24, 0x19	; 25
    219a:	90 e0       	ldi	r25, 0x00	; 0
    219c:	95 83       	std	Z+5, r25	; 0x05
    219e:	84 83       	std	Z+4, r24	; 0x04
    21a0:	88 ec       	ldi	r24, 0xC8	; 200
    21a2:	90 e0       	ldi	r25, 0x00	; 0
    21a4:	97 83       	std	Z+7, r25	; 0x07
    21a6:	86 83       	std	Z+6, r24	; 0x06
    21a8:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
							"ANG:%03d;\r\n", 		//angular res
							ANIBIKE_COLOR_DEPTH,
							ANGULAR_RESOLUTION );
	USARTWriteString ( sRespondData );
    21ac:	8d b7       	in	r24, 0x3d	; 61
    21ae:	9e b7       	in	r25, 0x3e	; 62
    21b0:	08 96       	adiw	r24, 0x08	; 8
    21b2:	0f b6       	in	r0, 0x3f	; 63
    21b4:	f8 94       	cli
    21b6:	9e bf       	out	0x3e, r25	; 62
    21b8:	0f be       	out	0x3f, r0	; 63
    21ba:	8d bf       	out	0x3d, r24	; 61
    21bc:	c5 01       	movw	r24, r10
    21be:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    21c2:	ca ce       	rjmp	.-620    	; 0x1f58 <DataTransferMode+0xf6>
void TM_Identify ( void )
{
	char ManID, DevID1, DevID2, ExData;
	char sRespondData[UART_RESPOND_MAX_LENGTH];

	sprintf ( sRespondData, "ANIBIKE VER:%03d.00;"	// The project
    21c4:	8d b7       	in	r24, 0x3d	; 61
    21c6:	9e b7       	in	r25, 0x3e	; 62
    21c8:	0e 97       	sbiw	r24, 0x0e	; 14
    21ca:	0f b6       	in	r0, 0x3f	; 63
    21cc:	f8 94       	cli
    21ce:	9e bf       	out	0x3e, r25	; 62
    21d0:	0f be       	out	0x3f, r0	; 63
    21d2:	8d bf       	out	0x3d, r24	; 61
    21d4:	ed b7       	in	r30, 0x3d	; 61
    21d6:	fe b7       	in	r31, 0x3e	; 62
    21d8:	31 96       	adiw	r30, 0x01	; 1
    21da:	ad b7       	in	r26, 0x3d	; 61
    21dc:	be b7       	in	r27, 0x3e	; 62
    21de:	12 96       	adiw	r26, 0x02	; 2
    21e0:	bc 92       	st	X, r11
    21e2:	ae 92       	st	-X, r10
    21e4:	11 97       	sbiw	r26, 0x01	; 1
    21e6:	73 82       	std	Z+3, r7	; 0x03
    21e8:	62 82       	std	Z+2, r6	; 0x02
    21ea:	82 e0       	ldi	r24, 0x02	; 2
    21ec:	90 e0       	ldi	r25, 0x00	; 0
    21ee:	95 83       	std	Z+5, r25	; 0x05
    21f0:	84 83       	std	Z+4, r24	; 0x04
    21f2:	20 e2       	ldi	r18, 0x20	; 32
    21f4:	30 e0       	ldi	r19, 0x00	; 0
    21f6:	37 83       	std	Z+7, r19	; 0x07
    21f8:	26 83       	std	Z+6, r18	; 0x06
    21fa:	84 ec       	ldi	r24, 0xC4	; 196
    21fc:	90 e0       	ldi	r25, 0x00	; 0
    21fe:	91 87       	std	Z+9, r25	; 0x09
    2200:	80 87       	std	Z+8, r24	; 0x08
    2202:	33 87       	std	Z+11, r19	; 0x0b
    2204:	22 87       	std	Z+10, r18	; 0x0a
    2206:	81 e0       	ldi	r24, 0x01	; 1
    2208:	90 e0       	ldi	r25, 0x00	; 0
    220a:	95 87       	std	Z+13, r25	; 0x0d
    220c:	84 87       	std	Z+12, r24	; 0x0c
    220e:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
							ANIBIKE_VER,
							ANIBIKE_MEMORY_SIZE,
							ANIBIKE_CPU_SPEED,
							ANIBIKE_NUM_LEDS,
							ANIBIKE_IS_RGB );
	USARTWriteString ( sRespondData );
    2212:	2d b7       	in	r18, 0x3d	; 61
    2214:	3e b7       	in	r19, 0x3e	; 62
    2216:	22 5f       	subi	r18, 0xF2	; 242
    2218:	3f 4f       	sbci	r19, 0xFF	; 255
    221a:	0f b6       	in	r0, 0x3f	; 63
    221c:	f8 94       	cli
    221e:	3e bf       	out	0x3e, r19	; 62
    2220:	0f be       	out	0x3f, r0	; 63
    2222:	2d bf       	out	0x3d, r18	; 61
    2224:	c5 01       	movw	r24, r10
    2226:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>

	USARTWriteString ( (char*)"\r\n\r\nDataflash information:\r\n" );
    222a:	8b e4       	ldi	r24, 0x4B	; 75
    222c:	95 e0       	ldi	r25, 0x05	; 5
    222e:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	dataflash_spi_idn ( &ManID, &DevID1, &DevID2, &ExData );
    2232:	ce 01       	movw	r24, r28
    2234:	01 96       	adiw	r24, 0x01	; 1
    2236:	b2 01       	movw	r22, r4
    2238:	a1 01       	movw	r20, r2
    223a:	9e 01       	movw	r18, r28
    223c:	2c 5f       	subi	r18, 0xFC	; 252
    223e:	3f 4f       	sbci	r19, 0xFF	; 255
    2240:	0e 94 ce 03 	call	0x79c	; 0x79c <dataflash_spi_idn>

	sprintf ( sRespondData, "ManID = 0x%x; DevID1 = 0x%x; DevID2 = 0x%x; ExData = 0x%x\r\n",
    2244:	8d b7       	in	r24, 0x3d	; 61
    2246:	9e b7       	in	r25, 0x3e	; 62
    2248:	0c 97       	sbiw	r24, 0x0c	; 12
    224a:	0f b6       	in	r0, 0x3f	; 63
    224c:	f8 94       	cli
    224e:	9e bf       	out	0x3e, r25	; 62
    2250:	0f be       	out	0x3f, r0	; 63
    2252:	8d bf       	out	0x3d, r24	; 61
    2254:	ed b7       	in	r30, 0x3d	; 61
    2256:	fe b7       	in	r31, 0x3e	; 62
    2258:	31 96       	adiw	r30, 0x01	; 1
    225a:	ad b7       	in	r26, 0x3d	; 61
    225c:	be b7       	in	r27, 0x3e	; 62
    225e:	12 96       	adiw	r26, 0x02	; 2
    2260:	bc 92       	st	X, r11
    2262:	ae 92       	st	-X, r10
    2264:	11 97       	sbiw	r26, 0x01	; 1
    2266:	28 e6       	ldi	r18, 0x68	; 104
    2268:	35 e0       	ldi	r19, 0x05	; 5
    226a:	33 83       	std	Z+3, r19	; 0x03
    226c:	22 83       	std	Z+2, r18	; 0x02
    226e:	89 81       	ldd	r24, Y+1	; 0x01
    2270:	84 83       	std	Z+4, r24	; 0x04
    2272:	15 82       	std	Z+5, r1	; 0x05
    2274:	8a 81       	ldd	r24, Y+2	; 0x02
    2276:	86 83       	std	Z+6, r24	; 0x06
    2278:	17 82       	std	Z+7, r1	; 0x07
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	80 87       	std	Z+8, r24	; 0x08
    227e:	11 86       	std	Z+9, r1	; 0x09
    2280:	8c 81       	ldd	r24, Y+4	; 0x04
    2282:	82 87       	std	Z+10, r24	; 0x0a
    2284:	13 86       	std	Z+11, r1	; 0x0b
    2286:	0e 94 0f 12 	call	0x241e	; 0x241e <sprintf>
					ManID, DevID1, DevID2, ExData );
	USARTWriteString ( sRespondData );
    228a:	8d b7       	in	r24, 0x3d	; 61
    228c:	9e b7       	in	r25, 0x3e	; 62
    228e:	0c 96       	adiw	r24, 0x0c	; 12
    2290:	0f b6       	in	r0, 0x3f	; 63
    2292:	f8 94       	cli
    2294:	9e bf       	out	0x3e, r25	; 62
    2296:	0f be       	out	0x3f, r0	; 63
    2298:	8d bf       	out	0x3d, r24	; 61
    229a:	c5 01       	movw	r24, r10
    229c:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
	USARTWriteString ( (char*)"\r\n" );
    22a0:	8b e9       	ldi	r24, 0x9B	; 155
    22a2:	92 e0       	ldi	r25, 0x02	; 2
    22a4:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    22a8:	4f ce       	rjmp	.-866    	; 0x1f48 <DataTransferMode+0xe6>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    22aa:	f4 01       	movw	r30, r8
    22ac:	40 ce       	rjmp	.-896    	; 0x1f2e <DataTransferMode+0xcc>
		#endif
		
		#ifdef  __ENABLE_DIRECT_WRITE_UART		
		// _____________________________________________________________		
		// WRITE MEMORY
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    22ae:	8c 85       	ldd	r24, Y+12	; 0x0c
    22b0:	84 35       	cpi	r24, 0x54	; 84
    22b2:	09 f0       	breq	.+2      	; 0x22b6 <DataTransferMode+0x454>
    22b4:	3c cf       	rjmp	.-392    	; 0x212e <DataTransferMode+0x2cc>
			 sIncomingCommand[2] == 'I' && sIncomingCommand[3] == 'T' )
			TM_WriteMemory ( sIncomingCommand );
    22b6:	c6 01       	movw	r24, r12
    22b8:	0e 94 2d 0c 	call	0x185a	; 0x185a <TM_WriteMemory>
		#endif

		// _____________________________________________________________
		// WRITE BLOCKS
		if ( sIncomingCommand[0] == 'W' && sIncomingCommand[1] == 'R' &&
    22bc:	89 85       	ldd	r24, Y+9	; 0x09
    22be:	18 2f       	mov	r17, r24
    22c0:	87 35       	cpi	r24, 0x57	; 87
    22c2:	09 f0       	breq	.+2      	; 0x22c6 <DataTransferMode+0x464>
    22c4:	51 ce       	rjmp	.-862    	; 0x1f68 <DataTransferMode+0x106>
    22c6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22c8:	82 35       	cpi	r24, 0x52	; 82
    22ca:	09 f0       	breq	.+2      	; 0x22ce <DataTransferMode+0x46c>
    22cc:	30 cf       	rjmp	.-416    	; 0x212e <DataTransferMode+0x2cc>
    22ce:	8b 85       	ldd	r24, Y+11	; 0x0b
    22d0:	34 cf       	rjmp	.-408    	; 0x213a <DataTransferMode+0x2d8>
			 sIncomingCommand[2] == 'O' && sIncomingCommand[3] == 'T')
			dataflash_protect_all ( );

		// _____________________________________________________________
		// Protect flash
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    22d2:	8c 85       	ldd	r24, Y+12	; 0x0c
    22d4:	82 35       	cpi	r24, 0x52	; 82
    22d6:	09 f0       	breq	.+2      	; 0x22da <DataTransferMode+0x478>
    22d8:	62 ce       	rjmp	.-828    	; 0x1f9e <DataTransferMode+0x13c>
			 sIncomingCommand[2] == 'E' && sIncomingCommand[3] == 'R')
			dataflash_erase_all ( );
    22da:	0e 94 4f 04 	call	0x89e	; 0x89e <dataflash_erase_all>


		// _____________________________________________________________
		// Show flash status
		if ( sIncomingCommand[0] == 'F' && sIncomingCommand[1] == 'L' &&
    22de:	89 85       	ldd	r24, Y+9	; 0x09
    22e0:	86 34       	cpi	r24, 0x46	; 70
    22e2:	09 f0       	breq	.+2      	; 0x22e6 <DataTransferMode+0x484>
    22e4:	5c ce       	rjmp	.-840    	; 0x1f9e <DataTransferMode+0x13c>
    22e6:	8a 85       	ldd	r24, Y+10	; 0x0a
    22e8:	8c 34       	cpi	r24, 0x4C	; 76
    22ea:	09 f0       	breq	.+2      	; 0x22ee <DataTransferMode+0x48c>
    22ec:	58 ce       	rjmp	.-848    	; 0x1f9e <DataTransferMode+0x13c>
    22ee:	8b 85       	ldd	r24, Y+11	; 0x0b
    22f0:	95 ce       	rjmp	.-726    	; 0x201c <DataTransferMode+0x1ba>
	// _____________________________________________________________
	// Fetch New Command
	iPlace = 0;
	data = toupper ( USARTReadChar() );
	USARTWriteChar ( data );
	while (data != ':' && iPlace != UART_COMMAND_MAX_LENGTH-1)
    22f2:	f6 01       	movw	r30, r12
    22f4:	1c ce       	rjmp	.-968    	; 0x1f2e <DataTransferMode+0xcc>

		sprintf(HexaRead, "\r\nRecieved 0x%x\r\n", data );
		USARTWriteString ( HexaRead );

	}
	else USARTWriteString ( (char*)"USAGE:   SPI [DATA_8BIT]\r\n" );
    22f6:	8d e9       	ldi	r24, 0x9D	; 157
    22f8:	94 e0       	ldi	r25, 0x04	; 4
    22fa:	0e 94 9d 11 	call	0x233a	; 0x233a <USARTWriteString>
    22fe:	19 85       	ldd	r17, Y+9	; 0x09
    2300:	46 ce       	rjmp	.-884    	; 0x1f8e <DataTransferMode+0x12c>

00002302 <USARTInit>:
// This function is used to initialize the USART
// at a given UBRR value
void USARTInit(uint16_t ubrr_value)
{
   // Set Directions
   DDRE &= 0b11111110;
    2302:	68 98       	cbi	0x0d, 0	; 13
   DDRE |= 0b00000010;
    2304:	69 9a       	sbi	0x0d, 1	; 13

   //Set Baud rate

   UBRR0L = (unsigned char)ubrr_value;
    2306:	80 93 c4 00 	sts	0x00C4, r24
   UBRR0H = (unsigned char)(ubrr_value>>8);
    230a:	90 93 c5 00 	sts	0x00C5, r25

   //Enable The receiver and transmitter
   UCSR0B=(1<<RXEN0)|(1<<TXEN0);
    230e:	88 e1       	ldi	r24, 0x18	; 24
    2310:	80 93 c1 00 	sts	0x00C1, r24
   >> Asynchronous mode
   >> No Parity
   >> 1 StopBit
   >> char size 8
   */
   UCSR0C=/*(1<<UMSEL0)|*/(3<<UCSZ00);
    2314:	86 e0       	ldi	r24, 0x06	; 6
    2316:	80 93 c2 00 	sts	0x00C2, r24



}
    231a:	08 95       	ret

0000231c <USARTReadChar>:
// available.
char USARTReadChar()
{
   //Wait untill a data is available

   while(!(UCSR0A & (1<<RXC0)))
    231c:	80 91 c0 00 	lds	r24, 0x00C0
    2320:	87 ff       	sbrs	r24, 7
    2322:	fc cf       	rjmp	.-8      	; 0x231c <USARTReadChar>
      //Do nothing
   }

   //Now USART has got data from host
   //and is available is buffer
   return UDR0;
    2324:	80 91 c6 00 	lds	r24, 0x00C6
}
    2328:	08 95       	ret

0000232a <USARTWriteChar>:

//__________________________________________________________________________________________________
// This fuction writes the given "data" to
// the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
    232a:	98 2f       	mov	r25, r24
   //Wait untill the transmitter is ready
   while(!(UCSR0A & (1<<UDRE0)))
    232c:	80 91 c0 00 	lds	r24, 0x00C0
    2330:	85 ff       	sbrs	r24, 5
    2332:	fc cf       	rjmp	.-8      	; 0x232c <USARTWriteChar+0x2>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR0=data;
    2334:	90 93 c6 00 	sts	0x00C6, r25
}
    2338:	08 95       	ret

0000233a <USARTWriteString>:

//__________________________________________________________________________________________________
void USARTWriteString ( char* st )
{
    233a:	fc 01       	movw	r30, r24
	int i=0;
	while (st[i]!='\0')
    233c:	90 81       	ld	r25, Z
    233e:	99 23       	and	r25, r25
    2340:	51 f0       	breq	.+20     	; 0x2356 <USARTWriteString+0x1c>
// This fuction writes the given "data" to
// the USART which then transmit it via TX line
void USARTWriteChar(char data)
{
   //Wait untill the transmitter is ready
   while(!(UCSR0A & (1<<UDRE0)))
    2342:	80 91 c0 00 	lds	r24, 0x00C0
    2346:	85 ff       	sbrs	r24, 5
    2348:	fc cf       	rjmp	.-8      	; 0x2342 <USARTWriteString+0x8>
      //Do nothing
   }

   //Now write the data to USART buffer

   UDR0=data;
    234a:	90 93 c6 00 	sts	0x00C6, r25

//__________________________________________________________________________________________________
void USARTWriteString ( char* st )
{
	int i=0;
	while (st[i]!='\0')
    234e:	91 81       	ldd	r25, Z+1	; 0x01
    2350:	31 96       	adiw	r30, 0x01	; 1
    2352:	99 23       	and	r25, r25
    2354:	b1 f7       	brne	.-20     	; 0x2342 <USARTWriteString+0x8>
    2356:	08 95       	ret

00002358 <atoi>:
    2358:	fc 01       	movw	r30, r24
    235a:	88 27       	eor	r24, r24
    235c:	99 27       	eor	r25, r25
    235e:	e8 94       	clt
    2360:	21 91       	ld	r18, Z+
    2362:	20 32       	cpi	r18, 0x20	; 32
    2364:	e9 f3       	breq	.-6      	; 0x2360 <atoi+0x8>
    2366:	29 30       	cpi	r18, 0x09	; 9
    2368:	10 f0       	brcs	.+4      	; 0x236e <atoi+0x16>
    236a:	2e 30       	cpi	r18, 0x0E	; 14
    236c:	c8 f3       	brcs	.-14     	; 0x2360 <atoi+0x8>
    236e:	2b 32       	cpi	r18, 0x2B	; 43
    2370:	41 f0       	breq	.+16     	; 0x2382 <atoi+0x2a>
    2372:	2d 32       	cpi	r18, 0x2D	; 45
    2374:	39 f4       	brne	.+14     	; 0x2384 <atoi+0x2c>
    2376:	68 94       	set
    2378:	04 c0       	rjmp	.+8      	; 0x2382 <atoi+0x2a>
    237a:	0e 94 07 12 	call	0x240e	; 0x240e <__mulhi_const_10>
    237e:	82 0f       	add	r24, r18
    2380:	91 1d       	adc	r25, r1
    2382:	21 91       	ld	r18, Z+
    2384:	20 53       	subi	r18, 0x30	; 48
    2386:	2a 30       	cpi	r18, 0x0A	; 10
    2388:	c0 f3       	brcs	.-16     	; 0x237a <atoi+0x22>
    238a:	1e f4       	brtc	.+6      	; 0x2392 <atoi+0x3a>
    238c:	90 95       	com	r25
    238e:	81 95       	neg	r24
    2390:	9f 4f       	sbci	r25, 0xFF	; 255
    2392:	08 95       	ret

00002394 <toupper>:
    2394:	91 11       	cpse	r25, r1
    2396:	08 95       	ret
    2398:	81 56       	subi	r24, 0x61	; 97
    239a:	8a 51       	subi	r24, 0x1A	; 26
    239c:	08 f4       	brcc	.+2      	; 0x23a0 <toupper+0xc>
    239e:	80 52       	subi	r24, 0x20	; 32
    23a0:	85 58       	subi	r24, 0x85	; 133
    23a2:	08 95       	ret

000023a4 <strtok>:
    23a4:	4f e1       	ldi	r20, 0x1F	; 31
    23a6:	56 e0       	ldi	r21, 0x06	; 6
    23a8:	0e 94 e0 11 	call	0x23c0	; 0x23c0 <strtok_r>
    23ac:	08 95       	ret

000023ae <strcmp>:
    23ae:	fb 01       	movw	r30, r22
    23b0:	dc 01       	movw	r26, r24
    23b2:	8d 91       	ld	r24, X+
    23b4:	01 90       	ld	r0, Z+
    23b6:	80 19       	sub	r24, r0
    23b8:	01 10       	cpse	r0, r1
    23ba:	d9 f3       	breq	.-10     	; 0x23b2 <strcmp+0x4>
    23bc:	99 0b       	sbc	r25, r25
    23be:	08 95       	ret

000023c0 <strtok_r>:
    23c0:	fa 01       	movw	r30, r20
    23c2:	a1 91       	ld	r26, Z+
    23c4:	b0 81       	ld	r27, Z
    23c6:	00 97       	sbiw	r24, 0x00	; 0
    23c8:	19 f4       	brne	.+6      	; 0x23d0 <strtok_r+0x10>
    23ca:	10 97       	sbiw	r26, 0x00	; 0
    23cc:	e1 f0       	breq	.+56     	; 0x2406 <strtok_r+0x46>
    23ce:	cd 01       	movw	r24, r26
    23d0:	dc 01       	movw	r26, r24
    23d2:	cd 01       	movw	r24, r26
    23d4:	0d 90       	ld	r0, X+
    23d6:	00 20       	and	r0, r0
    23d8:	11 f4       	brne	.+4      	; 0x23de <strtok_r+0x1e>
    23da:	c0 01       	movw	r24, r0
    23dc:	13 c0       	rjmp	.+38     	; 0x2404 <strtok_r+0x44>
    23de:	fb 01       	movw	r30, r22
    23e0:	21 91       	ld	r18, Z+
    23e2:	22 23       	and	r18, r18
    23e4:	19 f0       	breq	.+6      	; 0x23ec <strtok_r+0x2c>
    23e6:	20 15       	cp	r18, r0
    23e8:	d9 f7       	brne	.-10     	; 0x23e0 <strtok_r+0x20>
    23ea:	f3 cf       	rjmp	.-26     	; 0x23d2 <strtok_r+0x12>
    23ec:	fb 01       	movw	r30, r22
    23ee:	21 91       	ld	r18, Z+
    23f0:	20 15       	cp	r18, r0
    23f2:	19 f4       	brne	.+6      	; 0x23fa <strtok_r+0x3a>
    23f4:	1e 92       	st	-X, r1
    23f6:	11 96       	adiw	r26, 0x01	; 1
    23f8:	06 c0       	rjmp	.+12     	; 0x2406 <strtok_r+0x46>
    23fa:	22 23       	and	r18, r18
    23fc:	c1 f7       	brne	.-16     	; 0x23ee <strtok_r+0x2e>
    23fe:	0d 90       	ld	r0, X+
    2400:	00 20       	and	r0, r0
    2402:	a1 f7       	brne	.-24     	; 0x23ec <strtok_r+0x2c>
    2404:	d0 01       	movw	r26, r0
    2406:	fa 01       	movw	r30, r20
    2408:	a1 93       	st	Z+, r26
    240a:	b0 83       	st	Z, r27
    240c:	08 95       	ret

0000240e <__mulhi_const_10>:
    240e:	7a e0       	ldi	r23, 0x0A	; 10
    2410:	97 9f       	mul	r25, r23
    2412:	90 2d       	mov	r25, r0
    2414:	87 9f       	mul	r24, r23
    2416:	80 2d       	mov	r24, r0
    2418:	91 0d       	add	r25, r1
    241a:	11 24       	eor	r1, r1
    241c:	08 95       	ret

0000241e <sprintf>:
    241e:	ae e0       	ldi	r26, 0x0E	; 14
    2420:	b0 e0       	ldi	r27, 0x00	; 0
    2422:	e5 e1       	ldi	r30, 0x15	; 21
    2424:	f2 e1       	ldi	r31, 0x12	; 18
    2426:	0c 94 be 14 	jmp	0x297c	; 0x297c <__prologue_saves__+0x1c>
    242a:	0d 89       	ldd	r16, Y+21	; 0x15
    242c:	1e 89       	ldd	r17, Y+22	; 0x16
    242e:	86 e0       	ldi	r24, 0x06	; 6
    2430:	8c 83       	std	Y+4, r24	; 0x04
    2432:	1a 83       	std	Y+2, r17	; 0x02
    2434:	09 83       	std	Y+1, r16	; 0x01
    2436:	8f ef       	ldi	r24, 0xFF	; 255
    2438:	9f e7       	ldi	r25, 0x7F	; 127
    243a:	9e 83       	std	Y+6, r25	; 0x06
    243c:	8d 83       	std	Y+5, r24	; 0x05
    243e:	9e 01       	movw	r18, r28
    2440:	27 5e       	subi	r18, 0xE7	; 231
    2442:	3f 4f       	sbci	r19, 0xFF	; 255
    2444:	ce 01       	movw	r24, r28
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	6f 89       	ldd	r22, Y+23	; 0x17
    244a:	78 8d       	ldd	r23, Y+24	; 0x18
    244c:	a9 01       	movw	r20, r18
    244e:	0e 94 33 12 	call	0x2466	; 0x2466 <vfprintf>
    2452:	2f 81       	ldd	r18, Y+7	; 0x07
    2454:	38 85       	ldd	r19, Y+8	; 0x08
    2456:	02 0f       	add	r16, r18
    2458:	13 1f       	adc	r17, r19
    245a:	f8 01       	movw	r30, r16
    245c:	10 82       	st	Z, r1
    245e:	2e 96       	adiw	r28, 0x0e	; 14
    2460:	e4 e0       	ldi	r30, 0x04	; 4
    2462:	0c 94 da 14 	jmp	0x29b4	; 0x29b4 <__epilogue_restores__+0x1c>

00002466 <vfprintf>:
    2466:	ab e0       	ldi	r26, 0x0B	; 11
    2468:	b0 e0       	ldi	r27, 0x00	; 0
    246a:	e9 e3       	ldi	r30, 0x39	; 57
    246c:	f2 e1       	ldi	r31, 0x12	; 18
    246e:	0c 94 b0 14 	jmp	0x2960	; 0x2960 <__prologue_saves__>
    2472:	3c 01       	movw	r6, r24
    2474:	2b 01       	movw	r4, r22
    2476:	5a 01       	movw	r10, r20
    2478:	fc 01       	movw	r30, r24
    247a:	17 82       	std	Z+7, r1	; 0x07
    247c:	16 82       	std	Z+6, r1	; 0x06
    247e:	83 81       	ldd	r24, Z+3	; 0x03
    2480:	81 fd       	sbrc	r24, 1
    2482:	03 c0       	rjmp	.+6      	; 0x248a <vfprintf+0x24>
    2484:	6f ef       	ldi	r22, 0xFF	; 255
    2486:	7f ef       	ldi	r23, 0xFF	; 255
    2488:	c6 c1       	rjmp	.+908    	; 0x2816 <vfprintf+0x3b0>
    248a:	9a e0       	ldi	r25, 0x0A	; 10
    248c:	89 2e       	mov	r8, r25
    248e:	1e 01       	movw	r2, r28
    2490:	08 94       	sec
    2492:	21 1c       	adc	r2, r1
    2494:	31 1c       	adc	r3, r1
    2496:	f3 01       	movw	r30, r6
    2498:	23 81       	ldd	r18, Z+3	; 0x03
    249a:	f2 01       	movw	r30, r4
    249c:	23 fd       	sbrc	r18, 3
    249e:	85 91       	lpm	r24, Z+
    24a0:	23 ff       	sbrs	r18, 3
    24a2:	81 91       	ld	r24, Z+
    24a4:	2f 01       	movw	r4, r30
    24a6:	88 23       	and	r24, r24
    24a8:	09 f4       	brne	.+2      	; 0x24ac <vfprintf+0x46>
    24aa:	b2 c1       	rjmp	.+868    	; 0x2810 <vfprintf+0x3aa>
    24ac:	85 32       	cpi	r24, 0x25	; 37
    24ae:	39 f4       	brne	.+14     	; 0x24be <vfprintf+0x58>
    24b0:	23 fd       	sbrc	r18, 3
    24b2:	85 91       	lpm	r24, Z+
    24b4:	23 ff       	sbrs	r18, 3
    24b6:	81 91       	ld	r24, Z+
    24b8:	2f 01       	movw	r4, r30
    24ba:	85 32       	cpi	r24, 0x25	; 37
    24bc:	29 f4       	brne	.+10     	; 0x24c8 <vfprintf+0x62>
    24be:	90 e0       	ldi	r25, 0x00	; 0
    24c0:	b3 01       	movw	r22, r6
    24c2:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    24c6:	e7 cf       	rjmp	.-50     	; 0x2496 <vfprintf+0x30>
    24c8:	98 2f       	mov	r25, r24
    24ca:	ff 24       	eor	r15, r15
    24cc:	ee 24       	eor	r14, r14
    24ce:	99 24       	eor	r9, r9
    24d0:	ff e1       	ldi	r31, 0x1F	; 31
    24d2:	ff 15       	cp	r31, r15
    24d4:	d0 f0       	brcs	.+52     	; 0x250a <vfprintf+0xa4>
    24d6:	9b 32       	cpi	r25, 0x2B	; 43
    24d8:	69 f0       	breq	.+26     	; 0x24f4 <vfprintf+0x8e>
    24da:	9c 32       	cpi	r25, 0x2C	; 44
    24dc:	28 f4       	brcc	.+10     	; 0x24e8 <vfprintf+0x82>
    24de:	90 32       	cpi	r25, 0x20	; 32
    24e0:	59 f0       	breq	.+22     	; 0x24f8 <vfprintf+0x92>
    24e2:	93 32       	cpi	r25, 0x23	; 35
    24e4:	91 f4       	brne	.+36     	; 0x250a <vfprintf+0xa4>
    24e6:	0e c0       	rjmp	.+28     	; 0x2504 <vfprintf+0x9e>
    24e8:	9d 32       	cpi	r25, 0x2D	; 45
    24ea:	49 f0       	breq	.+18     	; 0x24fe <vfprintf+0x98>
    24ec:	90 33       	cpi	r25, 0x30	; 48
    24ee:	69 f4       	brne	.+26     	; 0x250a <vfprintf+0xa4>
    24f0:	41 e0       	ldi	r20, 0x01	; 1
    24f2:	24 c0       	rjmp	.+72     	; 0x253c <vfprintf+0xd6>
    24f4:	52 e0       	ldi	r21, 0x02	; 2
    24f6:	f5 2a       	or	r15, r21
    24f8:	84 e0       	ldi	r24, 0x04	; 4
    24fa:	f8 2a       	or	r15, r24
    24fc:	28 c0       	rjmp	.+80     	; 0x254e <vfprintf+0xe8>
    24fe:	98 e0       	ldi	r25, 0x08	; 8
    2500:	f9 2a       	or	r15, r25
    2502:	25 c0       	rjmp	.+74     	; 0x254e <vfprintf+0xe8>
    2504:	e0 e1       	ldi	r30, 0x10	; 16
    2506:	fe 2a       	or	r15, r30
    2508:	22 c0       	rjmp	.+68     	; 0x254e <vfprintf+0xe8>
    250a:	f7 fc       	sbrc	r15, 7
    250c:	29 c0       	rjmp	.+82     	; 0x2560 <vfprintf+0xfa>
    250e:	89 2f       	mov	r24, r25
    2510:	80 53       	subi	r24, 0x30	; 48
    2512:	8a 30       	cpi	r24, 0x0A	; 10
    2514:	70 f4       	brcc	.+28     	; 0x2532 <vfprintf+0xcc>
    2516:	f6 fe       	sbrs	r15, 6
    2518:	05 c0       	rjmp	.+10     	; 0x2524 <vfprintf+0xbe>
    251a:	98 9c       	mul	r9, r8
    251c:	90 2c       	mov	r9, r0
    251e:	11 24       	eor	r1, r1
    2520:	98 0e       	add	r9, r24
    2522:	15 c0       	rjmp	.+42     	; 0x254e <vfprintf+0xe8>
    2524:	e8 9c       	mul	r14, r8
    2526:	e0 2c       	mov	r14, r0
    2528:	11 24       	eor	r1, r1
    252a:	e8 0e       	add	r14, r24
    252c:	f0 e2       	ldi	r31, 0x20	; 32
    252e:	ff 2a       	or	r15, r31
    2530:	0e c0       	rjmp	.+28     	; 0x254e <vfprintf+0xe8>
    2532:	9e 32       	cpi	r25, 0x2E	; 46
    2534:	29 f4       	brne	.+10     	; 0x2540 <vfprintf+0xda>
    2536:	f6 fc       	sbrc	r15, 6
    2538:	6b c1       	rjmp	.+726    	; 0x2810 <vfprintf+0x3aa>
    253a:	40 e4       	ldi	r20, 0x40	; 64
    253c:	f4 2a       	or	r15, r20
    253e:	07 c0       	rjmp	.+14     	; 0x254e <vfprintf+0xe8>
    2540:	9c 36       	cpi	r25, 0x6C	; 108
    2542:	19 f4       	brne	.+6      	; 0x254a <vfprintf+0xe4>
    2544:	50 e8       	ldi	r21, 0x80	; 128
    2546:	f5 2a       	or	r15, r21
    2548:	02 c0       	rjmp	.+4      	; 0x254e <vfprintf+0xe8>
    254a:	98 36       	cpi	r25, 0x68	; 104
    254c:	49 f4       	brne	.+18     	; 0x2560 <vfprintf+0xfa>
    254e:	f2 01       	movw	r30, r4
    2550:	23 fd       	sbrc	r18, 3
    2552:	95 91       	lpm	r25, Z+
    2554:	23 ff       	sbrs	r18, 3
    2556:	91 91       	ld	r25, Z+
    2558:	2f 01       	movw	r4, r30
    255a:	99 23       	and	r25, r25
    255c:	09 f0       	breq	.+2      	; 0x2560 <vfprintf+0xfa>
    255e:	b8 cf       	rjmp	.-144    	; 0x24d0 <vfprintf+0x6a>
    2560:	89 2f       	mov	r24, r25
    2562:	85 54       	subi	r24, 0x45	; 69
    2564:	83 30       	cpi	r24, 0x03	; 3
    2566:	18 f0       	brcs	.+6      	; 0x256e <vfprintf+0x108>
    2568:	80 52       	subi	r24, 0x20	; 32
    256a:	83 30       	cpi	r24, 0x03	; 3
    256c:	38 f4       	brcc	.+14     	; 0x257c <vfprintf+0x116>
    256e:	44 e0       	ldi	r20, 0x04	; 4
    2570:	50 e0       	ldi	r21, 0x00	; 0
    2572:	a4 0e       	add	r10, r20
    2574:	b5 1e       	adc	r11, r21
    2576:	5f e3       	ldi	r21, 0x3F	; 63
    2578:	59 83       	std	Y+1, r21	; 0x01
    257a:	0f c0       	rjmp	.+30     	; 0x259a <vfprintf+0x134>
    257c:	93 36       	cpi	r25, 0x63	; 99
    257e:	31 f0       	breq	.+12     	; 0x258c <vfprintf+0x126>
    2580:	93 37       	cpi	r25, 0x73	; 115
    2582:	79 f0       	breq	.+30     	; 0x25a2 <vfprintf+0x13c>
    2584:	93 35       	cpi	r25, 0x53	; 83
    2586:	09 f0       	breq	.+2      	; 0x258a <vfprintf+0x124>
    2588:	56 c0       	rjmp	.+172    	; 0x2636 <vfprintf+0x1d0>
    258a:	20 c0       	rjmp	.+64     	; 0x25cc <vfprintf+0x166>
    258c:	f5 01       	movw	r30, r10
    258e:	80 81       	ld	r24, Z
    2590:	89 83       	std	Y+1, r24	; 0x01
    2592:	42 e0       	ldi	r20, 0x02	; 2
    2594:	50 e0       	ldi	r21, 0x00	; 0
    2596:	a4 0e       	add	r10, r20
    2598:	b5 1e       	adc	r11, r21
    259a:	61 01       	movw	r12, r2
    259c:	01 e0       	ldi	r16, 0x01	; 1
    259e:	10 e0       	ldi	r17, 0x00	; 0
    25a0:	12 c0       	rjmp	.+36     	; 0x25c6 <vfprintf+0x160>
    25a2:	f5 01       	movw	r30, r10
    25a4:	c0 80       	ld	r12, Z
    25a6:	d1 80       	ldd	r13, Z+1	; 0x01
    25a8:	f6 fc       	sbrc	r15, 6
    25aa:	03 c0       	rjmp	.+6      	; 0x25b2 <vfprintf+0x14c>
    25ac:	6f ef       	ldi	r22, 0xFF	; 255
    25ae:	7f ef       	ldi	r23, 0xFF	; 255
    25b0:	02 c0       	rjmp	.+4      	; 0x25b6 <vfprintf+0x150>
    25b2:	69 2d       	mov	r22, r9
    25b4:	70 e0       	ldi	r23, 0x00	; 0
    25b6:	42 e0       	ldi	r20, 0x02	; 2
    25b8:	50 e0       	ldi	r21, 0x00	; 0
    25ba:	a4 0e       	add	r10, r20
    25bc:	b5 1e       	adc	r11, r21
    25be:	c6 01       	movw	r24, r12
    25c0:	0e 94 1b 14 	call	0x2836	; 0x2836 <strnlen>
    25c4:	8c 01       	movw	r16, r24
    25c6:	5f e7       	ldi	r21, 0x7F	; 127
    25c8:	f5 22       	and	r15, r21
    25ca:	14 c0       	rjmp	.+40     	; 0x25f4 <vfprintf+0x18e>
    25cc:	f5 01       	movw	r30, r10
    25ce:	c0 80       	ld	r12, Z
    25d0:	d1 80       	ldd	r13, Z+1	; 0x01
    25d2:	f6 fc       	sbrc	r15, 6
    25d4:	03 c0       	rjmp	.+6      	; 0x25dc <vfprintf+0x176>
    25d6:	6f ef       	ldi	r22, 0xFF	; 255
    25d8:	7f ef       	ldi	r23, 0xFF	; 255
    25da:	02 c0       	rjmp	.+4      	; 0x25e0 <vfprintf+0x17a>
    25dc:	69 2d       	mov	r22, r9
    25de:	70 e0       	ldi	r23, 0x00	; 0
    25e0:	42 e0       	ldi	r20, 0x02	; 2
    25e2:	50 e0       	ldi	r21, 0x00	; 0
    25e4:	a4 0e       	add	r10, r20
    25e6:	b5 1e       	adc	r11, r21
    25e8:	c6 01       	movw	r24, r12
    25ea:	0e 94 10 14 	call	0x2820	; 0x2820 <strnlen_P>
    25ee:	8c 01       	movw	r16, r24
    25f0:	50 e8       	ldi	r21, 0x80	; 128
    25f2:	f5 2a       	or	r15, r21
    25f4:	f3 fe       	sbrs	r15, 3
    25f6:	07 c0       	rjmp	.+14     	; 0x2606 <vfprintf+0x1a0>
    25f8:	1a c0       	rjmp	.+52     	; 0x262e <vfprintf+0x1c8>
    25fa:	80 e2       	ldi	r24, 0x20	; 32
    25fc:	90 e0       	ldi	r25, 0x00	; 0
    25fe:	b3 01       	movw	r22, r6
    2600:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    2604:	ea 94       	dec	r14
    2606:	8e 2d       	mov	r24, r14
    2608:	90 e0       	ldi	r25, 0x00	; 0
    260a:	08 17       	cp	r16, r24
    260c:	19 07       	cpc	r17, r25
    260e:	a8 f3       	brcs	.-22     	; 0x25fa <vfprintf+0x194>
    2610:	0e c0       	rjmp	.+28     	; 0x262e <vfprintf+0x1c8>
    2612:	f6 01       	movw	r30, r12
    2614:	f7 fc       	sbrc	r15, 7
    2616:	85 91       	lpm	r24, Z+
    2618:	f7 fe       	sbrs	r15, 7
    261a:	81 91       	ld	r24, Z+
    261c:	6f 01       	movw	r12, r30
    261e:	90 e0       	ldi	r25, 0x00	; 0
    2620:	b3 01       	movw	r22, r6
    2622:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    2626:	e1 10       	cpse	r14, r1
    2628:	ea 94       	dec	r14
    262a:	01 50       	subi	r16, 0x01	; 1
    262c:	10 40       	sbci	r17, 0x00	; 0
    262e:	01 15       	cp	r16, r1
    2630:	11 05       	cpc	r17, r1
    2632:	79 f7       	brne	.-34     	; 0x2612 <vfprintf+0x1ac>
    2634:	ea c0       	rjmp	.+468    	; 0x280a <vfprintf+0x3a4>
    2636:	94 36       	cpi	r25, 0x64	; 100
    2638:	11 f0       	breq	.+4      	; 0x263e <vfprintf+0x1d8>
    263a:	99 36       	cpi	r25, 0x69	; 105
    263c:	69 f5       	brne	.+90     	; 0x2698 <vfprintf+0x232>
    263e:	f7 fe       	sbrs	r15, 7
    2640:	08 c0       	rjmp	.+16     	; 0x2652 <vfprintf+0x1ec>
    2642:	f5 01       	movw	r30, r10
    2644:	20 81       	ld	r18, Z
    2646:	31 81       	ldd	r19, Z+1	; 0x01
    2648:	42 81       	ldd	r20, Z+2	; 0x02
    264a:	53 81       	ldd	r21, Z+3	; 0x03
    264c:	84 e0       	ldi	r24, 0x04	; 4
    264e:	90 e0       	ldi	r25, 0x00	; 0
    2650:	0a c0       	rjmp	.+20     	; 0x2666 <vfprintf+0x200>
    2652:	f5 01       	movw	r30, r10
    2654:	80 81       	ld	r24, Z
    2656:	91 81       	ldd	r25, Z+1	; 0x01
    2658:	9c 01       	movw	r18, r24
    265a:	44 27       	eor	r20, r20
    265c:	37 fd       	sbrc	r19, 7
    265e:	40 95       	com	r20
    2660:	54 2f       	mov	r21, r20
    2662:	82 e0       	ldi	r24, 0x02	; 2
    2664:	90 e0       	ldi	r25, 0x00	; 0
    2666:	a8 0e       	add	r10, r24
    2668:	b9 1e       	adc	r11, r25
    266a:	9f e6       	ldi	r25, 0x6F	; 111
    266c:	f9 22       	and	r15, r25
    266e:	57 ff       	sbrs	r21, 7
    2670:	09 c0       	rjmp	.+18     	; 0x2684 <vfprintf+0x21e>
    2672:	50 95       	com	r21
    2674:	40 95       	com	r20
    2676:	30 95       	com	r19
    2678:	21 95       	neg	r18
    267a:	3f 4f       	sbci	r19, 0xFF	; 255
    267c:	4f 4f       	sbci	r20, 0xFF	; 255
    267e:	5f 4f       	sbci	r21, 0xFF	; 255
    2680:	e0 e8       	ldi	r30, 0x80	; 128
    2682:	fe 2a       	or	r15, r30
    2684:	ca 01       	movw	r24, r20
    2686:	b9 01       	movw	r22, r18
    2688:	a1 01       	movw	r20, r2
    268a:	2a e0       	ldi	r18, 0x0A	; 10
    268c:	30 e0       	ldi	r19, 0x00	; 0
    268e:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__ultoa_invert>
    2692:	d8 2e       	mov	r13, r24
    2694:	d2 18       	sub	r13, r2
    2696:	40 c0       	rjmp	.+128    	; 0x2718 <vfprintf+0x2b2>
    2698:	95 37       	cpi	r25, 0x75	; 117
    269a:	29 f4       	brne	.+10     	; 0x26a6 <vfprintf+0x240>
    269c:	1f 2d       	mov	r17, r15
    269e:	1f 7e       	andi	r17, 0xEF	; 239
    26a0:	2a e0       	ldi	r18, 0x0A	; 10
    26a2:	30 e0       	ldi	r19, 0x00	; 0
    26a4:	1d c0       	rjmp	.+58     	; 0x26e0 <vfprintf+0x27a>
    26a6:	1f 2d       	mov	r17, r15
    26a8:	19 7f       	andi	r17, 0xF9	; 249
    26aa:	9f 36       	cpi	r25, 0x6F	; 111
    26ac:	61 f0       	breq	.+24     	; 0x26c6 <vfprintf+0x260>
    26ae:	90 37       	cpi	r25, 0x70	; 112
    26b0:	20 f4       	brcc	.+8      	; 0x26ba <vfprintf+0x254>
    26b2:	98 35       	cpi	r25, 0x58	; 88
    26b4:	09 f0       	breq	.+2      	; 0x26b8 <vfprintf+0x252>
    26b6:	ac c0       	rjmp	.+344    	; 0x2810 <vfprintf+0x3aa>
    26b8:	0f c0       	rjmp	.+30     	; 0x26d8 <vfprintf+0x272>
    26ba:	90 37       	cpi	r25, 0x70	; 112
    26bc:	39 f0       	breq	.+14     	; 0x26cc <vfprintf+0x266>
    26be:	98 37       	cpi	r25, 0x78	; 120
    26c0:	09 f0       	breq	.+2      	; 0x26c4 <vfprintf+0x25e>
    26c2:	a6 c0       	rjmp	.+332    	; 0x2810 <vfprintf+0x3aa>
    26c4:	04 c0       	rjmp	.+8      	; 0x26ce <vfprintf+0x268>
    26c6:	28 e0       	ldi	r18, 0x08	; 8
    26c8:	30 e0       	ldi	r19, 0x00	; 0
    26ca:	0a c0       	rjmp	.+20     	; 0x26e0 <vfprintf+0x27a>
    26cc:	10 61       	ori	r17, 0x10	; 16
    26ce:	14 fd       	sbrc	r17, 4
    26d0:	14 60       	ori	r17, 0x04	; 4
    26d2:	20 e1       	ldi	r18, 0x10	; 16
    26d4:	30 e0       	ldi	r19, 0x00	; 0
    26d6:	04 c0       	rjmp	.+8      	; 0x26e0 <vfprintf+0x27a>
    26d8:	14 fd       	sbrc	r17, 4
    26da:	16 60       	ori	r17, 0x06	; 6
    26dc:	20 e1       	ldi	r18, 0x10	; 16
    26de:	32 e0       	ldi	r19, 0x02	; 2
    26e0:	17 ff       	sbrs	r17, 7
    26e2:	08 c0       	rjmp	.+16     	; 0x26f4 <vfprintf+0x28e>
    26e4:	f5 01       	movw	r30, r10
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	44 e0       	ldi	r20, 0x04	; 4
    26f0:	50 e0       	ldi	r21, 0x00	; 0
    26f2:	08 c0       	rjmp	.+16     	; 0x2704 <vfprintf+0x29e>
    26f4:	f5 01       	movw	r30, r10
    26f6:	80 81       	ld	r24, Z
    26f8:	91 81       	ldd	r25, Z+1	; 0x01
    26fa:	bc 01       	movw	r22, r24
    26fc:	80 e0       	ldi	r24, 0x00	; 0
    26fe:	90 e0       	ldi	r25, 0x00	; 0
    2700:	42 e0       	ldi	r20, 0x02	; 2
    2702:	50 e0       	ldi	r21, 0x00	; 0
    2704:	a4 0e       	add	r10, r20
    2706:	b5 1e       	adc	r11, r21
    2708:	a1 01       	movw	r20, r2
    270a:	0e 94 52 14 	call	0x28a4	; 0x28a4 <__ultoa_invert>
    270e:	d8 2e       	mov	r13, r24
    2710:	d2 18       	sub	r13, r2
    2712:	8f e7       	ldi	r24, 0x7F	; 127
    2714:	f8 2e       	mov	r15, r24
    2716:	f1 22       	and	r15, r17
    2718:	f6 fe       	sbrs	r15, 6
    271a:	0b c0       	rjmp	.+22     	; 0x2732 <vfprintf+0x2cc>
    271c:	5e ef       	ldi	r21, 0xFE	; 254
    271e:	f5 22       	and	r15, r21
    2720:	d9 14       	cp	r13, r9
    2722:	38 f4       	brcc	.+14     	; 0x2732 <vfprintf+0x2cc>
    2724:	f4 fe       	sbrs	r15, 4
    2726:	07 c0       	rjmp	.+14     	; 0x2736 <vfprintf+0x2d0>
    2728:	f2 fc       	sbrc	r15, 2
    272a:	05 c0       	rjmp	.+10     	; 0x2736 <vfprintf+0x2d0>
    272c:	8f ee       	ldi	r24, 0xEF	; 239
    272e:	f8 22       	and	r15, r24
    2730:	02 c0       	rjmp	.+4      	; 0x2736 <vfprintf+0x2d0>
    2732:	1d 2d       	mov	r17, r13
    2734:	01 c0       	rjmp	.+2      	; 0x2738 <vfprintf+0x2d2>
    2736:	19 2d       	mov	r17, r9
    2738:	f4 fe       	sbrs	r15, 4
    273a:	0d c0       	rjmp	.+26     	; 0x2756 <vfprintf+0x2f0>
    273c:	fe 01       	movw	r30, r28
    273e:	ed 0d       	add	r30, r13
    2740:	f1 1d       	adc	r31, r1
    2742:	80 81       	ld	r24, Z
    2744:	80 33       	cpi	r24, 0x30	; 48
    2746:	19 f4       	brne	.+6      	; 0x274e <vfprintf+0x2e8>
    2748:	99 ee       	ldi	r25, 0xE9	; 233
    274a:	f9 22       	and	r15, r25
    274c:	08 c0       	rjmp	.+16     	; 0x275e <vfprintf+0x2f8>
    274e:	1f 5f       	subi	r17, 0xFF	; 255
    2750:	f2 fe       	sbrs	r15, 2
    2752:	05 c0       	rjmp	.+10     	; 0x275e <vfprintf+0x2f8>
    2754:	03 c0       	rjmp	.+6      	; 0x275c <vfprintf+0x2f6>
    2756:	8f 2d       	mov	r24, r15
    2758:	86 78       	andi	r24, 0x86	; 134
    275a:	09 f0       	breq	.+2      	; 0x275e <vfprintf+0x2f8>
    275c:	1f 5f       	subi	r17, 0xFF	; 255
    275e:	0f 2d       	mov	r16, r15
    2760:	f3 fc       	sbrc	r15, 3
    2762:	14 c0       	rjmp	.+40     	; 0x278c <vfprintf+0x326>
    2764:	f0 fe       	sbrs	r15, 0
    2766:	0f c0       	rjmp	.+30     	; 0x2786 <vfprintf+0x320>
    2768:	1e 15       	cp	r17, r14
    276a:	10 f0       	brcs	.+4      	; 0x2770 <vfprintf+0x30a>
    276c:	9d 2c       	mov	r9, r13
    276e:	0b c0       	rjmp	.+22     	; 0x2786 <vfprintf+0x320>
    2770:	9d 2c       	mov	r9, r13
    2772:	9e 0c       	add	r9, r14
    2774:	91 1a       	sub	r9, r17
    2776:	1e 2d       	mov	r17, r14
    2778:	06 c0       	rjmp	.+12     	; 0x2786 <vfprintf+0x320>
    277a:	80 e2       	ldi	r24, 0x20	; 32
    277c:	90 e0       	ldi	r25, 0x00	; 0
    277e:	b3 01       	movw	r22, r6
    2780:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    2784:	1f 5f       	subi	r17, 0xFF	; 255
    2786:	1e 15       	cp	r17, r14
    2788:	c0 f3       	brcs	.-16     	; 0x277a <vfprintf+0x314>
    278a:	04 c0       	rjmp	.+8      	; 0x2794 <vfprintf+0x32e>
    278c:	1e 15       	cp	r17, r14
    278e:	10 f4       	brcc	.+4      	; 0x2794 <vfprintf+0x32e>
    2790:	e1 1a       	sub	r14, r17
    2792:	01 c0       	rjmp	.+2      	; 0x2796 <vfprintf+0x330>
    2794:	ee 24       	eor	r14, r14
    2796:	04 ff       	sbrs	r16, 4
    2798:	0f c0       	rjmp	.+30     	; 0x27b8 <vfprintf+0x352>
    279a:	80 e3       	ldi	r24, 0x30	; 48
    279c:	90 e0       	ldi	r25, 0x00	; 0
    279e:	b3 01       	movw	r22, r6
    27a0:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    27a4:	02 ff       	sbrs	r16, 2
    27a6:	1d c0       	rjmp	.+58     	; 0x27e2 <vfprintf+0x37c>
    27a8:	01 fd       	sbrc	r16, 1
    27aa:	03 c0       	rjmp	.+6      	; 0x27b2 <vfprintf+0x34c>
    27ac:	88 e7       	ldi	r24, 0x78	; 120
    27ae:	90 e0       	ldi	r25, 0x00	; 0
    27b0:	0e c0       	rjmp	.+28     	; 0x27ce <vfprintf+0x368>
    27b2:	88 e5       	ldi	r24, 0x58	; 88
    27b4:	90 e0       	ldi	r25, 0x00	; 0
    27b6:	0b c0       	rjmp	.+22     	; 0x27ce <vfprintf+0x368>
    27b8:	80 2f       	mov	r24, r16
    27ba:	86 78       	andi	r24, 0x86	; 134
    27bc:	91 f0       	breq	.+36     	; 0x27e2 <vfprintf+0x37c>
    27be:	01 ff       	sbrs	r16, 1
    27c0:	02 c0       	rjmp	.+4      	; 0x27c6 <vfprintf+0x360>
    27c2:	8b e2       	ldi	r24, 0x2B	; 43
    27c4:	01 c0       	rjmp	.+2      	; 0x27c8 <vfprintf+0x362>
    27c6:	80 e2       	ldi	r24, 0x20	; 32
    27c8:	f7 fc       	sbrc	r15, 7
    27ca:	8d e2       	ldi	r24, 0x2D	; 45
    27cc:	90 e0       	ldi	r25, 0x00	; 0
    27ce:	b3 01       	movw	r22, r6
    27d0:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    27d4:	06 c0       	rjmp	.+12     	; 0x27e2 <vfprintf+0x37c>
    27d6:	80 e3       	ldi	r24, 0x30	; 48
    27d8:	90 e0       	ldi	r25, 0x00	; 0
    27da:	b3 01       	movw	r22, r6
    27dc:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    27e0:	9a 94       	dec	r9
    27e2:	d9 14       	cp	r13, r9
    27e4:	c0 f3       	brcs	.-16     	; 0x27d6 <vfprintf+0x370>
    27e6:	da 94       	dec	r13
    27e8:	f1 01       	movw	r30, r2
    27ea:	ed 0d       	add	r30, r13
    27ec:	f1 1d       	adc	r31, r1
    27ee:	80 81       	ld	r24, Z
    27f0:	90 e0       	ldi	r25, 0x00	; 0
    27f2:	b3 01       	movw	r22, r6
    27f4:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    27f8:	dd 20       	and	r13, r13
    27fa:	a9 f7       	brne	.-22     	; 0x27e6 <vfprintf+0x380>
    27fc:	06 c0       	rjmp	.+12     	; 0x280a <vfprintf+0x3a4>
    27fe:	80 e2       	ldi	r24, 0x20	; 32
    2800:	90 e0       	ldi	r25, 0x00	; 0
    2802:	b3 01       	movw	r22, r6
    2804:	0e 94 26 14 	call	0x284c	; 0x284c <fputc>
    2808:	ea 94       	dec	r14
    280a:	ee 20       	and	r14, r14
    280c:	c1 f7       	brne	.-16     	; 0x27fe <vfprintf+0x398>
    280e:	43 ce       	rjmp	.-890    	; 0x2496 <vfprintf+0x30>
    2810:	f3 01       	movw	r30, r6
    2812:	66 81       	ldd	r22, Z+6	; 0x06
    2814:	77 81       	ldd	r23, Z+7	; 0x07
    2816:	cb 01       	movw	r24, r22
    2818:	2b 96       	adiw	r28, 0x0b	; 11
    281a:	e2 e1       	ldi	r30, 0x12	; 18
    281c:	0c 94 cc 14 	jmp	0x2998	; 0x2998 <__epilogue_restores__>

00002820 <strnlen_P>:
    2820:	fc 01       	movw	r30, r24
    2822:	05 90       	lpm	r0, Z+
    2824:	61 50       	subi	r22, 0x01	; 1
    2826:	70 40       	sbci	r23, 0x00	; 0
    2828:	01 10       	cpse	r0, r1
    282a:	d8 f7       	brcc	.-10     	; 0x2822 <strnlen_P+0x2>
    282c:	80 95       	com	r24
    282e:	90 95       	com	r25
    2830:	8e 0f       	add	r24, r30
    2832:	9f 1f       	adc	r25, r31
    2834:	08 95       	ret

00002836 <strnlen>:
    2836:	fc 01       	movw	r30, r24
    2838:	61 50       	subi	r22, 0x01	; 1
    283a:	70 40       	sbci	r23, 0x00	; 0
    283c:	01 90       	ld	r0, Z+
    283e:	01 10       	cpse	r0, r1
    2840:	d8 f7       	brcc	.-10     	; 0x2838 <strnlen+0x2>
    2842:	80 95       	com	r24
    2844:	90 95       	com	r25
    2846:	8e 0f       	add	r24, r30
    2848:	9f 1f       	adc	r25, r31
    284a:	08 95       	ret

0000284c <fputc>:
    284c:	0f 93       	push	r16
    284e:	1f 93       	push	r17
    2850:	cf 93       	push	r28
    2852:	df 93       	push	r29
    2854:	8c 01       	movw	r16, r24
    2856:	eb 01       	movw	r28, r22
    2858:	8b 81       	ldd	r24, Y+3	; 0x03
    285a:	81 ff       	sbrs	r24, 1
    285c:	1b c0       	rjmp	.+54     	; 0x2894 <fputc+0x48>
    285e:	82 ff       	sbrs	r24, 2
    2860:	0d c0       	rjmp	.+26     	; 0x287c <fputc+0x30>
    2862:	2e 81       	ldd	r18, Y+6	; 0x06
    2864:	3f 81       	ldd	r19, Y+7	; 0x07
    2866:	8c 81       	ldd	r24, Y+4	; 0x04
    2868:	9d 81       	ldd	r25, Y+5	; 0x05
    286a:	28 17       	cp	r18, r24
    286c:	39 07       	cpc	r19, r25
    286e:	64 f4       	brge	.+24     	; 0x2888 <fputc+0x3c>
    2870:	e8 81       	ld	r30, Y
    2872:	f9 81       	ldd	r31, Y+1	; 0x01
    2874:	01 93       	st	Z+, r16
    2876:	f9 83       	std	Y+1, r31	; 0x01
    2878:	e8 83       	st	Y, r30
    287a:	06 c0       	rjmp	.+12     	; 0x2888 <fputc+0x3c>
    287c:	e8 85       	ldd	r30, Y+8	; 0x08
    287e:	f9 85       	ldd	r31, Y+9	; 0x09
    2880:	80 2f       	mov	r24, r16
    2882:	09 95       	icall
    2884:	89 2b       	or	r24, r25
    2886:	31 f4       	brne	.+12     	; 0x2894 <fputc+0x48>
    2888:	8e 81       	ldd	r24, Y+6	; 0x06
    288a:	9f 81       	ldd	r25, Y+7	; 0x07
    288c:	01 96       	adiw	r24, 0x01	; 1
    288e:	9f 83       	std	Y+7, r25	; 0x07
    2890:	8e 83       	std	Y+6, r24	; 0x06
    2892:	02 c0       	rjmp	.+4      	; 0x2898 <fputc+0x4c>
    2894:	0f ef       	ldi	r16, 0xFF	; 255
    2896:	1f ef       	ldi	r17, 0xFF	; 255
    2898:	c8 01       	movw	r24, r16
    289a:	df 91       	pop	r29
    289c:	cf 91       	pop	r28
    289e:	1f 91       	pop	r17
    28a0:	0f 91       	pop	r16
    28a2:	08 95       	ret

000028a4 <__ultoa_invert>:
    28a4:	fa 01       	movw	r30, r20
    28a6:	aa 27       	eor	r26, r26
    28a8:	28 30       	cpi	r18, 0x08	; 8
    28aa:	51 f1       	breq	.+84     	; 0x2900 <__ultoa_invert+0x5c>
    28ac:	20 31       	cpi	r18, 0x10	; 16
    28ae:	81 f1       	breq	.+96     	; 0x2910 <__ultoa_invert+0x6c>
    28b0:	e8 94       	clt
    28b2:	6f 93       	push	r22
    28b4:	6e 7f       	andi	r22, 0xFE	; 254
    28b6:	6e 5f       	subi	r22, 0xFE	; 254
    28b8:	7f 4f       	sbci	r23, 0xFF	; 255
    28ba:	8f 4f       	sbci	r24, 0xFF	; 255
    28bc:	9f 4f       	sbci	r25, 0xFF	; 255
    28be:	af 4f       	sbci	r26, 0xFF	; 255
    28c0:	b1 e0       	ldi	r27, 0x01	; 1
    28c2:	3e d0       	rcall	.+124    	; 0x2940 <__ultoa_invert+0x9c>
    28c4:	b4 e0       	ldi	r27, 0x04	; 4
    28c6:	3c d0       	rcall	.+120    	; 0x2940 <__ultoa_invert+0x9c>
    28c8:	67 0f       	add	r22, r23
    28ca:	78 1f       	adc	r23, r24
    28cc:	89 1f       	adc	r24, r25
    28ce:	9a 1f       	adc	r25, r26
    28d0:	a1 1d       	adc	r26, r1
    28d2:	68 0f       	add	r22, r24
    28d4:	79 1f       	adc	r23, r25
    28d6:	8a 1f       	adc	r24, r26
    28d8:	91 1d       	adc	r25, r1
    28da:	a1 1d       	adc	r26, r1
    28dc:	6a 0f       	add	r22, r26
    28de:	71 1d       	adc	r23, r1
    28e0:	81 1d       	adc	r24, r1
    28e2:	91 1d       	adc	r25, r1
    28e4:	a1 1d       	adc	r26, r1
    28e6:	20 d0       	rcall	.+64     	; 0x2928 <__ultoa_invert+0x84>
    28e8:	09 f4       	brne	.+2      	; 0x28ec <__ultoa_invert+0x48>
    28ea:	68 94       	set
    28ec:	3f 91       	pop	r19
    28ee:	2a e0       	ldi	r18, 0x0A	; 10
    28f0:	26 9f       	mul	r18, r22
    28f2:	11 24       	eor	r1, r1
    28f4:	30 19       	sub	r19, r0
    28f6:	30 5d       	subi	r19, 0xD0	; 208
    28f8:	31 93       	st	Z+, r19
    28fa:	de f6       	brtc	.-74     	; 0x28b2 <__ultoa_invert+0xe>
    28fc:	cf 01       	movw	r24, r30
    28fe:	08 95       	ret
    2900:	46 2f       	mov	r20, r22
    2902:	47 70       	andi	r20, 0x07	; 7
    2904:	40 5d       	subi	r20, 0xD0	; 208
    2906:	41 93       	st	Z+, r20
    2908:	b3 e0       	ldi	r27, 0x03	; 3
    290a:	0f d0       	rcall	.+30     	; 0x292a <__ultoa_invert+0x86>
    290c:	c9 f7       	brne	.-14     	; 0x2900 <__ultoa_invert+0x5c>
    290e:	f6 cf       	rjmp	.-20     	; 0x28fc <__ultoa_invert+0x58>
    2910:	46 2f       	mov	r20, r22
    2912:	4f 70       	andi	r20, 0x0F	; 15
    2914:	40 5d       	subi	r20, 0xD0	; 208
    2916:	4a 33       	cpi	r20, 0x3A	; 58
    2918:	18 f0       	brcs	.+6      	; 0x2920 <__ultoa_invert+0x7c>
    291a:	49 5d       	subi	r20, 0xD9	; 217
    291c:	31 fd       	sbrc	r19, 1
    291e:	40 52       	subi	r20, 0x20	; 32
    2920:	41 93       	st	Z+, r20
    2922:	02 d0       	rcall	.+4      	; 0x2928 <__ultoa_invert+0x84>
    2924:	a9 f7       	brne	.-22     	; 0x2910 <__ultoa_invert+0x6c>
    2926:	ea cf       	rjmp	.-44     	; 0x28fc <__ultoa_invert+0x58>
    2928:	b4 e0       	ldi	r27, 0x04	; 4
    292a:	a6 95       	lsr	r26
    292c:	97 95       	ror	r25
    292e:	87 95       	ror	r24
    2930:	77 95       	ror	r23
    2932:	67 95       	ror	r22
    2934:	ba 95       	dec	r27
    2936:	c9 f7       	brne	.-14     	; 0x292a <__ultoa_invert+0x86>
    2938:	00 97       	sbiw	r24, 0x00	; 0
    293a:	61 05       	cpc	r22, r1
    293c:	71 05       	cpc	r23, r1
    293e:	08 95       	ret
    2940:	9b 01       	movw	r18, r22
    2942:	ac 01       	movw	r20, r24
    2944:	0a 2e       	mov	r0, r26
    2946:	06 94       	lsr	r0
    2948:	57 95       	ror	r21
    294a:	47 95       	ror	r20
    294c:	37 95       	ror	r19
    294e:	27 95       	ror	r18
    2950:	ba 95       	dec	r27
    2952:	c9 f7       	brne	.-14     	; 0x2946 <__ultoa_invert+0xa2>
    2954:	62 0f       	add	r22, r18
    2956:	73 1f       	adc	r23, r19
    2958:	84 1f       	adc	r24, r20
    295a:	95 1f       	adc	r25, r21
    295c:	a0 1d       	adc	r26, r0
    295e:	08 95       	ret

00002960 <__prologue_saves__>:
    2960:	2f 92       	push	r2
    2962:	3f 92       	push	r3
    2964:	4f 92       	push	r4
    2966:	5f 92       	push	r5
    2968:	6f 92       	push	r6
    296a:	7f 92       	push	r7
    296c:	8f 92       	push	r8
    296e:	9f 92       	push	r9
    2970:	af 92       	push	r10
    2972:	bf 92       	push	r11
    2974:	cf 92       	push	r12
    2976:	df 92       	push	r13
    2978:	ef 92       	push	r14
    297a:	ff 92       	push	r15
    297c:	0f 93       	push	r16
    297e:	1f 93       	push	r17
    2980:	cf 93       	push	r28
    2982:	df 93       	push	r29
    2984:	cd b7       	in	r28, 0x3d	; 61
    2986:	de b7       	in	r29, 0x3e	; 62
    2988:	ca 1b       	sub	r28, r26
    298a:	db 0b       	sbc	r29, r27
    298c:	0f b6       	in	r0, 0x3f	; 63
    298e:	f8 94       	cli
    2990:	de bf       	out	0x3e, r29	; 62
    2992:	0f be       	out	0x3f, r0	; 63
    2994:	cd bf       	out	0x3d, r28	; 61
    2996:	09 94       	ijmp

00002998 <__epilogue_restores__>:
    2998:	2a 88       	ldd	r2, Y+18	; 0x12
    299a:	39 88       	ldd	r3, Y+17	; 0x11
    299c:	48 88       	ldd	r4, Y+16	; 0x10
    299e:	5f 84       	ldd	r5, Y+15	; 0x0f
    29a0:	6e 84       	ldd	r6, Y+14	; 0x0e
    29a2:	7d 84       	ldd	r7, Y+13	; 0x0d
    29a4:	8c 84       	ldd	r8, Y+12	; 0x0c
    29a6:	9b 84       	ldd	r9, Y+11	; 0x0b
    29a8:	aa 84       	ldd	r10, Y+10	; 0x0a
    29aa:	b9 84       	ldd	r11, Y+9	; 0x09
    29ac:	c8 84       	ldd	r12, Y+8	; 0x08
    29ae:	df 80       	ldd	r13, Y+7	; 0x07
    29b0:	ee 80       	ldd	r14, Y+6	; 0x06
    29b2:	fd 80       	ldd	r15, Y+5	; 0x05
    29b4:	0c 81       	ldd	r16, Y+4	; 0x04
    29b6:	1b 81       	ldd	r17, Y+3	; 0x03
    29b8:	aa 81       	ldd	r26, Y+2	; 0x02
    29ba:	b9 81       	ldd	r27, Y+1	; 0x01
    29bc:	ce 0f       	add	r28, r30
    29be:	d1 1d       	adc	r29, r1
    29c0:	0f b6       	in	r0, 0x3f	; 63
    29c2:	f8 94       	cli
    29c4:	de bf       	out	0x3e, r29	; 62
    29c6:	0f be       	out	0x3f, r0	; 63
    29c8:	cd bf       	out	0x3d, r28	; 61
    29ca:	ed 01       	movw	r28, r26
    29cc:	08 95       	ret

000029ce <_exit>:
    29ce:	f8 94       	cli

000029d0 <__stop_program>:
    29d0:	ff cf       	rjmp	.-2      	; 0x29d0 <__stop_program>
